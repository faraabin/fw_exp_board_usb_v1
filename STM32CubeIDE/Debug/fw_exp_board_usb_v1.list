
fw_exp_board_usb_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  0800a600  0800a600  0000b600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b208  0800b208  0000d4b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b208  0800b208  0000c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b210  0800b210  0000d4b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b210  0800b210  0000c210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b214  0800b214  0000c214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004b0  20000000  0800b218  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fcc  200004b0  0800b6c8  0000d4b0  2**3
                  ALLOC
 10 ._user_heap_stack 00001504  2000347c  0800b6c8  0000e47c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d4b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022496  00000000  00000000  0000d4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b9d  00000000  00000000  0002f96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b647  00000000  00000000  0003550c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00040b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011fd  00000000  00000000  00041cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd4e  00000000  00000000  00042ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021e0c  00000000  00000000  00060c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000992e3  00000000  00000000  00082a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011bcfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003448  00000000  00000000  0011bd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  0011f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004b0 	.word	0x200004b0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a5e4 	.word	0x0800a5e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004b4 	.word	0x200004b4
 800014c:	0800a5e4 	.word	0x0800a5e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	@ 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d46:	2afd      	cmp	r2, #253	@ 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	@ 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <__aeabi_f2uiz>:
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	d20e      	bcs.n	80010ee <__aeabi_f2uiz+0x22>
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d4:	d30b      	bcc.n	80010ee <__aeabi_f2uiz+0x22>
 80010d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d409      	bmi.n	80010f4 <__aeabi_f2uiz+0x28>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2uiz+0x32>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d102      	bne.n	8001104 <__aeabi_f2uiz+0x38>
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001102:	4770      	bx	lr
 8001104:	f04f 0000 	mov.w	r0, #0
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <__aeabi_uldivmod>:
 800110c:	b953      	cbnz	r3, 8001124 <__aeabi_uldivmod+0x18>
 800110e:	b94a      	cbnz	r2, 8001124 <__aeabi_uldivmod+0x18>
 8001110:	2900      	cmp	r1, #0
 8001112:	bf08      	it	eq
 8001114:	2800      	cmpeq	r0, #0
 8001116:	bf1c      	itt	ne
 8001118:	f04f 31ff 	movne.w	r1, #4294967295
 800111c:	f04f 30ff 	movne.w	r0, #4294967295
 8001120:	f000 b968 	b.w	80013f4 <__aeabi_idiv0>
 8001124:	f1ad 0c08 	sub.w	ip, sp, #8
 8001128:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800112c:	f000 f806 	bl	800113c <__udivmoddi4>
 8001130:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001138:	b004      	add	sp, #16
 800113a:	4770      	bx	lr

0800113c <__udivmoddi4>:
 800113c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001140:	9d08      	ldr	r5, [sp, #32]
 8001142:	460c      	mov	r4, r1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d14e      	bne.n	80011e6 <__udivmoddi4+0xaa>
 8001148:	4694      	mov	ip, r2
 800114a:	458c      	cmp	ip, r1
 800114c:	4686      	mov	lr, r0
 800114e:	fab2 f282 	clz	r2, r2
 8001152:	d962      	bls.n	800121a <__udivmoddi4+0xde>
 8001154:	b14a      	cbz	r2, 800116a <__udivmoddi4+0x2e>
 8001156:	f1c2 0320 	rsb	r3, r2, #32
 800115a:	4091      	lsls	r1, r2
 800115c:	fa20 f303 	lsr.w	r3, r0, r3
 8001160:	fa0c fc02 	lsl.w	ip, ip, r2
 8001164:	4319      	orrs	r1, r3
 8001166:	fa00 fe02 	lsl.w	lr, r0, r2
 800116a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800116e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001172:	fb07 1114 	mls	r1, r7, r4, r1
 8001176:	fa1f f68c 	uxth.w	r6, ip
 800117a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800117e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001182:	fb04 f106 	mul.w	r1, r4, r6
 8001186:	4299      	cmp	r1, r3
 8001188:	d90a      	bls.n	80011a0 <__udivmoddi4+0x64>
 800118a:	eb1c 0303 	adds.w	r3, ip, r3
 800118e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001192:	f080 8110 	bcs.w	80013b6 <__udivmoddi4+0x27a>
 8001196:	4299      	cmp	r1, r3
 8001198:	f240 810d 	bls.w	80013b6 <__udivmoddi4+0x27a>
 800119c:	3c02      	subs	r4, #2
 800119e:	4463      	add	r3, ip
 80011a0:	1a59      	subs	r1, r3, r1
 80011a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011a6:	fb07 1110 	mls	r1, r7, r0, r1
 80011aa:	fb00 f606 	mul.w	r6, r0, r6
 80011ae:	fa1f f38e 	uxth.w	r3, lr
 80011b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011b6:	429e      	cmp	r6, r3
 80011b8:	d90a      	bls.n	80011d0 <__udivmoddi4+0x94>
 80011ba:	eb1c 0303 	adds.w	r3, ip, r3
 80011be:	f100 31ff 	add.w	r1, r0, #4294967295
 80011c2:	f080 80fa 	bcs.w	80013ba <__udivmoddi4+0x27e>
 80011c6:	429e      	cmp	r6, r3
 80011c8:	f240 80f7 	bls.w	80013ba <__udivmoddi4+0x27e>
 80011cc:	4463      	add	r3, ip
 80011ce:	3802      	subs	r0, #2
 80011d0:	2100      	movs	r1, #0
 80011d2:	1b9b      	subs	r3, r3, r6
 80011d4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011d8:	b11d      	cbz	r5, 80011e2 <__udivmoddi4+0xa6>
 80011da:	40d3      	lsrs	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	e9c5 3200 	strd	r3, r2, [r5]
 80011e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e6:	428b      	cmp	r3, r1
 80011e8:	d905      	bls.n	80011f6 <__udivmoddi4+0xba>
 80011ea:	b10d      	cbz	r5, 80011f0 <__udivmoddi4+0xb4>
 80011ec:	e9c5 0100 	strd	r0, r1, [r5]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4608      	mov	r0, r1
 80011f4:	e7f5      	b.n	80011e2 <__udivmoddi4+0xa6>
 80011f6:	fab3 f183 	clz	r1, r3
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d146      	bne.n	800128c <__udivmoddi4+0x150>
 80011fe:	42a3      	cmp	r3, r4
 8001200:	d302      	bcc.n	8001208 <__udivmoddi4+0xcc>
 8001202:	4290      	cmp	r0, r2
 8001204:	f0c0 80ee 	bcc.w	80013e4 <__udivmoddi4+0x2a8>
 8001208:	1a86      	subs	r6, r0, r2
 800120a:	eb64 0303 	sbc.w	r3, r4, r3
 800120e:	2001      	movs	r0, #1
 8001210:	2d00      	cmp	r5, #0
 8001212:	d0e6      	beq.n	80011e2 <__udivmoddi4+0xa6>
 8001214:	e9c5 6300 	strd	r6, r3, [r5]
 8001218:	e7e3      	b.n	80011e2 <__udivmoddi4+0xa6>
 800121a:	2a00      	cmp	r2, #0
 800121c:	f040 808f 	bne.w	800133e <__udivmoddi4+0x202>
 8001220:	eba1 040c 	sub.w	r4, r1, ip
 8001224:	2101      	movs	r1, #1
 8001226:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800122a:	fa1f f78c 	uxth.w	r7, ip
 800122e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001232:	fb08 4416 	mls	r4, r8, r6, r4
 8001236:	fb07 f006 	mul.w	r0, r7, r6
 800123a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800123e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001242:	4298      	cmp	r0, r3
 8001244:	d908      	bls.n	8001258 <__udivmoddi4+0x11c>
 8001246:	eb1c 0303 	adds.w	r3, ip, r3
 800124a:	f106 34ff 	add.w	r4, r6, #4294967295
 800124e:	d202      	bcs.n	8001256 <__udivmoddi4+0x11a>
 8001250:	4298      	cmp	r0, r3
 8001252:	f200 80cb 	bhi.w	80013ec <__udivmoddi4+0x2b0>
 8001256:	4626      	mov	r6, r4
 8001258:	1a1c      	subs	r4, r3, r0
 800125a:	fbb4 f0f8 	udiv	r0, r4, r8
 800125e:	fb08 4410 	mls	r4, r8, r0, r4
 8001262:	fb00 f707 	mul.w	r7, r0, r7
 8001266:	fa1f f38e 	uxth.w	r3, lr
 800126a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800126e:	429f      	cmp	r7, r3
 8001270:	d908      	bls.n	8001284 <__udivmoddi4+0x148>
 8001272:	eb1c 0303 	adds.w	r3, ip, r3
 8001276:	f100 34ff 	add.w	r4, r0, #4294967295
 800127a:	d202      	bcs.n	8001282 <__udivmoddi4+0x146>
 800127c:	429f      	cmp	r7, r3
 800127e:	f200 80ae 	bhi.w	80013de <__udivmoddi4+0x2a2>
 8001282:	4620      	mov	r0, r4
 8001284:	1bdb      	subs	r3, r3, r7
 8001286:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800128a:	e7a5      	b.n	80011d8 <__udivmoddi4+0x9c>
 800128c:	f1c1 0720 	rsb	r7, r1, #32
 8001290:	408b      	lsls	r3, r1
 8001292:	fa22 fc07 	lsr.w	ip, r2, r7
 8001296:	ea4c 0c03 	orr.w	ip, ip, r3
 800129a:	fa24 f607 	lsr.w	r6, r4, r7
 800129e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012a2:	fbb6 f8f9 	udiv	r8, r6, r9
 80012a6:	fa1f fe8c 	uxth.w	lr, ip
 80012aa:	fb09 6618 	mls	r6, r9, r8, r6
 80012ae:	fa20 f307 	lsr.w	r3, r0, r7
 80012b2:	408c      	lsls	r4, r1
 80012b4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012b8:	fb08 f00e 	mul.w	r0, r8, lr
 80012bc:	431c      	orrs	r4, r3
 80012be:	0c23      	lsrs	r3, r4, #16
 80012c0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012c4:	4298      	cmp	r0, r3
 80012c6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ca:	d90a      	bls.n	80012e2 <__udivmoddi4+0x1a6>
 80012cc:	eb1c 0303 	adds.w	r3, ip, r3
 80012d0:	f108 36ff 	add.w	r6, r8, #4294967295
 80012d4:	f080 8081 	bcs.w	80013da <__udivmoddi4+0x29e>
 80012d8:	4298      	cmp	r0, r3
 80012da:	d97e      	bls.n	80013da <__udivmoddi4+0x29e>
 80012dc:	f1a8 0802 	sub.w	r8, r8, #2
 80012e0:	4463      	add	r3, ip
 80012e2:	1a1e      	subs	r6, r3, r0
 80012e4:	fbb6 f3f9 	udiv	r3, r6, r9
 80012e8:	fb09 6613 	mls	r6, r9, r3, r6
 80012ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80012f0:	b2a4      	uxth	r4, r4
 80012f2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	d908      	bls.n	800130c <__udivmoddi4+0x1d0>
 80012fa:	eb1c 0404 	adds.w	r4, ip, r4
 80012fe:	f103 30ff 	add.w	r0, r3, #4294967295
 8001302:	d266      	bcs.n	80013d2 <__udivmoddi4+0x296>
 8001304:	45a6      	cmp	lr, r4
 8001306:	d964      	bls.n	80013d2 <__udivmoddi4+0x296>
 8001308:	3b02      	subs	r3, #2
 800130a:	4464      	add	r4, ip
 800130c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001310:	fba0 8302 	umull	r8, r3, r0, r2
 8001314:	eba4 040e 	sub.w	r4, r4, lr
 8001318:	429c      	cmp	r4, r3
 800131a:	46c6      	mov	lr, r8
 800131c:	461e      	mov	r6, r3
 800131e:	d350      	bcc.n	80013c2 <__udivmoddi4+0x286>
 8001320:	d04d      	beq.n	80013be <__udivmoddi4+0x282>
 8001322:	b155      	cbz	r5, 800133a <__udivmoddi4+0x1fe>
 8001324:	ebba 030e 	subs.w	r3, sl, lr
 8001328:	eb64 0406 	sbc.w	r4, r4, r6
 800132c:	fa04 f707 	lsl.w	r7, r4, r7
 8001330:	40cb      	lsrs	r3, r1
 8001332:	431f      	orrs	r7, r3
 8001334:	40cc      	lsrs	r4, r1
 8001336:	e9c5 7400 	strd	r7, r4, [r5]
 800133a:	2100      	movs	r1, #0
 800133c:	e751      	b.n	80011e2 <__udivmoddi4+0xa6>
 800133e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001342:	f1c2 0320 	rsb	r3, r2, #32
 8001346:	40d9      	lsrs	r1, r3
 8001348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800134c:	fa20 f303 	lsr.w	r3, r0, r3
 8001350:	fa00 fe02 	lsl.w	lr, r0, r2
 8001354:	fbb1 f0f8 	udiv	r0, r1, r8
 8001358:	fb08 1110 	mls	r1, r8, r0, r1
 800135c:	4094      	lsls	r4, r2
 800135e:	431c      	orrs	r4, r3
 8001360:	fa1f f78c 	uxth.w	r7, ip
 8001364:	0c23      	lsrs	r3, r4, #16
 8001366:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800136a:	fb00 f107 	mul.w	r1, r0, r7
 800136e:	4299      	cmp	r1, r3
 8001370:	d908      	bls.n	8001384 <__udivmoddi4+0x248>
 8001372:	eb1c 0303 	adds.w	r3, ip, r3
 8001376:	f100 36ff 	add.w	r6, r0, #4294967295
 800137a:	d22c      	bcs.n	80013d6 <__udivmoddi4+0x29a>
 800137c:	4299      	cmp	r1, r3
 800137e:	d92a      	bls.n	80013d6 <__udivmoddi4+0x29a>
 8001380:	3802      	subs	r0, #2
 8001382:	4463      	add	r3, ip
 8001384:	1a5b      	subs	r3, r3, r1
 8001386:	fbb3 f1f8 	udiv	r1, r3, r8
 800138a:	fb08 3311 	mls	r3, r8, r1, r3
 800138e:	b2a4      	uxth	r4, r4
 8001390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001394:	fb01 f307 	mul.w	r3, r1, r7
 8001398:	42a3      	cmp	r3, r4
 800139a:	d908      	bls.n	80013ae <__udivmoddi4+0x272>
 800139c:	eb1c 0404 	adds.w	r4, ip, r4
 80013a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013a4:	d213      	bcs.n	80013ce <__udivmoddi4+0x292>
 80013a6:	42a3      	cmp	r3, r4
 80013a8:	d911      	bls.n	80013ce <__udivmoddi4+0x292>
 80013aa:	3902      	subs	r1, #2
 80013ac:	4464      	add	r4, ip
 80013ae:	1ae4      	subs	r4, r4, r3
 80013b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013b4:	e73b      	b.n	800122e <__udivmoddi4+0xf2>
 80013b6:	4604      	mov	r4, r0
 80013b8:	e6f2      	b.n	80011a0 <__udivmoddi4+0x64>
 80013ba:	4608      	mov	r0, r1
 80013bc:	e708      	b.n	80011d0 <__udivmoddi4+0x94>
 80013be:	45c2      	cmp	sl, r8
 80013c0:	d2af      	bcs.n	8001322 <__udivmoddi4+0x1e6>
 80013c2:	ebb8 0e02 	subs.w	lr, r8, r2
 80013c6:	eb63 060c 	sbc.w	r6, r3, ip
 80013ca:	3801      	subs	r0, #1
 80013cc:	e7a9      	b.n	8001322 <__udivmoddi4+0x1e6>
 80013ce:	4631      	mov	r1, r6
 80013d0:	e7ed      	b.n	80013ae <__udivmoddi4+0x272>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e79a      	b.n	800130c <__udivmoddi4+0x1d0>
 80013d6:	4630      	mov	r0, r6
 80013d8:	e7d4      	b.n	8001384 <__udivmoddi4+0x248>
 80013da:	46b0      	mov	r8, r6
 80013dc:	e781      	b.n	80012e2 <__udivmoddi4+0x1a6>
 80013de:	4463      	add	r3, ip
 80013e0:	3802      	subs	r0, #2
 80013e2:	e74f      	b.n	8001284 <__udivmoddi4+0x148>
 80013e4:	4606      	mov	r6, r0
 80013e6:	4623      	mov	r3, r4
 80013e8:	4608      	mov	r0, r1
 80013ea:	e711      	b.n	8001210 <__udivmoddi4+0xd4>
 80013ec:	3e02      	subs	r6, #2
 80013ee:	4463      	add	r3, ip
 80013f0:	e732      	b.n	8001258 <__udivmoddi4+0x11c>
 80013f2:	bf00      	nop

080013f4 <__aeabi_idiv0>:
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <fFaraabin_GetFirmwareName>:
 * 
 * @return fwName Firmware name.
 */
char* fFaraabin_GetFirmwareName(void) {
  return fwName;
}
 80013f8:	4800      	ldr	r0, [pc, #0]	@ (80013fc <fFaraabin_GetFirmwareName+0x4>)
 80013fa:	4770      	bx	lr
 80013fc:	20000000 	.word	0x20000000

08001400 <fFaraabin_GetFirmwareInfo>:
	
  //User can send custom text as info.
  //User can also send any information data in JSON format.
  //Faraabin setect & parse JSON and show key-value pair in pc application.
	return "{\"Clock\":\"48MHz\"}";
}
 8001400:	4800      	ldr	r0, [pc, #0]	@ (8001404 <fFaraabin_GetFirmwareInfo+0x4>)
 8001402:	4770      	bx	lr
 8001404:	0800a600 	.word	0x0800a600

08001408 <fFaraabin_GetTxBufferPointer>:
 * 
 * @return pTxBuffer Pointer to Faraabin buffer created by user.
 */
uint8_t* fFaraabin_GetTxBufferPointer(void) {
  return fbTxBuffer;
}
 8001408:	4800      	ldr	r0, [pc, #0]	@ (800140c <fFaraabin_GetTxBufferPointer+0x4>)
 800140a:	4770      	bx	lr
 800140c:	200008b4 	.word	0x200008b4

08001410 <fFaraabin_GetTxBufferSize>:
 * 
 * @return size Size of Faraabin buffer created by user.
 */
uint32_t fFaraabin_GetTxBufferSize(void) {
  return sizeof(fbTxBuffer);
}
 8001410:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001414:	4770      	bx	lr
	...

08001418 <fFaraabin_GetRxBufferPointer>:
 * 
 * @return pRxBuffer Pointer to Faraabin buffer created by user.
 */
uint8_t* fFaraabin_GetRxBufferPointer(void) {
  return fbRxBuffer;
}
 8001418:	4800      	ldr	r0, [pc, #0]	@ (800141c <fFaraabin_GetRxBufferPointer+0x4>)
 800141a:	4770      	bx	lr
 800141c:	200004cc 	.word	0x200004cc

08001420 <fFaraabin_GetRxBufferSize>:
 * 
 * @return size Size of Faraabin buffer created by user.
 */
uint32_t fFaraabin_GetRxBufferSize(void) {
  return sizeof(fbRxBuffer);
}
 8001420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001424:	4770      	bx	lr

08001426 <fFaraabin_Send>:
/**
 * @brief This functions sends faraabin data via user's link to PC.
 * 
 * @return sendStatus '0' if sending data is failed, '1' otherwise.
 */
uint8_t fFaraabin_Send(uint8_t *data, uint16_t size) {
 8001426:	b508      	push	{r3, lr}

  return CDC_Transmit_FS(data, size);
 8001428:	f003 ffb0 	bl	800538c <CDC_Transmit_FS>
}
 800142c:	bd08      	pop	{r3, pc}

0800142e <fFaraabin_IsSending>:
 * @return isSending 'true' if the link is busy sending data, 'false' if the link is free to send new data.
 */
bool fFaraabin_IsSending(void) {

  return false;
}
 800142e:	2000      	movs	r0, #0
 8001430:	4770      	bx	lr

08001432 <fFaraabin_ResetMcu>:

/**
 * @brief This functions is intended to generate a software reset via faraabin UI.
 * 
 */
void fFaraabin_ResetMcu(void) {
 8001432:	b508      	push	{r3, lr}
  
  HAL_NVIC_SystemReset();
 8001434:	f000 fcdc 	bl	8001df0 <HAL_NVIC_SystemReset>
}
 8001438:	bd08      	pop	{r3, pc}
	...

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b530      	push	{r4, r5, lr}
 800143e:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	2400      	movs	r4, #0
 8001442:	9404      	str	r4, [sp, #16]
 8001444:	9405      	str	r4, [sp, #20]
 8001446:	9406      	str	r4, [sp, #24]
 8001448:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <MX_GPIO_Init+0x6c>)
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	f042 0220 	orr.w	r2, r2, #32
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	f002 0220 	and.w	r2, r2, #32
 800145a:	9201      	str	r2, [sp, #4]
 800145c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	699a      	ldr	r2, [r3, #24]
 8001460:	f042 0204 	orr.w	r2, r2, #4
 8001464:	619a      	str	r2, [r3, #24]
 8001466:	699a      	ldr	r2, [r3, #24]
 8001468:	f002 0204 	and.w	r2, r2, #4
 800146c:	9202      	str	r2, [sp, #8]
 800146e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001470:	699a      	ldr	r2, [r3, #24]
 8001472:	f042 0208 	orr.w	r2, r2, #8
 8001476:	619a      	str	r2, [r3, #24]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	9303      	str	r3, [sp, #12]
 8001480:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001482:	4d0a      	ldr	r5, [pc, #40]	@ (80014ac <MX_GPIO_Init+0x70>)
 8001484:	4622      	mov	r2, r4
 8001486:	2104      	movs	r1, #4
 8001488:	4628      	mov	r0, r5
 800148a:	f000 fe17 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148e:	2304      	movs	r3, #4
 8001490:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2302      	movs	r3, #2
 800149a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	a904      	add	r1, sp, #16
 800149e:	4628      	mov	r0, r5
 80014a0:	f000 fccc 	bl	8001e3c <HAL_GPIO_Init>

}
 80014a4:	b009      	add	sp, #36	@ 0x24
 80014a6:	bd30      	pop	{r4, r5, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010800 	.word	0x40010800

080014b0 <groupName__func>:
*/
/**
 * @brief 
 * 
 */
FARAABIN_FUNCTION_GROUP_(LedFunction, "help") {
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	460c      	mov	r4, r1
  
  FARAABIN_FUNCTION_GROUP_ADD_(LedFunction, TurnOn);
 80014b4:	4d05      	ldr	r5, [pc, #20]	@ (80014cc <groupName__func+0x1c>)
 80014b6:	460a      	mov	r2, r1
 80014b8:	4905      	ldr	r1, [pc, #20]	@ (80014d0 <groupName__func+0x20>)
 80014ba:	4628      	mov	r0, r5
 80014bc:	f008 fa5c 	bl	8009978 <fFaraabinLinkSerializer_FunctionGroupTypeMemberDict>
  FARAABIN_FUNCTION_GROUP_ADD_(LedFunction, TurnOff);
 80014c0:	4622      	mov	r2, r4
 80014c2:	4904      	ldr	r1, [pc, #16]	@ (80014d4 <groupName__func+0x24>)
 80014c4:	4628      	mov	r0, r5
 80014c6:	f008 fa57 	bl	8009978 <fFaraabinLinkSerializer_FunctionGroupTypeMemberDict>

}
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	20000014 	.word	0x20000014
 80014d0:	20000058 	.word	0x20000058
 80014d4:	2000002c 	.word	0x2000002c

080014d8 <groupName_TurnOff_func>:
FARAABIN_FUNCTION_(LedFunction, TurnOff, "Turns on-board LED off.") {
 80014d8:	b508      	push	{r3, lr}
  LED_OFF_();
 80014da:	2201      	movs	r2, #1
 80014dc:	2104      	movs	r1, #4
 80014de:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <groupName_TurnOff_func+0x10>)
 80014e0:	f000 fdec 	bl	80020bc <HAL_GPIO_WritePin>
}
 80014e4:	20c8      	movs	r0, #200	@ 0xc8
 80014e6:	bd08      	pop	{r3, pc}
 80014e8:	40010800 	.word	0x40010800

080014ec <groupName_TurnOn_func>:
FARAABIN_FUNCTION_(LedFunction, TurnOn, "Turns on-board LED on.") {
 80014ec:	b508      	push	{r3, lr}
  LED_ON_();
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	4802      	ldr	r0, [pc, #8]	@ (80014fc <groupName_TurnOn_func+0x10>)
 80014f4:	f000 fde2 	bl	80020bc <HAL_GPIO_WritePin>
}
 80014f8:	20c8      	movs	r0, #200	@ 0xc8
 80014fa:	bd08      	pop	{r3, pc}
 80014fc:	40010800 	.word	0x40010800

08001500 <__FARAABIN_CONTAINER_FUNC_Container>:

/**
 * @brief This function is used to define all variables and functions to faraabin.
 * 
 */
FARAABIN_CONTAINER_FUNC_(Container) {
 8001500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	4605      	mov	r5, r0
 8001508:	4b37      	ldr	r3, [pc, #220]	@ (80015e8 <__FARAABIN_CONTAINER_FUNC_Container+0xe8>)
 800150a:	681e      	ldr	r6, [r3, #0]

  FARAABIN_VAR_ENUM_(WaveType, eWaveType);
 800150c:	9005      	str	r0, [sp, #20]
 800150e:	4f37      	ldr	r7, [pc, #220]	@ (80015ec <__FARAABIN_CONTAINER_FUNC_Container+0xec>)
 8001510:	9704      	str	r7, [sp, #16]
 8001512:	9603      	str	r6, [sp, #12]
 8001514:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <__FARAABIN_CONTAINER_FUNC_Container+0xf0>)
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	2400      	movs	r4, #0
 800151a:	9401      	str	r4, [sp, #4]
 800151c:	9400      	str	r4, [sp, #0]
 800151e:	4623      	mov	r3, r4
 8001520:	2201      	movs	r2, #1
 8001522:	4934      	ldr	r1, [pc, #208]	@ (80015f4 <__FARAABIN_CONTAINER_FUNC_Container+0xf4>)
 8001524:	4834      	ldr	r0, [pc, #208]	@ (80015f8 <__FARAABIN_CONTAINER_FUNC_Container+0xf8>)
 8001526:	f008 f9c5 	bl	80098b4 <fFaraabinLinkSerializer_VarDict>

  FARAABIN_VAR_BOOL_(Enable);
 800152a:	9505      	str	r5, [sp, #20]
 800152c:	9704      	str	r7, [sp, #16]
 800152e:	9603      	str	r6, [sp, #12]
 8001530:	4b32      	ldr	r3, [pc, #200]	@ (80015fc <__FARAABIN_CONTAINER_FUNC_Container+0xfc>)
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	9401      	str	r4, [sp, #4]
 8001536:	9400      	str	r4, [sp, #0]
 8001538:	4623      	mov	r3, r4
 800153a:	2201      	movs	r2, #1
 800153c:	4930      	ldr	r1, [pc, #192]	@ (8001600 <__FARAABIN_CONTAINER_FUNC_Container+0x100>)
 800153e:	4831      	ldr	r0, [pc, #196]	@ (8001604 <__FARAABIN_CONTAINER_FUNC_Container+0x104>)
 8001540:	f008 f9b8 	bl	80098b4 <fFaraabinLinkSerializer_VarDict>
  FARAABIN_VAR_F64_(Frequency);
 8001544:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8001608 <__FARAABIN_CONTAINER_FUNC_Container+0x108>
 8001548:	9505      	str	r5, [sp, #20]
 800154a:	9704      	str	r7, [sp, #16]
 800154c:	9603      	str	r6, [sp, #12]
 800154e:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <__FARAABIN_CONTAINER_FUNC_Container+0x10c>)
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	9401      	str	r4, [sp, #4]
 8001554:	9400      	str	r4, [sp, #0]
 8001556:	4623      	mov	r3, r4
 8001558:	2201      	movs	r2, #1
 800155a:	492d      	ldr	r1, [pc, #180]	@ (8001610 <__FARAABIN_CONTAINER_FUNC_Container+0x110>)
 800155c:	4640      	mov	r0, r8
 800155e:	f008 f9a9 	bl	80098b4 <fFaraabinLinkSerializer_VarDict>
  FARAABIN_VAR_F64_(Amplitude);
 8001562:	9505      	str	r5, [sp, #20]
 8001564:	9704      	str	r7, [sp, #16]
 8001566:	9603      	str	r6, [sp, #12]
 8001568:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <__FARAABIN_CONTAINER_FUNC_Container+0x114>)
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	9401      	str	r4, [sp, #4]
 800156e:	9400      	str	r4, [sp, #0]
 8001570:	4623      	mov	r3, r4
 8001572:	2201      	movs	r2, #1
 8001574:	4928      	ldr	r1, [pc, #160]	@ (8001618 <__FARAABIN_CONTAINER_FUNC_Container+0x118>)
 8001576:	4640      	mov	r0, r8
 8001578:	f008 f99c 	bl	80098b4 <fFaraabinLinkSerializer_VarDict>
  FARAABIN_VAR_F64_(Output);
 800157c:	9505      	str	r5, [sp, #20]
 800157e:	9704      	str	r7, [sp, #16]
 8001580:	9603      	str	r6, [sp, #12]
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <__FARAABIN_CONTAINER_FUNC_Container+0x11c>)
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	9401      	str	r4, [sp, #4]
 8001588:	9400      	str	r4, [sp, #0]
 800158a:	4623      	mov	r3, r4
 800158c:	2201      	movs	r2, #1
 800158e:	4924      	ldr	r1, [pc, #144]	@ (8001620 <__FARAABIN_CONTAINER_FUNC_Container+0x120>)
 8001590:	4640      	mov	r0, r8
 8001592:	f008 f98f 	bl	80098b4 <fFaraabinLinkSerializer_VarDict>

  FARAABIN_VAR_U32_(Execution);
 8001596:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8001624 <__FARAABIN_CONTAINER_FUNC_Container+0x124>
 800159a:	9505      	str	r5, [sp, #20]
 800159c:	9704      	str	r7, [sp, #16]
 800159e:	9603      	str	r6, [sp, #12]
 80015a0:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <__FARAABIN_CONTAINER_FUNC_Container+0x128>)
 80015a2:	9302      	str	r3, [sp, #8]
 80015a4:	9401      	str	r4, [sp, #4]
 80015a6:	9400      	str	r4, [sp, #0]
 80015a8:	4623      	mov	r3, r4
 80015aa:	2201      	movs	r2, #1
 80015ac:	491f      	ldr	r1, [pc, #124]	@ (800162c <__FARAABIN_CONTAINER_FUNC_Container+0x12c>)
 80015ae:	4640      	mov	r0, r8
 80015b0:	f008 f980 	bl	80098b4 <fFaraabinLinkSerializer_VarDict>
  FARAABIN_VAR_U32_(Interval);
 80015b4:	9505      	str	r5, [sp, #20]
 80015b6:	9704      	str	r7, [sp, #16]
 80015b8:	9603      	str	r6, [sp, #12]
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <__FARAABIN_CONTAINER_FUNC_Container+0x130>)
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	9401      	str	r4, [sp, #4]
 80015c0:	9400      	str	r4, [sp, #0]
 80015c2:	4623      	mov	r3, r4
 80015c4:	2201      	movs	r2, #1
 80015c6:	491b      	ldr	r1, [pc, #108]	@ (8001634 <__FARAABIN_CONTAINER_FUNC_Container+0x134>)
 80015c8:	4640      	mov	r0, r8
 80015ca:	f008 f973 	bl	80098b4 <fFaraabinLinkSerializer_VarDict>

  FARAABIN_FUNCTION_GROUP_DICT_(LedFunction);
 80015ce:	9501      	str	r5, [sp, #4]
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <__FARAABIN_CONTAINER_FUNC_Container+0x138>)
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4623      	mov	r3, r4
 80015d6:	4a19      	ldr	r2, [pc, #100]	@ (800163c <__FARAABIN_CONTAINER_FUNC_Container+0x13c>)
 80015d8:	4639      	mov	r1, r7
 80015da:	4630      	mov	r0, r6
 80015dc:	f008 f9a4 	bl	8009928 <fFaraabinLinkSerializer_FunctionGroupDict>

  FARAABIN_CONTAINER_FUNC_END_;
}
 80015e0:	b006      	add	sp, #24
 80015e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015e6:	bf00      	nop
 80015e8:	20000390 	.word	0x20000390
 80015ec:	0800a668 	.word	0x0800a668
 80015f0:	0800a6a8 	.word	0x0800a6a8
 80015f4:	20000d19 	.word	0x20000d19
 80015f8:	20000cb4 	.word	0x20000cb4
 80015fc:	0800a6b4 	.word	0x0800a6b4
 8001600:	20000d18 	.word	0x20000d18
 8001604:	2000261c 	.word	0x2000261c
 8001608:	20002504 	.word	0x20002504
 800160c:	0800a6bc 	.word	0x0800a6bc
 8001610:	20000d10 	.word	0x20000d10
 8001614:	0800a6c8 	.word	0x0800a6c8
 8001618:	20000d08 	.word	0x20000d08
 800161c:	0800a6d4 	.word	0x0800a6d4
 8001620:	20000d00 	.word	0x20000d00
 8001624:	20002590 	.word	0x20002590
 8001628:	0800a6dc 	.word	0x0800a6dc
 800162c:	20000cfc 	.word	0x20000cfc
 8001630:	0800a6e8 	.word	0x0800a6e8
 8001634:	20000cf8 	.word	0x20000cf8
 8001638:	20000014 	.word	0x20000014
 800163c:	0800a6f4 	.word	0x0800a6f4

08001640 <FaraabinReceiveFrameHandler>:
  * @param size Size of the received frame
  * @retval None
  */
static void FaraabinReceiveFrameHandler(uint8_t *data, uint16_t size) {
  
  for(uint16_t i = 0; i < size; i++) {
 8001640:	b149      	cbz	r1, 8001656 <FaraabinReceiveFrameHandler+0x16>
static void FaraabinReceiveFrameHandler(uint8_t *data, uint16_t size) {
 8001642:	b538      	push	{r3, r4, r5, lr}
 8001644:	4604      	mov	r4, r0
 8001646:	1845      	adds	r5, r0, r1
    
    fFaraabin_CharReceived(data[i]);
 8001648:	f814 0b01 	ldrb.w	r0, [r4], #1
 800164c:	f004 fada 	bl	8005c04 <fFaraabin_CharReceived>
  for(uint16_t i = 0; i < size; i++) {
 8001650:	42ac      	cmp	r4, r5
 8001652:	d1f9      	bne.n	8001648 <FaraabinReceiveFrameHandler+0x8>
    
  }
  
}
 8001654:	bd38      	pop	{r3, r4, r5, pc}
 8001656:	4770      	bx	lr

08001658 <__faraabin_vartype_member_func_eWaveType>:
FARAABIN_VAR_TYPE_ENUM_FUNC_(eWaveType) {
 8001658:	b538      	push	{r3, r4, r5, lr}
 800165a:	4605      	mov	r5, r0
 800165c:	460c      	mov	r4, r1
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_NONE);
 800165e:	460b      	mov	r3, r1
 8001660:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <__faraabin_vartype_member_func_eWaveType+0x38>)
 8001662:	2100      	movs	r1, #0
 8001664:	f008 f914 	bl	8009890 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_PULSE_TRAIN);
 8001668:	4623      	mov	r3, r4
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <__faraabin_vartype_member_func_eWaveType+0x3c>)
 800166c:	2101      	movs	r1, #1
 800166e:	4628      	mov	r0, r5
 8001670:	f008 f90e 	bl	8009890 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_SAW_TOOTH);
 8001674:	4623      	mov	r3, r4
 8001676:	4a08      	ldr	r2, [pc, #32]	@ (8001698 <__faraabin_vartype_member_func_eWaveType+0x40>)
 8001678:	2102      	movs	r1, #2
 800167a:	4628      	mov	r0, r5
 800167c:	f008 f908 	bl	8009890 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_SIN);
 8001680:	4623      	mov	r3, r4
 8001682:	4a06      	ldr	r2, [pc, #24]	@ (800169c <__faraabin_vartype_member_func_eWaveType+0x44>)
 8001684:	2103      	movs	r1, #3
 8001686:	4628      	mov	r0, r5
 8001688:	f008 f902 	bl	8009890 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
}
 800168c:	bd38      	pop	{r3, r4, r5, pc}
 800168e:	bf00      	nop
 8001690:	0800a6fc 	.word	0x0800a6fc
 8001694:	0800a70c 	.word	0x0800a70c
 8001698:	0800a724 	.word	0x0800a724
 800169c:	0800a73c 	.word	0x0800a73c

080016a0 <main>:
int main(void) {
 80016a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a4:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 80016a6:	f000 fb29 	bl	8001cfc <HAL_Init>
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void) {
  
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	2300      	movs	r3, #0
 80016ac:	9314      	str	r3, [sp, #80]	@ 0x50
 80016ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80016b0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80016b2:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80016b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80016b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80016ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80016bc:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016be:	9309      	str	r3, [sp, #36]	@ 0x24
 80016c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80016c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80016c4:	930c      	str	r3, [sp, #48]	@ 0x30

  /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016ca:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80016ce:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d0:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016da:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016e0:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e2:	a812      	add	r0, sp, #72	@ 0x48
 80016e4:	f001 fd4a 	bl	800317c <HAL_RCC_OscConfig>
 80016e8:	bb20      	cbnz	r0, 8001734 <main+0x94>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
 */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ea:	230f      	movs	r3, #15
 80016ec:	930d      	str	r3, [sp, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ee:	2302      	movs	r3, #2
 80016f0:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016fa:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	9311      	str	r3, [sp, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016fe:	2101      	movs	r1, #1
 8001700:	a80d      	add	r0, sp, #52	@ 0x34
 8001702:	f001 ff7b 	bl	80035fc <HAL_RCC_ClockConfig>
 8001706:	b9b8      	cbnz	r0, 8001738 <main+0x98>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001708:	2310      	movs	r3, #16
 800170a:	9309      	str	r3, [sp, #36]	@ 0x24
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800170c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001710:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001712:	a809      	add	r0, sp, #36	@ 0x24
 8001714:	f002 f82a 	bl	800376c <HAL_RCCEx_PeriphCLKConfig>
 8001718:	b980      	cbnz	r0, 800173c <main+0x9c>
  MX_GPIO_Init();
 800171a:	f7ff fe8f 	bl	800143c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800171e:	f003 fddb 	bl	80052d8 <MX_USB_DEVICE_Init>
  CDC_RegisterReceiveCallback_FS(FaraabinReceiveFrameHandler);
 8001722:	48a5      	ldr	r0, [pc, #660]	@ (80019b8 <main+0x318>)
 8001724:	f003 fe48 	bl	80053b8 <CDC_RegisterReceiveCallback_FS>
  if (fChrono_Init(HAL_GetTick) != CHRONO_OK) {
 8001728:	48a4      	ldr	r0, [pc, #656]	@ (80019bc <main+0x31c>)
 800172a:	f004 f845 	bl	80057b8 <fChrono_Init>
 800172e:	b138      	cbz	r0, 8001740 <main+0xa0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
  while (1)
 8001732:	e7fe      	b.n	8001732 <main+0x92>
 8001734:	b672      	cpsid	i
 8001736:	e7fe      	b.n	8001736 <main+0x96>
 8001738:	b672      	cpsid	i
 800173a:	e7fe      	b.n	800173a <main+0x9a>
 800173c:	b672      	cpsid	i
 800173e:	e7fe      	b.n	800173e <main+0x9e>
  if (fFaraabin_Init() != FARAABIN_OK) {
 8001740:	f004 f940 	bl	80059c4 <fFaraabin_Init>
 8001744:	b108      	cbz	r0, 800174a <main+0xaa>
 8001746:	b672      	cpsid	i
  while (1)
 8001748:	e7fe      	b.n	8001748 <main+0xa8>
  FARAABIN_Container_Init_(&Container);
 800174a:	489d      	ldr	r0, [pc, #628]	@ (80019c0 <main+0x320>)
 800174c:	4e9d      	ldr	r6, [pc, #628]	@ (80019c4 <main+0x324>)
 800174e:	6833      	ldr	r3, [r6, #0]
 8001750:	6083      	str	r3, [r0, #8]
 8001752:	4d9d      	ldr	r5, [pc, #628]	@ (80019c8 <main+0x328>)
 8001754:	60c5      	str	r5, [r0, #12]
 8001756:	f004 fb3f 	bl	8005dd8 <fFaraabinFobjectContainer_Init>
  FARAABIN_VAR_TYPE_ENUM_INIT_(eWaveType);
 800175a:	489c      	ldr	r0, [pc, #624]	@ (80019cc <main+0x32c>)
 800175c:	4b9c      	ldr	r3, [pc, #624]	@ (80019d0 <main+0x330>)
 800175e:	6043      	str	r3, [r0, #4]
 8001760:	60c5      	str	r5, [r0, #12]
 8001762:	6833      	ldr	r3, [r6, #0]
 8001764:	6083      	str	r3, [r0, #8]
 8001766:	2701      	movs	r7, #1
 8001768:	6147      	str	r7, [r0, #20]
 800176a:	f04f 0802 	mov.w	r8, #2
 800176e:	f880 8012 	strb.w	r8, [r0, #18]
 8001772:	4b98      	ldr	r3, [pc, #608]	@ (80019d4 <main+0x334>)
 8001774:	6183      	str	r3, [r0, #24]
 8001776:	f005 fc9f 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_DATABUS_SET_VALUE_(Databus.ChannelQty, 5);
 800177a:	4c97      	ldr	r4, [pc, #604]	@ (80019d8 <main+0x338>)
 800177c:	2305      	movs	r3, #5
 800177e:	8263      	strh	r3, [r4, #18]
  FARAABIN_DATABUS_SET_VALUE_(Databus.StreamDivideBy, 5);
 8001780:	83e3      	strh	r3, [r4, #30]
  FARAABIN_DataBus_Init_(&Databus);
 8001782:	6833      	ldr	r3, [r6, #0]
 8001784:	60a3      	str	r3, [r4, #8]
 8001786:	60e5      	str	r5, [r4, #12]
 8001788:	4620      	mov	r0, r4
 800178a:	f004 fbe9 	bl	8005f60 <fFaraabinFobjectDataBus_Init>
  FARAABIN_DataBus_StartStreamMode_(&Databus);
 800178e:	4620      	mov	r0, r4
 8001790:	f005 fa22 	bl	8006bd8 <fFaraabinFobjectDataBus_StartStream>
  FARAABIN_DataBus_AttachVariable_F64_(&Databus, &Output);
 8001794:	f8cd 8004 	str.w	r8, [sp, #4]
 8001798:	230b      	movs	r3, #11
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	2208      	movs	r2, #8
 80017a0:	498e      	ldr	r1, [pc, #568]	@ (80019dc <main+0x33c>)
 80017a2:	4620      	mov	r0, r4
 80017a4:	f005 fae2 	bl	8006d6c <fFaraabinFobjectDataBus_AttachVariable>
  FARAABIN_DataBus_Enable_(&Databus);
 80017a8:	70a7      	strb	r7, [r4, #2]
  FARAABIN_EventGroup_Init_(&TypeEventGroup);
 80017aa:	488d      	ldr	r0, [pc, #564]	@ (80019e0 <main+0x340>)
 80017ac:	6833      	ldr	r3, [r6, #0]
 80017ae:	6083      	str	r3, [r0, #8]
 80017b0:	60c5      	str	r5, [r0, #12]
 80017b2:	f005 fb77 	bl	8006ea4 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_EventGroup_Init_(&AmplEventGroup);
 80017b6:	488b      	ldr	r0, [pc, #556]	@ (80019e4 <main+0x344>)
 80017b8:	6833      	ldr	r3, [r6, #0]
 80017ba:	6083      	str	r3, [r0, #8]
 80017bc:	60c5      	str	r5, [r0, #12]
 80017be:	f005 fb71 	bl	8006ea4 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_EventGroup_Init_(&FreqEventGroup);
 80017c2:	4889      	ldr	r0, [pc, #548]	@ (80019e8 <main+0x348>)
 80017c4:	6833      	ldr	r3, [r6, #0]
 80017c6:	6083      	str	r3, [r0, #8]
 80017c8:	60c5      	str	r5, [r0, #12]
 80017ca:	f005 fb6b 	bl	8006ea4 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_FunctionGroupType_Init_(&LedFunction);
 80017ce:	4887      	ldr	r0, [pc, #540]	@ (80019ec <main+0x34c>)
 80017d0:	6085      	str	r5, [r0, #8]
 80017d2:	f005 fb83 	bl	8006edc <fFaraabinFobjectFunctionGroupType_Init>
  WaveType = eWAVE_TYPE_SIN;
 80017d6:	4b86      	ldr	r3, [pc, #536]	@ (80019f0 <main+0x350>)
 80017d8:	2203      	movs	r2, #3
 80017da:	701a      	strb	r2, [r3, #0]
  Frequency = 1.0;
 80017dc:	2200      	movs	r2, #0
 80017de:	4b85      	ldr	r3, [pc, #532]	@ (80019f4 <main+0x354>)
 80017e0:	4985      	ldr	r1, [pc, #532]	@ (80019f8 <main+0x358>)
 80017e2:	e9c1 2300 	strd	r2, r3, [r1]
  Amplitude = 1.0;
 80017e6:	4985      	ldr	r1, [pc, #532]	@ (80019fc <main+0x35c>)
 80017e8:	e9c1 2300 	strd	r2, r3, [r1]
  t = 0.0;
 80017ec:	4b84      	ldr	r3, [pc, #528]	@ (8001a00 <main+0x360>)
 80017ee:	2000      	movs	r0, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	e9c3 0100 	strd	r0, r1, [r3]
  fChrono_StartTimeoutUs(&Chrono, RUNTIME_PERIOD_US);
 80017f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017fa:	4882      	ldr	r0, [pc, #520]	@ (8001a04 <main+0x364>)
 80017fc:	f004 f88a 	bl	8005914 <fChrono_StartTimeoutUs>
    if (fChrono_IsTimeout(&Chrono)) {
 8001800:	4d80      	ldr	r5, [pc, #512]	@ (8001a04 <main+0x364>)
      t += ((float64_t)RUNTIME_PERIOD_US / 1000000.0);
 8001802:	f20f 1ba4 	addw	fp, pc, #420	@ 0x1a4
 8001806:	e9db ab00 	ldrd	sl, fp, [fp]
 800180a:	e09f      	b.n	800194c <main+0x2ac>
            if (fmod(t, (1.0 / Frequency)) >= 0.5) {
 800180c:	4b7a      	ldr	r3, [pc, #488]	@ (80019f8 <main+0x358>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	2000      	movs	r0, #0
 8001814:	4977      	ldr	r1, [pc, #476]	@ (80019f4 <main+0x354>)
 8001816:	f7fe ff89 	bl	800072c <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4630      	mov	r0, r6
 8001820:	4639      	mov	r1, r7
 8001822:	f008 fdb3 	bl	800a38c <fmod>
 8001826:	2200      	movs	r2, #0
 8001828:	4b77      	ldr	r3, [pc, #476]	@ (8001a08 <main+0x368>)
 800182a:	f7ff f8db 	bl	80009e4 <__aeabi_dcmpge>
              pulseSign = 1;
 800182e:	2800      	cmp	r0, #0
 8001830:	bf14      	ite	ne
 8001832:	f04f 30ff 	movne.w	r0, #4294967295
 8001836:	2001      	moveq	r0, #1
 8001838:	4b74      	ldr	r3, [pc, #464]	@ (8001a0c <main+0x36c>)
 800183a:	7018      	strb	r0, [r3, #0]
            Output = Amplitude * (float64_t)pulseSign;
 800183c:	f7fe fde2 	bl	8000404 <__aeabi_i2d>
 8001840:	4b6e      	ldr	r3, [pc, #440]	@ (80019fc <main+0x35c>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fe47 	bl	80004d8 <__aeabi_dmul>
            break;
 800184a:	e042      	b.n	80018d2 <main+0x232>
            Output = Amplitude * fmod(t, (1.0 / Frequency));
 800184c:	4b6a      	ldr	r3, [pc, #424]	@ (80019f8 <main+0x358>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	2000      	movs	r0, #0
 8001854:	4967      	ldr	r1, [pc, #412]	@ (80019f4 <main+0x354>)
 8001856:	f7fe ff69 	bl	800072c <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4630      	mov	r0, r6
 8001860:	4639      	mov	r1, r7
 8001862:	f008 fd93 	bl	800a38c <fmod>
 8001866:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <main+0x35c>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fe34 	bl	80004d8 <__aeabi_dmul>
            break;
 8001870:	e02f      	b.n	80018d2 <main+0x232>
            OmegaT = OMEGA * t;
 8001872:	a34f      	add	r3, pc, #316	@ (adr r3, 80019b0 <main+0x310>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	495f      	ldr	r1, [pc, #380]	@ (80019f8 <main+0x358>)
 800187a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800187e:	f7fe fe2b 	bl	80004d8 <__aeabi_dmul>
 8001882:	4632      	mov	r2, r6
 8001884:	463b      	mov	r3, r7
 8001886:	f7fe fe27 	bl	80004d8 <__aeabi_dmul>
 800188a:	4606      	mov	r6, r0
 800188c:	460f      	mov	r7, r1
            if (OmegaT > (2.0 * (float64_t)PI)) {
 800188e:	a348      	add	r3, pc, #288	@ (adr r3, 80019b0 <main+0x310>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7ff f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 8001898:	b140      	cbz	r0, 80018ac <main+0x20c>
              OmegaT -= (2.0 * (float64_t)PI);
 800189a:	a345      	add	r3, pc, #276	@ (adr r3, 80019b0 <main+0x310>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	4630      	mov	r0, r6
 80018a2:	4639      	mov	r1, r7
 80018a4:	f7fe fc60 	bl	8000168 <__aeabi_dsub>
 80018a8:	4606      	mov	r6, r0
 80018aa:	460f      	mov	r7, r1
            OmegaT = OMEGA * t;
 80018ac:	4b58      	ldr	r3, [pc, #352]	@ (8001a10 <main+0x370>)
 80018ae:	e9c3 6700 	strd	r6, r7, [r3]
            Output = Amplitude * arm_sin_f32(OmegaT);
 80018b2:	4630      	mov	r0, r6
 80018b4:	4639      	mov	r1, r7
 80018b6:	f7ff f8bf 	bl	8000a38 <__aeabi_d2f>
 80018ba:	f000 f99f 	bl	8001bfc <arm_sin_f32>
 80018be:	f7fe fdb3 	bl	8000428 <__aeabi_f2d>
 80018c2:	4b4e      	ldr	r3, [pc, #312]	@ (80019fc <main+0x35c>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fe06 	bl	80004d8 <__aeabi_dmul>
            break;
 80018cc:	e001      	b.n	80018d2 <main+0x232>
 80018ce:	2000      	movs	r0, #0
 80018d0:	2100      	movs	r1, #0
            Output = Amplitude * (float64_t)pulseSign;
 80018d2:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <main+0x33c>)
 80018d4:	e9c3 0100 	strd	r0, r1, [r3]
      if (OldType != WaveType) {
 80018d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a14 <main+0x374>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4a44      	ldr	r2, [pc, #272]	@ (80019f0 <main+0x350>)
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	f040 80a5 	bne.w	8001a30 <main+0x390>
      if (OldAmp != Amplitude) {
 80018e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001a18 <main+0x378>)
 80018e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80018ec:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <main+0x35c>)
 80018ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80018f2:	4642      	mov	r2, r8
 80018f4:	464b      	mov	r3, r9
 80018f6:	4630      	mov	r0, r6
 80018f8:	4639      	mov	r1, r7
 80018fa:	f7ff f855 	bl	80009a8 <__aeabi_dcmpeq>
 80018fe:	2800      	cmp	r0, #0
 8001900:	f000 80af 	beq.w	8001a62 <main+0x3c2>
      if (OldFreq != Frequency) {
 8001904:	4b45      	ldr	r3, [pc, #276]	@ (8001a1c <main+0x37c>)
 8001906:	e9d3 6700 	ldrd	r6, r7, [r3]
 800190a:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <main+0x358>)
 800190c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001910:	4642      	mov	r2, r8
 8001912:	464b      	mov	r3, r9
 8001914:	4630      	mov	r0, r6
 8001916:	4639      	mov	r1, r7
 8001918:	f7ff f846 	bl	80009a8 <__aeabi_dcmpeq>
 800191c:	2800      	cmp	r0, #0
 800191e:	f000 80b8 	beq.w	8001a92 <main+0x3f2>
      FARAABIN_DataBus_Run_(&Databus);
 8001922:	482d      	ldr	r0, [pc, #180]	@ (80019d8 <main+0x338>)
 8001924:	f004 fb98 	bl	8006058 <fFaraabinFobjectDataBus_Run>
      Interval = fChrono_TimeSpanUs(lastTickBegin, tickBegin);
 8001928:	4e3d      	ldr	r6, [pc, #244]	@ (8001a20 <main+0x380>)
 800192a:	4621      	mov	r1, r4
 800192c:	6830      	ldr	r0, [r6, #0]
 800192e:	f003 ff1d 	bl	800576c <fChrono_TimeSpanUs>
 8001932:	4b3c      	ldr	r3, [pc, #240]	@ (8001a24 <main+0x384>)
 8001934:	6018      	str	r0, [r3, #0]
      Execution = fChrono_TimeSpanUs(tickBegin, fChrono_GetTick());
 8001936:	f003 fedb 	bl	80056f0 <fChrono_GetTick>
 800193a:	4601      	mov	r1, r0
 800193c:	4620      	mov	r0, r4
 800193e:	f003 ff15 	bl	800576c <fChrono_TimeSpanUs>
 8001942:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <main+0x388>)
 8001944:	6018      	str	r0, [r3, #0]
      lastTickBegin = tickBegin;
 8001946:	6034      	str	r4, [r6, #0]
    fFaraabin_Run();
 8001948:	f004 f934 	bl	8005bb4 <fFaraabin_Run>
    if (fChrono_IsTimeout(&Chrono)) {
 800194c:	4628      	mov	r0, r5
 800194e:	f003 fff3 	bl	8005938 <fChrono_IsTimeout>
 8001952:	2800      	cmp	r0, #0
 8001954:	d0f8      	beq.n	8001948 <main+0x2a8>
      fChrono_StartTimeoutUs(&Chrono, RUNTIME_PERIOD_US);
 8001956:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800195a:	4628      	mov	r0, r5
 800195c:	f003 ffda 	bl	8005914 <fChrono_StartTimeoutUs>
      uint32_t tickBegin = fChrono_GetTick();
 8001960:	f003 fec6 	bl	80056f0 <fChrono_GetTick>
 8001964:	4604      	mov	r4, r0
      t += ((float64_t)RUNTIME_PERIOD_US / 1000000.0);
 8001966:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8001a00 <main+0x360>
 800196a:	4652      	mov	r2, sl
 800196c:	465b      	mov	r3, fp
 800196e:	e9d8 0100 	ldrd	r0, r1, [r8]
 8001972:	f7fe fbfb 	bl	800016c <__adddf3>
 8001976:	4606      	mov	r6, r0
 8001978:	460f      	mov	r7, r1
 800197a:	e9c8 6700 	strd	r6, r7, [r8]
      if(Enable) {
 800197e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <main+0x38c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0a3      	beq.n	80018ce <main+0x22e>
        switch (WaveType) {
 8001986:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <main+0x350>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b02      	cmp	r3, #2
 800198c:	f43f af5e 	beq.w	800184c <main+0x1ac>
 8001990:	2b03      	cmp	r3, #3
 8001992:	f43f af6e 	beq.w	8001872 <main+0x1d2>
 8001996:	2b01      	cmp	r3, #1
 8001998:	f43f af38 	beq.w	800180c <main+0x16c>
 800199c:	2000      	movs	r0, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	e797      	b.n	80018d2 <main+0x232>
 80019a2:	bf00      	nop
 80019a4:	f3af 8000 	nop.w
 80019a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ac:	3f50624d 	.word	0x3f50624d
 80019b0:	60000000 	.word	0x60000000
 80019b4:	401921fb 	.word	0x401921fb
 80019b8:	08001641 	.word	0x08001641
 80019bc:	08001d39 	.word	0x08001d39
 80019c0:	20000180 	.word	0x20000180
 80019c4:	20000390 	.word	0x20000390
 80019c8:	0800a668 	.word	0x0800a668
 80019cc:	20000cb4 	.word	0x20000cb4
 80019d0:	0800a74c 	.word	0x0800a74c
 80019d4:	08001659 	.word	0x08001659
 80019d8:	200000d0 	.word	0x200000d0
 80019dc:	20000d00 	.word	0x20000d00
 80019e0:	200000b8 	.word	0x200000b8
 80019e4:	20000088 	.word	0x20000088
 80019e8:	200000a0 	.word	0x200000a0
 80019ec:	20000014 	.word	0x20000014
 80019f0:	20000d19 	.word	0x20000d19
 80019f4:	3ff00000 	.word	0x3ff00000
 80019f8:	20000d10 	.word	0x20000d10
 80019fc:	20000d08 	.word	0x20000d08
 8001a00:	20000cf0 	.word	0x20000cf0
 8001a04:	20000cd0 	.word	0x20000cd0
 8001a08:	3fe00000 	.word	0x3fe00000
 8001a0c:	20000084 	.word	0x20000084
 8001a10:	20000ce8 	.word	0x20000ce8
 8001a14:	20000cb0 	.word	0x20000cb0
 8001a18:	20000ca8 	.word	0x20000ca8
 8001a1c:	20000ca0 	.word	0x20000ca0
 8001a20:	20000c9c 	.word	0x20000c9c
 8001a24:	20000cf8 	.word	0x20000cf8
 8001a28:	20000cfc 	.word	0x20000cfc
 8001a2c:	20000d18 	.word	0x20000d18
        FARAABIN_PrintfWarningTo_(&TypeEventGroup, "Wave type changed from %s to %s", WaveTypeString[OldType], WaveTypeString[WaveType]);
 8001a30:	4824      	ldr	r0, [pc, #144]	@ (8001ac4 <main+0x424>)
 8001a32:	4925      	ldr	r1, [pc, #148]	@ (8001ac8 <main+0x428>)
 8001a34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a38:	9204      	str	r2, [sp, #16]
 8001a3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a3e:	9303      	str	r3, [sp, #12]
 8001a40:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <main+0x42c>)
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2304      	movs	r3, #4
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	7883      	ldrb	r3, [r0, #2]
 8001a4e:	f100 0210 	add.w	r2, r0, #16
 8001a52:	2100      	movs	r1, #0
 8001a54:	f007 fde0 	bl	8009618 <fFaraabinLinkSerializer_SerializeEventPrintf>
        OldType = WaveType;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <main+0x430>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <main+0x434>)
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e741      	b.n	80018e6 <main+0x246>
        FARAABIN_PrintfWarningTo_(&AmplEventGroup, "Amplitude changed from %lf to %lf", OldAmp, Amplitude);
 8001a62:	481d      	ldr	r0, [pc, #116]	@ (8001ad8 <main+0x438>)
 8001a64:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001a68:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <main+0x43c>)
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	2301      	movs	r3, #1
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2304      	movs	r3, #4
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	7883      	ldrb	r3, [r0, #2]
 8001a7a:	f100 0210 	add.w	r2, r0, #16
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f007 fdca 	bl	8009618 <fFaraabinLinkSerializer_SerializeEventPrintf>
        OldAmp = Amplitude;
 8001a84:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <main+0x440>)
 8001a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <main+0x444>)
 8001a8c:	e9c3 0100 	strd	r0, r1, [r3]
 8001a90:	e738      	b.n	8001904 <main+0x264>
        FARAABIN_PrintfWarningTo_(&FreqEventGroup, "Frequency changed from %lf to %lf", OldFreq, Frequency);
 8001a92:	4815      	ldr	r0, [pc, #84]	@ (8001ae8 <main+0x448>)
 8001a94:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001a98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <main+0x44c>)
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	7883      	ldrb	r3, [r0, #2]
 8001aaa:	f100 0210 	add.w	r2, r0, #16
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f007 fdb2 	bl	8009618 <fFaraabinLinkSerializer_SerializeEventPrintf>
        OldFreq = Frequency;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <main+0x450>)
 8001ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <main+0x454>)
 8001abc:	e9c3 0100 	strd	r0, r1, [r3]
 8001ac0:	e72f      	b.n	8001922 <main+0x282>
 8001ac2:	bf00      	nop
 8001ac4:	200000b8 	.word	0x200000b8
 8001ac8:	0800a804 	.word	0x0800a804
 8001acc:	0800a758 	.word	0x0800a758
 8001ad0:	20000d19 	.word	0x20000d19
 8001ad4:	20000cb0 	.word	0x20000cb0
 8001ad8:	20000088 	.word	0x20000088
 8001adc:	0800a778 	.word	0x0800a778
 8001ae0:	20000d08 	.word	0x20000d08
 8001ae4:	20000ca8 	.word	0x20000ca8
 8001ae8:	200000a0 	.word	0x200000a0
 8001aec:	0800a79c 	.word	0x0800a79c
 8001af0:	20000d10 	.word	0x20000d10
 8001af4:	20000ca0 	.word	0x20000ca0

08001af8 <Error_Handler>:
 8001af8:	b672      	cpsid	i
  while (1)
 8001afa:	e7fe      	b.n	8001afa <Error_Handler+0x2>

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_MspInit+0x38>)
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	f002 0201 	and.w	r2, r2, #1
 8001b0e:	9200      	str	r2, [sp, #0]
 8001b10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b18:	61da      	str	r2, [r3, #28]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_MspInit+0x3c>)
 8001b26:	6853      	ldr	r3, [r2, #4]
 8001b28:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	b002      	add	sp, #8
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000

08001b3c <NMI_Handler>:
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  
   while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler>

08001b3e <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler>

08001b40 <MemManage_Handler>:
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <MemManage_Handler>

08001b42 <BusFault_Handler>:
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler>

08001b44 <UsageFault_Handler>:
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler>

08001b46 <SVC_Handler>:
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
}
 8001b46:	4770      	bx	lr

08001b48 <DebugMon_Handler>:
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
}
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
}
 8001b4a:	4770      	bx	lr

08001b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4c:	b508      	push	{r3, lr}
  HAL_IncTick();
 8001b4e:	f000 f8e7 	bl	8001d20 <HAL_IncTick>
}
 8001b52:	bd08      	pop	{r3, pc}

08001b54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b54:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b56:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001b58:	f000 fb68 	bl	800222c <HAL_PCD_IRQHandler>
}
 8001b5c:	bd08      	pop	{r3, pc}
 8001b5e:	bf00      	nop
 8001b60:	20002210 	.word	0x20002210

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b508      	push	{r3, lr}
 8001b66:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4a0c      	ldr	r2, [pc, #48]	@ (8001b9c <_sbrk+0x38>)
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	b152      	cbz	r2, 8001b84 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b9c <_sbrk+0x38>)
 8001b70:	6810      	ldr	r0, [r2, #0]
 8001b72:	4403      	add	r3, r0
 8001b74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <_sbrk+0x3c>)
 8001b76:	490b      	ldr	r1, [pc, #44]	@ (8001ba4 <_sbrk+0x40>)
 8001b78:	1a52      	subs	r2, r2, r1
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d806      	bhi.n	8001b8c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001b7e:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <_sbrk+0x38>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001b82:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001b84:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <_sbrk+0x38>)
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <_sbrk+0x44>)
 8001b88:	6011      	str	r1, [r2, #0]
 8001b8a:	e7f0      	b.n	8001b6e <_sbrk+0xa>
    errno = ENOMEM;
 8001b8c:	f008 f834 	bl	8009bf8 <__errno>
 8001b90:	230c      	movs	r3, #12
 8001b92:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	e7f3      	b.n	8001b82 <_sbrk+0x1e>
 8001b9a:	bf00      	nop
 8001b9c:	20000d1c 	.word	0x20000d1c
 8001ba0:	20005000 	.word	0x20005000
 8001ba4:	00000500 	.word	0x00000500
 8001ba8:	20003480 	.word	0x20003480

08001bac <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	4770      	bx	lr
	...

08001bb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb0:	f7ff fffc 	bl	8001bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb4:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bb6:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bec <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bcc:	4c09      	ldr	r4, [pc, #36]	@ (8001bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bda:	f008 f813 	bl	8009c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bde:	f7ff fd5f 	bl	80016a0 <main>
  bx lr
 8001be2:	4770      	bx	lr
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	200004b0 	.word	0x200004b0
  ldr r2, =_sidata
 8001bec:	0800b218 	.word	0x0800b218
  ldr r2, =_sbss
 8001bf0:	200004b0 	.word	0x200004b0
  ldr r4, =_ebss
 8001bf4:	2000347c 	.word	0x2000347c

08001bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_2_IRQHandler>
	...

08001bfc <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	4604      	mov	r4, r0
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8001c00:	2100      	movs	r1, #0
 8001c02:	f7ff fa15 	bl	8001030 <__aeabi_fcmplt>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d13b      	bne.n	8001c82 <arm_sin_f32+0x86>
     return x;
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8001c0a:	4926      	ldr	r1, [pc, #152]	@ (8001ca4 <arm_sin_f32+0xa8>)
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff f871 	bl	8000cf4 <__aeabi_fmul>
 8001c12:	4606      	mov	r6, r0

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8001c14:	f7ff fa34 	bl	8001080 <__aeabi_f2iz>
 8001c18:	4605      	mov	r5, r0

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff fa07 	bl	8001030 <__aeabi_fcmplt>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d13a      	bne.n	8001c9c <arm_sin_f32+0xa0>
  {
    n--;
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8001c26:	4628      	mov	r0, r5
 8001c28:	f7ff f810 	bl	8000c4c <__aeabi_i2f>
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7fe ff56 	bl	8000ae0 <__aeabi_fsub>

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8001c34:	f04f 4188 	mov.w	r1, #1140850688	@ 0x44000000
 8001c38:	f7ff f85c 	bl	8000cf4 <__aeabi_fmul>
 8001c3c:	4605      	mov	r5, r0

  index = ((uint16_t)findex) & 0x1ff;
 8001c3e:	f7ff fa45 	bl	80010cc <__aeabi_f2uiz>
 8001c42:	f3c0 0408 	ubfx	r4, r0, #0, #9

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8001c46:	4620      	mov	r0, r4
 8001c48:	f7fe fffc 	bl	8000c44 <__aeabi_ui2f>
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f7fe ff46 	bl	8000ae0 <__aeabi_fsub>
 8001c54:	4605      	mov	r5, r0
  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 8001c56:	4601      	mov	r1, r0
 8001c58:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001c5c:	f7fe ff40 	bl	8000ae0 <__aeabi_fsub>
  a = sinTable_f32[index];
 8001c60:	4f11      	ldr	r7, [pc, #68]	@ (8001ca8 <arm_sin_f32+0xac>)
  sinVal = (1.0f-fract)*a + fract*b;
 8001c62:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001c66:	f7ff f845 	bl	8000cf4 <__aeabi_fmul>
 8001c6a:	4606      	mov	r6, r0
  b = sinTable_f32[index+1];
 8001c6c:	3401      	adds	r4, #1
  sinVal = (1.0f-fract)*a + fract*b;
 8001c6e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001c72:	4628      	mov	r0, r5
 8001c74:	f7ff f83e 	bl	8000cf4 <__aeabi_fmul>
 8001c78:	4601      	mov	r1, r0
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7fe ff32 	bl	8000ae4 <__addsf3>

  /* Return the output value */
  return (sinVal);
}
 8001c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8001c82:	490a      	ldr	r1, [pc, #40]	@ (8001cac <arm_sin_f32+0xb0>)
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff f9e7 	bl	8001058 <__aeabi_fcmpge>
 8001c8a:	b948      	cbnz	r0, 8001ca0 <arm_sin_f32+0xa4>
  in = x * 0.159154943092f;
 8001c8c:	4905      	ldr	r1, [pc, #20]	@ (8001ca4 <arm_sin_f32+0xa8>)
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f7ff f830 	bl	8000cf4 <__aeabi_fmul>
 8001c94:	4606      	mov	r6, r0
  n = (int32_t) in;
 8001c96:	f7ff f9f3 	bl	8001080 <__aeabi_f2iz>
 8001c9a:	4605      	mov	r5, r0
    n--;
 8001c9c:	3d01      	subs	r5, #1
 8001c9e:	e7c2      	b.n	8001c26 <arm_sin_f32+0x2a>
     return x;
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	e7ed      	b.n	8001c80 <arm_sin_f32+0x84>
 8001ca4:	3e22f983 	.word	0x3e22f983
 8001ca8:	0800a824 	.word	0x0800a824
 8001cac:	b44c02cd 	.word	0xb44c02cd

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_InitTick+0x40>)
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <HAL_InitTick+0x44>)
 8001cc2:	6810      	ldr	r0, [r2, #0]
 8001cc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc8:	f000 f8a4 	bl	8001e14 <HAL_SYSTICK_Config>
 8001ccc:	b968      	cbnz	r0, 8001cea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	2c0f      	cmp	r4, #15
 8001cd0:	d901      	bls.n	8001cd6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e00a      	b.n	8001cec <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4621      	mov	r1, r4
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295
 8001cde:	f000 f843 	bl	8001d68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_InitTick+0x48>)
 8001ce4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
}
 8001cec:	bd10      	pop	{r4, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000019c 	.word	0x2000019c
 8001cf4:	20000198 	.word	0x20000198
 8001cf8:	200001a0 	.word	0x200001a0

08001cfc <HAL_Init>:
{
 8001cfc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfe:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <HAL_Init+0x20>)
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f81b 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	200f      	movs	r0, #15
 8001d10:	f7ff ffce 	bl	8001cb0 <HAL_InitTick>
  HAL_MspInit();
 8001d14:	f7ff fef2 	bl	8001afc <HAL_MspInit>
}
 8001d18:	2000      	movs	r0, #0
 8001d1a:	bd08      	pop	{r3, pc}
 8001d1c:	40022000 	.word	0x40022000

08001d20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d20:	4a03      	ldr	r2, [pc, #12]	@ (8001d30 <HAL_IncTick+0x10>)
 8001d22:	6811      	ldr	r1, [r2, #0]
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_IncTick+0x14>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	440b      	add	r3, r1
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000d20 	.word	0x20000d20
 8001d34:	2000019c 	.word	0x2000019c

08001d38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d38:	4b01      	ldr	r3, [pc, #4]	@ (8001d40 <HAL_GetTick+0x8>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000d20 	.word	0x20000d20

08001d44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d46:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d48:	0203      	lsls	r3, r0, #8
 8001d4a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d52:	0412      	lsls	r2, r2, #16
 8001d54:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001d60:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d68:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_NVIC_SetPriority+0x64>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d72:	f1c3 0c07 	rsb	ip, r3, #7
 8001d76:	f1bc 0f04 	cmp.w	ip, #4
 8001d7a:	bf28      	it	cs
 8001d7c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d80:	f103 0e04 	add.w	lr, r3, #4
 8001d84:	f1be 0f06 	cmp.w	lr, #6
 8001d88:	bf8c      	ite	hi
 8001d8a:	3b03      	subhi	r3, #3
 8001d8c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8e:	f04f 3eff 	mov.w	lr, #4294967295
 8001d92:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001d96:	ea21 010c 	bic.w	r1, r1, ip
 8001d9a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	fa0e fe03 	lsl.w	lr, lr, r3
 8001da0:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001da6:	2800      	cmp	r0, #0
 8001da8:	db09      	blt.n	8001dbe <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	0109      	lsls	r1, r1, #4
 8001dac:	b2c9      	uxtb	r1, r1
 8001dae:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001db2:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001db6:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dba:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	f000 000f 	and.w	r0, r0, #15
 8001dc2:	0109      	lsls	r1, r1, #4
 8001dc4:	b2c9      	uxtb	r1, r1
 8001dc6:	4b02      	ldr	r3, [pc, #8]	@ (8001dd0 <HAL_NVIC_SetPriority+0x68>)
 8001dc8:	5419      	strb	r1, [r3, r0]
 8001dca:	e7f6      	b.n	8001dba <HAL_NVIC_SetPriority+0x52>
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	e000ed14 	.word	0xe000ed14

08001dd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	db07      	blt.n	8001de8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd8:	0941      	lsrs	r1, r0, #5
 8001dda:	f000 001f 	and.w	r0, r0, #31
 8001dde:	2301      	movs	r3, #1
 8001de0:	4083      	lsls	r3, r0
 8001de2:	4a02      	ldr	r2, [pc, #8]	@ (8001dec <HAL_NVIC_EnableIRQ+0x18>)
 8001de4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001df0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001df4:	4905      	ldr	r1, [pc, #20]	@ (8001e0c <HAL_NVIC_SystemReset+0x1c>)
 8001df6:	68ca      	ldr	r2, [r1, #12]
 8001df8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <HAL_NVIC_SystemReset+0x20>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]
 8001e02:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e06:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001e08:	e7fd      	b.n	8001e06 <HAL_NVIC_SystemReset+0x16>
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	05fa0004 	.word	0x05fa0004

08001e14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	3801      	subs	r0, #1
 8001e16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001e1a:	d20b      	bcs.n	8001e34 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001e20:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <HAL_SYSTICK_Config+0x24>)
 8001e24:	21f0      	movs	r1, #240	@ 0xf0
 8001e26:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	2207      	movs	r2, #7
 8001e30:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e32:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e40:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	f8d1 9000 	ldr.w	r9, [r1]
 8001e46:	f1b9 0f00 	cmp.w	r9, #0
 8001e4a:	f000 8126 	beq.w	800209a <HAL_GPIO_Init+0x25e>
 8001e4e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001e50:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e52:	4d93      	ldr	r5, [pc, #588]	@ (80020a0 <HAL_GPIO_Init+0x264>)
      switch (GPIO_Init->Mode)
 8001e54:	4c93      	ldr	r4, [pc, #588]	@ (80020a4 <HAL_GPIO_Init+0x268>)
 8001e56:	4e94      	ldr	r6, [pc, #592]	@ (80020a8 <HAL_GPIO_Init+0x26c>)
 8001e58:	f8df e250 	ldr.w	lr, [pc, #592]	@ 80020ac <HAL_GPIO_Init+0x270>
 8001e5c:	4694      	mov	ip, r2
 8001e5e:	e0be      	b.n	8001fde <HAL_GPIO_Init+0x1a2>
 8001e60:	45a1      	cmp	r9, r4
 8001e62:	d00d      	beq.n	8001e80 <HAL_GPIO_Init+0x44>
 8001e64:	d904      	bls.n	8001e70 <HAL_GPIO_Init+0x34>
 8001e66:	45b1      	cmp	r9, r6
 8001e68:	d00a      	beq.n	8001e80 <HAL_GPIO_Init+0x44>
 8001e6a:	45f1      	cmp	r9, lr
 8001e6c:	d008      	beq.n	8001e80 <HAL_GPIO_Init+0x44>
 8001e6e:	e01b      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
 8001e70:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 80020b0 <HAL_GPIO_Init+0x274>
 8001e74:	45d1      	cmp	r9, sl
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x44>
 8001e78:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8001e7c:	45d1      	cmp	r9, sl
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_GPIO_Init+0x64>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e80:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001e84:	f1bc 0f00 	cmp.w	ip, #0
 8001e88:	f000 80fb 	beq.w	8002082 <HAL_GPIO_Init+0x246>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e8c:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8001e90:	bf0c      	ite	eq
 8001e92:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001e96:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e9a:	f04f 0c08 	mov.w	ip, #8
 8001e9e:	e003      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8001ea0:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8001ea4:	45d1      	cmp	r9, sl
 8001ea6:	d0eb      	beq.n	8001e80 <HAL_GPIO_Init+0x44>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea8:	2fff      	cmp	r7, #255	@ 0xff
 8001eaa:	bf99      	ittee	ls
 8001eac:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eae:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb0:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb4:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb8:	f8d9 8000 	ldr.w	r8, [r9]
 8001ebc:	f04f 0b0f 	mov.w	fp, #15
 8001ec0:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001ec4:	ea28 080b 	bic.w	r8, r8, fp
 8001ec8:	fa0c fa0a 	lsl.w	sl, ip, sl
 8001ecc:	ea48 080a 	orr.w	r8, r8, sl
 8001ed0:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001ed8:	f018 5f80 	tst.w	r8, #268435456	@ 0x10000000
 8001edc:	d078      	beq.n	8001fd0 <HAL_GPIO_Init+0x194>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ede:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8001ee2:	f048 0801 	orr.w	r8, r8, #1
 8001ee6:	f8c5 8018 	str.w	r8, [r5, #24]
 8001eea:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8001eee:	f008 0801 	and.w	r8, r8, #1
 8001ef2:	f8cd 8004 	str.w	r8, [sp, #4]
 8001ef6:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001efa:	f023 0803 	bic.w	r8, r3, #3
 8001efe:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 8001f02:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 8001f06:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0a:	f003 0b03 	and.w	fp, r3, #3
 8001f0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001f12:	f04f 090f 	mov.w	r9, #15
 8001f16:	fa09 f90b 	lsl.w	r9, r9, fp
 8001f1a:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f1e:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 80020b4 <HAL_GPIO_Init+0x278>
 8001f22:	4548      	cmp	r0, r9
 8001f24:	f000 80b0 	beq.w	8002088 <HAL_GPIO_Init+0x24c>
 8001f28:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8001f2c:	4548      	cmp	r0, r9
 8001f2e:	f000 80ae 	beq.w	800208e <HAL_GPIO_Init+0x252>
 8001f32:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8001f36:	4548      	cmp	r0, r9
 8001f38:	f000 80ac 	beq.w	8002094 <HAL_GPIO_Init+0x258>
 8001f3c:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8001f40:	4548      	cmp	r0, r9
 8001f42:	bf14      	ite	ne
 8001f44:	f04f 0904 	movne.w	r9, #4
 8001f48:	f04f 0903 	moveq.w	r9, #3
 8001f4c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001f50:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8001f54:	f8c8 9008 	str.w	r9, [r8, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f58:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001f5c:	f418 1f80 	tst.w	r8, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f60:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 80020b8 <HAL_GPIO_Init+0x27c>
 8001f64:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8001f68:	bf14      	ite	ne
 8001f6a:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6e:	ea28 0807 	biceq.w	r8, r8, r7
 8001f72:	f8c9 8008 	str.w	r8, [r9, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f76:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001f7a:	f418 1f00 	tst.w	r8, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f7e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80020b8 <HAL_GPIO_Init+0x27c>
 8001f82:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8001f86:	bf14      	ite	ne
 8001f88:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f8c:	ea28 0807 	biceq.w	r8, r8, r7
 8001f90:	f8c9 800c 	str.w	r8, [r9, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f94:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001f98:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f9c:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 80020b8 <HAL_GPIO_Init+0x27c>
 8001fa0:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8001fa4:	bf14      	ite	ne
 8001fa6:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001faa:	ea28 0807 	biceq.w	r8, r8, r7
 8001fae:	f8c9 8004 	str.w	r8, [r9, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001fb6:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fba:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80020b8 <HAL_GPIO_Init+0x27c>
 8001fbe:	f8d9 8000 	ldr.w	r8, [r9]
 8001fc2:	bf14      	ite	ne
 8001fc4:	ea48 0707 	orrne.w	r7, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc8:	ea28 0707 	biceq.w	r7, r8, r7
 8001fcc:	f8c9 7000 	str.w	r7, [r9]
        }
      }
    }

	position++;
 8001fd0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	f8d1 9000 	ldr.w	r9, [r1]
 8001fd6:	3204      	adds	r2, #4
 8001fd8:	fa39 f703 	lsrs.w	r7, r9, r3
 8001fdc:	d05d      	beq.n	800209a <HAL_GPIO_Init+0x25e>
    ioposition = (0x01uL << position);
 8001fde:	f04f 0801 	mov.w	r8, #1
 8001fe2:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8001fea:	ea38 0909 	bics.w	r9, r8, r9
 8001fee:	d1ef      	bne.n	8001fd0 <HAL_GPIO_Init+0x194>
      switch (GPIO_Init->Mode)
 8001ff0:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001ff4:	f1b9 0f12 	cmp.w	r9, #18
 8001ff8:	f63f af32 	bhi.w	8001e60 <HAL_GPIO_Init+0x24>
 8001ffc:	f1b9 0f12 	cmp.w	r9, #18
 8002000:	f63f af52 	bhi.w	8001ea8 <HAL_GPIO_Init+0x6c>
 8002004:	f20f 0a04 	addw	sl, pc, #4
 8002008:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 800200c:	08001e81 	.word	0x08001e81
 8002010:	08002059 	.word	0x08002059
 8002014:	08002069 	.word	0x08002069
 8002018:	0800207d 	.word	0x0800207d
 800201c:	08001ea9 	.word	0x08001ea9
 8002020:	08001ea9 	.word	0x08001ea9
 8002024:	08001ea9 	.word	0x08001ea9
 8002028:	08001ea9 	.word	0x08001ea9
 800202c:	08001ea9 	.word	0x08001ea9
 8002030:	08001ea9 	.word	0x08001ea9
 8002034:	08001ea9 	.word	0x08001ea9
 8002038:	08001ea9 	.word	0x08001ea9
 800203c:	08001ea9 	.word	0x08001ea9
 8002040:	08001ea9 	.word	0x08001ea9
 8002044:	08001ea9 	.word	0x08001ea9
 8002048:	08001ea9 	.word	0x08001ea9
 800204c:	08001ea9 	.word	0x08001ea9
 8002050:	0800205f 	.word	0x0800205f
 8002054:	08002073 	.word	0x08002073
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002058:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 800205c:	e724      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800205e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002062:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002066:	e71f      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002068:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800206c:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002070:	e71a      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002072:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002076:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 800207a:	e715      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 800207c:	f04f 0c00 	mov.w	ip, #0
 8002080:	e712      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002082:	f04f 0c04 	mov.w	ip, #4
 8002086:	e70f      	b.n	8001ea8 <HAL_GPIO_Init+0x6c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002088:	f04f 0900 	mov.w	r9, #0
 800208c:	e75e      	b.n	8001f4c <HAL_GPIO_Init+0x110>
 800208e:	f04f 0901 	mov.w	r9, #1
 8002092:	e75b      	b.n	8001f4c <HAL_GPIO_Init+0x110>
 8002094:	f04f 0902 	mov.w	r9, #2
 8002098:	e758      	b.n	8001f4c <HAL_GPIO_Init+0x110>
  }
}
 800209a:	b003      	add	sp, #12
 800209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	10220000 	.word	0x10220000
 80020a8:	10310000 	.word	0x10310000
 80020ac:	10320000 	.word	0x10320000
 80020b0:	10120000 	.word	0x10120000
 80020b4:	40010800 	.word	0x40010800
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020bc:	b10a      	cbz	r2, 80020c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	6101      	str	r1, [r0, #16]
 80020c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020c2:	0409      	lsls	r1, r1, #16
 80020c4:	6101      	str	r1, [r0, #16]
  }
}
 80020c6:	4770      	bx	lr

080020c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d07e      	beq.n	80021ce <HAL_PCD_Init+0x106>
 80020d0:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020d2:	f890 32a9 	ldrb.w	r3, [r0, #681]	@ 0x2a9
 80020d6:	b1eb      	cbz	r3, 8002114 <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d8:	2303      	movs	r3, #3
 80020da:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020de:	6828      	ldr	r0, [r5, #0]
 80020e0:	f001 fbe2 	bl	80038a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020e4:	462c      	mov	r4, r5
 80020e6:	f854 6b10 	ldr.w	r6, [r4], #16
 80020ea:	46ec      	mov	ip, sp
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	f8cc 3000 	str.w	r3, [ip]
 80020f8:	1d2b      	adds	r3, r5, #4
 80020fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fc:	4630      	mov	r0, r6
 80020fe:	f001 fbc3 	bl	8003888 <USB_CoreInit>
 8002102:	4604      	mov	r4, r0
 8002104:	b158      	cbz	r0, 800211e <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002106:	2302      	movs	r3, #2
 8002108:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
    return HAL_ERROR;
 800210c:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800210e:	4620      	mov	r0, r4
 8002110:	b006      	add	sp, #24
 8002112:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002114:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002118:	f003 f9d4 	bl	80054c4 <HAL_PCD_MspInit>
 800211c:	e7dc      	b.n	80020d8 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800211e:	2100      	movs	r1, #0
 8002120:	6828      	ldr	r0, [r5, #0]
 8002122:	f001 fbcb 	bl	80038bc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002126:	6868      	ldr	r0, [r5, #4]
 8002128:	b388      	cbz	r0, 800218e <HAL_PCD_Init+0xc6>
 800212a:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 800212c:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002130:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8002132:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002136:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800213a:	f882 c029 	strb.w	ip, [r2, #41]	@ 0x29
    hpcd->IN_ep[i].num = i;
 800213e:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002142:	f882 102b 	strb.w	r1, [r2, #43]	@ 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8002146:	6391      	str	r1, [r2, #56]	@ 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002148:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800214a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800214e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002152:	6411      	str	r1, [r2, #64]	@ 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	3301      	adds	r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4283      	cmp	r3, r0
 800215a:	d3ea      	bcc.n	8002132 <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 800215c:	2200      	movs	r2, #0
 800215e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002162:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002166:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    hpcd->OUT_ep[i].num = i;
 800216a:	f883 4168 	strb.w	r4, [r3, #360]	@ 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800216e:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002172:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002176:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800217a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800217e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002182:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002186:	3401      	adds	r4, #1
 8002188:	b2e4      	uxtb	r4, r4
 800218a:	4284      	cmp	r4, r0
 800218c:	d3e7      	bcc.n	800215e <HAL_PCD_Init+0x96>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218e:	462c      	mov	r4, r5
 8002190:	f854 6b10 	ldr.w	r6, [r4], #16
 8002194:	46ec      	mov	ip, sp
 8002196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	f8cc 3000 	str.w	r3, [ip]
 80021a2:	1d2b      	adds	r3, r5, #4
 80021a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a6:	4630      	mov	r0, r6
 80021a8:	f001 fb8a 	bl	80038c0 <USB_DevInit>
 80021ac:	4604      	mov	r4, r0
 80021ae:	b120      	cbz	r0, 80021ba <HAL_PCD_Init+0xf2>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b0:	2302      	movs	r3, #2
 80021b2:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
    return HAL_ERROR;
 80021b6:	2401      	movs	r4, #1
 80021b8:	e7a9      	b.n	800210e <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80021c6:	6828      	ldr	r0, [r5, #0]
 80021c8:	f001 feb9 	bl	8003f3e <USB_DevDisconnect>
  return HAL_OK;
 80021cc:	e79f      	b.n	800210e <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 80021ce:	2401      	movs	r4, #1
 80021d0:	e79d      	b.n	800210e <HAL_PCD_Init+0x46>

080021d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021d2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80021d4:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d011      	beq.n	8002200 <HAL_PCD_Start+0x2e>
 80021dc:	4604      	mov	r4, r0
 80021de:	2501      	movs	r5, #1
 80021e0:	f880 52a8 	strb.w	r5, [r0, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80021e4:	6800      	ldr	r0, [r0, #0]
 80021e6:	f001 fb56 	bl	8003896 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80021ea:	4629      	mov	r1, r5
 80021ec:	4620      	mov	r0, r4
 80021ee:	f003 fa7e 	bl	80056ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80021f2:	6820      	ldr	r0, [r4, #0]
 80021f4:	f001 fea1 	bl	8003f3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8

  return HAL_OK;
}
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002200:	2002      	movs	r0, #2
 8002202:	e7fc      	b.n	80021fe <HAL_PCD_Start+0x2c>

08002204 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002204:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 8002208:	2b01      	cmp	r3, #1
 800220a:	d00d      	beq.n	8002228 <HAL_PCD_SetAddress+0x24>
{
 800220c:	b510      	push	{r4, lr}
 800220e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002210:	2301      	movs	r3, #1
 8002212:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002216:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800221a:	6800      	ldr	r0, [r0, #0]
 800221c:	f001 fe87 	bl	8003f2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002220:	2000      	movs	r0, #0
 8002222:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8

  return HAL_OK;
}
 8002226:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002228:	2002      	movs	r0, #2
}
 800222a:	4770      	bx	lr

0800222c <HAL_PCD_IRQHandler>:
{
 800222c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002234:	6800      	ldr	r0, [r0, #0]
 8002236:	f001 fe84 	bl	8003f42 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800223a:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800223e:	d126      	bne.n	800228e <HAL_PCD_IRQHandler+0x62>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002240:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8002244:	f040 84da 	bne.w	8002bfc <HAL_PCD_IRQHandler+0x9d0>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002248:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 800224c:	f040 84e7 	bne.w	8002c1e <HAL_PCD_IRQHandler+0x9f2>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002250:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8002254:	f040 84ef 	bne.w	8002c36 <HAL_PCD_IRQHandler+0xa0a>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002258:	f410 5380 	ands.w	r3, r0, #4096	@ 0x1000
 800225c:	f040 84f5 	bne.w	8002c4a <HAL_PCD_IRQHandler+0xa1e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002260:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8002264:	f040 8510 	bne.w	8002c88 <HAL_PCD_IRQHandler+0xa5c>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002268:	f410 7f00 	tst.w	r0, #512	@ 0x200
 800226c:	f040 855b 	bne.w	8002d26 <HAL_PCD_IRQHandler+0xafa>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002270:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002274:	f000 84dc 	beq.w	8002c30 <HAL_PCD_IRQHandler+0xa04>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002278:	682a      	ldr	r2, [r5, #0]
 800227a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800227e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 800228a:	f000 bcd1 	b.w	8002c30 <HAL_PCD_IRQHandler+0xa04>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800228e:	6828      	ldr	r0, [r5, #0]
 8002290:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8002294:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002298:	f000 84ca 	beq.w	8002c30 <HAL_PCD_IRQHandler+0xa04>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800229c:	f640 768f 	movw	r6, #3983	@ 0xf8f
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022a0:	f505 782c 	add.w	r8, r5, #688	@ 0x2b0
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022a4:	2700      	movs	r7, #0
 80022a6:	e055      	b.n	8002354 <HAL_PCD_IRQHandler+0x128>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022a8:	8803      	ldrh	r3, [r0, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80022b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022c0:	682a      	ldr	r2, [r5, #0]
 80022c2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 80022cc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80022d0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80022d4:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	@ 0x404
 80022d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022dc:	646b      	str	r3, [r5, #68]	@ 0x44
        ep->xfer_buff += ep->xfer_count;
 80022de:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80022e0:	441a      	add	r2, r3
 80022e2:	63ea      	str	r2, [r5, #60]	@ 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022e4:	4639      	mov	r1, r7
 80022e6:	4628      	mov	r0, r5
 80022e8:	f003 f920 	bl	800552c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ec:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80022f0:	b34b      	cbz	r3, 8002346 <HAL_PCD_IRQHandler+0x11a>
 80022f2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80022f4:	bb3b      	cbnz	r3, 8002346 <HAL_PCD_IRQHandler+0x11a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022f6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80022fa:	682a      	ldr	r2, [r5, #0]
 80022fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002300:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
 800230a:	e01c      	b.n	8002346 <HAL_PCD_IRQHandler+0x11a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800230c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 8002316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800231a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800231e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8002322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002326:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800232a:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 800232e:	4641      	mov	r1, r8
 8002330:	f002 f97f 	bl	8004632 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002334:	682a      	ldr	r2, [r5, #0]
 8002336:	8813      	ldrh	r3, [r2, #0]
 8002338:	4033      	ands	r3, r6
 800233a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800233e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002340:	4628      	mov	r0, r5
 8002342:	f003 f8df 	bl	8005504 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002346:	6828      	ldr	r0, [r5, #0]
 8002348:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800234c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002350:	f000 846e 	beq.w	8002c30 <HAL_PCD_IRQHandler+0xa04>
    wIstr = hpcd->Instance->ISTR;
 8002354:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 8002358:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800235a:	f014 040f 	ands.w	r4, r4, #15
 800235e:	f040 8082 	bne.w	8002466 <HAL_PCD_IRQHandler+0x23a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002362:	f013 0f10 	tst.w	r3, #16
 8002366:	d09f      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x7c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002368:	8803      	ldrh	r3, [r0, #0]
 800236a:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800236c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002370:	d1cc      	bne.n	800230c <HAL_PCD_IRQHandler+0xe0>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002372:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002376:	d0e6      	beq.n	8002346 <HAL_PCD_IRQHandler+0x11a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002378:	8803      	ldrh	r3, [r0, #0]
 800237a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800237e:	051b      	lsls	r3, r3, #20
 8002380:	0d1b      	lsrs	r3, r3, #20
 8002382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002386:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002388:	6828      	ldr	r0, [r5, #0]
 800238a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800238e:	b29b      	uxth	r3, r3
 8002390:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 8002394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002398:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800239c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 80023a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a4:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023a8:	b18b      	cbz	r3, 80023ce <HAL_PCD_IRQHandler+0x1a2>
 80023aa:	f8d5 117c 	ldr.w	r1, [r5, #380]	@ 0x17c
 80023ae:	b171      	cbz	r1, 80023ce <HAL_PCD_IRQHandler+0x1a2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023b0:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 80023b4:	f002 f93d 	bl	8004632 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80023b8:	f8d5 317c 	ldr.w	r3, [r5, #380]	@ 0x17c
 80023bc:	f8d5 2184 	ldr.w	r2, [r5, #388]	@ 0x184
 80023c0:	4413      	add	r3, r2
 80023c2:	f8c5 317c 	str.w	r3, [r5, #380]	@ 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023c6:	2100      	movs	r1, #0
 80023c8:	4628      	mov	r0, r5
 80023ca:	f003 f8a3 	bl	8005514 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023ce:	682a      	ldr	r2, [r5, #0]
 80023d0:	8813      	ldrh	r3, [r2, #0]
 80023d2:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80023d4:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80023d8:	d1b5      	bne.n	8002346 <HAL_PCD_IRQHandler+0x11a>
 80023da:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 80023de:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80023e2:	d0b0      	beq.n	8002346 <HAL_PCD_IRQHandler+0x11a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023e4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 80023ee:	5ad1      	ldrh	r1, [r2, r3]
 80023f0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80023f4:	52d1      	strh	r1, [r2, r3]
 80023f6:	f8d5 1178 	ldr.w	r1, [r5, #376]	@ 0x178
 80023fa:	293e      	cmp	r1, #62	@ 0x3e
 80023fc:	d91e      	bls.n	800243c <HAL_PCD_IRQHandler+0x210>
 80023fe:	0948      	lsrs	r0, r1, #5
 8002400:	f011 0f1f 	tst.w	r1, #31
 8002404:	bf08      	it	eq
 8002406:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800240a:	5ad1      	ldrh	r1, [r2, r3]
 800240c:	b289      	uxth	r1, r1
 800240e:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8002412:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002416:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800241a:	b289      	uxth	r1, r1
 800241c:	52d1      	strh	r1, [r2, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800241e:	682a      	ldr	r2, [r5, #0]
 8002420:	8813      	ldrh	r3, [r2, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800242c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002438:	8013      	strh	r3, [r2, #0]
 800243a:	e784      	b.n	8002346 <HAL_PCD_IRQHandler+0x11a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800243c:	b939      	cbnz	r1, 800244e <HAL_PCD_IRQHandler+0x222>
 800243e:	5ad1      	ldrh	r1, [r2, r3]
 8002440:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002444:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002448:	b289      	uxth	r1, r1
 800244a:	52d1      	strh	r1, [r2, r3]
 800244c:	e7e7      	b.n	800241e <HAL_PCD_IRQHandler+0x1f2>
 800244e:	0848      	lsrs	r0, r1, #1
 8002450:	f011 0f01 	tst.w	r1, #1
 8002454:	bf18      	it	ne
 8002456:	3001      	addne	r0, #1
 8002458:	5ad1      	ldrh	r1, [r2, r3]
 800245a:	b289      	uxth	r1, r1
 800245c:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8002460:	b289      	uxth	r1, r1
 8002462:	52d1      	strh	r1, [r2, r3]
 8002464:	e7db      	b.n	800241e <HAL_PCD_IRQHandler+0x1f2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002466:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800246a:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800246e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002472:	d152      	bne.n	800251a <HAL_PCD_IRQHandler+0x2ee>
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002474:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8002478:	f43f af65 	beq.w	8002346 <HAL_PCD_IRQHandler+0x11a>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800247c:	682a      	ldr	r2, [r5, #0]
 800247e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800248c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002494:	b29b      	uxth	r3, r3
 8002496:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]

        if (ep->type == EP_TYPE_ISOC)
 800249a:	eb04 0a84 	add.w	sl, r4, r4, lsl #2
 800249e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80024a2:	f89a 302b 	ldrb.w	r3, [sl, #43]	@ 0x2b
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	f000 818b 	beq.w	80027c2 <HAL_PCD_IRQHandler+0x596>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80024ac:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80024b0:	f040 81e4 	bne.w	800287c <HAL_PCD_IRQHandler+0x650>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024b4:	6828      	ldr	r0, [r5, #0]
 80024b6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28

            if (ep->xfer_len > TxPctSize)
 80024c0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80024c4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80024c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024ca:	3302      	adds	r3, #2
 80024cc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80024d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80024d4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
            if (ep->xfer_len > TxPctSize)
 80024d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024dc:	429a      	cmp	r2, r3
 80024de:	f240 842f 	bls.w	8002d40 <HAL_PCD_IRQHandler+0xb14>
            {
              ep->xfer_len -= TxPctSize;
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80024e8:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80024ec:	f8cc 2040 	str.w	r2, [ip, #64]	@ 0x40
            {
              ep->xfer_len = 0U;
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	f000 842b 	beq.w	8002d4c <HAL_PCD_IRQHandler+0xb20>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80024f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80024fa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80024fe:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002500:	4419      	add	r1, r3
 8002502:	63d1      	str	r1, [r2, #60]	@ 0x3c
              ep->xfer_count += TxPctSize;
 8002504:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002506:	440b      	add	r3, r1
 8002508:	6453      	str	r3, [r2, #68]	@ 0x44
        ep = &hpcd->IN_ep[epindex];
 800250a:	3401      	adds	r4, #1
 800250c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002510:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8002514:	f001 fd32 	bl	8003f7c <USB_EPStartXfer>
 8002518:	e715      	b.n	8002346 <HAL_PCD_IRQHandler+0x11a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800251a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800251e:	4033      	ands	r3, r6
 8002520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002524:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8002528:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800252c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002530:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8002534:	2b00      	cmp	r3, #0
 8002536:	d145      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x398>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002538:	6828      	ldr	r0, [r5, #0]
 800253a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002544:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002548:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 800254c:	3306      	adds	r3, #6
 800254e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002552:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002556:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 800255a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 800255e:	f1ba 0f00 	cmp.w	sl, #0
 8002562:	d123      	bne.n	80025ac <HAL_PCD_IRQHandler+0x380>
        ep->xfer_count += count;
 8002564:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002568:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800256c:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8002570:	4452      	add	r2, sl
 8002572:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ep->xfer_buff += count;
 8002576:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800257a:	4452      	add	r2, sl
 800257c:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002580:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8002584:	b143      	cbz	r3, 8002598 <HAL_PCD_IRQHandler+0x36c>
 8002586:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800258a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800258e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002592:	459a      	cmp	sl, r3
 8002594:	f080 810b 	bcs.w	80027ae <HAL_PCD_IRQHandler+0x582>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002598:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800259c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80025a0:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 80025a4:	4628      	mov	r0, r5
 80025a6:	f002 ffb5 	bl	8005514 <HAL_PCD_DataOutStageCallback>
 80025aa:	e763      	b.n	8002474 <HAL_PCD_IRQHandler+0x248>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025ac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80025b0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80025b4:	4653      	mov	r3, sl
 80025b6:	f8b1 216e 	ldrh.w	r2, [r1, #366]	@ 0x16e
 80025ba:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 80025be:	f002 f838 	bl	8004632 <USB_ReadPMA>
 80025c2:	e7cf      	b.n	8002564 <HAL_PCD_IRQHandler+0x338>
          if (ep->type == EP_TYPE_BULK)
 80025c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80025c8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80025cc:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d037      	beq.n	8002644 <HAL_PCD_IRQHandler+0x418>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025d4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80025d8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80025dc:	f892 0168 	ldrb.w	r0, [r2, #360]	@ 0x168
 80025e0:	6829      	ldr	r1, [r5, #0]
 80025e2:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025f8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025fc:	6828      	ldr	r0, [r5, #0]
 80025fe:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 8002602:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002606:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800260a:	f000 80b4 	beq.w	8002776 <HAL_PCD_IRQHandler+0x54a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800260e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	3302      	adds	r3, #2
 8002616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800261a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800261e:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 8002622:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002626:	f1ba 0f00 	cmp.w	sl, #0
 800262a:	d09b      	beq.n	8002564 <HAL_PCD_IRQHandler+0x338>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800262c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002630:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002634:	4653      	mov	r3, sl
 8002636:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 800263a:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 800263e:	f001 fff8 	bl	8004632 <USB_ReadPMA>
 8002642:	e78f      	b.n	8002564 <HAL_PCD_IRQHandler+0x338>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002644:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 8002648:	d04a      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x4b4>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800264a:	682a      	ldr	r2, [r5, #0]
 800264c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002650:	b29b      	uxth	r3, r3
 8002652:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002656:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800265a:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 800265e:	3302      	adds	r3, #2
 8002660:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002664:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002668:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 800266c:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8002670:	f8d0 3180 	ldr.w	r3, [r0, #384]	@ 0x180
 8002674:	4553      	cmp	r3, sl
 8002676:	f0c0 8410 	bcc.w	8002e9a <HAL_PCD_IRQHandler+0xc6e>
    {
      ep->xfer_len -= count;
 800267a:	eba3 030a 	sub.w	r3, r3, sl
 800267e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002682:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002686:	f8c0 3180 	str.w	r3, [r0, #384]	@ 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 840c 	beq.w	8002ea8 <HAL_PCD_IRQHandler+0xc7c>
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002690:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8002694:	d013      	beq.n	80026be <HAL_PCD_IRQHandler+0x492>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002696:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800269a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800269e:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 80026a2:	682a      	ldr	r2, [r5, #0]
 80026a4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026ba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }

    if (count != 0U)
 80026be:	f1ba 0f00 	cmp.w	sl, #0
 80026c2:	f43f af4f 	beq.w	8002564 <HAL_PCD_IRQHandler+0x338>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026c6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80026ca:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80026ce:	4653      	mov	r3, sl
 80026d0:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 80026d4:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 80026d8:	6828      	ldr	r0, [r5, #0]
 80026da:	f001 ffaa 	bl	8004632 <USB_ReadPMA>
 80026de:	e741      	b.n	8002564 <HAL_PCD_IRQHandler+0x338>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026e0:	682a      	ldr	r2, [r5, #0]
 80026e2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80026ec:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80026f0:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 80026f4:	3306      	adds	r3, #6
 80026f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80026fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80026fe:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 8002702:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8002706:	f8d0 3180 	ldr.w	r3, [r0, #384]	@ 0x180
 800270a:	4553      	cmp	r3, sl
 800270c:	f0c0 83dd 	bcc.w	8002eca <HAL_PCD_IRQHandler+0xc9e>
    {
      ep->xfer_len -= count;
 8002710:	eba3 030a 	sub.w	r3, r3, sl
 8002714:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002718:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800271c:	f8c0 3180 	str.w	r3, [r0, #384]	@ 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 83d9 	beq.w	8002ed8 <HAL_PCD_IRQHandler+0xcac>
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002726:	f019 0f40 	tst.w	r9, #64	@ 0x40
 800272a:	d113      	bne.n	8002754 <HAL_PCD_IRQHandler+0x528>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800272c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002730:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002734:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 8002738:	682a      	ldr	r2, [r5, #0]
 800273a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800274c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002750:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }

    if (count != 0U)
 8002754:	f1ba 0f00 	cmp.w	sl, #0
 8002758:	f43f af04 	beq.w	8002564 <HAL_PCD_IRQHandler+0x338>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800275c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002760:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002764:	4653      	mov	r3, sl
 8002766:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 800276a:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 800276e:	6828      	ldr	r0, [r5, #0]
 8002770:	f001 ff5f 	bl	8004632 <USB_ReadPMA>
 8002774:	e6f6      	b.n	8002564 <HAL_PCD_IRQHandler+0x338>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002776:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	3306      	adds	r3, #6
 800277e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002782:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002786:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 800278a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 800278e:	f1ba 0f00 	cmp.w	sl, #0
 8002792:	f43f aee7 	beq.w	8002564 <HAL_PCD_IRQHandler+0x338>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002796:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800279a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800279e:	4653      	mov	r3, sl
 80027a0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 80027a4:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 80027a8:	f001 ff43 	bl	8004632 <USB_ReadPMA>
 80027ac:	e6da      	b.n	8002564 <HAL_PCD_IRQHandler+0x338>
        ep = &hpcd->OUT_ep[epindex];
 80027ae:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80027b2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027b6:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 80027ba:	6828      	ldr	r0, [r5, #0]
 80027bc:	f001 fbde 	bl	8003f7c <USB_EPStartXfer>
 80027c0:	e658      	b.n	8002474 <HAL_PCD_IRQHandler+0x248>
          ep->xfer_len = 0U;
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8ca 2040 	str.w	r2, [sl, #64]	@ 0x40
          if (ep->doublebuffer != 0U)
 80027c8:	f89a 3034 	ldrb.w	r3, [sl, #52]	@ 0x34
 80027cc:	b1d3      	cbz	r3, 8002804 <HAL_PCD_IRQHandler+0x5d8>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ce:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80027d2:	d02c      	beq.n	800282e <HAL_PCD_IRQHandler+0x602>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027d4:	f89a 3029 	ldrb.w	r3, [sl, #41]	@ 0x29
 80027d8:	b9d3      	cbnz	r3, 8002810 <HAL_PCD_IRQHandler+0x5e4>
 80027da:	682b      	ldr	r3, [r5, #0]
 80027dc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80027e0:	b292      	uxth	r2, r2
 80027e2:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 80027e6:	0109      	lsls	r1, r1, #4
 80027e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027ec:	4413      	add	r3, r2
 80027ee:	5aca      	ldrh	r2, [r1, r3]
 80027f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80027f4:	52ca      	strh	r2, [r1, r3]
 80027f6:	5aca      	ldrh	r2, [r1, r3]
 80027f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80027fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002800:	b292      	uxth	r2, r2
 8002802:	52ca      	strh	r2, [r1, r3]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002804:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002808:	4628      	mov	r0, r5
 800280a:	f002 fe8f 	bl	800552c <HAL_PCD_DataInStageCallback>
 800280e:	e59a      	b.n	8002346 <HAL_PCD_IRQHandler+0x11a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002810:	2b01      	cmp	r3, #1
 8002812:	d1f7      	bne.n	8002804 <HAL_PCD_IRQHandler+0x5d8>
 8002814:	682b      	ldr	r3, [r5, #0]
 8002816:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800281a:	b289      	uxth	r1, r1
 800281c:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002826:	440b      	add	r3, r1
 8002828:	2100      	movs	r1, #0
 800282a:	52d1      	strh	r1, [r2, r3]
 800282c:	e7ea      	b.n	8002804 <HAL_PCD_IRQHandler+0x5d8>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800282e:	682b      	ldr	r3, [r5, #0]
 8002830:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 8002834:	b9a2      	cbnz	r2, 8002860 <HAL_PCD_IRQHandler+0x634>
 8002836:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800283a:	b292      	uxth	r2, r2
 800283c:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002840:	0109      	lsls	r1, r1, #4
 8002842:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002846:	441a      	add	r2, r3
 8002848:	5a8b      	ldrh	r3, [r1, r2]
 800284a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800284e:	528b      	strh	r3, [r1, r2]
 8002850:	5a8b      	ldrh	r3, [r1, r2]
 8002852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285a:	b29b      	uxth	r3, r3
 800285c:	528b      	strh	r3, [r1, r2]
 800285e:	e7d1      	b.n	8002804 <HAL_PCD_IRQHandler+0x5d8>
 8002860:	2a01      	cmp	r2, #1
 8002862:	d1cf      	bne.n	8002804 <HAL_PCD_IRQHandler+0x5d8>
 8002864:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002868:	b289      	uxth	r1, r1
 800286a:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002874:	440b      	add	r3, r1
 8002876:	2100      	movs	r1, #0
 8002878:	52d1      	strh	r1, [r2, r3]
 800287a:	e7c3      	b.n	8002804 <HAL_PCD_IRQHandler+0x5d8>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800287c:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8002880:	f000 80e7 	beq.w	8002a52 <HAL_PCD_IRQHandler+0x826>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002884:	682a      	ldr	r2, [r5, #0]
 8002886:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 800288a:	b29b      	uxth	r3, r3
 800288c:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28

    if (ep->xfer_len > TxPctSize)
 8002890:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002894:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002898:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800289a:	3302      	adds	r3, #2
 800289c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80028a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80028a4:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	@ 0x400
    if (ep->xfer_len > TxPctSize)
 80028a8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80028ac:	4560      	cmp	r0, ip
 80028ae:	f240 8252 	bls.w	8002d56 <HAL_PCD_IRQHandler+0xb2a>
    {
      ep->xfer_len -= TxPctSize;
 80028b2:	eba0 000c 	sub.w	r0, r0, ip
 80028b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028ba:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80028be:	6418      	str	r0, [r3, #64]	@ 0x40
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028c0:	2800      	cmp	r0, #0
 80028c2:	f000 824e 	beq.w	8002d62 <HAL_PCD_IRQHandler+0xb36>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028c6:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 80028ca:	d00c      	beq.n	80028e6 <HAL_PCD_IRQHandler+0x6ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028e6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028ea:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80028ee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d02e      	beq.n	8002954 <HAL_PCD_IRQHandler+0x728>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028f6:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 80028fa:	682a      	ldr	r2, [r5, #0]
 80028fc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002900:	b29b      	uxth	r3, r3
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800290a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800290e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002916:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800291a:	e514      	b.n	8002346 <HAL_PCD_IRQHandler+0x11a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800291c:	2b01      	cmp	r3, #1
 800291e:	f040 8251 	bne.w	8002dc4 <HAL_PCD_IRQHandler+0xb98>
 8002922:	f8b2 0050 	ldrh.w	r0, [r2, #80]	@ 0x50
 8002926:	b280      	uxth	r0, r0
 8002928:	f202 4304 	addw	r3, r2, #1028	@ 0x404
 800292c:	4403      	add	r3, r0
 800292e:	0109      	lsls	r1, r1, #4
 8002930:	2200      	movs	r2, #0
 8002932:	525a      	strh	r2, [r3, r1]
 8002934:	e22c      	b.n	8002d90 <HAL_PCD_IRQHandler+0xb64>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002936:	2a01      	cmp	r2, #1
 8002938:	f040 8244 	bne.w	8002dc4 <HAL_PCD_IRQHandler+0xb98>
 800293c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002940:	b292      	uxth	r2, r2
 8002942:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002946:	4413      	add	r3, r2
 8002948:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	2100      	movs	r1, #0
 8002950:	5299      	strh	r1, [r3, r2]
 8002952:	e237      	b.n	8002dc4 <HAL_PCD_IRQHandler+0xb98>
        ep->xfer_buff += TxPctSize;
 8002954:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002958:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800295c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800295e:	4462      	add	r2, ip
 8002960:	63da      	str	r2, [r3, #60]	@ 0x3c
        ep->xfer_count += TxPctSize;
 8002962:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002964:	4462      	add	r2, ip
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002968:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800296a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296c:	429a      	cmp	r2, r3
 800296e:	d32b      	bcc.n	80029c8 <HAL_PCD_IRQHandler+0x79c>
          ep->xfer_len_db -= len;
 8002970:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002974:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002978:	1ad2      	subs	r2, r2, r3
 800297a:	648a      	str	r2, [r1, #72]	@ 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800297c:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 8002980:	2a00      	cmp	r2, #0
 8002982:	d14b      	bne.n	8002a1c <HAL_PCD_IRQHandler+0x7f0>
 8002984:	682a      	ldr	r2, [r5, #0]
 8002986:	f8b2 0050 	ldrh.w	r0, [r2, #80]	@ 0x50
 800298a:	b280      	uxth	r0, r0
 800298c:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002990:	0109      	lsls	r1, r1, #4
 8002992:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8002996:	4402      	add	r2, r0
 8002998:	5a88      	ldrh	r0, [r1, r2]
 800299a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800299e:	5288      	strh	r0, [r1, r2]
 80029a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80029a2:	d924      	bls.n	80029ee <HAL_PCD_IRQHandler+0x7c2>
 80029a4:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 80029a8:	f013 0f1f 	tst.w	r3, #31
 80029ac:	bf08      	it	eq
 80029ae:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80029b2:	5a88      	ldrh	r0, [r1, r2]
 80029b4:	b280      	uxth	r0, r0
 80029b6:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80029ba:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80029be:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80029c2:	b280      	uxth	r0, r0
 80029c4:	5288      	strh	r0, [r1, r2]
 80029c6:	e02b      	b.n	8002a20 <HAL_PCD_IRQHandler+0x7f4>
        else if (ep->xfer_len_db == 0U)
 80029c8:	b93a      	cbnz	r2, 80029da <HAL_PCD_IRQHandler+0x7ae>
          ep->xfer_fill_db = 0U;
 80029ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80029ce:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80029d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          len = TxPctSize;
 80029d6:	4663      	mov	r3, ip
 80029d8:	e7d0      	b.n	800297c <HAL_PCD_IRQHandler+0x750>
          ep->xfer_fill_db = 0U;
 80029da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80029de:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80029e2:	2100      	movs	r1, #0
 80029e4:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
          ep->xfer_len_db = 0U;
 80029e8:	6499      	str	r1, [r3, #72]	@ 0x48
          len = ep->xfer_len_db;
 80029ea:	4613      	mov	r3, r2
 80029ec:	e7c6      	b.n	800297c <HAL_PCD_IRQHandler+0x750>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029ee:	b93b      	cbnz	r3, 8002a00 <HAL_PCD_IRQHandler+0x7d4>
 80029f0:	5a88      	ldrh	r0, [r1, r2]
 80029f2:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80029f6:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80029fa:	b280      	uxth	r0, r0
 80029fc:	5288      	strh	r0, [r1, r2]
 80029fe:	e00f      	b.n	8002a20 <HAL_PCD_IRQHandler+0x7f4>
 8002a00:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8002a04:	f013 0f01 	tst.w	r3, #1
 8002a08:	bf18      	it	ne
 8002a0a:	f10c 0c01 	addne.w	ip, ip, #1
 8002a0e:	5a88      	ldrh	r0, [r1, r2]
 8002a10:	b280      	uxth	r0, r0
 8002a12:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8002a16:	b280      	uxth	r0, r0
 8002a18:	5288      	strh	r0, [r1, r2]
 8002a1a:	e001      	b.n	8002a20 <HAL_PCD_IRQHandler+0x7f4>
 8002a1c:	2a01      	cmp	r2, #1
 8002a1e:	d00b      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x80c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a20:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002a24:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002a28:	4611      	mov	r1, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8002a2e:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8002a30:	6828      	ldr	r0, [r5, #0]
 8002a32:	f001 fa8c 	bl	8003f4e <USB_WritePMA>
 8002a36:	e75e      	b.n	80028f6 <HAL_PCD_IRQHandler+0x6ca>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a38:	682a      	ldr	r2, [r5, #0]
 8002a3a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8002a3e:	b289      	uxth	r1, r1
 8002a40:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8002a44:	440a      	add	r2, r1
 8002a46:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002a4a:	0109      	lsls	r1, r1, #4
 8002a4c:	b298      	uxth	r0, r3
 8002a4e:	5250      	strh	r0, [r2, r1]
 8002a50:	e7e6      	b.n	8002a20 <HAL_PCD_IRQHandler+0x7f4>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a52:	682a      	ldr	r2, [r5, #0]
 8002a54:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f89a 0028 	ldrb.w	r0, [sl, #40]	@ 0x28
    if (ep->xfer_len >= TxPctSize)
 8002a5e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002a62:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002a66:	f8d1 c040 	ldr.w	ip, [r1, #64]	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a6a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002a6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002a72:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
    if (ep->xfer_len >= TxPctSize)
 8002a76:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002a7a:	458c      	cmp	ip, r1
 8002a7c:	f0c0 81bc 	bcc.w	8002df8 <HAL_PCD_IRQHandler+0xbcc>
      ep->xfer_len -= TxPctSize;
 8002a80:	ebac 0301 	sub.w	r3, ip, r1
 8002a84:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8002a88:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8002a8c:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
    if (ep->xfer_len == 0U)
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 81b7 	beq.w	8002e04 <HAL_PCD_IRQHandler+0xbd8>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a96:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_PCD_IRQHandler+0x88a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a9c:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab2:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002ab6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002aba:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002abe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	f47f af17 	bne.w	80028f6 <HAL_PCD_IRQHandler+0x6ca>
        ep->xfer_buff += TxPctSize;
 8002ac8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002acc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ad2:	440a      	add	r2, r1
 8002ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
        ep->xfer_count += TxPctSize;
 8002ad6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ad8:	440a      	add	r2, r1
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002adc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d347      	bcc.n	8002b74 <HAL_PCD_IRQHandler+0x948>
          ep->xfer_len_db -= len;
 8002ae4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002ae8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	648a      	str	r2, [r1, #72]	@ 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002af0:	682a      	ldr	r2, [r5, #0]
 8002af2:	f89a 1029 	ldrb.w	r1, [sl, #41]	@ 0x29
 8002af6:	2900      	cmp	r1, #0
 8002af8:	d166      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x99c>
 8002afa:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8002afe:	b289      	uxth	r1, r1
 8002b00:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 8002b04:	440a      	add	r2, r1
 8002b06:	f89a 0028 	ldrb.w	r0, [sl, #40]	@ 0x28
 8002b0a:	0100      	lsls	r0, r0, #4
 8002b0c:	5a11      	ldrh	r1, [r2, r0]
 8002b0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002b12:	5211      	strh	r1, [r2, r0]
 8002b14:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b16:	d940      	bls.n	8002b9a <HAL_PCD_IRQHandler+0x96e>
 8002b18:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8002b1c:	f013 0f1f 	tst.w	r3, #31
 8002b20:	bf08      	it	eq
 8002b22:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002b26:	5a11      	ldrh	r1, [r2, r0]
 8002b28:	b289      	uxth	r1, r1
 8002b2a:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 8002b2e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002b32:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b36:	b289      	uxth	r1, r1
 8002b38:	5211      	strh	r1, [r2, r0]
 8002b3a:	e047      	b.n	8002bcc <HAL_PCD_IRQHandler+0x9a0>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f040 8192 	bne.w	8002e66 <HAL_PCD_IRQHandler+0xc3a>
 8002b42:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8002b46:	b289      	uxth	r1, r1
 8002b48:	f202 4304 	addw	r3, r2, #1028	@ 0x404
 8002b4c:	440b      	add	r3, r1
 8002b4e:	0100      	lsls	r0, r0, #4
 8002b50:	2200      	movs	r2, #0
 8002b52:	521a      	strh	r2, [r3, r0]
 8002b54:	e16d      	b.n	8002e32 <HAL_PCD_IRQHandler+0xc06>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b56:	2a01      	cmp	r2, #1
 8002b58:	f040 8185 	bne.w	8002e66 <HAL_PCD_IRQHandler+0xc3a>
 8002b5c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002b60:	b289      	uxth	r1, r1
 8002b62:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b6c:	440b      	add	r3, r1
 8002b6e:	2100      	movs	r1, #0
 8002b70:	52d1      	strh	r1, [r2, r3]
 8002b72:	e178      	b.n	8002e66 <HAL_PCD_IRQHandler+0xc3a>
        else if (ep->xfer_len_db == 0U)
 8002b74:	b93a      	cbnz	r2, 8002b86 <HAL_PCD_IRQHandler+0x95a>
          ep->xfer_fill_db = 0U;
 8002b76:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002b7a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002b7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          len = TxPctSize;
 8002b82:	460b      	mov	r3, r1
 8002b84:	e7b4      	b.n	8002af0 <HAL_PCD_IRQHandler+0x8c4>
          ep->xfer_len_db = 0U;
 8002b86:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002b8a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002b8e:	2100      	movs	r1, #0
 8002b90:	6499      	str	r1, [r3, #72]	@ 0x48
          ep->xfer_fill_db = 0;
 8002b92:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
          len = ep->xfer_len_db;
 8002b96:	4613      	mov	r3, r2
 8002b98:	e7aa      	b.n	8002af0 <HAL_PCD_IRQHandler+0x8c4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b9a:	b93b      	cbnz	r3, 8002bac <HAL_PCD_IRQHandler+0x980>
 8002b9c:	5a11      	ldrh	r1, [r2, r0]
 8002b9e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002ba2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002ba6:	b289      	uxth	r1, r1
 8002ba8:	5211      	strh	r1, [r2, r0]
 8002baa:	e00f      	b.n	8002bcc <HAL_PCD_IRQHandler+0x9a0>
 8002bac:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8002bb0:	f013 0f01 	tst.w	r3, #1
 8002bb4:	bf18      	it	ne
 8002bb6:	f10c 0c01 	addne.w	ip, ip, #1
 8002bba:	5a11      	ldrh	r1, [r2, r0]
 8002bbc:	b289      	uxth	r1, r1
 8002bbe:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 8002bc2:	b289      	uxth	r1, r1
 8002bc4:	5211      	strh	r1, [r2, r0]
 8002bc6:	e001      	b.n	8002bcc <HAL_PCD_IRQHandler+0x9a0>
 8002bc8:	2901      	cmp	r1, #1
 8002bca:	d00b      	beq.n	8002be4 <HAL_PCD_IRQHandler+0x9b8>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bcc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002bd0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8002bda:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8002bdc:	6828      	ldr	r0, [r5, #0]
 8002bde:	f001 f9b6 	bl	8003f4e <USB_WritePMA>
 8002be2:	e688      	b.n	80028f6 <HAL_PCD_IRQHandler+0x6ca>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002be4:	f8b2 0050 	ldrh.w	r0, [r2, #80]	@ 0x50
 8002be8:	b280      	uxth	r0, r0
 8002bea:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002bee:	0109      	lsls	r1, r1, #4
 8002bf0:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 8002bf4:	4402      	add	r2, r0
 8002bf6:	b298      	uxth	r0, r3
 8002bf8:	5288      	strh	r0, [r1, r2]
 8002bfa:	e7e7      	b.n	8002bcc <HAL_PCD_IRQHandler+0x9a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bfc:	682a      	ldr	r2, [r5, #0]
 8002bfe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f002 fc9d 	bl	800554e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c14:	2100      	movs	r1, #0
 8002c16:	4628      	mov	r0, r5
 8002c18:	f7ff faf4 	bl	8002204 <HAL_PCD_SetAddress>
    return;
 8002c1c:	e008      	b.n	8002c30 <HAL_PCD_IRQHandler+0xa04>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c1e:	682a      	ldr	r2, [r5, #0]
 8002c20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002c24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8002c30:	b004      	add	sp, #16
 8002c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c36:	682a      	ldr	r2, [r5, #0]
 8002c38:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002c3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8002c48:	e7f2      	b.n	8002c30 <HAL_PCD_IRQHandler+0xa04>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c4a:	682a      	ldr	r2, [r5, #0]
 8002c4c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c5c:	682a      	ldr	r2, [r5, #0]
 8002c5e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002c62:	f023 0308 	bic.w	r3, r3, #8
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f002 fc90 	bl	8005594 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c74:	682a      	ldr	r2, [r5, #0]
 8002c76:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002c7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8002c86:	e7d3      	b.n	8002c30 <HAL_PCD_IRQHandler+0xa04>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002c88:	682f      	ldr	r7, [r5, #0]
 8002c8a:	4638      	mov	r0, r7
 8002c8c:	f1ad 0102 	sub.w	r1, sp, #2
 8002c90:	f10d 060e 	add.w	r6, sp, #14
 8002c94:	460a      	mov	r2, r1
 8002c96:	f830 4b04 	ldrh.w	r4, [r0], #4
 8002c9a:	f822 4f02 	strh.w	r4, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 8002c9e:	42b2      	cmp	r2, r6
 8002ca0:	d1f9      	bne.n	8002c96 <HAL_PCD_IRQHandler+0xa6a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ca2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	f8a7 2040 	strh.w	r2, [r7, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002cb0:	6828      	ldr	r0, [r5, #0]
 8002cb2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	0412      	lsls	r2, r2, #16
 8002cbc:	0c12      	lsrs	r2, r2, #16
 8002cbe:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002cc2:	6828      	ldr	r0, [r5, #0]
 8002cc4:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
 8002cc8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002ccc:	d0fa      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0xa98>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cce:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
 8002cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd6:	0412      	lsls	r2, r2, #16
 8002cd8:	0c12      	lsrs	r2, r2, #16
 8002cda:	f8a0 2044 	strh.w	r2, [r0, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002cde:	682a      	ldr	r2, [r5, #0]
 8002ce0:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8002ce4:	52d0      	strh	r0, [r2, r3]
    for (i = 0U; i < 8U; i++)
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d1f8      	bne.n	8002cde <HAL_PCD_IRQHandler+0xab2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cec:	682a      	ldr	r2, [r5, #0]
 8002cee:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002cfc:	682a      	ldr	r2, [r5, #0]
 8002cfe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d0e:	682a      	ldr	r2, [r5, #0]
 8002d10:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f002 fc28 	bl	8005574 <HAL_PCD_SuspendCallback>
    return;
 8002d24:	e784      	b.n	8002c30 <HAL_PCD_IRQHandler+0xa04>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d26:	682a      	ldr	r2, [r5, #0]
 8002d28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f002 fc02 	bl	8005542 <HAL_PCD_SOFCallback>
    return;
 8002d3e:	e777      	b.n	8002c30 <HAL_PCD_IRQHandler+0xa04>
 8002d40:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002d44:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6423      	str	r3, [r4, #64]	@ 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f002 fbed 	bl	800552c <HAL_PCD_DataInStageCallback>
 8002d52:	f7ff baf8 	b.w	8002346 <HAL_PCD_IRQHandler+0x11a>
 8002d56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002d5a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8002d5e:	2000      	movs	r0, #0
 8002d60:	6418      	str	r0, [r3, #64]	@ 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d62:	f89a 3029 	ldrb.w	r3, [sl, #41]	@ 0x29
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f47f add8 	bne.w	800291c <HAL_PCD_IRQHandler+0x6f0>
 8002d6c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8002d76:	441a      	add	r2, r3
 8002d78:	0109      	lsls	r1, r1, #4
 8002d7a:	5a53      	ldrh	r3, [r2, r1]
 8002d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d80:	5253      	strh	r3, [r2, r1]
 8002d82:	5a53      	ldrh	r3, [r2, r1]
 8002d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	f47f adcd 	bne.w	8002936 <HAL_PCD_IRQHandler+0x70a>
 8002d9c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002da6:	0109      	lsls	r1, r1, #4
 8002da8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dac:	4413      	add	r3, r2
 8002dae:	5aca      	ldrh	r2, [r1, r3]
 8002db0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002db4:	52ca      	strh	r2, [r1, r3]
 8002db6:	5aca      	ldrh	r2, [r1, r3]
 8002db8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002dbc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	52ca      	strh	r2, [r1, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dc4:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f002 fbaf 	bl	800552c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dce:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 8002dd2:	f43f ad90 	beq.w	80028f6 <HAL_PCD_IRQHandler+0x6ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dd6:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002dda:	682a      	ldr	r2, [r5, #0]
 8002ddc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002df2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002df6:	e57e      	b.n	80028f6 <HAL_PCD_IRQHandler+0x6ca>
 8002df8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002dfc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8002e00:	2100      	movs	r1, #0
 8002e02:	6419      	str	r1, [r3, #64]	@ 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e04:	f89a 3029 	ldrb.w	r3, [sl, #41]	@ 0x29
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f47f ae97 	bne.w	8002b3c <HAL_PCD_IRQHandler+0x910>
 8002e0e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8002e18:	441a      	add	r2, r3
 8002e1a:	0100      	lsls	r0, r0, #4
 8002e1c:	5a13      	ldrh	r3, [r2, r0]
 8002e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e22:	5213      	strh	r3, [r2, r0]
 8002e24:	5a13      	ldrh	r3, [r2, r0]
 8002e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 8002e38:	2a00      	cmp	r2, #0
 8002e3a:	f47f ae8c 	bne.w	8002b56 <HAL_PCD_IRQHandler+0x92a>
 8002e3e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002e42:	b292      	uxth	r2, r2
 8002e44:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002e48:	0109      	lsls	r1, r1, #4
 8002e4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e4e:	441a      	add	r2, r3
 8002e50:	5a8b      	ldrh	r3, [r1, r2]
 8002e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e56:	528b      	strh	r3, [r1, r2]
 8002e58:	5a8b      	ldrh	r3, [r1, r2]
 8002e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e66:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f002 fb5e 	bl	800552c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e70:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 8002e74:	f47f ad3f 	bne.w	80028f6 <HAL_PCD_IRQHandler+0x6ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e78:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002e7c:	682a      	ldr	r2, [r5, #0]
 8002e7e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e94:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002e98:	e52d      	b.n	80028f6 <HAL_PCD_IRQHandler+0x6ca>
 8002e9a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002e9e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f8c3 0180 	str.w	r0, [r3, #384]	@ 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ea8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002ec6:	f7ff bbe3 	b.w	8002690 <HAL_PCD_IRQHandler+0x464>
 8002eca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ece:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f8c3 0180 	str.w	r0, [r3, #384]	@ 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ed8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002ef6:	e416      	b.n	8002726 <HAL_PCD_IRQHandler+0x4fa>

08002ef8 <HAL_PCD_EP_Open>:
{
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	4604      	mov	r4, r0
 8002efc:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002efe:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002f02:	d123      	bne.n	8002f4c <HAL_PCD_EP_Open+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f04:	f001 0c07 	and.w	ip, r1, #7
 8002f08:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002f0c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8002f10:	f50e 71b4 	add.w	r1, lr, #360	@ 0x168
    ep->is_in = 0U;
 8002f14:	46f4      	mov	ip, lr
 8002f16:	f04f 0e00 	mov.w	lr, #0
 8002f1a:	f88c e169 	strb.w	lr, [ip, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1e:	f000 0007 	and.w	r0, r0, #7
 8002f22:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8002f24:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8002f26:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8002f28:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002f2a:	bf04      	itt	eq
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002f30:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d016      	beq.n	8002f66 <HAL_PCD_EP_Open+0x6e>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	f000 fccf 	bl	80038e2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8002f4a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	f001 0c07 	and.w	ip, r1, #7
 8002f50:	f10c 0c01 	add.w	ip, ip, #1
 8002f54:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002f58:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8002f5c:	f04f 0e01 	mov.w	lr, #1
 8002f60:	f881 e001 	strb.w	lr, [r1, #1]
 8002f64:	e7db      	b.n	8002f1e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8002f66:	2002      	movs	r0, #2
 8002f68:	e7ef      	b.n	8002f4a <HAL_PCD_EP_Open+0x52>

08002f6a <HAL_PCD_EP_Close>:
{
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002f70:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002f74:	d11f      	bne.n	8002fb6 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	f001 0207 	and.w	r2, r1, #7
 8002f7a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002f7e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002f82:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
    ep->is_in = 0U;
 8002f86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f8a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002f9a:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d013      	beq.n	8002fca <HAL_PCD_EP_Close+0x60>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fa8:	6820      	ldr	r0, [r4, #0]
 8002faa:	f000 fe61 	bl	8003c70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8002fb4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	f001 0207 	and.w	r2, r1, #7
 8002fba:	3201      	adds	r2, #1
 8002fbc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002fc0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	7048      	strb	r0, [r1, #1]
 8002fc8:	e7e4      	b.n	8002f94 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8002fca:	2002      	movs	r0, #2
 8002fcc:	e7f2      	b.n	8002fb4 <HAL_PCD_EP_Close+0x4a>

08002fce <HAL_PCD_EP_Receive>:
{
 8002fce:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002fd4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8002fd8:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8002fdc:	f8cc 217c 	str.w	r2, [ip, #380]	@ 0x17c
  ep->xfer_len = len;
 8002fe0:	f8cc 3180 	str.w	r3, [ip, #384]	@ 0x180
  ep->xfer_count = 0U;
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	f8cc 4184 	str.w	r4, [ip, #388]	@ 0x184
  ep->is_in = 0U;
 8002fea:	f88c 4169 	strb.w	r4, [ip, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fee:	f88c 1168 	strb.w	r1, [ip, #360]	@ 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ff2:	f50c 71b4 	add.w	r1, ip, #360	@ 0x168
 8002ff6:	6800      	ldr	r0, [r0, #0]
 8002ff8:	f000 ffc0 	bl	8003f7c <USB_EPStartXfer>
}
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	bd10      	pop	{r4, pc}

08003000 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003000:	f001 0107 	and.w	r1, r1, #7
 8003004:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003008:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 800300c:	f8d0 0184 	ldr.w	r0, [r0, #388]	@ 0x184
 8003010:	4770      	bx	lr

08003012 <HAL_PCD_EP_Transmit>:
{
 8003012:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003014:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8003018:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800301c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8003020:	f8cc 203c 	str.w	r2, [ip, #60]	@ 0x3c
  ep->xfer_len = len;
 8003024:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
  ep->xfer_fill_db = 1U;
 8003028:	2201      	movs	r2, #1
 800302a:	f88c 204c 	strb.w	r2, [ip, #76]	@ 0x4c
  ep->xfer_len_db = len;
 800302e:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
  ep->xfer_count = 0U;
 8003032:	2400      	movs	r4, #0
 8003034:	f8cc 4044 	str.w	r4, [ip, #68]	@ 0x44
  ep->is_in = 1U;
 8003038:	f88c 2029 	strb.w	r2, [ip, #41]	@ 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800303c:	f88c 1028 	strb.w	r1, [ip, #40]	@ 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003040:	4411      	add	r1, r2
 8003042:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003046:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	f000 ff96 	bl	8003f7c <USB_EPStartXfer>
}
 8003050:	4620      	mov	r0, r4
 8003052:	bd10      	pop	{r4, pc}

08003054 <HAL_PCD_EP_SetStall>:
{
 8003054:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003056:	f001 0507 	and.w	r5, r1, #7
 800305a:	6842      	ldr	r2, [r0, #4]
 800305c:	4295      	cmp	r5, r2
 800305e:	d831      	bhi.n	80030c4 <HAL_PCD_EP_SetStall+0x70>
 8003060:	4604      	mov	r4, r0
 8003062:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003064:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003068:	d11e      	bne.n	80030a8 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800306a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800306e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003072:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
    ep->is_in = 0U;
 8003076:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800307a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
  ep->is_stall = 1U;
 8003084:	2301      	movs	r3, #1
 8003086:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003088:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800308a:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 800308e:	2b01      	cmp	r3, #1
 8003090:	d01a      	beq.n	80030c8 <HAL_PCD_EP_SetStall+0x74>
 8003092:	2301      	movs	r3, #1
 8003094:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	f000 fed2 	bl	8003e42 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800309e:	b15d      	cbz	r5, 80030b8 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	1c6b      	adds	r3, r5, #1
 80030aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80030ae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80030b2:	2201      	movs	r2, #1
 80030b4:	704a      	strb	r2, [r1, #1]
 80030b6:	e7e5      	b.n	8003084 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80030b8:	f504 712c 	add.w	r1, r4, #688	@ 0x2b0
 80030bc:	6820      	ldr	r0, [r4, #0]
 80030be:	f000 ff44 	bl	8003f4a <USB_EP0_OutStart>
 80030c2:	e7ed      	b.n	80030a0 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80030c4:	2001      	movs	r0, #1
 80030c6:	e7ee      	b.n	80030a6 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80030c8:	2002      	movs	r0, #2
 80030ca:	e7ec      	b.n	80030a6 <HAL_PCD_EP_SetStall+0x52>

080030cc <HAL_PCD_EP_ClrStall>:
{
 80030cc:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030ce:	f001 010f 	and.w	r1, r1, #15
 80030d2:	6842      	ldr	r2, [r0, #4]
 80030d4:	4291      	cmp	r1, r2
 80030d6:	d830      	bhi.n	800313a <HAL_PCD_EP_ClrStall+0x6e>
{
 80030d8:	b510      	push	{r4, lr}
 80030da:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80030dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030e0:	d121      	bne.n	8003126 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e2:	f003 0207 	and.w	r2, r3, #7
 80030e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80030ea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80030ee:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
    ep->is_in = 0U;
 80030f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030f6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80030fa:	2000      	movs	r0, #0
 80030fc:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->is_stall = 0U;
 8003100:	2200      	movs	r2, #0
 8003102:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800310a:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 800310e:	2b01      	cmp	r3, #1
 8003110:	d015      	beq.n	800313e <HAL_PCD_EP_ClrStall+0x72>
 8003112:	2301      	movs	r3, #1
 8003114:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003118:	6820      	ldr	r0, [r4, #0]
 800311a:	f000 feb7 	bl	8003e8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800311e:	2000      	movs	r0, #0
 8003120:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8003124:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003126:	f003 0207 	and.w	r2, r3, #7
 800312a:	3201      	adds	r2, #1
 800312c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003130:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003134:	2001      	movs	r0, #1
 8003136:	7048      	strb	r0, [r1, #1]
 8003138:	e7e2      	b.n	8003100 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800313a:	2001      	movs	r0, #1
}
 800313c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800313e:	2002      	movs	r0, #2
 8003140:	e7f0      	b.n	8003124 <HAL_PCD_EP_ClrStall+0x58>

08003142 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003142:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003146:	d00b      	beq.n	8003160 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003148:	f001 0107 	and.w	r1, r1, #7
 800314c:	3101      	adds	r1, #1
 800314e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003152:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003156:	b952      	cbnz	r2, 800316e <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003158:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800315a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800315c:	2000      	movs	r0, #0
 800315e:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003160:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003164:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8003168:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 800316c:	e7f3      	b.n	8003156 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 800316e:	2201      	movs	r2, #1
 8003170:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003172:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	8143      	strh	r3, [r0, #10]
 8003178:	e7f0      	b.n	800315c <HAL_PCDEx_PMAConfig+0x1a>
	...

0800317c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800317c:	2800      	cmp	r0, #0
 800317e:	f000 8201 	beq.w	8003584 <HAL_RCC_OscConfig+0x408>
{
 8003182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	f013 0f01 	tst.w	r3, #1
 8003190:	d02c      	beq.n	80031ec <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003192:	4b9f      	ldr	r3, [pc, #636]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b04      	cmp	r3, #4
 800319c:	d01d      	beq.n	80031da <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800319e:	4b9c      	ldr	r3, [pc, #624]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d012      	beq.n	80031d0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031aa:	6863      	ldr	r3, [r4, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d041      	beq.n	8003236 <HAL_RCC_OscConfig+0xba>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d155      	bne.n	8003262 <HAL_RCC_OscConfig+0xe6>
 80031b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031ba:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e037      	b.n	8003240 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80031d8:	d0e7      	beq.n	80031aa <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031da:	4b8d      	ldr	r3, [pc, #564]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80031e2:	d003      	beq.n	80031ec <HAL_RCC_OscConfig+0x70>
 80031e4:	6863      	ldr	r3, [r4, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 81ce 	beq.w	8003588 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f013 0f02 	tst.w	r3, #2
 80031f2:	d075      	beq.n	80032e0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f4:	4b86      	ldr	r3, [pc, #536]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f013 0f0c 	tst.w	r3, #12
 80031fc:	d05f      	beq.n	80032be <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031fe:	4b84      	ldr	r3, [pc, #528]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b08      	cmp	r3, #8
 8003208:	d054      	beq.n	80032b4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320a:	6923      	ldr	r3, [r4, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 808a 	beq.w	8003326 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003212:	4b80      	ldr	r3, [pc, #512]	@ (8003414 <HAL_RCC_OscConfig+0x298>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fd8e 	bl	8001d38 <HAL_GetTick>
 800321c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4e7c      	ldr	r6, [pc, #496]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	f013 0f02 	tst.w	r3, #2
 8003226:	d175      	bne.n	8003314 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe fd86 	bl	8001d38 <HAL_GetTick>
 800322c:	1b40      	subs	r0, r0, r5
 800322e:	2802      	cmp	r0, #2
 8003230:	d9f6      	bls.n	8003220 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003232:	2003      	movs	r0, #3
 8003234:	e1ad      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003236:	4a76      	ldr	r2, [pc, #472]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003240:	6863      	ldr	r3, [r4, #4]
 8003242:	b343      	cbz	r3, 8003296 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003244:	f7fe fd78 	bl	8001d38 <HAL_GetTick>
 8003248:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4e71      	ldr	r6, [pc, #452]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 800324c:	6833      	ldr	r3, [r6, #0]
 800324e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003252:	d1cb      	bne.n	80031ec <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe fd70 	bl	8001d38 <HAL_GetTick>
 8003258:	1b40      	subs	r0, r0, r5
 800325a:	2864      	cmp	r0, #100	@ 0x64
 800325c:	d9f6      	bls.n	800324c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800325e:	2003      	movs	r0, #3
 8003260:	e197      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003266:	d009      	beq.n	800327c <HAL_RCC_OscConfig+0x100>
 8003268:	4b69      	ldr	r3, [pc, #420]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e7e1      	b.n	8003240 <HAL_RCC_OscConfig+0xc4>
 800327c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003280:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e7d4      	b.n	8003240 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003296:	f7fe fd4f 	bl	8001d38 <HAL_GetTick>
 800329a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329c:	4e5c      	ldr	r6, [pc, #368]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 800329e:	6833      	ldr	r3, [r6, #0]
 80032a0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80032a4:	d0a2      	beq.n	80031ec <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a6:	f7fe fd47 	bl	8001d38 <HAL_GetTick>
 80032aa:	1b40      	subs	r0, r0, r5
 80032ac:	2864      	cmp	r0, #100	@ 0x64
 80032ae:	d9f6      	bls.n	800329e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80032b0:	2003      	movs	r0, #3
 80032b2:	e16e      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032b4:	4b56      	ldr	r3, [pc, #344]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80032bc:	d1a5      	bne.n	800320a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	4b54      	ldr	r3, [pc, #336]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f013 0f02 	tst.w	r3, #2
 80032c6:	d003      	beq.n	80032d0 <HAL_RCC_OscConfig+0x154>
 80032c8:	6923      	ldr	r3, [r4, #16]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	f040 815e 	bne.w	800358c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	6961      	ldr	r1, [r4, #20]
 80032d6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80032da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80032de:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	f013 0f08 	tst.w	r3, #8
 80032e6:	d03d      	beq.n	8003364 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e8:	69a3      	ldr	r3, [r4, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d066      	beq.n	80033bc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b49      	ldr	r3, [pc, #292]	@ (8003414 <HAL_RCC_OscConfig+0x298>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fe fd1f 	bl	8001d38 <HAL_GetTick>
 80032fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fc:	4e44      	ldr	r6, [pc, #272]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80032fe:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003300:	f013 0f02 	tst.w	r3, #2
 8003304:	d121      	bne.n	800334a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003306:	f7fe fd17 	bl	8001d38 <HAL_GetTick>
 800330a:	1b40      	subs	r0, r0, r5
 800330c:	2802      	cmp	r0, #2
 800330e:	d9f6      	bls.n	80032fe <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003310:	2003      	movs	r0, #3
 8003312:	e13e      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4a3e      	ldr	r2, [pc, #248]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	6961      	ldr	r1, [r4, #20]
 800331a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800331e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e7dc      	b.n	80032e0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003326:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_RCC_OscConfig+0x298>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800332c:	f7fe fd04 	bl	8001d38 <HAL_GetTick>
 8003330:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4e37      	ldr	r6, [pc, #220]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	f013 0f02 	tst.w	r3, #2
 800333a:	d0d1      	beq.n	80032e0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333c:	f7fe fcfc 	bl	8001d38 <HAL_GetTick>
 8003340:	1b40      	subs	r0, r0, r5
 8003342:	2802      	cmp	r0, #2
 8003344:	d9f6      	bls.n	8003334 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003346:	2003      	movs	r0, #3
 8003348:	e123      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800334a:	4b33      	ldr	r3, [pc, #204]	@ (8003418 <HAL_RCC_OscConfig+0x29c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a33      	ldr	r2, [pc, #204]	@ (800341c <HAL_RCC_OscConfig+0x2a0>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	0a5b      	lsrs	r3, r3, #9
 8003356:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003358:	bf00      	nop
  }
  while (Delay --);
 800335a:	9b01      	ldr	r3, [sp, #4]
 800335c:	1e5a      	subs	r2, r3, #1
 800335e:	9201      	str	r2, [sp, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f9      	bne.n	8003358 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f013 0f04 	tst.w	r3, #4
 800336a:	f000 809b 	beq.w	80034a4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003376:	d134      	bne.n	80033e2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003380:	61da      	str	r2, [r3, #28]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800338c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4b24      	ldr	r3, [pc, #144]	@ (8003420 <HAL_RCC_OscConfig+0x2a4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003396:	d026      	beq.n	80033e6 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	68e3      	ldr	r3, [r4, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d042      	beq.n	8003424 <HAL_RCC_OscConfig+0x2a8>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d158      	bne.n	8003454 <HAL_RCC_OscConfig+0x2d8>
 80033a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033a6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80033aa:	6a1a      	ldr	r2, [r3, #32]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	621a      	str	r2, [r3, #32]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	f022 0204 	bic.w	r2, r2, #4
 80033b8:	621a      	str	r2, [r3, #32]
 80033ba:	e038      	b.n	800342e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80033bc:	4b15      	ldr	r3, [pc, #84]	@ (8003414 <HAL_RCC_OscConfig+0x298>)
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80033c4:	f7fe fcb8 	bl	8001d38 <HAL_GetTick>
 80033c8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ca:	4e11      	ldr	r6, [pc, #68]	@ (8003410 <HAL_RCC_OscConfig+0x294>)
 80033cc:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80033ce:	f013 0f02 	tst.w	r3, #2
 80033d2:	d0c7      	beq.n	8003364 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe fcb0 	bl	8001d38 <HAL_GetTick>
 80033d8:	1b40      	subs	r0, r0, r5
 80033da:	2802      	cmp	r0, #2
 80033dc:	d9f6      	bls.n	80033cc <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80033de:	2003      	movs	r0, #3
 80033e0:	e0d7      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7d3      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003420 <HAL_RCC_OscConfig+0x2a4>)
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80033f0:	f7fe fca2 	bl	8001d38 <HAL_GetTick>
 80033f4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4f0a      	ldr	r7, [pc, #40]	@ (8003420 <HAL_RCC_OscConfig+0x2a4>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80033fe:	d1cb      	bne.n	8003398 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fe fc9a 	bl	8001d38 <HAL_GetTick>
 8003404:	1b80      	subs	r0, r0, r6
 8003406:	2864      	cmp	r0, #100	@ 0x64
 8003408:	d9f6      	bls.n	80033f8 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800340a:	2003      	movs	r0, #3
 800340c:	e0c1      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	42420000 	.word	0x42420000
 8003418:	20000198 	.word	0x20000198
 800341c:	10624dd3 	.word	0x10624dd3
 8003420:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003424:	4a5e      	ldr	r2, [pc, #376]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 8003426:	6a13      	ldr	r3, [r2, #32]
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342e:	68e3      	ldr	r3, [r4, #12]
 8003430:	b333      	cbz	r3, 8003480 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003432:	f7fe fc81 	bl	8001d38 <HAL_GetTick>
 8003436:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003438:	4f59      	ldr	r7, [pc, #356]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f013 0f02 	tst.w	r3, #2
 8003444:	d12d      	bne.n	80034a2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fe fc77 	bl	8001d38 <HAL_GetTick>
 800344a:	1b80      	subs	r0, r0, r6
 800344c:	4540      	cmp	r0, r8
 800344e:	d9f6      	bls.n	800343e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003450:	2003      	movs	r0, #3
 8003452:	e09e      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003454:	2b05      	cmp	r3, #5
 8003456:	d009      	beq.n	800346c <HAL_RCC_OscConfig+0x2f0>
 8003458:	4b51      	ldr	r3, [pc, #324]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	f022 0204 	bic.w	r2, r2, #4
 8003468:	621a      	str	r2, [r3, #32]
 800346a:	e7e0      	b.n	800342e <HAL_RCC_OscConfig+0x2b2>
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	f042 0204 	orr.w	r2, r2, #4
 8003474:	621a      	str	r2, [r3, #32]
 8003476:	6a1a      	ldr	r2, [r3, #32]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	621a      	str	r2, [r3, #32]
 800347e:	e7d6      	b.n	800342e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003480:	f7fe fc5a 	bl	8001d38 <HAL_GetTick>
 8003484:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003486:	4f46      	ldr	r7, [pc, #280]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f013 0f02 	tst.w	r3, #2
 8003492:	d006      	beq.n	80034a2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe fc50 	bl	8001d38 <HAL_GetTick>
 8003498:	1b80      	subs	r0, r0, r6
 800349a:	4540      	cmp	r0, r8
 800349c:	d9f6      	bls.n	800348c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 800349e:	2003      	movs	r0, #3
 80034a0:	e077      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80034a2:	b9e5      	cbnz	r5, 80034de <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a4:	69e3      	ldr	r3, [r4, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d072      	beq.n	8003590 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034aa:	4a3d      	ldr	r2, [pc, #244]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 80034ac:	6852      	ldr	r2, [r2, #4]
 80034ae:	f002 020c 	and.w	r2, r2, #12
 80034b2:	2a08      	cmp	r2, #8
 80034b4:	d056      	beq.n	8003564 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d017      	beq.n	80034ea <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b3a      	ldr	r3, [pc, #232]	@ (80035a4 <HAL_RCC_OscConfig+0x428>)
 80034bc:	2200      	movs	r2, #0
 80034be:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80034c0:	f7fe fc3a 	bl	8001d38 <HAL_GetTick>
 80034c4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c6:	4d36      	ldr	r5, [pc, #216]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80034ce:	d047      	beq.n	8003560 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe fc32 	bl	8001d38 <HAL_GetTick>
 80034d4:	1b00      	subs	r0, r0, r4
 80034d6:	2802      	cmp	r0, #2
 80034d8:	d9f6      	bls.n	80034c8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80034da:	2003      	movs	r0, #3
 80034dc:	e059      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4a30      	ldr	r2, [pc, #192]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 80034e0:	69d3      	ldr	r3, [r2, #28]
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
 80034e8:	e7dc      	b.n	80034a4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b2e      	ldr	r3, [pc, #184]	@ (80035a4 <HAL_RCC_OscConfig+0x428>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80034f0:	f7fe fc22 	bl	8001d38 <HAL_GetTick>
 80034f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f6:	4e2a      	ldr	r6, [pc, #168]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 80034f8:	6833      	ldr	r3, [r6, #0]
 80034fa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80034fe:	d006      	beq.n	800350e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fc1a 	bl	8001d38 <HAL_GetTick>
 8003504:	1b40      	subs	r0, r0, r5
 8003506:	2802      	cmp	r0, #2
 8003508:	d9f6      	bls.n	80034f8 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800350a:	2003      	movs	r0, #3
 800350c:	e041      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800350e:	6a23      	ldr	r3, [r4, #32]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003514:	d01a      	beq.n	800354c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003516:	4922      	ldr	r1, [pc, #136]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 8003518:	684a      	ldr	r2, [r1, #4]
 800351a:	6a23      	ldr	r3, [r4, #32]
 800351c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800351e:	4303      	orrs	r3, r0
 8003520:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <HAL_RCC_OscConfig+0x428>)
 800352a:	2201      	movs	r2, #1
 800352c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800352e:	f7fe fc03 	bl	8001d38 <HAL_GetTick>
 8003532:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003534:	4d1a      	ldr	r5, [pc, #104]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 8003536:	682b      	ldr	r3, [r5, #0]
 8003538:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800353c:	d10e      	bne.n	800355c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fe fbfb 	bl	8001d38 <HAL_GetTick>
 8003542:	1b00      	subs	r0, r0, r4
 8003544:	2802      	cmp	r0, #2
 8003546:	d9f6      	bls.n	8003536 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003548:	2003      	movs	r0, #3
 800354a:	e022      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800354c:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 800354e:	6853      	ldr	r3, [r2, #4]
 8003550:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003554:	68a1      	ldr	r1, [r4, #8]
 8003556:	430b      	orrs	r3, r1
 8003558:	6053      	str	r3, [r2, #4]
 800355a:	e7dc      	b.n	8003516 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800355c:	2000      	movs	r0, #0
 800355e:	e018      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
 8003560:	2000      	movs	r0, #0
 8003562:	e016      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003564:	2b01      	cmp	r3, #1
 8003566:	d017      	beq.n	8003598 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003568:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <HAL_RCC_OscConfig+0x424>)
 800356a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356c:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8003570:	6a22      	ldr	r2, [r4, #32]
 8003572:	4291      	cmp	r1, r2
 8003574:	d112      	bne.n	800359c <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003576:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800357c:	1a18      	subs	r0, r3, r0
 800357e:	bf18      	it	ne
 8003580:	2001      	movne	r0, #1
 8003582:	e006      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003584:	2001      	movs	r0, #1
}
 8003586:	4770      	bx	lr
        return HAL_ERROR;
 8003588:	2001      	movs	r0, #1
 800358a:	e002      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800358c:	2001      	movs	r0, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003590:	2000      	movs	r0, #0
}
 8003592:	b002      	add	sp, #8
 8003594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
 800359a:	e7fa      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800359c:	2001      	movs	r0, #1
 800359e:	e7f8      	b.n	8003592 <HAL_RCC_OscConfig+0x416>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	42420000 	.word	0x42420000

080035a8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x40>)
 80035aa:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80035ac:	f003 020c 	and.w	r2, r3, #12
 80035b0:	2a08      	cmp	r2, #8
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80035b4:	480d      	ldr	r0, [pc, #52]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x44>)
}
 80035b6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x48>)
 80035be:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80035c4:	d00b      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035c6:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x40>)
 80035c8:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ca:	4a08      	ldr	r2, [pc, #32]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x44>)
 80035cc:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035d0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80035d4:	4a07      	ldr	r2, [pc, #28]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x4c>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80035dc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80035e0:	fb03 f000 	mul.w	r0, r3, r0
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	007a1200 	.word	0x007a1200
 80035f0:	0800b02c 	.word	0x0800b02c
 80035f4:	0800b028 	.word	0x0800b028
 80035f8:	003d0900 	.word	0x003d0900

080035fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80035fc:	2800      	cmp	r0, #0
 80035fe:	f000 80a2 	beq.w	8003746 <HAL_RCC_ClockConfig+0x14a>
{
 8003602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003606:	460d      	mov	r5, r1
 8003608:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800360a:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_ClockConfig+0x15c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	428b      	cmp	r3, r1
 8003614:	d20b      	bcs.n	800362e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4a50      	ldr	r2, [pc, #320]	@ (8003758 <HAL_RCC_ClockConfig+0x15c>)
 8003618:	6813      	ldr	r3, [r2, #0]
 800361a:	f023 0307 	bic.w	r3, r3, #7
 800361e:	430b      	orrs	r3, r1
 8003620:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	428b      	cmp	r3, r1
 800362a:	f040 808e 	bne.w	800374a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f013 0f02 	tst.w	r3, #2
 8003634:	d017      	beq.n	8003666 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003636:	f013 0f04 	tst.w	r3, #4
 800363a:	d004      	beq.n	8003646 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800363c:	4a47      	ldr	r2, [pc, #284]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 800363e:	6853      	ldr	r3, [r2, #4]
 8003640:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003644:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	f013 0f08 	tst.w	r3, #8
 800364c:	d004      	beq.n	8003658 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800364e:	4a43      	ldr	r2, [pc, #268]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 8003650:	6853      	ldr	r3, [r2, #4]
 8003652:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003656:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4a40      	ldr	r2, [pc, #256]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 800365a:	6853      	ldr	r3, [r2, #4]
 800365c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003660:	68a1      	ldr	r1, [r4, #8]
 8003662:	430b      	orrs	r3, r1
 8003664:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	f013 0f01 	tst.w	r3, #1
 800366c:	d031      	beq.n	80036d2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	6862      	ldr	r2, [r4, #4]
 8003670:	2a01      	cmp	r2, #1
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003674:	2a02      	cmp	r2, #2
 8003676:	d025      	beq.n	80036c4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	4b38      	ldr	r3, [pc, #224]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f013 0f02 	tst.w	r3, #2
 8003680:	d065      	beq.n	800374e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4936      	ldr	r1, [pc, #216]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 8003684:	684b      	ldr	r3, [r1, #4]
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800368e:	f7fe fb53 	bl	8001d38 <HAL_GetTick>
 8003692:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003694:	4f31      	ldr	r7, [pc, #196]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003696:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	6862      	ldr	r2, [r4, #4]
 80036a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80036a6:	d014      	beq.n	80036d2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fe fb46 	bl	8001d38 <HAL_GetTick>
 80036ac:	1b80      	subs	r0, r0, r6
 80036ae:	4540      	cmp	r0, r8
 80036b0:	d9f3      	bls.n	800369a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80036b2:	2003      	movs	r0, #3
 80036b4:	e045      	b.n	8003742 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b29      	ldr	r3, [pc, #164]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80036be:	d1e0      	bne.n	8003682 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80036c0:	2001      	movs	r0, #1
 80036c2:	e03e      	b.n	8003742 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	4b25      	ldr	r3, [pc, #148]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80036cc:	d1d9      	bne.n	8003682 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
 80036d0:	e037      	b.n	8003742 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d2:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_RCC_ClockConfig+0x15c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	42ab      	cmp	r3, r5
 80036dc:	d90a      	bls.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <HAL_RCC_ClockConfig+0x15c>)
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	f023 0307 	bic.w	r3, r3, #7
 80036e6:	432b      	orrs	r3, r5
 80036e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	42ab      	cmp	r3, r5
 80036f2:	d12e      	bne.n	8003752 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f013 0f04 	tst.w	r3, #4
 80036fa:	d006      	beq.n	800370a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4a17      	ldr	r2, [pc, #92]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 80036fe:	6853      	ldr	r3, [r2, #4]
 8003700:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003704:	68e1      	ldr	r1, [r4, #12]
 8003706:	430b      	orrs	r3, r1
 8003708:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f013 0f08 	tst.w	r3, #8
 8003710:	d007      	beq.n	8003722 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003712:	4a12      	ldr	r2, [pc, #72]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 8003714:	6853      	ldr	r3, [r2, #4]
 8003716:	6921      	ldr	r1, [r4, #16]
 8003718:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800371c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003720:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f7ff ff41 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <HAL_RCC_ClockConfig+0x160>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800372e:	4a0c      	ldr	r2, [pc, #48]	@ (8003760 <HAL_RCC_ClockConfig+0x164>)
 8003730:	5cd3      	ldrb	r3, [r2, r3]
 8003732:	40d8      	lsrs	r0, r3
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_ClockConfig+0x168>)
 8003736:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003738:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_RCC_ClockConfig+0x16c>)
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	f7fe fab8 	bl	8001cb0 <HAL_InitTick>
  return HAL_OK;
 8003740:	2000      	movs	r0, #0
}
 8003742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003746:	2001      	movs	r0, #1
}
 8003748:	4770      	bx	lr
    return HAL_ERROR;
 800374a:	2001      	movs	r0, #1
 800374c:	e7f9      	b.n	8003742 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800374e:	2001      	movs	r0, #1
 8003750:	e7f7      	b.n	8003742 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003752:	2001      	movs	r0, #1
 8003754:	e7f5      	b.n	8003742 <HAL_RCC_ClockConfig+0x146>
 8003756:	bf00      	nop
 8003758:	40022000 	.word	0x40022000
 800375c:	40021000 	.word	0x40021000
 8003760:	0800a814 	.word	0x0800a814
 8003764:	20000198 	.word	0x20000198
 8003768:	200001a0 	.word	0x200001a0

0800376c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800376c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003774:	6803      	ldr	r3, [r0, #0]
 8003776:	f013 0f01 	tst.w	r3, #1
 800377a:	d036      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377c:	4b3f      	ldr	r3, [pc, #252]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003784:	d149      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800378e:	61da      	str	r2, [r3, #28]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800379a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b38      	ldr	r3, [pc, #224]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80037a4:	d03b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037a6:	4b35      	ldr	r3, [pc, #212]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037aa:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80037ae:	d013      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80037b0:	6862      	ldr	r2, [r4, #4]
 80037b2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d00e      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ba:	4a30      	ldr	r2, [pc, #192]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037bc:	6a13      	ldr	r3, [r2, #32]
 80037be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037c2:	4930      	ldr	r1, [pc, #192]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80037c4:	2601      	movs	r6, #1
 80037c6:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ca:	2600      	movs	r6, #0
 80037cc:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037d0:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d2:	f013 0f01 	tst.w	r3, #1
 80037d6:	d136      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d8:	4a28      	ldr	r2, [pc, #160]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037da:	6a13      	ldr	r3, [r2, #32]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e0:	6861      	ldr	r1, [r4, #4]
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	d13e      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	f013 0f02 	tst.w	r3, #2
 80037f0:	d006      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f2:	4a22      	ldr	r2, [pc, #136]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80037f4:	6853      	ldr	r3, [r2, #4]
 80037f6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80037fa:	68a1      	ldr	r1, [r4, #8]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	f013 0f10 	tst.w	r3, #16
 8003806:	d034      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003808:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800380a:	6853      	ldr	r3, [r2, #4]
 800380c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003810:	68e1      	ldr	r1, [r4, #12]
 8003812:	430b      	orrs	r3, r1
 8003814:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003816:	2000      	movs	r0, #0
 8003818:	e02c      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 800381a:	2500      	movs	r5, #0
 800381c:	e7be      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381e:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003820:	6813      	ldr	r3, [r2, #0]
 8003822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003826:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003828:	f7fe fa86 	bl	8001d38 <HAL_GetTick>
 800382c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4f14      	ldr	r7, [pc, #80]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003836:	d1b6      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003838:	f7fe fa7e 	bl	8001d38 <HAL_GetTick>
 800383c:	1b80      	subs	r0, r0, r6
 800383e:	2864      	cmp	r0, #100	@ 0x64
 8003840:	d9f6      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003842:	2003      	movs	r0, #3
 8003844:	e016      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003846:	f7fe fa77 	bl	8001d38 <HAL_GetTick>
 800384a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	4f0b      	ldr	r7, [pc, #44]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f013 0f02 	tst.w	r3, #2
 8003858:	d1be      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fe fa6d 	bl	8001d38 <HAL_GetTick>
 800385e:	1b80      	subs	r0, r0, r6
 8003860:	4540      	cmp	r0, r8
 8003862:	d9f6      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003864:	2003      	movs	r0, #3
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	69d3      	ldr	r3, [r2, #28]
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386e:	61d3      	str	r3, [r2, #28]
 8003870:	e7bb      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003872:	2000      	movs	r0, #0
}
 8003874:	b002      	add	sp, #8
 8003876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	40007000 	.word	0x40007000
 8003884:	42420000 	.word	0x42420000

08003888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003888:	b084      	sub	sp, #16
 800388a:	a801      	add	r0, sp, #4
 800388c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003890:	2000      	movs	r0, #0
 8003892:	b004      	add	sp, #16
 8003894:	4770      	bx	lr

08003896 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003896:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003898:	2000      	movs	r0, #0
 800389a:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800389e:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
 80038a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80038a6:	4770      	bx	lr

080038a8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80038ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038b0:	045b      	lsls	r3, r3, #17
 80038b2:	0c5b      	lsrs	r3, r3, #17
 80038b4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80038b8:	2000      	movs	r0, #0
 80038ba:	4770      	bx	lr

080038bc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80038bc:	2000      	movs	r0, #0
 80038be:	4770      	bx	lr

080038c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038c0:	b084      	sub	sp, #16
 80038c2:	4684      	mov	ip, r0
 80038c4:	a801      	add	r0, sp, #4
 80038c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038d0:	2000      	movs	r0, #0
 80038d2:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038d6:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038da:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 80038de:	b004      	add	sp, #16
 80038e0:	4770      	bx	lr

080038e2 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038e2:	b530      	push	{r4, r5, lr}
 80038e4:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80038e6:	f891 e000 	ldrb.w	lr, [r1]
 80038ea:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 80038ee:	b292      	uxth	r2, r2
 80038f0:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 80038f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80038f8:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 80038fa:	78c8      	ldrb	r0, [r1, #3]
 80038fc:	2803      	cmp	r0, #3
 80038fe:	d803      	bhi.n	8003908 <USB_ActivateEndpoint+0x26>
 8003900:	e8df f000 	tbb	[pc, r0]
 8003904:	070f0b04 	.word	0x070f0b04
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8003908:	2001      	movs	r0, #1
 800390a:	e00b      	b.n	8003924 <USB_ActivateEndpoint+0x42>
      wEpRegVal |= USB_EP_CONTROL;
 800390c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 8003910:	e008      	b.n	8003924 <USB_ActivateEndpoint+0x42>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003912:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003916:	2000      	movs	r0, #0
      break;
 8003918:	e004      	b.n	8003924 <USB_ActivateEndpoint+0x42>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800391a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800391e:	2000      	movs	r0, #0
      break;
 8003920:	e000      	b.n	8003924 <USB_ActivateEndpoint+0x42>
  switch (ep->type)
 8003922:	2000      	movs	r0, #0
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003924:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8003928:	ea42 020c 	orr.w	r2, r2, ip
 800392c:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003930:	f891 e000 	ldrb.w	lr, [r1]
 8003934:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8003938:	b292      	uxth	r2, r2
 800393a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800393e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003942:	ea4e 0202 	orr.w	r2, lr, r2
 8003946:	ea4c 0c02 	orr.w	ip, ip, r2
 800394a:	f823 c02e 	strh.w	ip, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 800394e:	7b0a      	ldrb	r2, [r1, #12]
 8003950:	2a00      	cmp	r2, #0
 8003952:	f040 80bd 	bne.w	8003ad0 <USB_ActivateEndpoint+0x1ee>
  {
    if (ep->is_in != 0U)
 8003956:	784a      	ldrb	r2, [r1, #1]
 8003958:	b3ba      	cbz	r2, 80039ca <USB_ActivateEndpoint+0xe8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800395a:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 800395e:	fa1f fe8e 	uxth.w	lr, lr
 8003962:	780a      	ldrb	r2, [r1, #0]
 8003964:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003968:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800396c:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8003970:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003974:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003978:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800397c:	780c      	ldrb	r4, [r1, #0]
 800397e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003982:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003986:	d00c      	beq.n	80039a2 <USB_ActivateEndpoint+0xc0>
 8003988:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800398c:	b292      	uxth	r2, r2
 800398e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003992:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800399a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800399e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80039a2:	78ca      	ldrb	r2, [r1, #3]
 80039a4:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039a6:	7809      	ldrb	r1, [r1, #0]
 80039a8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80039ac:	b292      	uxth	r2, r2
 80039ae:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80039b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b6:	bf18      	it	ne
 80039b8:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039c4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80039c8:	bd30      	pop	{r4, r5, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039ca:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 80039ce:	fa1f fe8e 	uxth.w	lr, lr
 80039d2:	780a      	ldrb	r2, [r1, #0]
 80039d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80039d8:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 80039dc:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80039e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80039e4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80039e8:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80039ec:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 80039f0:	fa1f fe8e 	uxth.w	lr, lr
 80039f4:	780a      	ldrb	r2, [r1, #0]
 80039f6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80039fa:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 80039fe:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8003a02:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003a06:	f822 c00e 	strh.w	ip, [r2, lr]
 8003a0a:	690c      	ldr	r4, [r1, #16]
 8003a0c:	2c3e      	cmp	r4, #62	@ 0x3e
 8003a0e:	d936      	bls.n	8003a7e <USB_ActivateEndpoint+0x19c>
 8003a10:	0965      	lsrs	r5, r4, #5
 8003a12:	f014 0f1f 	tst.w	r4, #31
 8003a16:	bf08      	it	eq
 8003a18:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8003a1c:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8003a20:	fa1f fc8c 	uxth.w	ip, ip
 8003a24:	ea4c 2c85 	orr.w	ip, ip, r5, lsl #10
 8003a28:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8003a2c:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8003a30:	fa1f fc8c 	uxth.w	ip, ip
 8003a34:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a38:	780c      	ldrb	r4, [r1, #0]
 8003a3a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a3e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8003a42:	d00c      	beq.n	8003a5e <USB_ActivateEndpoint+0x17c>
 8003a44:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a48:	b292      	uxth	r2, r2
 8003a4a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003a4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003a52:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003a56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->num == 0U)
 8003a5e:	7809      	ldrb	r1, [r1, #0]
 8003a60:	bb31      	cbnz	r1, 8003ab0 <USB_ActivateEndpoint+0x1ce>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a62:	881a      	ldrh	r2, [r3, #0]
 8003a64:	b292      	uxth	r2, r2
 8003a66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003a6e:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8003a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	e7a4      	b.n	80039c8 <USB_ActivateEndpoint+0xe6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a7e:	b94c      	cbnz	r4, 8003a94 <USB_ActivateEndpoint+0x1b2>
 8003a80:	f832 400e 	ldrh.w	r4, [r2, lr]
 8003a84:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003a88:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003a8c:	b2a4      	uxth	r4, r4
 8003a8e:	f822 400e 	strh.w	r4, [r2, lr]
 8003a92:	e7d1      	b.n	8003a38 <USB_ActivateEndpoint+0x156>
 8003a94:	0865      	lsrs	r5, r4, #1
 8003a96:	f014 0f01 	tst.w	r4, #1
 8003a9a:	bf18      	it	ne
 8003a9c:	3501      	addne	r5, #1
 8003a9e:	f832 400e 	ldrh.w	r4, [r2, lr]
 8003aa2:	b2a4      	uxth	r4, r4
 8003aa4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8003aa8:	b2a4      	uxth	r4, r4
 8003aaa:	f822 400e 	strh.w	r4, [r2, lr]
 8003aae:	e7c3      	b.n	8003a38 <USB_ActivateEndpoint+0x156>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003ab0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003aba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003abe:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8003ac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ac6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003aca:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003ace:	e77b      	b.n	80039c8 <USB_ActivateEndpoint+0xe6>
    if (ep->type == EP_TYPE_BULK)
 8003ad0:	78ca      	ldrb	r2, [r1, #3]
 8003ad2:	2a02      	cmp	r2, #2
 8003ad4:	d075      	beq.n	8003bc2 <USB_ActivateEndpoint+0x2e0>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ad6:	780c      	ldrb	r4, [r1, #0]
 8003ad8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003adc:	b292      	uxth	r2, r2
 8003ade:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8003ae2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003ae6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003aee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003af2:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 8003af6:	fa1f fe8e 	uxth.w	lr, lr
 8003afa:	780a      	ldrb	r2, [r1, #0]
 8003afc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003b00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b04:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8003b08:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003b0c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b10:	f822 c00e 	strh.w	ip, [r2, lr]
 8003b14:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 8003b18:	fa1f fe8e 	uxth.w	lr, lr
 8003b1c:	780a      	ldrb	r2, [r1, #0]
 8003b1e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003b22:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 8003b26:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8003b2a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003b2e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b32:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 8003b36:	784a      	ldrb	r2, [r1, #1]
 8003b38:	2a00      	cmp	r2, #0
 8003b3a:	d151      	bne.n	8003be0 <USB_ActivateEndpoint+0x2fe>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b3c:	780c      	ldrb	r4, [r1, #0]
 8003b3e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b42:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8003b46:	d00c      	beq.n	8003b62 <USB_ActivateEndpoint+0x280>
 8003b48:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b4c:	b292      	uxth	r2, r2
 8003b4e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003b52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b56:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003b5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b5e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b62:	780c      	ldrb	r4, [r1, #0]
 8003b64:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b68:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003b6c:	d00c      	beq.n	8003b88 <USB_ActivateEndpoint+0x2a6>
 8003b6e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b72:	b292      	uxth	r2, r2
 8003b74:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003b78:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b80:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003b84:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b88:	780c      	ldrb	r4, [r1, #0]
 8003b8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b8e:	b292      	uxth	r2, r2
 8003b90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b94:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b98:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8003b9c:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8003ba0:	ea4c 0202 	orr.w	r2, ip, r2
 8003ba4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ba8:	7809      	ldrb	r1, [r1, #0]
 8003baa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bb8:	ea4c 0c02 	orr.w	ip, ip, r2
 8003bbc:	f823 c021 	strh.w	ip, [r3, r1, lsl #2]
 8003bc0:	e702      	b.n	80039c8 <USB_ActivateEndpoint+0xe6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003bc2:	780c      	ldrb	r4, [r1, #0]
 8003bc4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003bce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003bd2:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8003bd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bda:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003bde:	e788      	b.n	8003af2 <USB_ActivateEndpoint+0x210>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003be0:	780c      	ldrb	r4, [r1, #0]
 8003be2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003be6:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8003bea:	d00c      	beq.n	8003c06 <USB_ActivateEndpoint+0x324>
 8003bec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003bf6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003bfa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003bfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c02:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c06:	780c      	ldrb	r4, [r1, #0]
 8003c08:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c0c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003c10:	d00c      	beq.n	8003c2c <USB_ActivateEndpoint+0x34a>
 8003c12:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c16:	b292      	uxth	r2, r2
 8003c18:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003c1c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c24:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003c28:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003c2c:	78ca      	ldrb	r2, [r1, #3]
 8003c2e:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c30:	780c      	ldrb	r4, [r1, #0]
 8003c32:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c36:	b292      	uxth	r2, r2
 8003c38:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c40:	bf18      	it	ne
 8003c42:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c4e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c52:	7809      	ldrb	r1, [r1, #0]
 8003c54:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c6a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003c6e:	e6ab      	b.n	80039c8 <USB_ActivateEndpoint+0xe6>

08003c70 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003c70:	7b0b      	ldrb	r3, [r1, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d146      	bne.n	8003d04 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8003c76:	784b      	ldrb	r3, [r1, #1]
 8003c78:	b313      	cbz	r3, 8003cc0 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c7a:	780a      	ldrb	r2, [r1, #0]
 8003c7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c80:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003c84:	d00c      	beq.n	8003ca0 <USB_DeactivateEndpoint+0x30>
 8003c86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ca0:	780a      	ldrb	r2, [r1, #0]
 8003ca2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cc0:	780a      	ldrb	r2, [r1, #0]
 8003cc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003cc6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003cca:	d00c      	beq.n	8003ce6 <USB_DeactivateEndpoint+0x76>
 8003ccc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ce6:	780a      	ldrb	r2, [r1, #0]
 8003ce8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003d02:	e7db      	b.n	8003cbc <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8003d04:	784b      	ldrb	r3, [r1, #1]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d14d      	bne.n	8003da6 <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d0a:	780a      	ldrb	r2, [r1, #0]
 8003d0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d10:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003d14:	d00c      	beq.n	8003d30 <USB_DeactivateEndpoint+0xc0>
 8003d16:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d30:	780a      	ldrb	r2, [r1, #0]
 8003d32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d36:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003d3a:	d00c      	beq.n	8003d56 <USB_DeactivateEndpoint+0xe6>
 8003d3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003d56:	780a      	ldrb	r2, [r1, #0]
 8003d58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d72:	f891 c000 	ldrb.w	ip, [r1]
 8003d76:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d84:	f248 0280 	movw	r2, #32896	@ 0x8080
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d8e:	7809      	ldrb	r1, [r1, #0]
 8003d90:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003da4:	e78a      	b.n	8003cbc <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003da6:	780a      	ldrb	r2, [r1, #0]
 8003da8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003dac:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003db0:	d00c      	beq.n	8003dcc <USB_DeactivateEndpoint+0x15c>
 8003db2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dcc:	780a      	ldrb	r2, [r1, #0]
 8003dce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003dd2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003dd6:	d00c      	beq.n	8003df2 <USB_DeactivateEndpoint+0x182>
 8003dd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003dee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003df2:	780a      	ldrb	r2, [r1, #0]
 8003df4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e0e:	f891 c000 	ldrb.w	ip, [r1]
 8003e12:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e20:	f248 0280 	movw	r2, #32896	@ 0x8080
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e2a:	7809      	ldrb	r1, [r1, #0]
 8003e2c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003e40:	e73c      	b.n	8003cbc <USB_DeactivateEndpoint+0x4c>

08003e42 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003e42:	784b      	ldrb	r3, [r1, #1]
 8003e44:	b18b      	cbz	r3, 8003e6a <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003e46:	780a      	ldrb	r2, [r1, #0]
 8003e48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e56:	f083 0310 	eor.w	r3, r3, #16
 8003e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e62:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8003e66:	2000      	movs	r0, #0
 8003e68:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003e6a:	780a      	ldrb	r2, [r1, #0]
 8003e6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003e8a:	e7ec      	b.n	8003e66 <USB_EPSetStall+0x24>

08003e8c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003e8c:	7b0b      	ldrb	r3, [r1, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d14b      	bne.n	8003f2a <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8003e92:	784b      	ldrb	r3, [r1, #1]
 8003e94:	b333      	cbz	r3, 8003ee4 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e96:	780a      	ldrb	r2, [r1, #0]
 8003e98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e9c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003ea0:	d00c      	beq.n	8003ebc <USB_EPClearStall+0x30>
 8003ea2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003eb8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003ebc:	78cb      	ldrb	r3, [r1, #3]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d033      	beq.n	8003f2a <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ec2:	780a      	ldrb	r2, [r1, #0]
 8003ec4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ed2:	f083 0320 	eor.w	r3, r3, #32
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ede:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003ee2:	e022      	b.n	8003f2a <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ee4:	780a      	ldrb	r2, [r1, #0]
 8003ee6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003eea:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003eee:	d00c      	beq.n	8003f0a <USB_EPClearStall+0x7e>
 8003ef0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f0a:	780a      	ldrb	r2, [r1, #0]
 8003f0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1a:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	4770      	bx	lr

08003f2e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003f2e:	b911      	cbnz	r1, 8003f36 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8003f36:	2000      	movs	r0, #0
 8003f38:	4770      	bx	lr

08003f3a <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	4770      	bx	lr

08003f3e <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003f3e:	2000      	movs	r0, #0
 8003f40:	4770      	bx	lr

08003f42 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003f42:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8003f46:	b280      	uxth	r0, r0
 8003f48:	4770      	bx	lr

08003f4a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	4770      	bx	lr

08003f4e <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003f4e:	3301      	adds	r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f50:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 8003f54:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003f58:	4662      	mov	r2, ip

  for (count = n; count != 0U; count--)
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	d00d      	beq.n	8003f7a <USB_WritePMA+0x2c>
 8003f5e:	3102      	adds	r1, #2
 8003f60:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003f64:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8003f68:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8003f6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8003f70:	f822 3b04 	strh.w	r3, [r2], #4
  for (count = n; count != 0U; count--)
 8003f74:	3102      	adds	r1, #2
 8003f76:	4562      	cmp	r2, ip
 8003f78:	d1f4      	bne.n	8003f64 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8003f7a:	4770      	bx	lr

08003f7c <USB_EPStartXfer>:
{
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	4605      	mov	r5, r0
 8003f80:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003f82:	784b      	ldrb	r3, [r1, #1]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d03c      	beq.n	8004002 <USB_EPStartXfer+0x86>
    if (ep->doublebuffer == 0U)
 8003f88:	7b0a      	ldrb	r2, [r1, #12]
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	f040 8215 	bne.w	80043ba <USB_EPStartXfer+0x43e>
      if (ep->xfer_len > ep->maxpacket)
 8003f90:	698b      	ldr	r3, [r1, #24]
 8003f92:	690a      	ldr	r2, [r1, #16]
 8003f94:	4293      	cmp	r3, r2
        ep->xfer_len -= len;
 8003f96:	bf86      	itte	hi
 8003f98:	1a99      	subhi	r1, r3, r2
        len = ep->maxpacket;
 8003f9a:	4613      	movhi	r3, r2
        ep->xfer_len = 0U;
 8003f9c:	2100      	movls	r1, #0
 8003f9e:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003fa0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	7820      	ldrb	r0, [r4, #0]
 8003fa8:	0100      	lsls	r0, r0, #4
 8003faa:	f205 410c 	addw	r1, r5, #1036	@ 0x40c
 8003fae:	4411      	add	r1, r2
 8003fb0:	5a42      	ldrh	r2, [r0, r1]
 8003fb2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003fb6:	5242      	strh	r2, [r0, r1]
 8003fb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fba:	f240 81e9 	bls.w	8004390 <USB_EPStartXfer+0x414>
 8003fbe:	095a      	lsrs	r2, r3, #5
 8003fc0:	f013 0f1f 	tst.w	r3, #31
 8003fc4:	bf08      	it	eq
 8003fc6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003fca:	5a43      	ldrh	r3, [r0, r1]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	5243      	strh	r3, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fde:	7822      	ldrb	r2, [r4, #0]
 8003fe0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffa:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003ffe:	2000      	movs	r0, #0
}
 8004000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8004002:	690a      	ldr	r2, [r1, #16]
 8004004:	698e      	ldr	r6, [r1, #24]
 8004006:	4296      	cmp	r6, r2
 8004008:	bf28      	it	cs
 800400a:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 800400c:	7b0b      	ldrb	r3, [r1, #12]
 800400e:	b1d3      	cbz	r3, 8004046 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 8004010:	78cb      	ldrb	r3, [r1, #3]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d038      	beq.n	8004088 <USB_EPStartXfer+0x10c>
        ep->xfer_len_db -= len;
 8004016:	6a0b      	ldr	r3, [r1, #32]
 8004018:	1b9b      	subs	r3, r3, r6
 800401a:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800401c:	780b      	ldrb	r3, [r1, #0]
 800401e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004022:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004026:	f000 81a5 	beq.w	8004374 <USB_EPStartXfer+0x3f8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800402a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800402e:	b292      	uxth	r2, r2
 8004030:	f200 410c 	addw	r1, r0, #1036	@ 0x40c
 8004034:	4411      	add	r1, r2
 8004036:	011a      	lsls	r2, r3, #4
 8004038:	b2b3      	uxth	r3, r6
 800403a:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800403c:	8962      	ldrh	r2, [r4, #10]
 800403e:	6961      	ldr	r1, [r4, #20]
 8004040:	f7ff ff85 	bl	8003f4e <USB_WritePMA>
 8004044:	e00e      	b.n	8004064 <USB_EPStartXfer+0xe8>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004046:	b2b6      	uxth	r6, r6
 8004048:	4633      	mov	r3, r6
 800404a:	88ca      	ldrh	r2, [r1, #6]
 800404c:	6949      	ldr	r1, [r1, #20]
 800404e:	f7ff ff7e 	bl	8003f4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004052:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 8004056:	b289      	uxth	r1, r1
 8004058:	7822      	ldrb	r2, [r4, #0]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	f205 4304 	addw	r3, r5, #1028	@ 0x404
 8004060:	440b      	add	r3, r1
 8004062:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004064:	7822      	ldrb	r2, [r4, #0]
 8004066:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004074:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8004078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800407c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004080:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8004084:	2000      	movs	r0, #0
 8004086:	e7bb      	b.n	8004000 <USB_EPStartXfer+0x84>
        if (ep->xfer_len_db > ep->maxpacket)
 8004088:	6a0b      	ldr	r3, [r1, #32]
 800408a:	429a      	cmp	r2, r3
 800408c:	f080 8154 	bcs.w	8004338 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004090:	780a      	ldrb	r2, [r1, #0]
 8004092:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80040a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 80040ac:	6a0b      	ldr	r3, [r1, #32]
 80040ae:	1b9b      	subs	r3, r3, r6
 80040b0:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040b2:	780b      	ldrb	r3, [r1, #0]
 80040b4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80040b8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80040bc:	f000 809e 	beq.w	80041fc <USB_EPStartXfer+0x280>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040c0:	784a      	ldrb	r2, [r1, #1]
 80040c2:	2a00      	cmp	r2, #0
 80040c4:	d132      	bne.n	800412c <USB_EPStartXfer+0x1b0>
 80040c6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 80040ca:	b289      	uxth	r1, r1
 80040cc:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80040d0:	440a      	add	r2, r1
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	5ad1      	ldrh	r1, [r2, r3]
 80040d6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80040da:	52d1      	strh	r1, [r2, r3]
 80040dc:	2e3e      	cmp	r6, #62	@ 0x3e
 80040de:	d910      	bls.n	8004102 <USB_EPStartXfer+0x186>
 80040e0:	0970      	lsrs	r0, r6, #5
 80040e2:	f016 0f1f 	tst.w	r6, #31
 80040e6:	bf08      	it	eq
 80040e8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80040ec:	5ad1      	ldrh	r1, [r2, r3]
 80040ee:	b289      	uxth	r1, r1
 80040f0:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80040f4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80040f8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80040fc:	b289      	uxth	r1, r1
 80040fe:	52d1      	strh	r1, [r2, r3]
 8004100:	e016      	b.n	8004130 <USB_EPStartXfer+0x1b4>
 8004102:	b93e      	cbnz	r6, 8004114 <USB_EPStartXfer+0x198>
 8004104:	5ad1      	ldrh	r1, [r2, r3]
 8004106:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800410a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800410e:	b289      	uxth	r1, r1
 8004110:	52d1      	strh	r1, [r2, r3]
 8004112:	e00d      	b.n	8004130 <USB_EPStartXfer+0x1b4>
 8004114:	0870      	lsrs	r0, r6, #1
 8004116:	f016 0f01 	tst.w	r6, #1
 800411a:	bf18      	it	ne
 800411c:	3001      	addne	r0, #1
 800411e:	5ad1      	ldrh	r1, [r2, r3]
 8004120:	b289      	uxth	r1, r1
 8004122:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004126:	b289      	uxth	r1, r1
 8004128:	52d1      	strh	r1, [r2, r3]
 800412a:	e001      	b.n	8004130 <USB_EPStartXfer+0x1b4>
 800412c:	2a01      	cmp	r2, #1
 800412e:	d032      	beq.n	8004196 <USB_EPStartXfer+0x21a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004130:	b2b3      	uxth	r3, r6
 8004132:	8962      	ldrh	r2, [r4, #10]
 8004134:	6961      	ldr	r1, [r4, #20]
 8004136:	4628      	mov	r0, r5
 8004138:	f7ff ff09 	bl	8003f4e <USB_WritePMA>
            ep->xfer_buff += len;
 800413c:	6963      	ldr	r3, [r4, #20]
 800413e:	4433      	add	r3, r6
 8004140:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004142:	6a23      	ldr	r3, [r4, #32]
 8004144:	6922      	ldr	r2, [r4, #16]
 8004146:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8004148:	bf86      	itte	hi
 800414a:	1b9a      	subhi	r2, r3, r6
 800414c:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800414e:	2200      	movls	r2, #0
 8004150:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004152:	7862      	ldrb	r2, [r4, #1]
 8004154:	2a00      	cmp	r2, #0
 8004156:	d13d      	bne.n	80041d4 <USB_EPStartXfer+0x258>
 8004158:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 800415c:	b289      	uxth	r1, r1
 800415e:	7820      	ldrb	r0, [r4, #0]
 8004160:	0100      	lsls	r0, r0, #4
 8004162:	f205 4204 	addw	r2, r5, #1028	@ 0x404
 8004166:	440a      	add	r2, r1
 8004168:	5a81      	ldrh	r1, [r0, r2]
 800416a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800416e:	5281      	strh	r1, [r0, r2]
 8004170:	2b3e      	cmp	r3, #62	@ 0x3e
 8004172:	d91a      	bls.n	80041aa <USB_EPStartXfer+0x22e>
 8004174:	095e      	lsrs	r6, r3, #5
 8004176:	f013 0f1f 	tst.w	r3, #31
 800417a:	bf08      	it	eq
 800417c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004180:	5a81      	ldrh	r1, [r0, r2]
 8004182:	b289      	uxth	r1, r1
 8004184:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004188:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800418c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004190:	b289      	uxth	r1, r1
 8004192:	5281      	strh	r1, [r0, r2]
 8004194:	e020      	b.n	80041d8 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004196:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 800419a:	b289      	uxth	r1, r1
 800419c:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80041a0:	440a      	add	r2, r1
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	b2b1      	uxth	r1, r6
 80041a6:	52d1      	strh	r1, [r2, r3]
 80041a8:	e7c2      	b.n	8004130 <USB_EPStartXfer+0x1b4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041aa:	b93b      	cbnz	r3, 80041bc <USB_EPStartXfer+0x240>
 80041ac:	5a81      	ldrh	r1, [r0, r2]
 80041ae:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80041b2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80041b6:	b289      	uxth	r1, r1
 80041b8:	5281      	strh	r1, [r0, r2]
 80041ba:	e00d      	b.n	80041d8 <USB_EPStartXfer+0x25c>
 80041bc:	085e      	lsrs	r6, r3, #1
 80041be:	f013 0f01 	tst.w	r3, #1
 80041c2:	bf18      	it	ne
 80041c4:	3601      	addne	r6, #1
 80041c6:	5a81      	ldrh	r1, [r0, r2]
 80041c8:	b289      	uxth	r1, r1
 80041ca:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80041ce:	b289      	uxth	r1, r1
 80041d0:	5281      	strh	r1, [r0, r2]
 80041d2:	e001      	b.n	80041d8 <USB_EPStartXfer+0x25c>
 80041d4:	2a01      	cmp	r2, #1
 80041d6:	d006      	beq.n	80041e6 <USB_EPStartXfer+0x26a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041d8:	b29b      	uxth	r3, r3
 80041da:	8922      	ldrh	r2, [r4, #8]
 80041dc:	6961      	ldr	r1, [r4, #20]
 80041de:	4628      	mov	r0, r5
 80041e0:	f7ff feb5 	bl	8003f4e <USB_WritePMA>
 80041e4:	e73e      	b.n	8004064 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041e6:	f8b5 0050 	ldrh.w	r0, [r5, #80]	@ 0x50
 80041ea:	b280      	uxth	r0, r0
 80041ec:	7821      	ldrb	r1, [r4, #0]
 80041ee:	0109      	lsls	r1, r1, #4
 80041f0:	f205 4204 	addw	r2, r5, #1028	@ 0x404
 80041f4:	4402      	add	r2, r0
 80041f6:	b298      	uxth	r0, r3
 80041f8:	5288      	strh	r0, [r1, r2]
 80041fa:	e7ed      	b.n	80041d8 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041fc:	784a      	ldrb	r2, [r1, #1]
 80041fe:	2a00      	cmp	r2, #0
 8004200:	d132      	bne.n	8004268 <USB_EPStartXfer+0x2ec>
 8004202:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8004206:	b289      	uxth	r1, r1
 8004208:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800420c:	440a      	add	r2, r1
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	5ad1      	ldrh	r1, [r2, r3]
 8004212:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004216:	52d1      	strh	r1, [r2, r3]
 8004218:	2e3e      	cmp	r6, #62	@ 0x3e
 800421a:	d910      	bls.n	800423e <USB_EPStartXfer+0x2c2>
 800421c:	0970      	lsrs	r0, r6, #5
 800421e:	f016 0f1f 	tst.w	r6, #31
 8004222:	bf08      	it	eq
 8004224:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004228:	5ad1      	ldrh	r1, [r2, r3]
 800422a:	b289      	uxth	r1, r1
 800422c:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004230:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004234:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004238:	b289      	uxth	r1, r1
 800423a:	52d1      	strh	r1, [r2, r3]
 800423c:	e016      	b.n	800426c <USB_EPStartXfer+0x2f0>
 800423e:	b93e      	cbnz	r6, 8004250 <USB_EPStartXfer+0x2d4>
 8004240:	5ad1      	ldrh	r1, [r2, r3]
 8004242:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004246:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800424a:	b289      	uxth	r1, r1
 800424c:	52d1      	strh	r1, [r2, r3]
 800424e:	e00d      	b.n	800426c <USB_EPStartXfer+0x2f0>
 8004250:	0870      	lsrs	r0, r6, #1
 8004252:	f016 0f01 	tst.w	r6, #1
 8004256:	bf18      	it	ne
 8004258:	3001      	addne	r0, #1
 800425a:	5ad1      	ldrh	r1, [r2, r3]
 800425c:	b289      	uxth	r1, r1
 800425e:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004262:	b289      	uxth	r1, r1
 8004264:	52d1      	strh	r1, [r2, r3]
 8004266:	e001      	b.n	800426c <USB_EPStartXfer+0x2f0>
 8004268:	2a01      	cmp	r2, #1
 800426a:	d032      	beq.n	80042d2 <USB_EPStartXfer+0x356>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800426c:	b2b3      	uxth	r3, r6
 800426e:	8922      	ldrh	r2, [r4, #8]
 8004270:	6961      	ldr	r1, [r4, #20]
 8004272:	4628      	mov	r0, r5
 8004274:	f7ff fe6b 	bl	8003f4e <USB_WritePMA>
            ep->xfer_buff += len;
 8004278:	6963      	ldr	r3, [r4, #20]
 800427a:	4433      	add	r3, r6
 800427c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800427e:	6a23      	ldr	r3, [r4, #32]
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8004284:	bf86      	itte	hi
 8004286:	1b9a      	subhi	r2, r3, r6
 8004288:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800428a:	2200      	movls	r2, #0
 800428c:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800428e:	7862      	ldrb	r2, [r4, #1]
 8004290:	2a00      	cmp	r2, #0
 8004292:	d13d      	bne.n	8004310 <USB_EPStartXfer+0x394>
 8004294:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 8004298:	b289      	uxth	r1, r1
 800429a:	7820      	ldrb	r0, [r4, #0]
 800429c:	0100      	lsls	r0, r0, #4
 800429e:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 80042a2:	440a      	add	r2, r1
 80042a4:	5a81      	ldrh	r1, [r0, r2]
 80042a6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80042aa:	5281      	strh	r1, [r0, r2]
 80042ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80042ae:	d91a      	bls.n	80042e6 <USB_EPStartXfer+0x36a>
 80042b0:	095e      	lsrs	r6, r3, #5
 80042b2:	f013 0f1f 	tst.w	r3, #31
 80042b6:	bf08      	it	eq
 80042b8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80042bc:	5a81      	ldrh	r1, [r0, r2]
 80042be:	b289      	uxth	r1, r1
 80042c0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80042c4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80042c8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80042cc:	b289      	uxth	r1, r1
 80042ce:	5281      	strh	r1, [r0, r2]
 80042d0:	e020      	b.n	8004314 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042d2:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 80042d6:	b289      	uxth	r1, r1
 80042d8:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80042dc:	440a      	add	r2, r1
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	b2b1      	uxth	r1, r6
 80042e2:	52d1      	strh	r1, [r2, r3]
 80042e4:	e7c2      	b.n	800426c <USB_EPStartXfer+0x2f0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042e6:	b93b      	cbnz	r3, 80042f8 <USB_EPStartXfer+0x37c>
 80042e8:	5a81      	ldrh	r1, [r0, r2]
 80042ea:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80042ee:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80042f2:	b289      	uxth	r1, r1
 80042f4:	5281      	strh	r1, [r0, r2]
 80042f6:	e00d      	b.n	8004314 <USB_EPStartXfer+0x398>
 80042f8:	085e      	lsrs	r6, r3, #1
 80042fa:	f013 0f01 	tst.w	r3, #1
 80042fe:	bf18      	it	ne
 8004300:	3601      	addne	r6, #1
 8004302:	5a81      	ldrh	r1, [r0, r2]
 8004304:	b289      	uxth	r1, r1
 8004306:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800430a:	b289      	uxth	r1, r1
 800430c:	5281      	strh	r1, [r0, r2]
 800430e:	e001      	b.n	8004314 <USB_EPStartXfer+0x398>
 8004310:	2a01      	cmp	r2, #1
 8004312:	d006      	beq.n	8004322 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004314:	b29b      	uxth	r3, r3
 8004316:	8962      	ldrh	r2, [r4, #10]
 8004318:	6961      	ldr	r1, [r4, #20]
 800431a:	4628      	mov	r0, r5
 800431c:	f7ff fe17 	bl	8003f4e <USB_WritePMA>
 8004320:	e6a0      	b.n	8004064 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004322:	f8b5 0050 	ldrh.w	r0, [r5, #80]	@ 0x50
 8004326:	b280      	uxth	r0, r0
 8004328:	7821      	ldrb	r1, [r4, #0]
 800432a:	0109      	lsls	r1, r1, #4
 800432c:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 8004330:	4402      	add	r2, r0
 8004332:	b298      	uxth	r0, r3
 8004334:	5288      	strh	r0, [r1, r2]
 8004336:	e7ed      	b.n	8004314 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004338:	7809      	ldrb	r1, [r1, #0]
 800433a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800433e:	b292      	uxth	r2, r2
 8004340:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8004344:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004348:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800434c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004350:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004354:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
 8004358:	b280      	uxth	r0, r0
 800435a:	7821      	ldrb	r1, [r4, #0]
 800435c:	0109      	lsls	r1, r1, #4
 800435e:	f205 4204 	addw	r2, r5, #1028	@ 0x404
 8004362:	4402      	add	r2, r0
 8004364:	b29b      	uxth	r3, r3
 8004366:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004368:	8922      	ldrh	r2, [r4, #8]
 800436a:	6961      	ldr	r1, [r4, #20]
 800436c:	4628      	mov	r0, r5
 800436e:	f7ff fdee 	bl	8003f4e <USB_WritePMA>
 8004372:	e677      	b.n	8004064 <USB_EPStartXfer+0xe8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004374:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004378:	b292      	uxth	r2, r2
 800437a:	f200 4104 	addw	r1, r0, #1028	@ 0x404
 800437e:	4411      	add	r1, r2
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	b2b3      	uxth	r3, r6
 8004384:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004386:	8922      	ldrh	r2, [r4, #8]
 8004388:	6961      	ldr	r1, [r4, #20]
 800438a:	f7ff fde0 	bl	8003f4e <USB_WritePMA>
 800438e:	e669      	b.n	8004064 <USB_EPStartXfer+0xe8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004390:	b93b      	cbnz	r3, 80043a2 <USB_EPStartXfer+0x426>
 8004392:	5a43      	ldrh	r3, [r0, r1]
 8004394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439c:	b29b      	uxth	r3, r3
 800439e:	5243      	strh	r3, [r0, r1]
 80043a0:	e61d      	b.n	8003fde <USB_EPStartXfer+0x62>
 80043a2:	085a      	lsrs	r2, r3, #1
 80043a4:	f013 0f01 	tst.w	r3, #1
 80043a8:	bf18      	it	ne
 80043aa:	3201      	addne	r2, #1
 80043ac:	5a43      	ldrh	r3, [r0, r1]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	5243      	strh	r3, [r0, r1]
 80043b8:	e611      	b.n	8003fde <USB_EPStartXfer+0x62>
      if (ep->type == EP_TYPE_BULK)
 80043ba:	78ca      	ldrb	r2, [r1, #3]
 80043bc:	2a02      	cmp	r2, #2
 80043be:	d04b      	beq.n	8004458 <USB_EPStartXfer+0x4dc>
      else if (ep->type == EP_TYPE_ISOC)
 80043c0:	2a01      	cmp	r2, #1
 80043c2:	f040 8134 	bne.w	800462e <USB_EPStartXfer+0x6b2>
        if (ep->xfer_len > ep->maxpacket)
 80043c6:	698a      	ldr	r2, [r1, #24]
 80043c8:	6909      	ldr	r1, [r1, #16]
 80043ca:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 80043cc:	bf86      	itte	hi
 80043ce:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 80043d0:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 80043d2:	2000      	movls	r0, #0
 80043d4:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f47f ae01 	bne.w	8003fde <USB_EPStartXfer+0x62>
 80043dc:	f8b5 0050 	ldrh.w	r0, [r5, #80]	@ 0x50
 80043e0:	b280      	uxth	r0, r0
 80043e2:	7821      	ldrb	r1, [r4, #0]
 80043e4:	0109      	lsls	r1, r1, #4
 80043e6:	f205 4304 	addw	r3, r5, #1028	@ 0x404
 80043ea:	4403      	add	r3, r0
 80043ec:	5ac8      	ldrh	r0, [r1, r3]
 80043ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80043f2:	52c8      	strh	r0, [r1, r3]
 80043f4:	2a3e      	cmp	r2, #62	@ 0x3e
 80043f6:	f240 80c7 	bls.w	8004588 <USB_EPStartXfer+0x60c>
 80043fa:	0956      	lsrs	r6, r2, #5
 80043fc:	f012 071f 	ands.w	r7, r2, #31
 8004400:	bf0c      	ite	eq
 8004402:	f106 3cff 	addeq.w	ip, r6, #4294967295
 8004406:	46b4      	movne	ip, r6
 8004408:	5ac8      	ldrh	r0, [r1, r3]
 800440a:	b280      	uxth	r0, r0
 800440c:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8004410:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8004414:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8004418:	b280      	uxth	r0, r0
 800441a:	52c8      	strh	r0, [r1, r3]
 800441c:	7863      	ldrb	r3, [r4, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 80f7 	bne.w	8004612 <USB_EPStartXfer+0x696>
 8004424:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 800442e:	441a      	add	r2, r3
 8004430:	7821      	ldrb	r1, [r4, #0]
 8004432:	0109      	lsls	r1, r1, #4
 8004434:	5a53      	ldrh	r3, [r2, r1]
 8004436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443a:	5253      	strh	r3, [r2, r1]
 800443c:	2f00      	cmp	r7, #0
 800443e:	f000 80e6 	beq.w	800460e <USB_EPStartXfer+0x692>
 8004442:	5a53      	ldrh	r3, [r2, r1]
 8004444:	b29b      	uxth	r3, r3
 8004446:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 800444a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004452:	b29b      	uxth	r3, r3
 8004454:	5253      	strh	r3, [r2, r1]
 8004456:	e5c2      	b.n	8003fde <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004458:	2b00      	cmp	r3, #0
 800445a:	d140      	bne.n	80044de <USB_EPStartXfer+0x562>
 800445c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8004460:	b289      	uxth	r1, r1
 8004462:	7822      	ldrb	r2, [r4, #0]
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	f200 4304 	addw	r3, r0, #1028	@ 0x404
 800446a:	440b      	add	r3, r1
 800446c:	5ad1      	ldrh	r1, [r2, r3]
 800446e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004472:	52d1      	strh	r1, [r2, r3]
 8004474:	6921      	ldr	r1, [r4, #16]
 8004476:	293e      	cmp	r1, #62	@ 0x3e
 8004478:	d94f      	bls.n	800451a <USB_EPStartXfer+0x59e>
 800447a:	0948      	lsrs	r0, r1, #5
 800447c:	f011 0f1f 	tst.w	r1, #31
 8004480:	bf08      	it	eq
 8004482:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004486:	5ad1      	ldrh	r1, [r2, r3]
 8004488:	b289      	uxth	r1, r1
 800448a:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800448e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004492:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004496:	b289      	uxth	r1, r1
 8004498:	52d1      	strh	r1, [r2, r3]
 800449a:	7863      	ldrb	r3, [r4, #1]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d166      	bne.n	800456e <USB_EPStartXfer+0x5f2>
 80044a0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 80044a4:	b289      	uxth	r1, r1
 80044a6:	7822      	ldrb	r2, [r4, #0]
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	f205 430c 	addw	r3, r5, #1036	@ 0x40c
 80044ae:	440b      	add	r3, r1
 80044b0:	5ad1      	ldrh	r1, [r2, r3]
 80044b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80044b6:	52d1      	strh	r1, [r2, r3]
 80044b8:	6921      	ldr	r1, [r4, #16]
 80044ba:	293e      	cmp	r1, #62	@ 0x3e
 80044bc:	d942      	bls.n	8004544 <USB_EPStartXfer+0x5c8>
 80044be:	0948      	lsrs	r0, r1, #5
 80044c0:	f011 0f1f 	tst.w	r1, #31
 80044c4:	bf08      	it	eq
 80044c6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80044ca:	5ad1      	ldrh	r1, [r2, r3]
 80044cc:	b289      	uxth	r1, r1
 80044ce:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80044d2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80044d6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80044da:	b289      	uxth	r1, r1
 80044dc:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 80044de:	69e3      	ldr	r3, [r4, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f43f ad7c 	beq.w	8003fde <USB_EPStartXfer+0x62>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80044e6:	7822      	ldrb	r2, [r4, #0]
 80044e8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80044ec:	f244 0340 	movw	r3, #16448	@ 0x4040
 80044f0:	ea03 0001 	and.w	r0, r3, r1
 80044f4:	438b      	bics	r3, r1
 80044f6:	d002      	beq.n	80044fe <USB_EPStartXfer+0x582>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f47f ad70 	bne.w	8003fde <USB_EPStartXfer+0x62>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80044fe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004510:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004514:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8004518:	e561      	b.n	8003fde <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800451a:	b939      	cbnz	r1, 800452c <USB_EPStartXfer+0x5b0>
 800451c:	5ad1      	ldrh	r1, [r2, r3]
 800451e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004522:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004526:	b289      	uxth	r1, r1
 8004528:	52d1      	strh	r1, [r2, r3]
 800452a:	e7b6      	b.n	800449a <USB_EPStartXfer+0x51e>
 800452c:	0848      	lsrs	r0, r1, #1
 800452e:	f011 0f01 	tst.w	r1, #1
 8004532:	bf18      	it	ne
 8004534:	3001      	addne	r0, #1
 8004536:	5ad1      	ldrh	r1, [r2, r3]
 8004538:	b289      	uxth	r1, r1
 800453a:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800453e:	b289      	uxth	r1, r1
 8004540:	52d1      	strh	r1, [r2, r3]
 8004542:	e7aa      	b.n	800449a <USB_EPStartXfer+0x51e>
 8004544:	b939      	cbnz	r1, 8004556 <USB_EPStartXfer+0x5da>
 8004546:	5ad1      	ldrh	r1, [r2, r3]
 8004548:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800454c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004550:	b289      	uxth	r1, r1
 8004552:	52d1      	strh	r1, [r2, r3]
 8004554:	e7c3      	b.n	80044de <USB_EPStartXfer+0x562>
 8004556:	0848      	lsrs	r0, r1, #1
 8004558:	f011 0f01 	tst.w	r1, #1
 800455c:	bf18      	it	ne
 800455e:	3001      	addne	r0, #1
 8004560:	5ad1      	ldrh	r1, [r2, r3]
 8004562:	b289      	uxth	r1, r1
 8004564:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004568:	b289      	uxth	r1, r1
 800456a:	52d1      	strh	r1, [r2, r3]
 800456c:	e7b7      	b.n	80044de <USB_EPStartXfer+0x562>
 800456e:	2b01      	cmp	r3, #1
 8004570:	d1b5      	bne.n	80044de <USB_EPStartXfer+0x562>
 8004572:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 8004576:	b289      	uxth	r1, r1
 8004578:	7822      	ldrb	r2, [r4, #0]
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	f205 430c 	addw	r3, r5, #1036	@ 0x40c
 8004580:	440b      	add	r3, r1
 8004582:	8a21      	ldrh	r1, [r4, #16]
 8004584:	52d1      	strh	r1, [r2, r3]
 8004586:	e7aa      	b.n	80044de <USB_EPStartXfer+0x562>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004588:	b9ea      	cbnz	r2, 80045c6 <USB_EPStartXfer+0x64a>
 800458a:	5ac8      	ldrh	r0, [r1, r3]
 800458c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8004590:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8004594:	b280      	uxth	r0, r0
 8004596:	52c8      	strh	r0, [r1, r3]
 8004598:	7863      	ldrb	r3, [r4, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d139      	bne.n	8004612 <USB_EPStartXfer+0x696>
 800459e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	7821      	ldrb	r1, [r4, #0]
 80045a6:	0109      	lsls	r1, r1, #4
 80045a8:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 80045ac:	441a      	add	r2, r3
 80045ae:	5a8b      	ldrh	r3, [r1, r2]
 80045b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b4:	528b      	strh	r3, [r1, r2]
 80045b6:	5a8b      	ldrh	r3, [r1, r2]
 80045b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	528b      	strh	r3, [r1, r2]
 80045c4:	e50b      	b.n	8003fde <USB_EPStartXfer+0x62>
 80045c6:	0856      	lsrs	r6, r2, #1
 80045c8:	f012 0701 	ands.w	r7, r2, #1
 80045cc:	bf14      	ite	ne
 80045ce:	f106 0c01 	addne.w	ip, r6, #1
 80045d2:	46b4      	moveq	ip, r6
 80045d4:	5ac8      	ldrh	r0, [r1, r3]
 80045d6:	b280      	uxth	r0, r0
 80045d8:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80045dc:	b280      	uxth	r0, r0
 80045de:	52c8      	strh	r0, [r1, r3]
 80045e0:	7863      	ldrb	r3, [r4, #1]
 80045e2:	b9b3      	cbnz	r3, 8004612 <USB_EPStartXfer+0x696>
 80045e4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 80045ee:	441a      	add	r2, r3
 80045f0:	7821      	ldrb	r1, [r4, #0]
 80045f2:	0109      	lsls	r1, r1, #4
 80045f4:	5a53      	ldrh	r3, [r2, r1]
 80045f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045fa:	5253      	strh	r3, [r2, r1]
 80045fc:	b107      	cbz	r7, 8004600 <USB_EPStartXfer+0x684>
 80045fe:	3601      	adds	r6, #1
 8004600:	5a53      	ldrh	r3, [r2, r1]
 8004602:	b29b      	uxth	r3, r3
 8004604:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8004608:	b29b      	uxth	r3, r3
 800460a:	5253      	strh	r3, [r2, r1]
 800460c:	e4e7      	b.n	8003fde <USB_EPStartXfer+0x62>
 800460e:	3e01      	subs	r6, #1
 8004610:	e717      	b.n	8004442 <USB_EPStartXfer+0x4c6>
 8004612:	2b01      	cmp	r3, #1
 8004614:	f47f ace3 	bne.w	8003fde <USB_EPStartXfer+0x62>
 8004618:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800461c:	b29b      	uxth	r3, r3
 800461e:	7821      	ldrb	r1, [r4, #0]
 8004620:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004624:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004628:	b292      	uxth	r2, r2
 800462a:	52ea      	strh	r2, [r5, r3]
 800462c:	e4d7      	b.n	8003fde <USB_EPStartXfer+0x62>
        return HAL_ERROR;
 800462e:	2001      	movs	r0, #1
 8004630:	e4e6      	b.n	8004000 <USB_EPStartXfer+0x84>

08004632 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004632:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004634:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8004638:	f500 6480 	add.w	r4, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 800463c:	085d      	lsrs	r5, r3, #1
 800463e:	d014      	beq.n	800466a <USB_ReadPMA+0x38>
 8004640:	f101 0c02 	add.w	ip, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004644:	4620      	mov	r0, r4
  for (count = n; count != 0U; count--)
 8004646:	46ae      	mov	lr, r5
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004648:	f830 2b04 	ldrh.w	r2, [r0], #4
 800464c:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800464e:	f80c 2c02 	strb.w	r2, [ip, #-2]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004652:	0a12      	lsrs	r2, r2, #8
 8004654:	f80c 2c01 	strb.w	r2, [ip, #-1]
  for (count = n; count != 0U; count--)
 8004658:	f10c 0c02 	add.w	ip, ip, #2
 800465c:	f1be 0e01 	subs.w	lr, lr, #1
 8004660:	d1f2      	bne.n	8004648 <USB_ReadPMA+0x16>
    pBuf++;
 8004662:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8004666:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800466a:	f013 0f01 	tst.w	r3, #1
  {
    RdVal = *pdwVal;
 800466e:	bf1c      	itt	ne
 8004670:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004672:	700b      	strbne	r3, [r1, #0]
  }
}
 8004674:	bd30      	pop	{r4, r5, pc}

08004676 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004676:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 800467a:	b183      	cbz	r3, 800469e <USBD_CDC_EP0_RxReady+0x28>
{
 800467c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800467e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004682:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8004686:	28ff      	cmp	r0, #255	@ 0xff
 8004688:	d007      	beq.n	800469a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8004690:	4621      	mov	r1, r4
 8004692:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004694:	23ff      	movs	r3, #255	@ 0xff
 8004696:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 800469a:	2000      	movs	r0, #0
 800469c:	bd10      	pop	{r4, pc}
 800469e:	2000      	movs	r0, #0
 80046a0:	4770      	bx	lr
	...

080046a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80046a4:	2343      	movs	r3, #67	@ 0x43
 80046a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80046a8:	4800      	ldr	r0, [pc, #0]	@ (80046ac <USBD_CDC_GetFSCfgDesc+0x8>)
 80046aa:	4770      	bx	lr
 80046ac:	200001e8 	.word	0x200001e8

080046b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80046b0:	2343      	movs	r3, #67	@ 0x43
 80046b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80046b4:	4800      	ldr	r0, [pc, #0]	@ (80046b8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80046b6:	4770      	bx	lr
 80046b8:	2000022c 	.word	0x2000022c

080046bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80046bc:	2343      	movs	r3, #67	@ 0x43
 80046be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80046c0:	4800      	ldr	r0, [pc, #0]	@ (80046c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80046c2:	4770      	bx	lr
 80046c4:	200001a4 	.word	0x200001a4

080046c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80046c8:	230a      	movs	r3, #10
 80046ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80046cc:	4800      	ldr	r0, [pc, #0]	@ (80046d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80046ce:	4770      	bx	lr
 80046d0:	200002a8 	.word	0x200002a8

080046d4 <USBD_CDC_DataOut>:
{
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80046d8:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80046dc:	f000 fffc 	bl	80056d8 <USBD_LL_GetRxDataSize>
 80046e0:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80046e4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80046e8:	b14b      	cbz	r3, 80046fe <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80046ea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80046f4:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80046f8:	4798      	blx	r3
    return USBD_OK;
 80046fa:	2000      	movs	r0, #0
}
 80046fc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80046fe:	2002      	movs	r0, #2
 8004700:	e7fc      	b.n	80046fc <USBD_CDC_DataOut+0x28>

08004702 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004702:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8004706:	b312      	cbz	r2, 800474e <USBD_CDC_DataIn+0x4c>
{
 8004708:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800470a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800470e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004712:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	b14b      	cbz	r3, 800472e <USBD_CDC_DataIn+0x2c>
 800471a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800471e:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8004722:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 8004724:	fbb3 fcf4 	udiv	ip, r3, r4
 8004728:	fb04 331c 	mls	r3, r4, ip, r3
 800472c:	b11b      	cbz	r3, 8004736 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800472e:	2000      	movs	r0, #0
 8004730:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
}
 8004734:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8004736:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800473a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800473e:	2400      	movs	r4, #0
 8004740:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004742:	4623      	mov	r3, r4
 8004744:	4622      	mov	r2, r4
 8004746:	f000 ffb7 	bl	80056b8 <USBD_LL_Transmit>
    return USBD_OK;
 800474a:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800474c:	e7f2      	b.n	8004734 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 800474e:	2002      	movs	r0, #2
}
 8004750:	4770      	bx	lr

08004752 <USBD_CDC_Setup>:
{
 8004752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004754:	b083      	sub	sp, #12
 8004756:	4606      	mov	r6, r0
 8004758:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800475a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	@ 0x2b8
  uint8_t ifalt = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8004764:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004768:	780b      	ldrb	r3, [r1, #0]
 800476a:	f013 0560 	ands.w	r5, r3, #96	@ 0x60
 800476e:	d027      	beq.n	80047c0 <USBD_CDC_Setup+0x6e>
 8004770:	2d20      	cmp	r5, #32
 8004772:	d153      	bne.n	800481c <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8004774:	88ca      	ldrh	r2, [r1, #6]
 8004776:	b1da      	cbz	r2, 80047b0 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8004778:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800477c:	d00c      	beq.n	8004798 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800477e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4639      	mov	r1, r7
 8004786:	7860      	ldrb	r0, [r4, #1]
 8004788:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800478a:	88e2      	ldrh	r2, [r4, #6]
 800478c:	4639      	mov	r1, r7
 800478e:	4630      	mov	r0, r6
 8004790:	f000 fd5f 	bl	8005252 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004794:	2500      	movs	r5, #0
 8004796:	e044      	b.n	8004822 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8004798:	784b      	ldrb	r3, [r1, #1]
 800479a:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800479e:	88cb      	ldrh	r3, [r1, #6]
 80047a0:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80047a4:	88ca      	ldrh	r2, [r1, #6]
 80047a6:	4639      	mov	r1, r7
 80047a8:	f000 fd68 	bl	800527c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80047ac:	2500      	movs	r5, #0
 80047ae:	e038      	b.n	8004822 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047b0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	7848      	ldrb	r0, [r1, #1]
 80047ba:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80047bc:	2500      	movs	r5, #0
 80047be:	e030      	b.n	8004822 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 80047c0:	784f      	ldrb	r7, [r1, #1]
 80047c2:	2f0a      	cmp	r7, #10
 80047c4:	d014      	beq.n	80047f0 <USBD_CDC_Setup+0x9e>
 80047c6:	2f0b      	cmp	r7, #11
 80047c8:	d020      	beq.n	800480c <USBD_CDC_Setup+0xba>
 80047ca:	b11f      	cbz	r7, 80047d4 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 80047cc:	f000 fa55 	bl	8004c7a <USBD_CtlError>
          ret = USBD_FAIL;
 80047d0:	2502      	movs	r5, #2
          break;
 80047d2:	e026      	b.n	8004822 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047d4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d003      	beq.n	80047e4 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 80047dc:	f000 fa4d 	bl	8004c7a <USBD_CtlError>
            ret = USBD_FAIL;
 80047e0:	2502      	movs	r5, #2
 80047e2:	e01e      	b.n	8004822 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80047e4:	2202      	movs	r2, #2
 80047e6:	a901      	add	r1, sp, #4
 80047e8:	f000 fd33 	bl	8005252 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80047ec:	463d      	mov	r5, r7
 80047ee:	e018      	b.n	8004822 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d003      	beq.n	8004800 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 80047f8:	f000 fa3f 	bl	8004c7a <USBD_CtlError>
            ret = USBD_FAIL;
 80047fc:	2502      	movs	r5, #2
 80047fe:	e010      	b.n	8004822 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004800:	2201      	movs	r2, #1
 8004802:	f10d 0107 	add.w	r1, sp, #7
 8004806:	f000 fd24 	bl	8005252 <USBD_CtlSendData>
 800480a:	e00a      	b.n	8004822 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800480c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004810:	2b03      	cmp	r3, #3
 8004812:	d006      	beq.n	8004822 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8004814:	f000 fa31 	bl	8004c7a <USBD_CtlError>
            ret = USBD_FAIL;
 8004818:	2502      	movs	r5, #2
 800481a:	e002      	b.n	8004822 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 800481c:	f000 fa2d 	bl	8004c7a <USBD_CtlError>
      ret = USBD_FAIL;
 8004820:	2502      	movs	r5, #2
}
 8004822:	4628      	mov	r0, r5
 8004824:	b003      	add	sp, #12
 8004826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004828 <USBD_CDC_DeInit>:
{
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800482c:	2181      	movs	r1, #129	@ 0x81
 800482e:	f000 ff0c 	bl	800564a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004832:	2500      	movs	r5, #0
 8004834:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004836:	2101      	movs	r1, #1
 8004838:	4620      	mov	r0, r4
 800483a:	f000 ff06 	bl	800564a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800483e:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004842:	2182      	movs	r1, #130	@ 0x82
 8004844:	4620      	mov	r0, r4
 8004846:	f000 ff00 	bl	800564a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800484a:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 800484c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004850:	b14b      	cbz	r3, 8004866 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004852:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800485a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 800485e:	f000 ff45 	bl	80056ec <USBD_static_free>
    pdev->pClassData = NULL;
 8004862:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8004866:	2000      	movs	r0, #0
 8004868:	bd38      	pop	{r3, r4, r5, pc}

0800486a <USBD_CDC_Init>:
{
 800486a:	b570      	push	{r4, r5, r6, lr}
 800486c:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800486e:	7c03      	ldrb	r3, [r0, #16]
 8004870:	bba3      	cbnz	r3, 80048dc <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004876:	2202      	movs	r2, #2
 8004878:	2181      	movs	r1, #129	@ 0x81
 800487a:	f000 fedb 	bl	8005634 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800487e:	2101      	movs	r1, #1
 8004880:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004886:	2202      	movs	r2, #2
 8004888:	4620      	mov	r0, r4
 800488a:	f000 fed3 	bl	8005634 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800488e:	2501      	movs	r5, #1
 8004890:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004894:	2308      	movs	r3, #8
 8004896:	2203      	movs	r2, #3
 8004898:	2182      	movs	r1, #130	@ 0x82
 800489a:	4620      	mov	r0, r4
 800489c:	f000 feca 	bl	8005634 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80048a0:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80048a2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80048a6:	f000 ff1d 	bl	80056e4 <USBD_static_malloc>
 80048aa:	4605      	mov	r5, r0
 80048ac:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 80048b0:	b350      	cbz	r0, 8004908 <USBD_CDC_Init+0x9e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80048b2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4798      	blx	r3
    hcdc->TxState = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    hcdc->RxState = 0U;
 80048c0:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048c4:	7c26      	ldrb	r6, [r4, #16]
 80048c6:	b9b6      	cbnz	r6, 80048f6 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048cc:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80048d0:	2101      	movs	r1, #1
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 fef8 	bl	80056c8 <USBD_LL_PrepareReceive>
}
 80048d8:	4630      	mov	r0, r6
 80048da:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80048dc:	2340      	movs	r3, #64	@ 0x40
 80048de:	2202      	movs	r2, #2
 80048e0:	2181      	movs	r1, #129	@ 0x81
 80048e2:	f000 fea7 	bl	8005634 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80048e6:	2101      	movs	r1, #1
 80048e8:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80048ea:	2340      	movs	r3, #64	@ 0x40
 80048ec:	2202      	movs	r2, #2
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 fea0 	bl	8005634 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80048f4:	e7cb      	b.n	800488e <USBD_CDC_Init+0x24>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048f6:	2340      	movs	r3, #64	@ 0x40
 80048f8:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80048fc:	2101      	movs	r1, #1
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 fee2 	bl	80056c8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004904:	2600      	movs	r6, #0
 8004906:	e7e7      	b.n	80048d8 <USBD_CDC_Init+0x6e>
    ret = 1U;
 8004908:	2601      	movs	r6, #1
 800490a:	e7e5      	b.n	80048d8 <USBD_CDC_Init+0x6e>

0800490c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800490c:	b119      	cbz	r1, 8004916 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800490e:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8004912:	2000      	movs	r0, #0
 8004914:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004916:	2002      	movs	r0, #2
  }

  return ret;
}
 8004918:	4770      	bx	lr

0800491a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800491a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
 800491e:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004922:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
}
 8004926:	2000      	movs	r0, #0
 8004928:	4770      	bx	lr

0800492a <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800492a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->RxBuffer = pbuff;
 800492e:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return USBD_OK;
}
 8004932:	2000      	movs	r0, #0
 8004934:	4770      	bx	lr

08004936 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004936:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  if (pdev->pClassData != NULL)
 800493a:	b19a      	cbz	r2, 8004964 <USBD_CDC_TransmitPacket+0x2e>
{
 800493c:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 800493e:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8004942:	b10b      	cbz	r3, 8004948 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004944:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004946:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8004948:	2301      	movs	r3, #1
 800494a:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800494e:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8004952:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004954:	b29b      	uxth	r3, r3
 8004956:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800495a:	2181      	movs	r1, #129	@ 0x81
 800495c:	f000 feac 	bl	80056b8 <USBD_LL_Transmit>
      return USBD_OK;
 8004960:	2000      	movs	r0, #0
 8004962:	e7f0      	b.n	8004946 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8004964:	2002      	movs	r0, #2
}
 8004966:	4770      	bx	lr

08004968 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004968:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800496a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800496e:	b192      	cbz	r2, 8004996 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004970:	7c04      	ldrb	r4, [r0, #16]
 8004972:	b944      	cbnz	r4, 8004986 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004978:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800497c:	2101      	movs	r1, #1
 800497e:	f000 fea3 	bl	80056c8 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004982:	4620      	mov	r0, r4
 8004984:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004986:	2340      	movs	r3, #64	@ 0x40
 8004988:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 800498c:	2101      	movs	r1, #1
 800498e:	f000 fe9b 	bl	80056c8 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004992:	2400      	movs	r4, #0
 8004994:	e7f5      	b.n	8004982 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8004996:	2402      	movs	r4, #2
 8004998:	e7f3      	b.n	8004982 <USBD_CDC_ReceivePacket+0x1a>

0800499a <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800499a:	b198      	cbz	r0, 80049c4 <USBD_Init+0x2a>
{
 800499c:	b508      	push	{r3, lr}
 800499e:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80049a0:	f8d0 02b4 	ldr.w	r0, [r0, #692]	@ 0x2b4
 80049a4:	b110      	cbz	r0, 80049ac <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80049a6:	2000      	movs	r0, #0
 80049a8:	f8c3 02b4 	str.w	r0, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80049ac:	b109      	cbz	r1, 80049b2 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80049ae:	f8c3 12b0 	str.w	r1, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049b2:	2101      	movs	r1, #1
 80049b4:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 80049b8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fdf0 	bl	80055a0 <USBD_LL_Init>

  return USBD_OK;
 80049c0:	2000      	movs	r0, #0
}
 80049c2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80049c4:	2002      	movs	r0, #2
}
 80049c6:	4770      	bx	lr

080049c8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80049c8:	b119      	cbz	r1, 80049d2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80049ca:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 80049ce:	2000      	movs	r0, #0
 80049d0:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80049d2:	2002      	movs	r0, #2
  }

  return status;
}
 80049d4:	4770      	bx	lr

080049d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80049d6:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80049d8:	f000 fe24 	bl	8005624 <USBD_LL_Start>

  return USBD_OK;
}
 80049dc:	2000      	movs	r0, #0
 80049de:	bd08      	pop	{r3, pc}

080049e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80049e0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80049e2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80049e6:	b133      	cbz	r3, 80049f6 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4798      	blx	r3
 80049ec:	3800      	subs	r0, #0
 80049ee:	bf18      	it	ne
 80049f0:	2001      	movne	r0, #1
 80049f2:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80049f4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80049f6:	2002      	movs	r0, #2
 80049f8:	e7fc      	b.n	80049f4 <USBD_SetClassConfig+0x14>

080049fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80049fa:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80049fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4798      	blx	r3

  return USBD_OK;
}
 8004a04:	2000      	movs	r0, #0
 8004a06:	bd08      	pop	{r3, pc}

08004a08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a0c:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 8004a10:	4628      	mov	r0, r5
 8004a12:	f000 f91e 	bl	8004c52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a1c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8004a20:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a24:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 8004a28:	f001 031f 	and.w	r3, r1, #31
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d00e      	beq.n	8004a4e <USBD_LL_SetupStage+0x46>
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d011      	beq.n	8004a58 <USBD_LL_SetupStage+0x50>
 8004a34:	b12b      	cbz	r3, 8004a42 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a36:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f000 fe0d 	bl	800565a <USBD_LL_StallEP>
      break;
 8004a40:	e003      	b.n	8004a4a <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004a42:	4629      	mov	r1, r5
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 f923 	bl	8004c90 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 fad5 	bl	8005000 <USBD_StdItfReq>
      break;
 8004a56:	e7f8      	b.n	8004a4a <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 fb00 	bl	8005060 <USBD_StdEPReq>
      break;
 8004a60:	e7f3      	b.n	8004a4a <USBD_LL_SetupStage+0x42>

08004a62 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a62:	b538      	push	{r3, r4, r5, lr}
 8004a64:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004a66:	460d      	mov	r5, r1
 8004a68:	bb81      	cbnz	r1, 8004acc <USBD_LL_DataOutStage+0x6a>
 8004a6a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a6c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004a70:	2a03      	cmp	r2, #3
 8004a72:	d003      	beq.n	8004a7c <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004a74:	2a05      	cmp	r2, #5
 8004a76:	d022      	beq.n	8004abe <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004a78:	4608      	mov	r0, r1
 8004a7a:	e031      	b.n	8004ae0 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8004a7c:	f8d0 1160 	ldr.w	r1, [r0, #352]	@ 0x160
 8004a80:	f8d0 2164 	ldr.w	r2, [r0, #356]	@ 0x164
 8004a84:	4291      	cmp	r1, r2
 8004a86:	d90b      	bls.n	8004aa0 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8004a88:	1a89      	subs	r1, r1, r2
 8004a8a:	f8c0 1160 	str.w	r1, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	bf8c      	ite	hi
 8004a92:	b28a      	uxthhi	r2, r1
 8004a94:	b292      	uxthls	r2, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	f000 fbff 	bl	800529a <USBD_CtlContinueRx>
  return USBD_OK;
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	e01f      	b.n	8004ae0 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004aa0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	b11b      	cbz	r3, 8004ab0 <USBD_LL_DataOutStage+0x4e>
 8004aa8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004aac:	2a03      	cmp	r2, #3
 8004aae:	d004      	beq.n	8004aba <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f000 fbfa 	bl	80052aa <USBD_CtlSendStatus>
  return USBD_OK;
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	e012      	b.n	8004ae0 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8004aba:	4798      	blx	r3
 8004abc:	e7f8      	b.n	8004ab0 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004ac4:	f000 fdc9 	bl	800565a <USBD_LL_StallEP>
  return USBD_OK;
 8004ac8:	4628      	mov	r0, r5
 8004aca:	e009      	b.n	8004ae0 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004acc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	b133      	cbz	r3, 8004ae2 <USBD_LL_DataOutStage+0x80>
 8004ad4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004ad8:	2a03      	cmp	r2, #3
 8004ada:	d104      	bne.n	8004ae6 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8004adc:	4798      	blx	r3
  return USBD_OK;
 8004ade:	2000      	movs	r0, #0
}
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	e7fc      	b.n	8004ae0 <USBD_LL_DataOutStage+0x7e>
 8004ae6:	2002      	movs	r0, #2
 8004ae8:	e7fa      	b.n	8004ae0 <USBD_LL_DataOutStage+0x7e>

08004aea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004aea:	b538      	push	{r3, r4, r5, lr}
 8004aec:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004aee:	460d      	mov	r5, r1
 8004af0:	2900      	cmp	r1, #0
 8004af2:	d153      	bne.n	8004b9c <USBD_LL_DataInStage+0xb2>
 8004af4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004af6:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004afa:	2a02      	cmp	r2, #2
 8004afc:	d008      	beq.n	8004b10 <USBD_LL_DataInStage+0x26>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004afe:	f032 0304 	bics.w	r3, r2, #4
 8004b02:	d042      	beq.n	8004b8a <USBD_LL_DataInStage+0xa0>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004b04:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d042      	beq.n	8004b92 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004b0c:	4628      	mov	r0, r5
}
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004b10:	6a02      	ldr	r2, [r0, #32]
 8004b12:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8004b14:	428a      	cmp	r2, r1
 8004b16:	d81b      	bhi.n	8004b50 <USBD_LL_DataInStage+0x66>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004b18:	69c2      	ldr	r2, [r0, #28]
 8004b1a:	fbb2 f3f1 	udiv	r3, r2, r1
 8004b1e:	fb01 2313 	mls	r3, r1, r3, r2
 8004b22:	b92b      	cbnz	r3, 8004b30 <USBD_LL_DataInStage+0x46>
 8004b24:	4291      	cmp	r1, r2
 8004b26:	d803      	bhi.n	8004b30 <USBD_LL_DataInStage+0x46>
            (pep->total_length >= pep->maxpacket) &&
 8004b28:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d31c      	bcc.n	8004b6a <USBD_LL_DataInStage+0x80>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004b30:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	b11b      	cbz	r3, 8004b40 <USBD_LL_DataInStage+0x56>
 8004b38:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8004b3c:	2a03      	cmp	r2, #3
 8004b3e:	d021      	beq.n	8004b84 <USBD_LL_DataInStage+0x9a>
          USBD_LL_StallEP(pdev, 0x80U);
 8004b40:	2180      	movs	r1, #128	@ 0x80
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 fd89 	bl	800565a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fbb9 	bl	80052c0 <USBD_CtlReceiveStatus>
 8004b4e:	e7d9      	b.n	8004b04 <USBD_LL_DataInStage+0x1a>
        pep->rem_length -= pep->maxpacket;
 8004b50:	1a52      	subs	r2, r2, r1
 8004b52:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004b54:	b292      	uxth	r2, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	f000 fb88 	bl	800526c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	4620      	mov	r0, r4
 8004b64:	f000 fdb0 	bl	80056c8 <USBD_LL_PrepareReceive>
 8004b68:	e7cc      	b.n	8004b04 <USBD_LL_DataInStage+0x1a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	f000 fb7d 	bl	800526c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b72:	2100      	movs	r1, #0
 8004b74:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b78:	460b      	mov	r3, r1
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f000 fda3 	bl	80056c8 <USBD_LL_PrepareReceive>
 8004b82:	e7bf      	b.n	8004b04 <USBD_LL_DataInStage+0x1a>
            pdev->pClass->EP0_TxSent(pdev);
 8004b84:	4620      	mov	r0, r4
 8004b86:	4798      	blx	r3
 8004b88:	e7da      	b.n	8004b40 <USBD_LL_DataInStage+0x56>
        USBD_LL_StallEP(pdev, 0x80U);
 8004b8a:	2180      	movs	r1, #128	@ 0x80
 8004b8c:	f000 fd65 	bl	800565a <USBD_LL_StallEP>
 8004b90:	e7b8      	b.n	8004b04 <USBD_LL_DataInStage+0x1a>
      pdev->dev_test_mode = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8004b98:	4628      	mov	r0, r5
 8004b9a:	e7b8      	b.n	8004b0e <USBD_LL_DataInStage+0x24>
  else if ((pdev->pClass->DataIn != NULL) &&
 8004b9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	b133      	cbz	r3, 8004bb2 <USBD_LL_DataInStage+0xc8>
 8004ba4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004ba8:	2a03      	cmp	r2, #3
 8004baa:	d104      	bne.n	8004bb6 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8004bac:	4798      	blx	r3
  return USBD_OK;
 8004bae:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004bb0:	e7ad      	b.n	8004b0e <USBD_LL_DataInStage+0x24>
    return USBD_FAIL;
 8004bb2:	2002      	movs	r0, #2
 8004bb4:	e7ab      	b.n	8004b0e <USBD_LL_DataInStage+0x24>
 8004bb6:	2002      	movs	r0, #2
 8004bb8:	e7a9      	b.n	8004b0e <USBD_LL_DataInStage+0x24>

08004bba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004bba:	b570      	push	{r4, r5, r6, lr}
 8004bbc:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bbe:	2340      	movs	r3, #64	@ 0x40
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	f000 fd36 	bl	8005634 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004bc8:	2501      	movs	r5, #1
 8004bca:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bce:	2640      	movs	r6, #64	@ 0x40
 8004bd0:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bd4:	4633      	mov	r3, r6
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2180      	movs	r1, #128	@ 0x80
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fd2a 	bl	8005634 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004be0:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004be2:	6266      	str	r6, [r4, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004be4:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004bee:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004bf0:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4

  if (pdev->pClassData)
 8004bf4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8004bf8:	b12b      	cbz	r3, 8004c06 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004bfa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4620      	mov	r0, r4
 8004c04:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004c06:	2000      	movs	r0, #0
 8004c08:	bd70      	pop	{r4, r5, r6, pc}

08004c0a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004c0a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	4770      	bx	lr

08004c10 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004c10:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c14:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8004c1e:	2000      	movs	r0, #0
 8004c20:	4770      	bx	lr

08004c22 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c22:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c26:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c28:	bf04      	itt	eq
 8004c2a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8004c2e:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8004c32:	2000      	movs	r0, #0
 8004c34:	4770      	bx	lr

08004c36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c36:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c38:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d001      	beq.n	8004c44 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004c40:	2000      	movs	r0, #0
 8004c42:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004c44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f8      	beq.n	8004c40 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8004c4e:	4798      	blx	r3
 8004c50:	e7f6      	b.n	8004c40 <USBD_LL_SOF+0xa>

08004c52 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8004c52:	780b      	ldrb	r3, [r1, #0]
 8004c54:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004c56:	784b      	ldrb	r3, [r1, #1]
 8004c58:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004c5a:	78ca      	ldrb	r2, [r1, #3]
 8004c5c:	788b      	ldrb	r3, [r1, #2]
 8004c5e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004c62:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004c64:	794a      	ldrb	r2, [r1, #5]
 8004c66:	790b      	ldrb	r3, [r1, #4]
 8004c68:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004c6c:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004c6e:	79ca      	ldrb	r2, [r1, #7]
 8004c70:	798b      	ldrb	r3, [r1, #6]
 8004c72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004c76:	80c3      	strh	r3, [r0, #6]

}
 8004c78:	4770      	bx	lr

08004c7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004c7e:	2180      	movs	r1, #128	@ 0x80
 8004c80:	f000 fceb 	bl	800565a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004c84:	2100      	movs	r1, #0
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 fce7 	bl	800565a <USBD_LL_StallEP>
}
 8004c8c:	bd10      	pop	{r4, pc}
	...

08004c90 <USBD_StdDevReq>:
{
 8004c90:	b530      	push	{r4, r5, lr}
 8004c92:	b083      	sub	sp, #12
 8004c94:	4605      	mov	r5, r0
 8004c96:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c98:	780b      	ldrb	r3, [r1, #0]
 8004c9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d005      	beq.n	8004cae <USBD_StdDevReq+0x1e>
 8004ca2:	2b40      	cmp	r3, #64	@ 0x40
 8004ca4:	d003      	beq.n	8004cae <USBD_StdDevReq+0x1e>
 8004ca6:	b15b      	cbz	r3, 8004cc0 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8004ca8:	f7ff ffe7 	bl	8004c7a <USBD_CtlError>
      break;
 8004cac:	e005      	b.n	8004cba <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8004cae:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	4798      	blx	r3
}
 8004cba:	2000      	movs	r0, #0
 8004cbc:	b003      	add	sp, #12
 8004cbe:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8004cc0:	784b      	ldrb	r3, [r1, #1]
 8004cc2:	2b09      	cmp	r3, #9
 8004cc4:	f200 8197 	bhi.w	8004ff6 <USBD_StdDevReq+0x366>
 8004cc8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ccc:	0183015f 	.word	0x0183015f
 8004cd0:	017a0195 	.word	0x017a0195
 8004cd4:	00c90195 	.word	0x00c90195
 8004cd8:	0195000a 	.word	0x0195000a
 8004cdc:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004ce6:	884a      	ldrh	r2, [r1, #2]
 8004ce8:	0a13      	lsrs	r3, r2, #8
 8004cea:	3b01      	subs	r3, #1
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	f200 80a4 	bhi.w	8004e3a <USBD_StdDevReq+0x1aa>
 8004cf2:	e8df f003 	tbb	[pc, r3]
 8004cf6:	1804      	.short	0x1804
 8004cf8:	86a2a22c 	.word	0x86a2a22c
 8004cfc:	93          	.byte	0x93
 8004cfd:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004cfe:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f10d 0106 	add.w	r1, sp, #6
 8004d08:	7c00      	ldrb	r0, [r0, #16]
 8004d0a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004d0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 809f 	beq.w	8004e54 <USBD_StdDevReq+0x1c4>
 8004d16:	88e2      	ldrh	r2, [r4, #6]
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	f040 8092 	bne.w	8004e42 <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fac3 	bl	80052aa <USBD_CtlSendStatus>
 8004d24:	e7c9      	b.n	8004cba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d26:	7c03      	ldrb	r3, [r0, #16]
 8004d28:	b943      	cbnz	r3, 8004d3c <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004d2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	f10d 0006 	add.w	r0, sp, #6
 8004d34:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d36:	2302      	movs	r3, #2
 8004d38:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004d3a:	e7e7      	b.n	8004d0c <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004d3c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	f10d 0006 	add.w	r0, sp, #6
 8004d46:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004d4c:	e7de      	b.n	8004d0c <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	2a05      	cmp	r2, #5
 8004d52:	d852      	bhi.n	8004dfa <USBD_StdDevReq+0x16a>
 8004d54:	e8df f002 	tbb	[pc, r2]
 8004d58:	2a1d1003 	.word	0x2a1d1003
 8004d5c:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004d5e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	b123      	cbz	r3, 8004d70 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004d66:	f10d 0106 	add.w	r1, sp, #6
 8004d6a:	7c00      	ldrb	r0, [r0, #16]
 8004d6c:	4798      	blx	r3
  if (err != 0U)
 8004d6e:	e7cd      	b.n	8004d0c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004d70:	4621      	mov	r1, r4
 8004d72:	f7ff ff82 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004d76:	e7a0      	b.n	8004cba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004d78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	b123      	cbz	r3, 8004d8a <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004d80:	f10d 0106 	add.w	r1, sp, #6
 8004d84:	7c00      	ldrb	r0, [r0, #16]
 8004d86:	4798      	blx	r3
  if (err != 0U)
 8004d88:	e7c0      	b.n	8004d0c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	f7ff ff75 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004d90:	e793      	b.n	8004cba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004d92:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	b123      	cbz	r3, 8004da4 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004d9a:	f10d 0106 	add.w	r1, sp, #6
 8004d9e:	7c00      	ldrb	r0, [r0, #16]
 8004da0:	4798      	blx	r3
  if (err != 0U)
 8004da2:	e7b3      	b.n	8004d0c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004da4:	4621      	mov	r1, r4
 8004da6:	f7ff ff68 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004daa:	e786      	b.n	8004cba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004dac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	b123      	cbz	r3, 8004dbe <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004db4:	f10d 0106 	add.w	r1, sp, #6
 8004db8:	7c00      	ldrb	r0, [r0, #16]
 8004dba:	4798      	blx	r3
  if (err != 0U)
 8004dbc:	e7a6      	b.n	8004d0c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	f7ff ff5b 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004dc4:	e779      	b.n	8004cba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004dc6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	b123      	cbz	r3, 8004dd8 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004dce:	f10d 0106 	add.w	r1, sp, #6
 8004dd2:	7c00      	ldrb	r0, [r0, #16]
 8004dd4:	4798      	blx	r3
  if (err != 0U)
 8004dd6:	e799      	b.n	8004d0c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004dd8:	4621      	mov	r1, r4
 8004dda:	f7ff ff4e 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004dde:	e76c      	b.n	8004cba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004de0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	b123      	cbz	r3, 8004df2 <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004de8:	f10d 0106 	add.w	r1, sp, #6
 8004dec:	7c00      	ldrb	r0, [r0, #16]
 8004dee:	4798      	blx	r3
  if (err != 0U)
 8004df0:	e78c      	b.n	8004d0c <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004df2:	4621      	mov	r1, r4
 8004df4:	f7ff ff41 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004df8:	e75f      	b.n	8004cba <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	f7ff ff3d 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004e00:	e75b      	b.n	8004cba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e02:	7c03      	ldrb	r3, [r0, #16]
 8004e04:	b933      	cbnz	r3, 8004e14 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004e06:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0c:	f10d 0006 	add.w	r0, sp, #6
 8004e10:	4798      	blx	r3
  if (err != 0U)
 8004e12:	e77b      	b.n	8004d0c <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004e14:	4621      	mov	r1, r4
 8004e16:	f7ff ff30 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004e1a:	e74e      	b.n	8004cba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e1c:	7c03      	ldrb	r3, [r0, #16]
 8004e1e:	b943      	cbnz	r3, 8004e32 <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004e20:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	f10d 0006 	add.w	r0, sp, #6
 8004e2a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004e30:	e76c      	b.n	8004d0c <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004e32:	4621      	mov	r1, r4
 8004e34:	f7ff ff21 	bl	8004c7a <USBD_CtlError>
  if (err != 0U)
 8004e38:	e73f      	b.n	8004cba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	f7ff ff1d 	bl	8004c7a <USBD_CtlError>
    return;
 8004e40:	e73b      	b.n	8004cba <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf28      	it	cs
 8004e46:	461a      	movcs	r2, r3
 8004e48:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 f9ff 	bl	8005252 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004e54:	88e3      	ldrh	r3, [r4, #6]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f47f af2f 	bne.w	8004cba <USBD_StdDevReq+0x2a>
 8004e5c:	e75f      	b.n	8004d1e <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004e5e:	888b      	ldrh	r3, [r1, #4]
 8004e60:	b9eb      	cbnz	r3, 8004e9e <USBD_StdDevReq+0x20e>
 8004e62:	88cb      	ldrh	r3, [r1, #6]
 8004e64:	b9db      	cbnz	r3, 8004e9e <USBD_StdDevReq+0x20e>
 8004e66:	884b      	ldrh	r3, [r1, #2]
 8004e68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e6a:	d818      	bhi.n	8004e9e <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e6c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004e70:	2a03      	cmp	r2, #3
 8004e72:	d00d      	beq.n	8004e90 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004e74:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8004e76:	f880 429e 	strb.w	r4, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	f000 fc14 	bl	80056a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 fa12 	bl	80052aa <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004e86:	b134      	cbz	r4, 8004e96 <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f885 329c 	strb.w	r3, [r5, #668]	@ 0x29c
 8004e8e:	e714      	b.n	8004cba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004e90:	f7ff fef3 	bl	8004c7a <USBD_CtlError>
 8004e94:	e711      	b.n	8004cba <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f885 329c 	strb.w	r3, [r5, #668]	@ 0x29c
 8004e9c:	e70d      	b.n	8004cba <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f7ff feea 	bl	8004c7a <USBD_CtlError>
 8004ea6:	e708      	b.n	8004cba <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8004ea8:	788b      	ldrb	r3, [r1, #2]
 8004eaa:	4a54      	ldr	r2, [pc, #336]	@ (8004ffc <USBD_StdDevReq+0x36c>)
 8004eac:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d80d      	bhi.n	8004ece <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 8004eb2:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004eb6:	2a02      	cmp	r2, #2
 8004eb8:	d00c      	beq.n	8004ed4 <USBD_StdDevReq+0x244>
 8004eba:	2a03      	cmp	r2, #3
 8004ebc:	d020      	beq.n	8004f00 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8004ebe:	f7ff fedc 	bl	8004c7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8004ffc <USBD_StdDevReq+0x36c>)
 8004ec4:	7819      	ldrb	r1, [r3, #0]
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f7ff fd97 	bl	80049fa <USBD_ClrClassConfig>
        break;
 8004ecc:	e6f5      	b.n	8004cba <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004ece:	f7ff fed4 	bl	8004c7a <USBD_CtlError>
 8004ed2:	e6f2      	b.n	8004cba <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8004ed4:	b18b      	cbz	r3, 8004efa <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004eda:	2303      	movs	r3, #3
 8004edc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ee0:	f7ff fd7e 	bl	80049e0 <USBD_SetClassConfig>
 8004ee4:	2802      	cmp	r0, #2
 8004ee6:	d003      	beq.n	8004ef0 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 f9de 	bl	80052aa <USBD_CtlSendStatus>
 8004eee:	e6e4      	b.n	8004cba <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f7ff fec1 	bl	8004c7a <USBD_CtlError>
            return;
 8004ef8:	e6df      	b.n	8004cba <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8004efa:	f000 f9d6 	bl	80052aa <USBD_CtlSendStatus>
 8004efe:	e6dc      	b.n	8004cba <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8004f00:	b18b      	cbz	r3, 8004f26 <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8004f02:	6841      	ldr	r1, [r0, #4]
 8004f04:	2901      	cmp	r1, #1
 8004f06:	d01e      	beq.n	8004f46 <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004f08:	b2c9      	uxtb	r1, r1
 8004f0a:	f7ff fd76 	bl	80049fa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004ffc <USBD_StdDevReq+0x36c>)
 8004f10:	7819      	ldrb	r1, [r3, #0]
 8004f12:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7ff fd63 	bl	80049e0 <USBD_SetClassConfig>
 8004f1a:	2802      	cmp	r0, #2
 8004f1c:	d00e      	beq.n	8004f3c <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f9c3 	bl	80052aa <USBD_CtlSendStatus>
 8004f24:	e6c9      	b.n	8004cba <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f26:	2302      	movs	r3, #2
 8004f28:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004f30:	f7ff fd63 	bl	80049fa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004f34:	4628      	mov	r0, r5
 8004f36:	f000 f9b8 	bl	80052aa <USBD_CtlSendStatus>
 8004f3a:	e6be      	b.n	8004cba <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7ff fe9b 	bl	8004c7a <USBD_CtlError>
            return;
 8004f44:	e6b9      	b.n	8004cba <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8004f46:	f000 f9b0 	bl	80052aa <USBD_CtlSendStatus>
 8004f4a:	e6b6      	b.n	8004cba <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 8004f4c:	88cb      	ldrh	r3, [r1, #6]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d10a      	bne.n	8004f68 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 8004f52:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d909      	bls.n	8004f6e <USBD_StdDevReq+0x2de>
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d108      	bne.n	8004f70 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f5e:	2201      	movs	r2, #1
 8004f60:	1d01      	adds	r1, r0, #4
 8004f62:	f000 f976 	bl	8005252 <USBD_CtlSendData>
        break;
 8004f66:	e6a8      	b.n	8004cba <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004f68:	f7ff fe87 	bl	8004c7a <USBD_CtlError>
 8004f6c:	e6a5      	b.n	8004cba <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8004f6e:	b923      	cbnz	r3, 8004f7a <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8004f70:	4621      	mov	r1, r4
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7ff fe81 	bl	8004c7a <USBD_CtlError>
        break;
 8004f78:	e69f      	b.n	8004cba <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f82:	2201      	movs	r2, #1
 8004f84:	f000 f965 	bl	8005252 <USBD_CtlSendData>
        break;
 8004f88:	e697      	b.n	8004cba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8004f8a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d812      	bhi.n	8004fba <USBD_StdDevReq+0x32a>
      if (req->wLength != 0x2U)
 8004f94:	88cb      	ldrh	r3, [r1, #6]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d10c      	bne.n	8004fb4 <USBD_StdDevReq+0x324>
      if (pdev->dev_remote_wakeup)
 8004f9a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2303      	movne	r3, #3
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	f841 3f0c 	str.w	r3, [r1, #12]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004fac:	2202      	movs	r2, #2
 8004fae:	f000 f950 	bl	8005252 <USBD_CtlSendData>
      break;
 8004fb2:	e682      	b.n	8004cba <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8004fb4:	f7ff fe61 	bl	8004c7a <USBD_CtlError>
        break;
 8004fb8:	e67f      	b.n	8004cba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004fba:	f7ff fe5e 	bl	8004c7a <USBD_CtlError>
      break;
 8004fbe:	e67c      	b.n	8004cba <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fc0:	884b      	ldrh	r3, [r1, #2]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	f47f ae79 	bne.w	8004cba <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8004fc8:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8004fcc:	f000 f96d 	bl	80052aa <USBD_CtlSendStatus>
 8004fd0:	e673      	b.n	8004cba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8004fd2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d809      	bhi.n	8004ff0 <USBD_StdDevReq+0x360>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fdc:	884b      	ldrh	r3, [r1, #2]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f47f ae6b 	bne.w	8004cba <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8004fea:	f000 f95e 	bl	80052aa <USBD_CtlSendStatus>
 8004fee:	e664      	b.n	8004cba <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004ff0:	f7ff fe43 	bl	8004c7a <USBD_CtlError>
      break;
 8004ff4:	e661      	b.n	8004cba <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004ff6:	f7ff fe40 	bl	8004c7a <USBD_CtlError>
          break;
 8004ffa:	e65e      	b.n	8004cba <USBD_StdDevReq+0x2a>
 8004ffc:	20000d24 	.word	0x20000d24

08005000 <USBD_StdItfReq>:
{
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4605      	mov	r5, r0
 8005004:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005006:	780b      	ldrb	r3, [r1, #0]
 8005008:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800500c:	d007      	beq.n	800501e <USBD_StdItfReq+0x1e>
 800500e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005012:	2a40      	cmp	r2, #64	@ 0x40
 8005014:	d003      	beq.n	800501e <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8005016:	f7ff fe30 	bl	8004c7a <USBD_CtlError>
}
 800501a:	2000      	movs	r0, #0
 800501c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800501e:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8005022:	3b01      	subs	r3, #1
 8005024:	2b02      	cmp	r3, #2
 8005026:	d816      	bhi.n	8005056 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005028:	7923      	ldrb	r3, [r4, #4]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d80e      	bhi.n	800504c <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800502e:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4621      	mov	r1, r4
 8005036:	4628      	mov	r0, r5
 8005038:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800503a:	88e3      	ldrh	r3, [r4, #6]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ec      	bne.n	800501a <USBD_StdItfReq+0x1a>
 8005040:	2800      	cmp	r0, #0
 8005042:	d1ea      	bne.n	800501a <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8005044:	4628      	mov	r0, r5
 8005046:	f000 f930 	bl	80052aa <USBD_CtlSendStatus>
 800504a:	e7e6      	b.n	800501a <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f7ff fe13 	bl	8004c7a <USBD_CtlError>
 8005054:	e7e1      	b.n	800501a <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f7ff fe0e 	bl	8004c7a <USBD_CtlError>
          break;
 800505e:	e7dc      	b.n	800501a <USBD_StdItfReq+0x1a>

08005060 <USBD_StdEPReq>:
{
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005064:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005066:	780b      	ldrb	r3, [r1, #0]
 8005068:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800506c:	2b20      	cmp	r3, #32
 800506e:	d005      	beq.n	800507c <USBD_StdEPReq+0x1c>
 8005070:	2b40      	cmp	r3, #64	@ 0x40
 8005072:	d003      	beq.n	800507c <USBD_StdEPReq+0x1c>
 8005074:	b14b      	cbz	r3, 800508a <USBD_StdEPReq+0x2a>
      USBD_CtlError(pdev, req);
 8005076:	f7ff fe00 	bl	8004c7a <USBD_CtlError>
      break;
 800507a:	e004      	b.n	8005086 <USBD_StdEPReq+0x26>
      pdev->pClass->Setup(pdev, req);
 800507c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4620      	mov	r0, r4
 8005084:	4798      	blx	r3
}
 8005086:	2000      	movs	r0, #0
 8005088:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 800508a:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 800508c:	784b      	ldrb	r3, [r1, #1]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d031      	beq.n	80050f6 <USBD_StdEPReq+0x96>
 8005092:	2b03      	cmp	r3, #3
 8005094:	d005      	beq.n	80050a2 <USBD_StdEPReq+0x42>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d056      	beq.n	8005148 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800509a:	4620      	mov	r0, r4
 800509c:	f7ff fded 	bl	8004c7a <USBD_CtlError>
          break;
 80050a0:	e7f1      	b.n	8005086 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 80050a2:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d005      	beq.n	80050b6 <USBD_StdEPReq+0x56>
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d013      	beq.n	80050d6 <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff fde3 	bl	8004c7a <USBD_CtlError>
              break;
 80050b4:	e7e7      	b.n	8005086 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050b6:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 80050ba:	d008      	beq.n	80050ce <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 80050bc:	4601      	mov	r1, r0
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 facb 	bl	800565a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80050c4:	2180      	movs	r1, #128	@ 0x80
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 fac7 	bl	800565a <USBD_LL_StallEP>
 80050cc:	e7db      	b.n	8005086 <USBD_StdEPReq+0x26>
                USBD_CtlError(pdev, req);
 80050ce:	4620      	mov	r0, r4
 80050d0:	f7ff fdd3 	bl	8004c7a <USBD_CtlError>
 80050d4:	e7d7      	b.n	8005086 <USBD_StdEPReq+0x26>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050d6:	884b      	ldrh	r3, [r1, #2]
 80050d8:	b923      	cbnz	r3, 80050e4 <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 80050da:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 80050de:	d001      	beq.n	80050e4 <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80050e0:	88cb      	ldrh	r3, [r1, #6]
 80050e2:	b11b      	cbz	r3, 80050ec <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 f8e0 	bl	80052aa <USBD_CtlSendStatus>
              break;
 80050ea:	e7cc      	b.n	8005086 <USBD_StdEPReq+0x26>
                  USBD_LL_StallEP(pdev, ep_addr);
 80050ec:	4601      	mov	r1, r0
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 fab3 	bl	800565a <USBD_LL_StallEP>
 80050f4:	e7f6      	b.n	80050e4 <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 80050f6:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d005      	beq.n	800510a <USBD_StdEPReq+0xaa>
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d013      	beq.n	800512a <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8005102:	4620      	mov	r0, r4
 8005104:	f7ff fdb9 	bl	8004c7a <USBD_CtlError>
              break;
 8005108:	e7bd      	b.n	8005086 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800510a:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 800510e:	d008      	beq.n	8005122 <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8005110:	4601      	mov	r1, r0
 8005112:	4620      	mov	r0, r4
 8005114:	f000 faa1 	bl	800565a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005118:	2180      	movs	r1, #128	@ 0x80
 800511a:	4620      	mov	r0, r4
 800511c:	f000 fa9d 	bl	800565a <USBD_LL_StallEP>
 8005120:	e7b1      	b.n	8005086 <USBD_StdEPReq+0x26>
                USBD_CtlError(pdev, req);
 8005122:	4620      	mov	r0, r4
 8005124:	f7ff fda9 	bl	8004c7a <USBD_CtlError>
 8005128:	e7ad      	b.n	8005086 <USBD_StdEPReq+0x26>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800512a:	884b      	ldrh	r3, [r1, #2]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1aa      	bne.n	8005086 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005130:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 8005134:	d103      	bne.n	800513e <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 8005136:	4620      	mov	r0, r4
 8005138:	f000 f8b7 	bl	80052aa <USBD_CtlSendStatus>
 800513c:	e7a3      	b.n	8005086 <USBD_StdEPReq+0x26>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800513e:	4601      	mov	r1, r0
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fa92 	bl	800566a <USBD_LL_ClearStallEP>
 8005146:	e7f6      	b.n	8005136 <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 8005148:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800514c:	2b02      	cmp	r3, #2
 800514e:	d005      	beq.n	800515c <USBD_StdEPReq+0xfc>
 8005150:	2b03      	cmp	r3, #3
 8005152:	d018      	beq.n	8005186 <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff fd90 	bl	8004c7a <USBD_CtlError>
              break;
 800515a:	e794      	b.n	8005086 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800515c:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 8005160:	d003      	beq.n	800516a <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff fd89 	bl	8004c7a <USBD_CtlError>
                break;
 8005168:	e78d      	b.n	8005086 <USBD_StdEPReq+0x26>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800516a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800516e:	bf14      	ite	ne
 8005170:	f104 0114 	addne.w	r1, r4, #20
 8005174:	f504 71aa 	addeq.w	r1, r4, #340	@ 0x154
              pep->status = 0x0000U;
 8005178:	2300      	movs	r3, #0
 800517a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800517c:	2202      	movs	r2, #2
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f867 	bl	8005252 <USBD_CtlSendData>
              break;
 8005184:	e77f      	b.n	8005086 <USBD_StdEPReq+0x26>
              if ((ep_addr & 0x80U) == 0x80U)
 8005186:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800518a:	d11b      	bne.n	80051c4 <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800518c:	f000 030f 	and.w	r3, r0, #15
 8005190:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005198:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800519c:	b333      	cbz	r3, 80051ec <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800519e:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051a6:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 80051aa:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80051ae:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 80051b2:	d01f      	beq.n	80051f4 <USBD_StdEPReq+0x194>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80051b4:	4601      	mov	r1, r0
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 fa5f 	bl	800567a <USBD_LL_IsStallEP>
 80051bc:	3800      	subs	r0, #0
 80051be:	bf18      	it	ne
 80051c0:	2001      	movne	r0, #1
 80051c2:	e018      	b.n	80051f6 <USBD_StdEPReq+0x196>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80051c4:	f000 030f 	and.w	r3, r0, #15
 80051c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	b13b      	cbz	r3, 80051e4 <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051d4:	f000 057f 	and.w	r5, r0, #127	@ 0x7f
 80051d8:	3501      	adds	r5, #1
 80051da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80051de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80051e2:	e7e4      	b.n	80051ae <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7ff fd48 	bl	8004c7a <USBD_CtlError>
                  break;
 80051ea:	e74c      	b.n	8005086 <USBD_StdEPReq+0x26>
                  USBD_CtlError(pdev, req);
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7ff fd44 	bl	8004c7a <USBD_CtlError>
                  break;
 80051f2:	e748      	b.n	8005086 <USBD_StdEPReq+0x26>
 80051f4:	2000      	movs	r0, #0
                pep->status = 0x0000U;
 80051f6:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80051f8:	2202      	movs	r2, #2
 80051fa:	4629      	mov	r1, r5
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 f828 	bl	8005252 <USBD_CtlSendData>
              break;
 8005202:	e740      	b.n	8005086 <USBD_StdEPReq+0x26>

08005204 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8005204:	b320      	cbz	r0, 8005250 <USBD_GetString+0x4c>
{
 8005206:	b410      	push	{r4}
 8005208:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800520a:	7800      	ldrb	r0, [r0, #0]
 800520c:	b148      	cbz	r0, 8005222 <USBD_GetString+0x1e>
 800520e:	4663      	mov	r3, ip
  {
    len++;
    buf++;
 8005210:	4618      	mov	r0, r3
  while (*buf != '\0')
 8005212:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8005216:	2c00      	cmp	r4, #0
 8005218:	d1fa      	bne.n	8005210 <USBD_GetString+0xc>
    len++;
 800521a:	f1cc 0301 	rsb	r3, ip, #1
 800521e:	4418      	add	r0, r3
 8005220:	b2c0      	uxtb	r0, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005222:	0040      	lsls	r0, r0, #1
 8005224:	3002      	adds	r0, #2
 8005226:	8010      	strh	r0, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005228:	7008      	strb	r0, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800522a:	2303      	movs	r3, #3
 800522c:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800522e:	f89c 0000 	ldrb.w	r0, [ip]
 8005232:	b158      	cbz	r0, 800524c <USBD_GetString+0x48>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005234:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8005236:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 800523e:	3302      	adds	r3, #2
 8005240:	b2db      	uxtb	r3, r3
 8005242:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 8005244:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8005248:	2800      	cmp	r0, #0
 800524a:	d1f5      	bne.n	8005238 <USBD_GetString+0x34>
}
 800524c:	bc10      	pop	{r4}
 800524e:	4770      	bx	lr
 8005250:	4770      	bx	lr

08005252 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005252:	b508      	push	{r3, lr}
 8005254:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005256:	2202      	movs	r2, #2
 8005258:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800525c:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 800525e:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005260:	460a      	mov	r2, r1
 8005262:	2100      	movs	r1, #0
 8005264:	f000 fa28 	bl	80056b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005268:	2000      	movs	r0, #0
 800526a:	bd08      	pop	{r3, pc}

0800526c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800526c:	b508      	push	{r3, lr}
 800526e:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005270:	460a      	mov	r2, r1
 8005272:	2100      	movs	r1, #0
 8005274:	f000 fa20 	bl	80056b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005278:	2000      	movs	r0, #0
 800527a:	bd08      	pop	{r3, pc}

0800527c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800527c:	b508      	push	{r3, lr}
 800527e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005280:	2203      	movs	r2, #3
 8005282:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005286:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800528a:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800528e:	460a      	mov	r2, r1
 8005290:	2100      	movs	r1, #0
 8005292:	f000 fa19 	bl	80056c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005296:	2000      	movs	r0, #0
 8005298:	bd08      	pop	{r3, pc}

0800529a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800529a:	b508      	push	{r3, lr}
 800529c:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800529e:	460a      	mov	r2, r1
 80052a0:	2100      	movs	r1, #0
 80052a2:	f000 fa11 	bl	80056c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80052a6:	2000      	movs	r0, #0
 80052a8:	bd08      	pop	{r3, pc}

080052aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80052aa:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80052ac:	2304      	movs	r3, #4
 80052ae:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80052b2:	2300      	movs	r3, #0
 80052b4:	461a      	mov	r2, r3
 80052b6:	4619      	mov	r1, r3
 80052b8:	f000 f9fe 	bl	80056b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80052bc:	2000      	movs	r0, #0
 80052be:	bd08      	pop	{r3, pc}

080052c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80052c0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80052c2:	2305      	movs	r3, #5
 80052c4:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052c8:	2300      	movs	r3, #0
 80052ca:	461a      	mov	r2, r3
 80052cc:	4619      	mov	r1, r3
 80052ce:	f000 f9fb 	bl	80056c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80052d2:	2000      	movs	r0, #0
 80052d4:	bd08      	pop	{r3, pc}
	...

080052d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80052d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80052da:	2200      	movs	r2, #0
 80052dc:	490f      	ldr	r1, [pc, #60]	@ (800531c <MX_USB_DEVICE_Init+0x44>)
 80052de:	4810      	ldr	r0, [pc, #64]	@ (8005320 <MX_USB_DEVICE_Init+0x48>)
 80052e0:	f7ff fb5b 	bl	800499a <USBD_Init>
 80052e4:	b970      	cbnz	r0, 8005304 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80052e6:	490f      	ldr	r1, [pc, #60]	@ (8005324 <MX_USB_DEVICE_Init+0x4c>)
 80052e8:	480d      	ldr	r0, [pc, #52]	@ (8005320 <MX_USB_DEVICE_Init+0x48>)
 80052ea:	f7ff fb6d 	bl	80049c8 <USBD_RegisterClass>
 80052ee:	b960      	cbnz	r0, 800530a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80052f0:	490d      	ldr	r1, [pc, #52]	@ (8005328 <MX_USB_DEVICE_Init+0x50>)
 80052f2:	480b      	ldr	r0, [pc, #44]	@ (8005320 <MX_USB_DEVICE_Init+0x48>)
 80052f4:	f7ff fb0a 	bl	800490c <USBD_CDC_RegisterInterface>
 80052f8:	b950      	cbnz	r0, 8005310 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80052fa:	4809      	ldr	r0, [pc, #36]	@ (8005320 <MX_USB_DEVICE_Init+0x48>)
 80052fc:	f7ff fb6b 	bl	80049d6 <USBD_Start>
 8005300:	b948      	cbnz	r0, 8005316 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005302:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005304:	f7fc fbf8 	bl	8001af8 <Error_Handler>
 8005308:	e7ed      	b.n	80052e6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800530a:	f7fc fbf5 	bl	8001af8 <Error_Handler>
 800530e:	e7ef      	b.n	80052f0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005310:	f7fc fbf2 	bl	8001af8 <Error_Handler>
 8005314:	e7f1      	b.n	80052fa <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005316:	f7fc fbef 	bl	8001af8 <Error_Handler>
}
 800531a:	e7f2      	b.n	8005302 <MX_USB_DEVICE_Init+0x2a>
 800531c:	200002f8 	.word	0x200002f8
 8005320:	20000d28 	.word	0x20000d28
 8005324:	20000270 	.word	0x20000270
 8005328:	200002b4 	.word	0x200002b4

0800532c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800532c:	2000      	movs	r0, #0
 800532e:	4770      	bx	lr

08005330 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005330:	2000      	movs	r0, #0
 8005332:	4770      	bx	lr

08005334 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4604      	mov	r4, r0
 8005338:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800533a:	4e08      	ldr	r6, [pc, #32]	@ (800535c <CDC_Receive_FS+0x28>)
 800533c:	4601      	mov	r1, r0
 800533e:	4630      	mov	r0, r6
 8005340:	f7ff faf3 	bl	800492a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005344:	4630      	mov	r0, r6
 8005346:	f7ff fb0f 	bl	8004968 <USBD_CDC_ReceivePacket>
  
  if(CDC_ReceiveCallback_FS != NULL) {
 800534a:	4b05      	ldr	r3, [pc, #20]	@ (8005360 <CDC_Receive_FS+0x2c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b113      	cbz	r3, 8005356 <CDC_Receive_FS+0x22>
    
    CDC_ReceiveCallback_FS(Buf, *Len);
 8005350:	8829      	ldrh	r1, [r5, #0]
 8005352:	4620      	mov	r0, r4
 8005354:	4798      	blx	r3
    
  }
  
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005356:	2000      	movs	r0, #0
 8005358:	bd70      	pop	{r4, r5, r6, pc}
 800535a:	bf00      	nop
 800535c:	20000d28 	.word	0x20000d28
 8005360:	20000fec 	.word	0x20000fec

08005364 <CDC_Init_FS>:
{
 8005364:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005366:	4c06      	ldr	r4, [pc, #24]	@ (8005380 <CDC_Init_FS+0x1c>)
 8005368:	2200      	movs	r2, #0
 800536a:	4906      	ldr	r1, [pc, #24]	@ (8005384 <CDC_Init_FS+0x20>)
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff fad4 	bl	800491a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005372:	4905      	ldr	r1, [pc, #20]	@ (8005388 <CDC_Init_FS+0x24>)
 8005374:	4620      	mov	r0, r4
 8005376:	f7ff fad8 	bl	800492a <USBD_CDC_SetRxBuffer>
}
 800537a:	2000      	movs	r0, #0
 800537c:	bd10      	pop	{r4, pc}
 800537e:	bf00      	nop
 8005380:	20000d28 	.word	0x20000d28
 8005384:	20000ff0 	.word	0x20000ff0
 8005388:	200013f0 	.word	0x200013f0

0800538c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800538c:	4b09      	ldr	r3, [pc, #36]	@ (80053b4 <CDC_Transmit_FS+0x28>)
 800538e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8005392:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005396:	b10b      	cbz	r3, 800539c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8005398:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800539a:	4770      	bx	lr
{
 800539c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800539e:	4c05      	ldr	r4, [pc, #20]	@ (80053b4 <CDC_Transmit_FS+0x28>)
 80053a0:	460a      	mov	r2, r1
 80053a2:	4601      	mov	r1, r0
 80053a4:	4620      	mov	r0, r4
 80053a6:	f7ff fab8 	bl	800491a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80053aa:	4620      	mov	r0, r4
 80053ac:	f7ff fac3 	bl	8004936 <USBD_CDC_TransmitPacket>
}
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	20000d28 	.word	0x20000d28

080053b8 <CDC_RegisterReceiveCallback_FS>:
  * @param  fptr: Pointer to the function to be called whenever data is received
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_RegisterReceiveCallback_FS(void(*fptr)(uint8_t* Buf, uint16_t Len)) {
  
  if(fptr == NULL) {
 80053b8:	b118      	cbz	r0, 80053c2 <CDC_RegisterReceiveCallback_FS+0xa>
    return USBD_FAIL;
  }
  
  CDC_ReceiveCallback_FS = fptr;
 80053ba:	4a03      	ldr	r2, [pc, #12]	@ (80053c8 <CDC_RegisterReceiveCallback_FS+0x10>)
 80053bc:	6010      	str	r0, [r2, #0]
  
  return USBD_OK;
 80053be:	2000      	movs	r0, #0
 80053c0:	4770      	bx	lr
    return USBD_FAIL;
 80053c2:	2002      	movs	r0, #2
}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000fec 	.word	0x20000fec

080053cc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80053cc:	2312      	movs	r3, #18
 80053ce:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80053d0:	4800      	ldr	r0, [pc, #0]	@ (80053d4 <USBD_FS_DeviceDescriptor+0x8>)
 80053d2:	4770      	bx	lr
 80053d4:	200002e4 	.word	0x200002e4

080053d8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80053d8:	2304      	movs	r3, #4
 80053da:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80053dc:	4800      	ldr	r0, [pc, #0]	@ (80053e0 <USBD_FS_LangIDStrDescriptor+0x8>)
 80053de:	4770      	bx	lr
 80053e0:	200002e0 	.word	0x200002e0

080053e4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80053e4:	b18a      	cbz	r2, 800540a <IntToUnicode+0x26>
 80053e6:	3101      	adds	r1, #1
 80053e8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80053ec:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 80053f0:	0f03      	lsrs	r3, r0, #28
 80053f2:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80053f6:	bf34      	ite	cc
 80053f8:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80053fa:	3337      	addcs	r3, #55	@ 0x37
 80053fc:	f801 3c01 	strb.w	r3, [r1, #-1]
    value = value << 4;
 8005400:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8005402:	f801 cb02 	strb.w	ip, [r1], #2
  for (idx = 0; idx < len; idx++)
 8005406:	4291      	cmp	r1, r2
 8005408:	d1f2      	bne.n	80053f0 <IntToUnicode+0xc>
  }
}
 800540a:	4770      	bx	lr

0800540c <USBD_FS_SerialStrDescriptor>:
{
 800540c:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800540e:	231a      	movs	r3, #26
 8005410:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005412:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <USBD_FS_SerialStrDescriptor+0x38>)
 8005414:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8005418:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 800541c:	18c0      	adds	r0, r0, r3
 800541e:	d101      	bne.n	8005424 <USBD_FS_SerialStrDescriptor+0x18>
}
 8005420:	4809      	ldr	r0, [pc, #36]	@ (8005448 <USBD_FS_SerialStrDescriptor+0x3c>)
 8005422:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005424:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <USBD_FS_SerialStrDescriptor+0x38>)
 8005426:	f8d3 57ec 	ldr.w	r5, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800542a:	4c08      	ldr	r4, [pc, #32]	@ (800544c <USBD_FS_SerialStrDescriptor+0x40>)
 800542c:	2208      	movs	r2, #8
 800542e:	4621      	mov	r1, r4
 8005430:	f7ff ffd8 	bl	80053e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005434:	2204      	movs	r2, #4
 8005436:	f104 0110 	add.w	r1, r4, #16
 800543a:	4628      	mov	r0, r5
 800543c:	f7ff ffd2 	bl	80053e4 <IntToUnicode>
 8005440:	e7ee      	b.n	8005420 <USBD_FS_SerialStrDescriptor+0x14>
 8005442:	bf00      	nop
 8005444:	1ffff000 	.word	0x1ffff000
 8005448:	200002c4 	.word	0x200002c4
 800544c:	200002c6 	.word	0x200002c6

08005450 <USBD_FS_ProductStrDescriptor>:
{
 8005450:	b508      	push	{r3, lr}
 8005452:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005454:	4902      	ldr	r1, [pc, #8]	@ (8005460 <USBD_FS_ProductStrDescriptor+0x10>)
 8005456:	4803      	ldr	r0, [pc, #12]	@ (8005464 <USBD_FS_ProductStrDescriptor+0x14>)
 8005458:	f7ff fed4 	bl	8005204 <USBD_GetString>
}
 800545c:	4800      	ldr	r0, [pc, #0]	@ (8005460 <USBD_FS_ProductStrDescriptor+0x10>)
 800545e:	bd08      	pop	{r3, pc}
 8005460:	200017f0 	.word	0x200017f0
 8005464:	0800b03c 	.word	0x0800b03c

08005468 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005468:	b510      	push	{r4, lr}
 800546a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800546c:	4c03      	ldr	r4, [pc, #12]	@ (800547c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800546e:	4621      	mov	r1, r4
 8005470:	4803      	ldr	r0, [pc, #12]	@ (8005480 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005472:	f7ff fec7 	bl	8005204 <USBD_GetString>
}
 8005476:	4620      	mov	r0, r4
 8005478:	bd10      	pop	{r4, pc}
 800547a:	bf00      	nop
 800547c:	200017f0 	.word	0x200017f0
 8005480:	0800b054 	.word	0x0800b054

08005484 <USBD_FS_ConfigStrDescriptor>:
{
 8005484:	b508      	push	{r3, lr}
 8005486:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005488:	4902      	ldr	r1, [pc, #8]	@ (8005494 <USBD_FS_ConfigStrDescriptor+0x10>)
 800548a:	4803      	ldr	r0, [pc, #12]	@ (8005498 <USBD_FS_ConfigStrDescriptor+0x14>)
 800548c:	f7ff feba 	bl	8005204 <USBD_GetString>
}
 8005490:	4800      	ldr	r0, [pc, #0]	@ (8005494 <USBD_FS_ConfigStrDescriptor+0x10>)
 8005492:	bd08      	pop	{r3, pc}
 8005494:	200017f0 	.word	0x200017f0
 8005498:	0800b068 	.word	0x0800b068

0800549c <USBD_FS_InterfaceStrDescriptor>:
{
 800549c:	b508      	push	{r3, lr}
 800549e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80054a0:	4902      	ldr	r1, [pc, #8]	@ (80054ac <USBD_FS_InterfaceStrDescriptor+0x10>)
 80054a2:	4803      	ldr	r0, [pc, #12]	@ (80054b0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80054a4:	f7ff feae 	bl	8005204 <USBD_GetString>
}
 80054a8:	4800      	ldr	r0, [pc, #0]	@ (80054ac <USBD_FS_InterfaceStrDescriptor+0x10>)
 80054aa:	bd08      	pop	{r3, pc}
 80054ac:	200017f0 	.word	0x200017f0
 80054b0:	0800b074 	.word	0x0800b074

080054b4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80054b4:	b120      	cbz	r0, 80054c0 <USBD_Get_USB_Status+0xc>
 80054b6:	2802      	cmp	r0, #2
 80054b8:	bf0c      	ite	eq
 80054ba:	2001      	moveq	r0, #1
 80054bc:	2002      	movne	r0, #2
 80054be:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80054c0:	4770      	bx	lr
	...

080054c4 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 80054c4:	6802      	ldr	r2, [r0, #0]
 80054c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005500 <HAL_PCD_MspInit+0x3c>)
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d000      	beq.n	80054ce <HAL_PCD_MspInit+0xa>
 80054cc:	4770      	bx	lr
{
 80054ce:	b500      	push	{lr}
 80054d0:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80054d2:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80054dc:	61da      	str	r2, [r3, #28]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80054e8:	2200      	movs	r2, #0
 80054ea:	4611      	mov	r1, r2
 80054ec:	2014      	movs	r0, #20
 80054ee:	f7fc fc3b 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80054f2:	2014      	movs	r0, #20
 80054f4:	f7fc fc6e 	bl	8001dd4 <HAL_NVIC_EnableIRQ>
}
 80054f8:	b003      	add	sp, #12
 80054fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80054fe:	bf00      	nop
 8005500:	40005c00 	.word	0x40005c00

08005504 <HAL_PCD_SetupStageCallback>:
{
 8005504:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005506:	f500 712c 	add.w	r1, r0, #688	@ 0x2b0
 800550a:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800550e:	f7ff fa7b 	bl	8004a08 <USBD_LL_SetupStage>
}
 8005512:	bd08      	pop	{r3, pc}

08005514 <HAL_PCD_DataOutStageCallback>:
{
 8005514:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005516:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800551a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800551e:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8005522:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8005526:	f7ff fa9c 	bl	8004a62 <USBD_LL_DataOutStage>
}
 800552a:	bd08      	pop	{r3, pc}

0800552c <HAL_PCD_DataInStageCallback>:
{
 800552c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800552e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005532:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005538:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800553c:	f7ff fad5 	bl	8004aea <USBD_LL_DataInStage>
}
 8005540:	bd08      	pop	{r3, pc}

08005542 <HAL_PCD_SOFCallback>:
{
 8005542:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005544:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8005548:	f7ff fb75 	bl	8004c36 <USBD_LL_SOF>
}
 800554c:	bd08      	pop	{r3, pc}

0800554e <HAL_PCD_ResetCallback>:
{
 800554e:	b510      	push	{r4, lr}
 8005550:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005552:	6883      	ldr	r3, [r0, #8]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d109      	bne.n	800556c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005558:	2101      	movs	r1, #1
 800555a:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 800555e:	f7ff fb54 	bl	8004c0a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005562:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 8005566:	f7ff fb28 	bl	8004bba <USBD_LL_Reset>
}
 800556a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800556c:	f7fc fac4 	bl	8001af8 <Error_Handler>
 8005570:	e7f2      	b.n	8005558 <HAL_PCD_ResetCallback+0xa>
	...

08005574 <HAL_PCD_SuspendCallback>:
{
 8005574:	b510      	push	{r4, lr}
 8005576:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005578:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800557c:	f7ff fb48 	bl	8004c10 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8005580:	69a3      	ldr	r3, [r4, #24]
 8005582:	b123      	cbz	r3, 800558e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005584:	4a02      	ldr	r2, [pc, #8]	@ (8005590 <HAL_PCD_SuspendCallback+0x1c>)
 8005586:	6913      	ldr	r3, [r2, #16]
 8005588:	f043 0306 	orr.w	r3, r3, #6
 800558c:	6113      	str	r3, [r2, #16]
}
 800558e:	bd10      	pop	{r4, pc}
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <HAL_PCD_ResumeCallback>:
{
 8005594:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005596:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800559a:	f7ff fb42 	bl	8004c22 <USBD_LL_Resume>
}
 800559e:	bd08      	pop	{r3, pc}

080055a0 <USBD_LL_Init>:
{
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80055a4:	481d      	ldr	r0, [pc, #116]	@ (800561c <USBD_LL_Init+0x7c>)
 80055a6:	f8c0 42ec 	str.w	r4, [r0, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80055aa:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Instance = USB;
 80055ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005620 <USBD_LL_Init+0x80>)
 80055b0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80055b2:	2308      	movs	r3, #8
 80055b4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80055b6:	2302      	movs	r3, #2
 80055b8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80055be:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80055c0:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80055c2:	f7fc fd81 	bl	80020c8 <HAL_PCD_Init>
 80055c6:	bb30      	cbnz	r0, 8005616 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80055c8:	2318      	movs	r3, #24
 80055ca:	2200      	movs	r2, #0
 80055cc:	4611      	mov	r1, r2
 80055ce:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80055d2:	f7fd fdb6 	bl	8003142 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80055d6:	2358      	movs	r3, #88	@ 0x58
 80055d8:	2200      	movs	r2, #0
 80055da:	2180      	movs	r1, #128	@ 0x80
 80055dc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80055e0:	f7fd fdaf 	bl	8003142 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80055e4:	23c0      	movs	r3, #192	@ 0xc0
 80055e6:	2200      	movs	r2, #0
 80055e8:	2181      	movs	r1, #129	@ 0x81
 80055ea:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80055ee:	f7fd fda8 	bl	8003142 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80055f2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80055f6:	2200      	movs	r2, #0
 80055f8:	2101      	movs	r1, #1
 80055fa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80055fe:	f7fd fda0 	bl	8003142 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005606:	2200      	movs	r2, #0
 8005608:	2182      	movs	r1, #130	@ 0x82
 800560a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800560e:	f7fd fd98 	bl	8003142 <HAL_PCDEx_PMAConfig>
}
 8005612:	2000      	movs	r0, #0
 8005614:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005616:	f7fc fa6f 	bl	8001af8 <Error_Handler>
 800561a:	e7d5      	b.n	80055c8 <USBD_LL_Init+0x28>
 800561c:	20002210 	.word	0x20002210
 8005620:	40005c00 	.word	0x40005c00

08005624 <USBD_LL_Start>:
{
 8005624:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005626:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800562a:	f7fc fdd2 	bl	80021d2 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800562e:	f7ff ff41 	bl	80054b4 <USBD_Get_USB_Status>
}
 8005632:	bd08      	pop	{r3, pc}

08005634 <USBD_LL_OpenEP>:
{
 8005634:	b508      	push	{r3, lr}
 8005636:	4694      	mov	ip, r2
 8005638:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800563a:	4663      	mov	r3, ip
 800563c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005640:	f7fd fc5a 	bl	8002ef8 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005644:	f7ff ff36 	bl	80054b4 <USBD_Get_USB_Status>
}
 8005648:	bd08      	pop	{r3, pc}

0800564a <USBD_LL_CloseEP>:
{
 800564a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800564c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005650:	f7fd fc8b 	bl	8002f6a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005654:	f7ff ff2e 	bl	80054b4 <USBD_Get_USB_Status>
}
 8005658:	bd08      	pop	{r3, pc}

0800565a <USBD_LL_StallEP>:
{
 800565a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800565c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005660:	f7fd fcf8 	bl	8003054 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005664:	f7ff ff26 	bl	80054b4 <USBD_Get_USB_Status>
}
 8005668:	bd08      	pop	{r3, pc}

0800566a <USBD_LL_ClearStallEP>:
{
 800566a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800566c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8005670:	f7fd fd2c 	bl	80030cc <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005674:	f7ff ff1e 	bl	80054b4 <USBD_Get_USB_Status>
}
 8005678:	bd08      	pop	{r3, pc}

0800567a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800567a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800567e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005682:	d108      	bne.n	8005696 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005684:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8005688:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800568c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005690:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
}
 8005694:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005696:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800569a:	3101      	adds	r1, #1
 800569c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80056a0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80056a4:	7898      	ldrb	r0, [r3, #2]
 80056a6:	4770      	bx	lr

080056a8 <USBD_LL_SetUSBAddress>:
{
 80056a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80056aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80056ae:	f7fc fda9 	bl	8002204 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80056b2:	f7ff feff 	bl	80054b4 <USBD_Get_USB_Status>
}
 80056b6:	bd08      	pop	{r3, pc}

080056b8 <USBD_LL_Transmit>:
{
 80056b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80056ba:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80056be:	f7fd fca8 	bl	8003012 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80056c2:	f7ff fef7 	bl	80054b4 <USBD_Get_USB_Status>
}
 80056c6:	bd08      	pop	{r3, pc}

080056c8 <USBD_LL_PrepareReceive>:
{
 80056c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80056ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80056ce:	f7fd fc7e 	bl	8002fce <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80056d2:	f7ff feef 	bl	80054b4 <USBD_Get_USB_Status>
}
 80056d6:	bd08      	pop	{r3, pc}

080056d8 <USBD_LL_GetRxDataSize>:
{
 80056d8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80056da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80056de:	f7fd fc8f 	bl	8003000 <HAL_PCD_EP_GetRxCount>
}
 80056e2:	bd08      	pop	{r3, pc}

080056e4 <USBD_static_malloc>:
}
 80056e4:	4800      	ldr	r0, [pc, #0]	@ (80056e8 <USBD_static_malloc+0x4>)
 80056e6:	4770      	bx	lr
 80056e8:	20001ff0 	.word	0x20001ff0

080056ec <USBD_static_free>:
}
 80056ec:	4770      	bx	lr

080056ee <HAL_PCDEx_SetConnectionState>:
}
 80056ee:	4770      	bx	lr

080056f0 <fChrono_GetTick>:
 *         In TICK_TYPE_VARIABLE mode, tick is returned by dereferencing the address of tick value as tick_t.
 *         In TICK_TYPE_FUNCTION mode, tick is returned by calling a user defined function that generates tick value.
 *
 * @retval tick: Current tick (raw)
 */
tick_t fChrono_GetTick(void) {
 80056f0:	b508      	push	{r3, lr}

  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80056f2:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <fChrono_GetTick+0x14>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	b11b      	cbz	r3, 8005700 <fChrono_GetTick+0x10>

  return *_chrono.pTickValue;

#elif (CHRONO_TICK_TYPE == TICK_TYPE_FUNCTION)

  return _chrono.GetTickValue();
 80056f8:	4b02      	ldr	r3, [pc, #8]	@ (8005704 <fChrono_GetTick+0x14>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fc:	4798      	blx	r3
  
  return (tick_t)0;
  
#endif
  
}
 80056fe:	bd08      	pop	{r3, pc}
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8005700:	2000      	movs	r0, #0
 8005702:	e7fc      	b.n	80056fe <fChrono_GetTick+0xe>
 8005704:	20000318 	.word	0x20000318

08005708 <fChrono_GetTickTopValue>:
 * 
 * @retval topValue: Tick top value
 */
tick_t fChrono_GetTickTopValue(void) {
  
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <fChrono_GetTickTopValue+0x10>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b113      	cbz	r3, 8005714 <fChrono_GetTickTopValue+0xc>
  
  return _chrono.TickTopValue;
 800570e:	4b02      	ldr	r3, [pc, #8]	@ (8005718 <fChrono_GetTickTopValue+0x10>)
 8005710:	6958      	ldr	r0, [r3, #20]
 8005712:	4770      	bx	lr
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8005714:	2000      	movs	r0, #0
}
 8005716:	4770      	bx	lr
 8005718:	20000318 	.word	0x20000318

0800571c <fChrono_GetTickInitValue>:
 * 
 * @retval initValue: Tick init value
 */
tick_t fChrono_GetTickInitValue(void) {
  
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 800571c:	4b03      	ldr	r3, [pc, #12]	@ (800572c <fChrono_GetTickInitValue+0x10>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b113      	cbz	r3, 8005728 <fChrono_GetTickInitValue+0xc>
  
  return _chrono.TickInitValue;
 8005722:	4b02      	ldr	r3, [pc, #8]	@ (800572c <fChrono_GetTickInitValue+0x10>)
 8005724:	6998      	ldr	r0, [r3, #24]
 8005726:	4770      	bx	lr
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8005728:	2000      	movs	r0, #0
}
 800572a:	4770      	bx	lr
 800572c:	20000318 	.word	0x20000318

08005730 <fChrono_GetTickToNsCoef>:
 * 
 * @retval tickToNsCoef: Tick-to-nanoseconds coefficient
 */
uint32_t fChrono_GetTickToNsCoef(void) {
  
  CHECK_INIT_RET_(0U); /* MISRA 2012 Rule 15.5 deviation */
 8005730:	4b03      	ldr	r3, [pc, #12]	@ (8005740 <fChrono_GetTickToNsCoef+0x10>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b113      	cbz	r3, 800573c <fChrono_GetTickToNsCoef+0xc>
  
  return _chrono.TickToNsCoef;
 8005736:	4b02      	ldr	r3, [pc, #8]	@ (8005740 <fChrono_GetTickToNsCoef+0x10>)
 8005738:	6858      	ldr	r0, [r3, #4]
 800573a:	4770      	bx	lr
  CHECK_INIT_RET_(0U); /* MISRA 2012 Rule 15.5 deviation */
 800573c:	2000      	movs	r0, #0
}
 800573e:	4770      	bx	lr
 8005740:	20000318 	.word	0x20000318

08005744 <fChrono_TimeSpanMs>:
 * @param endTick End tick
 * @retval timeSpan: Time length between two time stamps (milliseconds)
 */
timeMs_t fChrono_TimeSpanMs(tick_t startTick, tick_t endTick) {
  
  CHECK_INIT_MS_RET_((timeMs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8005744:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <fChrono_TimeSpanMs+0x24>)
 8005746:	789b      	ldrb	r3, [r3, #2]
 8005748:	b15b      	cbz	r3, 8005762 <fChrono_TimeSpanMs+0x1e>
  
  return (timeMs_t)(ELAPSED_(endTick, startTick)) / _chrono.MsToTickCoef;
 800574a:	4281      	cmp	r1, r0
 800574c:	eba1 0000 	sub.w	r0, r1, r0
 8005750:	bf3e      	ittt	cc
 8005752:	4b05      	ldrcc	r3, [pc, #20]	@ (8005768 <fChrono_TimeSpanMs+0x24>)
 8005754:	695b      	ldrcc	r3, [r3, #20]
 8005756:	18c0      	addcc	r0, r0, r3
 8005758:	4b03      	ldr	r3, [pc, #12]	@ (8005768 <fChrono_TimeSpanMs+0x24>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005760:	4770      	bx	lr
  CHECK_INIT_MS_RET_((timeMs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8005762:	2000      	movs	r0, #0
  
}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20000318 	.word	0x20000318

0800576c <fChrono_TimeSpanUs>:
 * @param endTick End tick
 * @retval timeSpan: Time length between two time stamps (microseconds)
 */
timeUs_t fChrono_TimeSpanUs(tick_t startTick, tick_t endTick) {
  
  CHECK_INIT_US_RET_((timeUs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 800576c:	4b08      	ldr	r3, [pc, #32]	@ (8005790 <fChrono_TimeSpanUs+0x24>)
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	b15b      	cbz	r3, 800578a <fChrono_TimeSpanUs+0x1e>
  
  return (timeUs_t)(ELAPSED_(endTick, startTick)) / _chrono.UsToTickCoef;
 8005772:	4281      	cmp	r1, r0
 8005774:	eba1 0000 	sub.w	r0, r1, r0
 8005778:	bf3e      	ittt	cc
 800577a:	4b05      	ldrcc	r3, [pc, #20]	@ (8005790 <fChrono_TimeSpanUs+0x24>)
 800577c:	695b      	ldrcc	r3, [r3, #20]
 800577e:	18c0      	addcc	r0, r0, r3
 8005780:	4b03      	ldr	r3, [pc, #12]	@ (8005790 <fChrono_TimeSpanUs+0x24>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	fbb0 f0f3 	udiv	r0, r0, r3
 8005788:	4770      	bx	lr
  CHECK_INIT_US_RET_((timeUs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 800578a:	2000      	movs	r0, #0
  
}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20000318 	.word	0x20000318

08005794 <fChrono_Start>:
 * 
 * @param me Pointer to the chrono object
 */
tick_t fChrono_Start(sChrono * const me) {

  CHECK_INIT_RET_((tick_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8005794:	4b07      	ldr	r3, [pc, #28]	@ (80057b4 <fChrono_Start+0x20>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b143      	cbz	r3, 80057ac <fChrono_Start+0x18>
tick_t fChrono_Start(sChrono * const me) {
 800579a:	b510      	push	{r4, lr}
 800579c:	4604      	mov	r4, r0
  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 800579e:	b138      	cbz	r0, 80057b0 <fChrono_Start+0x1c>
  
  me->_startTick = fChrono_GetTick();
 80057a0:	f7ff ffa6 	bl	80056f0 <fChrono_GetTick>
 80057a4:	6060      	str	r0, [r4, #4]
  me->_run = TRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	7023      	strb	r3, [r4, #0]

  return me->_startTick;
}
 80057aa:	bd10      	pop	{r4, pc}
  CHECK_INIT_RET_((tick_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 80057ac:	2000      	movs	r0, #0
}
 80057ae:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7fa      	b.n	80057aa <fChrono_Start+0x16>
 80057b4:	20000318 	.word	0x20000318

080057b8 <fChrono_Init>:
  _chrono.Init = FALSE;
 80057b8:	4b19      	ldr	r3, [pc, #100]	@ (8005820 <fChrono_Init+0x68>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
  _chrono.InitUs = FALSE;
 80057be:	705a      	strb	r2, [r3, #1]
  _chrono.InitMs = FALSE;
 80057c0:	709a      	strb	r2, [r3, #2]
  _chrono.InitSec = FALSE;
 80057c2:	70da      	strb	r2, [r3, #3]
  if(fpTickValue == NULL) {
 80057c4:	b350      	cbz	r0, 800581c <fChrono_Init+0x64>
uint8_t fChrono_Init(tick_t(*fpTickValue)(void)) {
 80057c6:	b510      	push	{r4, lr}
  _chrono.TickTopValue = CHRONO_TICK_TOP_VALUE;
 80057c8:	4c15      	ldr	r4, [pc, #84]	@ (8005820 <fChrono_Init+0x68>)
 80057ca:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80057ce:	6162      	str	r2, [r4, #20]
  _chrono.TickToNsCoef = CHRONO_TICK_TO_NANOSECOND_COEF;
 80057d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057d4:	6062      	str	r2, [r4, #4]
  _chrono.GetTickValue = fpTickValue;
 80057d6:	6720      	str	r0, [r4, #112]	@ 0x70
  _chrono.UsToTickCoef = (1000U / CHRONO_TICK_TO_NANOSECOND_COEF);
 80057d8:	2301      	movs	r3, #1
 80057da:	60a3      	str	r3, [r4, #8]
  _chrono.MsToTickCoef = (1000000U / CHRONO_TICK_TO_NANOSECOND_COEF);
 80057dc:	60e2      	str	r2, [r4, #12]
  _chrono.SecToTickCoef = (1000000000U / CHRONO_TICK_TO_NANOSECOND_COEF);
 80057de:	4a11      	ldr	r2, [pc, #68]	@ (8005824 <fChrono_Init+0x6c>)
 80057e0:	6122      	str	r2, [r4, #16]
  _chrono.ContinuousTickUs = 0U;
 80057e2:	2000      	movs	r0, #0
 80057e4:	2100      	movs	r1, #0
 80057e6:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
	_chrono.ContinuousTickMs = 0U;
 80057ea:	e9c4 0118 	strd	r0, r1, [r4, #96]	@ 0x60
	_chrono.ContinuousTickS = 0U;
 80057ee:	e9c4 011a 	strd	r0, r1, [r4, #104]	@ 0x68
  _chrono.Init = TRUE;
 80057f2:	7023      	strb	r3, [r4, #0]
  _chrono.InitUs = (_chrono.UsToTickCoef != 0U);
 80057f4:	7063      	strb	r3, [r4, #1]
  _chrono.InitMs = (_chrono.MsToTickCoef != 0U);
 80057f6:	70a3      	strb	r3, [r4, #2]
  _chrono.InitSec = (_chrono.SecToTickCoef != 0U);
 80057f8:	70e3      	strb	r3, [r4, #3]
	fChrono_Start(&_chrono.ChronoTickUs);
 80057fa:	f104 001c 	add.w	r0, r4, #28
 80057fe:	f7ff ffc9 	bl	8005794 <fChrono_Start>
	fChrono_Start(&_chrono.ChronoTickMs);
 8005802:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8005806:	f7ff ffc5 	bl	8005794 <fChrono_Start>
	fChrono_Start(&_chrono.ChronoTickS);
 800580a:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 800580e:	f7ff ffc1 	bl	8005794 <fChrono_Start>
  _chrono.TickInitValue = fChrono_GetTick();
 8005812:	f7ff ff6d 	bl	80056f0 <fChrono_GetTick>
 8005816:	61a0      	str	r0, [r4, #24]
  return CHRONO_OK;
 8005818:	2000      	movs	r0, #0
}
 800581a:	bd10      	pop	{r4, pc}
    return CHRONO_ERROR_TICK_PTR_ERROR; /* MISRA 2012 Rule 15.5 deviation */
 800581c:	2003      	movs	r0, #3
}
 800581e:	4770      	bx	lr
 8005820:	20000318 	.word	0x20000318
 8005824:	000f4240 	.word	0x000f4240

08005828 <fChrono_Stop>:
 * 
 * @param me Pointer to the chrono object
 */
tick_t fChrono_Stop(sChrono * const me) {

  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8005828:	b140      	cbz	r0, 800583c <fChrono_Stop+0x14>
tick_t fChrono_Stop(sChrono * const me) {
 800582a:	b510      	push	{r4, lr}
 800582c:	4604      	mov	r4, r0
  
  me->_stopTick = fChrono_GetTick();
 800582e:	f7ff ff5f 	bl	80056f0 <fChrono_GetTick>
 8005832:	60a0      	str	r0, [r4, #8]
  me->_run = FALSE;
 8005834:	2300      	movs	r3, #0
 8005836:	7023      	strb	r3, [r4, #0]
  me->_isTimeout = FALSE;
 8005838:	7423      	strb	r3, [r4, #16]

  return me->_stopTick;
}
 800583a:	bd10      	pop	{r4, pc}
  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 800583c:	2000      	movs	r0, #0
}
 800583e:	4770      	bx	lr

08005840 <fChrono_ElapsedMs>:
 * @param me Pointer to the chrono object
 * @retval elapsed: Elapsed time since starting the chrono object (milliseconds)
 */
timeMs_t fChrono_ElapsedMs(sChrono const * const me) {
  
  CHECK_INIT_MS_RET_((timeMs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <fChrono_ElapsedMs+0x40>)
 8005842:	789b      	ldrb	r3, [r3, #2]
 8005844:	b1c3      	cbz	r3, 8005878 <fChrono_ElapsedMs+0x38>
  ASSERT_NOT_NULL_RET_(me, (timeMs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 8005846:	b1c8      	cbz	r0, 800587c <fChrono_ElapsedMs+0x3c>
timeMs_t fChrono_ElapsedMs(sChrono const * const me) {
 8005848:	b510      	push	{r4, lr}
  CHECK_RUN_(fChrono_TimeSpanMs(me->_startTick, me->_stopTick));                /* MISRA 2012 Rule 15.5 deviation */
 800584a:	7803      	ldrb	r3, [r0, #0]
 800584c:	b923      	cbnz	r3, 8005858 <fChrono_ElapsedMs+0x18>
 800584e:	6881      	ldr	r1, [r0, #8]
 8005850:	6840      	ldr	r0, [r0, #4]
 8005852:	f7ff ff77 	bl	8005744 <fChrono_TimeSpanMs>
  
  tick_t startTick = me->_startTick;
  tick_t currentTick = fChrono_GetTick();
  
  return (timeMs_t)((timeMs_t)(ELAPSED_(currentTick, startTick)) / _chrono.MsToTickCoef);
}
 8005856:	bd10      	pop	{r4, pc}
  tick_t startTick = me->_startTick;
 8005858:	6844      	ldr	r4, [r0, #4]
  tick_t currentTick = fChrono_GetTick();
 800585a:	f7ff ff49 	bl	80056f0 <fChrono_GetTick>
  return (timeMs_t)((timeMs_t)(ELAPSED_(currentTick, startTick)) / _chrono.MsToTickCoef);
 800585e:	4284      	cmp	r4, r0
 8005860:	d805      	bhi.n	800586e <fChrono_ElapsedMs+0x2e>
 8005862:	1b00      	subs	r0, r0, r4
 8005864:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <fChrono_ElapsedMs+0x40>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	fbb0 f0f3 	udiv	r0, r0, r3
 800586c:	e7f3      	b.n	8005856 <fChrono_ElapsedMs+0x16>
 800586e:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <fChrono_ElapsedMs+0x40>)
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	1b1b      	subs	r3, r3, r4
 8005874:	4418      	add	r0, r3
 8005876:	e7f5      	b.n	8005864 <fChrono_ElapsedMs+0x24>
  CHECK_INIT_MS_RET_((timeMs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8005878:	2000      	movs	r0, #0
 800587a:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (timeMs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 800587c:	2000      	movs	r0, #0
}
 800587e:	4770      	bx	lr
 8005880:	20000318 	.word	0x20000318

08005884 <fChrono_GetContinuousTickMs>:
uint64_t fChrono_GetContinuousTickMs(void) {
 8005884:	b538      	push	{r3, r4, r5, lr}
  _chrono.ContinuousTickMs += (uint64_t)fChrono_ElapsedMs(&_chrono.ChronoTickMs);
 8005886:	4d08      	ldr	r5, [pc, #32]	@ (80058a8 <fChrono_GetContinuousTickMs+0x24>)
 8005888:	4628      	mov	r0, r5
 800588a:	f7ff ffd9 	bl	8005840 <fChrono_ElapsedMs>
 800588e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005890:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8005892:	181b      	adds	r3, r3, r0
 8005894:	f142 0200 	adc.w	r2, r2, #0
 8005898:	632b      	str	r3, [r5, #48]	@ 0x30
 800589a:	636a      	str	r2, [r5, #52]	@ 0x34
  fChrono_Start(&_chrono.ChronoTickMs);
 800589c:	4628      	mov	r0, r5
 800589e:	f7ff ff79 	bl	8005794 <fChrono_Start>
}
 80058a2:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	@ 0x30
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	20000348 	.word	0x20000348

080058ac <fChrono_ElapsedUs>:
 * @param me Pointer to the chrono object
 * @retval elapsed: Elapsed time since starting the chrono object (microseconds)
 */
timeUs_t fChrono_ElapsedUs(sChrono const * const me) {
  
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 80058ac:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <fChrono_ElapsedUs+0x40>)
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	b1c3      	cbz	r3, 80058e4 <fChrono_ElapsedUs+0x38>
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 80058b2:	b1c8      	cbz	r0, 80058e8 <fChrono_ElapsedUs+0x3c>
timeUs_t fChrono_ElapsedUs(sChrono const * const me) {
 80058b4:	b510      	push	{r4, lr}
  CHECK_RUN_(fChrono_TimeSpanUs(me->_startTick, me->_stopTick));                /* MISRA 2012 Rule 15.5 deviation */
 80058b6:	7803      	ldrb	r3, [r0, #0]
 80058b8:	b923      	cbnz	r3, 80058c4 <fChrono_ElapsedUs+0x18>
 80058ba:	6881      	ldr	r1, [r0, #8]
 80058bc:	6840      	ldr	r0, [r0, #4]
 80058be:	f7ff ff55 	bl	800576c <fChrono_TimeSpanUs>
  
  tick_t startTick = me->_startTick;
  tick_t currentTick = fChrono_GetTick();
  
  return (timeUs_t)((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
}
 80058c2:	bd10      	pop	{r4, pc}
  tick_t startTick = me->_startTick;
 80058c4:	6844      	ldr	r4, [r0, #4]
  tick_t currentTick = fChrono_GetTick();
 80058c6:	f7ff ff13 	bl	80056f0 <fChrono_GetTick>
  return (timeUs_t)((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
 80058ca:	4284      	cmp	r4, r0
 80058cc:	d805      	bhi.n	80058da <fChrono_ElapsedUs+0x2e>
 80058ce:	1b00      	subs	r0, r0, r4
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <fChrono_ElapsedUs+0x40>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80058d8:	e7f3      	b.n	80058c2 <fChrono_ElapsedUs+0x16>
 80058da:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <fChrono_ElapsedUs+0x40>)
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	1b1b      	subs	r3, r3, r4
 80058e0:	4418      	add	r0, r3
 80058e2:	e7f5      	b.n	80058d0 <fChrono_ElapsedUs+0x24>
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 80058e4:	2000      	movs	r0, #0
 80058e6:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 80058e8:	2000      	movs	r0, #0
}
 80058ea:	4770      	bx	lr
 80058ec:	20000318 	.word	0x20000318

080058f0 <fChrono_StartTimeoutMs>:
 * @brief Starts the chrono object in timeout mode.
 * 
 * @param me Pointer to the chrono object
 * @param timeout Time length until the chrono object times out (milliseconds)
 */
void fChrono_StartTimeoutMs(sChrono * const me, timeMs_t timeout) {
 80058f0:	b508      	push	{r3, lr}

  CHECK_INIT_MS_();     /* MISRA 2012 Rule 15.5 deviation */
 80058f2:	4b07      	ldr	r3, [pc, #28]	@ (8005910 <fChrono_StartTimeoutMs+0x20>)
 80058f4:	789b      	ldrb	r3, [r3, #2]
 80058f6:	b14b      	cbz	r3, 800590c <fChrono_StartTimeoutMs+0x1c>
  ASSERT_NOT_NULL_(me); /* MISRA 2012 Rule 15.5 deviation */
 80058f8:	b140      	cbz	r0, 800590c <fChrono_StartTimeoutMs+0x1c>
  
  me->_timeout = (tick_t)(timeout * (timeMs_t)_chrono.MsToTickCoef);
 80058fa:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <fChrono_StartTimeoutMs+0x20>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	fb01 f303 	mul.w	r3, r1, r3
 8005902:	60c3      	str	r3, [r0, #12]
  me->_isTimeout = FALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	7403      	strb	r3, [r0, #16]
  
  fChrono_Start(me);
 8005908:	f7ff ff44 	bl	8005794 <fChrono_Start>
}
 800590c:	bd08      	pop	{r3, pc}
 800590e:	bf00      	nop
 8005910:	20000318 	.word	0x20000318

08005914 <fChrono_StartTimeoutUs>:
 * @brief Starts the chrono object in timeout mode.
 * 
 * @param me Pointer to the chrono object
 * @param timeout Time length until the chrono object times out (microseconds)
 */
void fChrono_StartTimeoutUs(sChrono * const me, timeUs_t timeout) {
 8005914:	b508      	push	{r3, lr}

  CHECK_INIT_US_();     /* MISRA 2012 Rule 15.5 deviation */
 8005916:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <fChrono_StartTimeoutUs+0x20>)
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	b14b      	cbz	r3, 8005930 <fChrono_StartTimeoutUs+0x1c>
  ASSERT_NOT_NULL_(me); /* MISRA 2012 Rule 15.5 deviation */
 800591c:	b140      	cbz	r0, 8005930 <fChrono_StartTimeoutUs+0x1c>
  
  me->_timeout = (tick_t)(timeout * (timeUs_t)_chrono.UsToTickCoef);
 800591e:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <fChrono_StartTimeoutUs+0x20>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	60c3      	str	r3, [r0, #12]
  me->_isTimeout = FALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	7403      	strb	r3, [r0, #16]
  
  fChrono_Start(me);
 800592c:	f7ff ff32 	bl	8005794 <fChrono_Start>
}
 8005930:	bd08      	pop	{r3, pc}
 8005932:	bf00      	nop
 8005934:	20000318 	.word	0x20000318

08005938 <fChrono_IsTimeout>:
 * @note Before using this function, ensure that fChrono_StartTimeoutS(), fChrono_StartTimeoutMs() or fChrono_StartTimeoutUs() has been called to start the measurement.
 * 
 * @param me Pointer to the chrono object
 * @retval isTimeout: TRUE if the chrono is timed out, otherwise returns FALSE
 */
bool_t fChrono_IsTimeout(sChrono * const me) {
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  CHECK_INIT_RET_(FALSE);           /* MISRA 2012 Rule 15.5 deviation */
 800593a:	4b10      	ldr	r3, [pc, #64]	@ (800597c <fChrono_IsTimeout+0x44>)
 800593c:	781d      	ldrb	r5, [r3, #0]
 800593e:	b1d5      	cbz	r5, 8005976 <fChrono_IsTimeout+0x3e>
 8005940:	4604      	mov	r4, r0
  ASSERT_NOT_NULL_RET_(me, FALSE);  /* MISRA 2012 Rule 15.5 deviation */
 8005942:	b1a8      	cbz	r0, 8005970 <fChrono_IsTimeout+0x38>
  CHECK_RUN_(FALSE);                /* MISRA 2012 Rule 15.5 deviation */
 8005944:	7806      	ldrb	r6, [r0, #0]
 8005946:	b1ae      	cbz	r6, 8005974 <fChrono_IsTimeout+0x3c>
  
  tick_t startTick = me->_startTick;
  
  if(me->_isTimeout) {
 8005948:	7c05      	ldrb	r5, [r0, #16]
 800594a:	b9a5      	cbnz	r5, 8005976 <fChrono_IsTimeout+0x3e>
  tick_t startTick = me->_startTick;
 800594c:	6847      	ldr	r7, [r0, #4]
    return TRUE;
  }
  
  tick_t currentTick = fChrono_GetTick();
 800594e:	f7ff fecf 	bl	80056f0 <fChrono_GetTick>
  if(ELAPSED_(currentTick, startTick) >= me->_timeout) {
 8005952:	4287      	cmp	r7, r0
 8005954:	d807      	bhi.n	8005966 <fChrono_IsTimeout+0x2e>
 8005956:	1bc0      	subs	r0, r0, r7
 8005958:	68e3      	ldr	r3, [r4, #12]
 800595a:	4283      	cmp	r3, r0
 800595c:	d80b      	bhi.n	8005976 <fChrono_IsTimeout+0x3e>
    me->_isTimeout = TRUE;
 800595e:	2301      	movs	r3, #1
 8005960:	7423      	strb	r3, [r4, #16]
  } else {
    return FALSE;
  }

  return TRUE;
 8005962:	4635      	mov	r5, r6
 8005964:	e007      	b.n	8005976 <fChrono_IsTimeout+0x3e>
  if(ELAPSED_(currentTick, startTick) >= me->_timeout) {
 8005966:	4b05      	ldr	r3, [pc, #20]	@ (800597c <fChrono_IsTimeout+0x44>)
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	1bdb      	subs	r3, r3, r7
 800596c:	4418      	add	r0, r3
 800596e:	e7f3      	b.n	8005958 <fChrono_IsTimeout+0x20>
  ASSERT_NOT_NULL_RET_(me, FALSE);  /* MISRA 2012 Rule 15.5 deviation */
 8005970:	2500      	movs	r5, #0
 8005972:	e000      	b.n	8005976 <fChrono_IsTimeout+0x3e>
  CHECK_RUN_(FALSE);                /* MISRA 2012 Rule 15.5 deviation */
 8005974:	4635      	mov	r5, r6
}
 8005976:	4628      	mov	r0, r5
 8005978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597a:	bf00      	nop
 800597c:	20000318 	.word	0x20000318

08005980 <fChrono_IntervalUs>:
 * @param me Pointer to the chrono object
 * @retval interval: Time interval between two consecutive calls of the function (microseconds)
 */
timeUs_t fChrono_IntervalUs(sChrono * const me) {
  
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8005980:	4b0f      	ldr	r3, [pc, #60]	@ (80059c0 <fChrono_IntervalUs+0x40>)
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	b1bb      	cbz	r3, 80059b6 <fChrono_IntervalUs+0x36>
timeUs_t fChrono_IntervalUs(sChrono * const me) {
 8005986:	b510      	push	{r4, lr}
 8005988:	4604      	mov	r4, r0
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 800598a:	b1b0      	cbz	r0, 80059ba <fChrono_IntervalUs+0x3a>
  CHECK_RUN_((timeUs_t)0);                /* MISRA 2012 Rule 15.5 deviation */
 800598c:	7803      	ldrb	r3, [r0, #0]
 800598e:	b90b      	cbnz	r3, 8005994 <fChrono_IntervalUs+0x14>
 8005990:	2000      	movs	r0, #0
  tick_t currentTick = fChrono_GetTick();
  tick_t startTick = me->_startTick;
  me->_startTick = currentTick;
  
  return ((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
}
 8005992:	bd10      	pop	{r4, pc}
  tick_t currentTick = fChrono_GetTick();
 8005994:	f7ff feac 	bl	80056f0 <fChrono_GetTick>
  tick_t startTick = me->_startTick;
 8005998:	6863      	ldr	r3, [r4, #4]
  me->_startTick = currentTick;
 800599a:	6060      	str	r0, [r4, #4]
  return ((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
 800599c:	4298      	cmp	r0, r3
 800599e:	d305      	bcc.n	80059ac <fChrono_IntervalUs+0x2c>
 80059a0:	1ac0      	subs	r0, r0, r3
 80059a2:	4b07      	ldr	r3, [pc, #28]	@ (80059c0 <fChrono_IntervalUs+0x40>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80059aa:	e7f2      	b.n	8005992 <fChrono_IntervalUs+0x12>
 80059ac:	4a04      	ldr	r2, [pc, #16]	@ (80059c0 <fChrono_IntervalUs+0x40>)
 80059ae:	6952      	ldr	r2, [r2, #20]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	4418      	add	r0, r3
 80059b4:	e7f5      	b.n	80059a2 <fChrono_IntervalUs+0x22>
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 80059b6:	2000      	movs	r0, #0
}
 80059b8:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 80059ba:	2000      	movs	r0, #0
 80059bc:	e7e9      	b.n	8005992 <fChrono_IntervalUs+0x12>
 80059be:	bf00      	nop
 80059c0:	20000318 	.word	0x20000318

080059c4 <fFaraabin_Init>:
 * 
 * @note User need to call this function once in the initialization procedure of the software.
 * 
 * @return result Can be one of FARAABIN_RET values.
 */
fb_result_t fFaraabin_Init(void) {
 80059c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  if(fFaraabinLinkSerializer_Init(fFaraabin_GetTxBufferPointer(), fFaraabin_GetTxBufferSize()) != 0U) {
 80059c8:	f7fb fd1e 	bl	8001408 <fFaraabin_GetTxBufferPointer>
 80059cc:	4604      	mov	r4, r0
 80059ce:	f7fb fd1f 	bl	8001410 <fFaraabin_GetTxBufferSize>
 80059d2:	4601      	mov	r1, r0
 80059d4:	4620      	mov	r0, r4
 80059d6:	f003 fdbd 	bl	8009554 <fFaraabinLinkSerializer_Init>
 80059da:	b118      	cbz	r0, 80059e4 <fFaraabin_Init+0x20>
    return FARAABIN_SERIALIZER_INIT_FAILED;
 80059dc:	2401      	movs	r4, #1
  }
	
	fFaraabinFobjectMcu_SendEventSystem(eMCU_EVENT_INFO_BOOT);
  
  return FARAABIN_OK;
}
 80059de:	4620      	mov	r0, r4
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(fFaraabinLinkHandler_Init(fFaraabin_GetRxBufferPointer(), fFaraabin_GetRxBufferSize()) != FB_LINK_HANDLER_RESULT_OK) {
 80059e4:	f7fb fd18 	bl	8001418 <fFaraabin_GetRxBufferPointer>
 80059e8:	4604      	mov	r4, r0
 80059ea:	f7fb fd19 	bl	8001420 <fFaraabin_GetRxBufferSize>
 80059ee:	b281      	uxth	r1, r0
 80059f0:	4620      	mov	r0, r4
 80059f2:	f002 fd5b 	bl	80084ac <fFaraabinLinkHandler_Init>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f040 8092 	bne.w	8005b20 <fFaraabin_Init+0x15c>
  if(fFaraabinDatabase_Init() != 0U) {
 80059fc:	f000 f912 	bl	8005c24 <fFaraabinDatabase_Init>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f040 808f 	bne.w	8005b24 <fFaraabin_Init+0x160>
  if(fFaraabinFobjectMcu_Init() != 0U) {
 8005a06:	f001 fa83 	bl	8006f10 <fFaraabinFobjectMcu_Init>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f040 808c 	bne.w	8005b28 <fFaraabin_Init+0x164>
  if(fFaraabinFunctionEngine_Init() != 0U) {
 8005a10:	f001 fb90 	bl	8007134 <fFaraabinFunctionEngine_Init>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	f040 8089 	bne.w	8005b2c <fFaraabin_Init+0x168>
	FaraabinInit___ = true;
 8005a1a:	2701      	movs	r7, #1
 8005a1c:	4b45      	ldr	r3, [pc, #276]	@ (8005b34 <fFaraabin_Init+0x170>)
 8005a1e:	701f      	strb	r7, [r3, #0]
	FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(bool_t);
 8005a20:	4845      	ldr	r0, [pc, #276]	@ (8005b38 <fFaraabin_Init+0x174>)
 8005a22:	4b46      	ldr	r3, [pc, #280]	@ (8005b3c <fFaraabin_Init+0x178>)
 8005a24:	6043      	str	r3, [r0, #4]
 8005a26:	4e46      	ldr	r6, [pc, #280]	@ (8005b40 <fFaraabin_Init+0x17c>)
 8005a28:	60c6      	str	r6, [r0, #12]
 8005a2a:	4d46      	ldr	r5, [pc, #280]	@ (8005b44 <fFaraabin_Init+0x180>)
 8005a2c:	6085      	str	r5, [r0, #8]
 8005a2e:	6147      	str	r7, [r0, #20]
 8005a30:	2400      	movs	r4, #0
 8005a32:	7484      	strb	r4, [r0, #18]
 8005a34:	6184      	str	r4, [r0, #24]
 8005a36:	f001 fb3f 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint8_t);
 8005a3a:	4843      	ldr	r0, [pc, #268]	@ (8005b48 <fFaraabin_Init+0x184>)
 8005a3c:	4b43      	ldr	r3, [pc, #268]	@ (8005b4c <fFaraabin_Init+0x188>)
 8005a3e:	6043      	str	r3, [r0, #4]
 8005a40:	60c6      	str	r6, [r0, #12]
 8005a42:	6085      	str	r5, [r0, #8]
 8005a44:	6147      	str	r7, [r0, #20]
 8005a46:	7484      	strb	r4, [r0, #18]
 8005a48:	6184      	str	r4, [r0, #24]
 8005a4a:	f001 fb35 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int8_t);
 8005a4e:	4840      	ldr	r0, [pc, #256]	@ (8005b50 <fFaraabin_Init+0x18c>)
 8005a50:	4b40      	ldr	r3, [pc, #256]	@ (8005b54 <fFaraabin_Init+0x190>)
 8005a52:	6043      	str	r3, [r0, #4]
 8005a54:	60c6      	str	r6, [r0, #12]
 8005a56:	6085      	str	r5, [r0, #8]
 8005a58:	6147      	str	r7, [r0, #20]
 8005a5a:	7484      	strb	r4, [r0, #18]
 8005a5c:	6184      	str	r4, [r0, #24]
 8005a5e:	f001 fb2b 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint16_t);
 8005a62:	483d      	ldr	r0, [pc, #244]	@ (8005b58 <fFaraabin_Init+0x194>)
 8005a64:	4b3d      	ldr	r3, [pc, #244]	@ (8005b5c <fFaraabin_Init+0x198>)
 8005a66:	6043      	str	r3, [r0, #4]
 8005a68:	60c6      	str	r6, [r0, #12]
 8005a6a:	6085      	str	r5, [r0, #8]
 8005a6c:	2702      	movs	r7, #2
 8005a6e:	6147      	str	r7, [r0, #20]
 8005a70:	7484      	strb	r4, [r0, #18]
 8005a72:	6184      	str	r4, [r0, #24]
 8005a74:	f001 fb20 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int16_t);
 8005a78:	4839      	ldr	r0, [pc, #228]	@ (8005b60 <fFaraabin_Init+0x19c>)
 8005a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b64 <fFaraabin_Init+0x1a0>)
 8005a7c:	6043      	str	r3, [r0, #4]
 8005a7e:	60c6      	str	r6, [r0, #12]
 8005a80:	6085      	str	r5, [r0, #8]
 8005a82:	6147      	str	r7, [r0, #20]
 8005a84:	7484      	strb	r4, [r0, #18]
 8005a86:	6184      	str	r4, [r0, #24]
 8005a88:	f001 fb16 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint32_t);
 8005a8c:	4836      	ldr	r0, [pc, #216]	@ (8005b68 <fFaraabin_Init+0x1a4>)
 8005a8e:	4b37      	ldr	r3, [pc, #220]	@ (8005b6c <fFaraabin_Init+0x1a8>)
 8005a90:	6043      	str	r3, [r0, #4]
 8005a92:	60c6      	str	r6, [r0, #12]
 8005a94:	6085      	str	r5, [r0, #8]
 8005a96:	f04f 0804 	mov.w	r8, #4
 8005a9a:	f8c0 8014 	str.w	r8, [r0, #20]
 8005a9e:	7484      	strb	r4, [r0, #18]
 8005aa0:	6184      	str	r4, [r0, #24]
 8005aa2:	f001 fb09 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int32_t);
 8005aa6:	4832      	ldr	r0, [pc, #200]	@ (8005b70 <fFaraabin_Init+0x1ac>)
 8005aa8:	4b32      	ldr	r3, [pc, #200]	@ (8005b74 <fFaraabin_Init+0x1b0>)
 8005aaa:	6043      	str	r3, [r0, #4]
 8005aac:	60c6      	str	r6, [r0, #12]
 8005aae:	6085      	str	r5, [r0, #8]
 8005ab0:	f8c0 8014 	str.w	r8, [r0, #20]
 8005ab4:	7484      	strb	r4, [r0, #18]
 8005ab6:	6184      	str	r4, [r0, #24]
 8005ab8:	f001 fafe 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint64_t);
 8005abc:	482e      	ldr	r0, [pc, #184]	@ (8005b78 <fFaraabin_Init+0x1b4>)
 8005abe:	4b2f      	ldr	r3, [pc, #188]	@ (8005b7c <fFaraabin_Init+0x1b8>)
 8005ac0:	6043      	str	r3, [r0, #4]
 8005ac2:	60c6      	str	r6, [r0, #12]
 8005ac4:	6085      	str	r5, [r0, #8]
 8005ac6:	2708      	movs	r7, #8
 8005ac8:	6147      	str	r7, [r0, #20]
 8005aca:	7484      	strb	r4, [r0, #18]
 8005acc:	6184      	str	r4, [r0, #24]
 8005ace:	f001 faf3 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int64_t);
 8005ad2:	482b      	ldr	r0, [pc, #172]	@ (8005b80 <fFaraabin_Init+0x1bc>)
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b84 <fFaraabin_Init+0x1c0>)
 8005ad6:	6043      	str	r3, [r0, #4]
 8005ad8:	60c6      	str	r6, [r0, #12]
 8005ada:	6085      	str	r5, [r0, #8]
 8005adc:	6147      	str	r7, [r0, #20]
 8005ade:	7484      	strb	r4, [r0, #18]
 8005ae0:	6184      	str	r4, [r0, #24]
 8005ae2:	f001 fae9 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(float32_t);
 8005ae6:	4828      	ldr	r0, [pc, #160]	@ (8005b88 <fFaraabin_Init+0x1c4>)
 8005ae8:	4b28      	ldr	r3, [pc, #160]	@ (8005b8c <fFaraabin_Init+0x1c8>)
 8005aea:	6043      	str	r3, [r0, #4]
 8005aec:	60c6      	str	r6, [r0, #12]
 8005aee:	6085      	str	r5, [r0, #8]
 8005af0:	f8c0 8014 	str.w	r8, [r0, #20]
 8005af4:	7484      	strb	r4, [r0, #18]
 8005af6:	6184      	str	r4, [r0, #24]
 8005af8:	f001 fade 	bl	80070b8 <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(float64_t);
 8005afc:	4824      	ldr	r0, [pc, #144]	@ (8005b90 <fFaraabin_Init+0x1cc>)
 8005afe:	4b25      	ldr	r3, [pc, #148]	@ (8005b94 <fFaraabin_Init+0x1d0>)
 8005b00:	6043      	str	r3, [r0, #4]
 8005b02:	60c6      	str	r6, [r0, #12]
 8005b04:	6085      	str	r5, [r0, #8]
 8005b06:	6147      	str	r7, [r0, #20]
 8005b08:	7484      	strb	r4, [r0, #18]
 8005b0a:	6184      	str	r4, [r0, #24]
 8005b0c:	f001 fad4 	bl	80070b8 <fFaraabinFobjectVarType_Init>
	if(fFaraabinDefaultFobjects_Init() != 0U) {
 8005b10:	f000 f928 	bl	8005d64 <fFaraabinDefaultFobjects_Init>
 8005b14:	4604      	mov	r4, r0
 8005b16:	b958      	cbnz	r0, 8005b30 <fFaraabin_Init+0x16c>
	fFaraabinFobjectMcu_SendEventSystem(eMCU_EVENT_INFO_BOOT);
 8005b18:	2003      	movs	r0, #3
 8005b1a:	f001 fa5d 	bl	8006fd8 <fFaraabinFobjectMcu_SendEventSystem>
  return FARAABIN_OK;
 8005b1e:	e75e      	b.n	80059de <fFaraabin_Init+0x1a>
    return FARAABIN_LINK_HANDLER_INIT_FAILED;
 8005b20:	2402      	movs	r4, #2
 8005b22:	e75c      	b.n	80059de <fFaraabin_Init+0x1a>
    return FARAABIN_DATA_BASE_INIT_FAILED;
 8005b24:	2403      	movs	r4, #3
 8005b26:	e75a      	b.n	80059de <fFaraabin_Init+0x1a>
    return FARAABIN_MCU_FOBJECT_INIT_FAILED;
 8005b28:	2405      	movs	r4, #5
 8005b2a:	e758      	b.n	80059de <fFaraabin_Init+0x1a>
    return FARAABIN_FUNCTION_ENGINE_INIT_FAILED;
 8005b2c:	2406      	movs	r4, #6
 8005b2e:	e756      	b.n	80059de <fFaraabin_Init+0x1a>
    return FARAABIN_DEFAULT_FOBJECTS_INIT_FAILED;
 8005b30:	2404      	movs	r4, #4
 8005b32:	e754      	b.n	80059de <fFaraabin_Init+0x1a>
 8005b34:	20002500 	.word	0x20002500
 8005b38:	2000261c 	.word	0x2000261c
 8005b3c:	0800b084 	.word	0x0800b084
 8005b40:	0800b08c 	.word	0x0800b08c
 8005b44:	0800b0d0 	.word	0x0800b0d0
 8005b48:	20002600 	.word	0x20002600
 8005b4c:	0800b0d8 	.word	0x0800b0d8
 8005b50:	200025e4 	.word	0x200025e4
 8005b54:	0800b0e0 	.word	0x0800b0e0
 8005b58:	200025c8 	.word	0x200025c8
 8005b5c:	0800b0e8 	.word	0x0800b0e8
 8005b60:	200025ac 	.word	0x200025ac
 8005b64:	0800b0f4 	.word	0x0800b0f4
 8005b68:	20002590 	.word	0x20002590
 8005b6c:	0800b0fc 	.word	0x0800b0fc
 8005b70:	20002574 	.word	0x20002574
 8005b74:	0800b108 	.word	0x0800b108
 8005b78:	20002558 	.word	0x20002558
 8005b7c:	0800b110 	.word	0x0800b110
 8005b80:	2000253c 	.word	0x2000253c
 8005b84:	0800b11c 	.word	0x0800b11c
 8005b88:	20002520 	.word	0x20002520
 8005b8c:	0800b124 	.word	0x0800b124
 8005b90:	20002504 	.word	0x20002504
 8005b94:	0800b130 	.word	0x0800b130

08005b98 <fFaraabin_IsAllowEvent>:
	faraabin_mcu__.Enable = FALSE;
}

bool fFaraabin_IsAllowEvent(void) {
	
	if(!faraabin_mcu__.Enable) {
 8005b98:	4b04      	ldr	r3, [pc, #16]	@ (8005bac <fFaraabin_IsAllowEvent+0x14>)
 8005b9a:	7898      	ldrb	r0, [r3, #2]
 8005b9c:	b120      	cbz	r0, 8005ba8 <fFaraabin_IsAllowEvent+0x10>
		return false;
	}
	
	if(LinkHandler.DictSendingMode.SendFlag) {
 8005b9e:	4b04      	ldr	r3, [pc, #16]	@ (8005bb0 <fFaraabin_IsAllowEvent+0x18>)
 8005ba0:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 8005ba4:	f080 0001 	eor.w	r0, r0, #1
		return false;
	}
	
	return true;
}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	200027e8 	.word	0x200027e8
 8005bb0:	20002a50 	.word	0x20002a50

08005bb4 <fFaraabin_Run>:
 * @attention Faraabin uses a queue to hold incoming probe data from various parts of the software.
 *            To prevent data mixing, faraabin utilizes a critical section mechanism.
 *            For more details, refer to the user manual.
 * 
 */
void fFaraabin_Run(void) {
 8005bb4:	b538      	push	{r3, r4, r5, lr}
	
	if(!FaraabinInit___) {
 8005bb6:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <fFaraabin_Run+0x48>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b923      	cbnz	r3, 8005bc6 <fFaraabin_Run+0x12>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8005bbc:	4a10      	ldr	r2, [pc, #64]	@ (8005c00 <fFaraabin_Run+0x4c>)
 8005bbe:	7953      	ldrb	r3, [r2, #5]
 8005bc0:	f043 0308 	orr.w	r3, r3, #8
 8005bc4:	7153      	strb	r3, [r2, #5]
	}
  
  fFaraabinFobjectMcu_Run();
 8005bc6:	f001 f9d5 	bl	8006f74 <fFaraabinFobjectMcu_Run>
  fFaraabinFunctionEngine_Run();
 8005bca:	f001 faef 	bl	80071ac <fFaraabinFunctionEngine_Run>
  fFaraabinLinkHandler_Run();
 8005bce:	f002 fc93 	bl	80084f8 <fFaraabinLinkHandler_Run>
  fFaraabinDefaultFobjects_Run();
 8005bd2:	f000 f8ef 	bl	8005db4 <fFaraabinDefaultFobjects_Run>
	fCpuProfiler_Run();
#endif

  // Looping over all dictionaries to find databus pointers.
  // After finding databus pointer, captured data of that databus is sent.
  uint16_t dictQty = fFaraabinDatabase_GetNumberOfAddedDicts();
 8005bd6:	f000 f83d 	bl	8005c54 <fFaraabinDatabase_GetNumberOfAddedDicts>
  for(uint16_t i = 0U; i < dictQty; i++) {
 8005bda:	4605      	mov	r5, r0
 8005bdc:	b168      	cbz	r0, 8005bfa <fFaraabin_Run+0x46>
 8005bde:	2400      	movs	r4, #0
 8005be0:	e002      	b.n	8005be8 <fFaraabin_Run+0x34>
 8005be2:	3401      	adds	r4, #1
 8005be4:	42ac      	cmp	r4, r5
 8005be6:	d008      	beq.n	8005bfa <fFaraabin_Run+0x46>

    uint32_t fobjectPtr = fFaraabinDatabase_GetFobjectPointerFromDict(i);
 8005be8:	b2a0      	uxth	r0, r4
 8005bea:	f000 f89f 	bl	8005d2c <fFaraabinDatabase_GetFobjectPointerFromDict>
    uint8_t *fobjectType = (uint8_t*)fobjectPtr;

    if((eFaraabin_FobjectType)(*fobjectType) == eFO_TYPE_DATABUS) {
 8005bee:	7803      	ldrb	r3, [r0, #0]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d1f6      	bne.n	8005be2 <fFaraabin_Run+0x2e>
      
      fFaraabinFobjectDataBus_SendCaptureDataRun((sFaraabinFobjectDataBus*)fobjectPtr);
 8005bf4:	f000 fea6 	bl	8006944 <fFaraabinFobjectDataBus_SendCaptureDataRun>
 8005bf8:	e7f3      	b.n	8005be2 <fFaraabin_Run+0x2e>

    }
  }
}
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	20002500 	.word	0x20002500
 8005c00:	20002638 	.word	0x20002638

08005c04 <fFaraabin_CharReceived>:
 * @note If the user has a link that can fetch chunks of data, in the receive callback of their link,
 *       they should loop over all the fetched data and call this function for each received character.
 * 
 * @param c Received character.
 */
void fFaraabin_CharReceived(uint8_t c) {
 8005c04:	b508      	push	{r3, lr}
	
	if(!FaraabinInit___) {
 8005c06:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <fFaraabin_CharReceived+0x18>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	b923      	cbnz	r3, 8005c16 <fFaraabin_CharReceived+0x12>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8005c0c:	4a04      	ldr	r2, [pc, #16]	@ (8005c20 <fFaraabin_CharReceived+0x1c>)
 8005c0e:	7953      	ldrb	r3, [r2, #5]
 8005c10:	f043 0308 	orr.w	r3, r3, #8
 8005c14:	7153      	strb	r3, [r2, #5]
	}

  fFaraabinLinkHandler_CharReceived(c);
 8005c16:	f002 fce7 	bl	80085e8 <fFaraabinLinkHandler_CharReceived>

}
 8005c1a:	bd08      	pop	{r3, pc}
 8005c1c:	20002500 	.word	0x20002500
 8005c20:	20002638 	.word	0x20002638

08005c24 <fFaraabinDatabase_Init>:
 * 
 * @return result returns '0' after initialization.
 */
uint8_t fFaraabinDatabase_Init(void) {
  
  for(uint16_t i = 1; i < FB_MAX_FOBJECT_QTY; i++) {
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <fFaraabinDatabase_Init+0x28>)
 8005c26:	f503 71c6 	add.w	r1, r3, #396	@ 0x18c
    
    FaraabinDatabase.DatabaseArray[i] = 0U;
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f843 2f04 	str.w	r2, [r3, #4]!
  for(uint16_t i = 1; i < FB_MAX_FOBJECT_QTY; i++) {
 8005c30:	428b      	cmp	r3, r1
 8005c32:	d1fb      	bne.n	8005c2c <fFaraabinDatabase_Init+0x8>
  }
  
  FaraabinDatabase.DatabaseArrayIndex = 0U;
 8005c34:	2000      	movs	r0, #0
 8005c36:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <fFaraabinDatabase_Init+0x28>)
 8005c38:	f8a3 0190 	strh.w	r0, [r3, #400]	@ 0x190

  FaraabinFlags.Features.U32 = 0U;
 8005c3c:	4b04      	ldr	r3, [pc, #16]	@ (8005c50 <fFaraabinDatabase_Init+0x2c>)
 8005c3e:	6018      	str	r0, [r3, #0]
  FaraabinFlags.Status.U32 = 0U;
 8005c40:	6058      	str	r0, [r3, #4]

#ifdef FB_FEATURE_FLAG_MCU_CLI
  FaraabinFlags.Features.Bitfield.McuCli = 1U;
#endif
#ifdef FB_FEATURE_FLAG_BUFFER_OVF
  FaraabinFlags.Features.Bitfield.BufferOverFlow = 1U;
 8005c42:	220f      	movs	r2, #15
 8005c44:	701a      	strb	r2, [r3, #0]

#ifdef FB_FEATURE_FLAG_ALLOW_SEND_DICT_BLOCKING
  FaraabinFlags.Features.Bitfield.AllowSendDickBlocking = 1U;
#endif

  FaraabinFlags.Status.Bitfield.McuReset = 1U;
 8005c46:	2201      	movs	r2, #1
 8005c48:	711a      	strb	r2, [r3, #4]
  
  return 0U;
}
 8005c4a:	4770      	bx	lr
 8005c4c:	20002640 	.word	0x20002640
 8005c50:	20002638 	.word	0x20002638

08005c54 <fFaraabinDatabase_GetNumberOfAddedDicts>:
 * 
 * @return numberOfItems Number of items in database.
 */
uint16_t fFaraabinDatabase_GetNumberOfAddedDicts(void) {
  return FaraabinDatabase.DatabaseArrayIndex;
}
 8005c54:	4b01      	ldr	r3, [pc, #4]	@ (8005c5c <fFaraabinDatabase_GetNumberOfAddedDicts+0x8>)
 8005c56:	f8b3 0190 	ldrh.w	r0, [r3, #400]	@ 0x190
 8005c5a:	4770      	bx	lr
 8005c5c:	20002640 	.word	0x20002640

08005c60 <fFaraabinDatabase_IsDictExist>:
 * @param fobjectPtr Pointer of the fobject.
 * @return result Returns TRUE if dict is exist, FALSE if not exist.
 */
bool fFaraabinDatabase_IsDictExist(uint32_t fobjectPtr) {
	
	for(uint32_t i = 0; i < FB_MAX_FOBJECT_QTY; i++) {\
 8005c60:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <fFaraabinDatabase_IsDictExist+0x1c>)
 8005c62:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
		
		if(FaraabinDatabase.DatabaseArray[i] == fobjectPtr) {
 8005c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6a:	4282      	cmp	r2, r0
 8005c6c:	d003      	beq.n	8005c76 <fFaraabinDatabase_IsDictExist+0x16>
	for(uint32_t i = 0; i < FB_MAX_FOBJECT_QTY; i++) {\
 8005c6e:	428b      	cmp	r3, r1
 8005c70:	d1f9      	bne.n	8005c66 <fFaraabinDatabase_IsDictExist+0x6>
			return true;
		}
	}
	
	return false;
 8005c72:	2000      	movs	r0, #0
 8005c74:	4770      	bx	lr
			return true;
 8005c76:	2001      	movs	r0, #1
}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20002640 	.word	0x20002640

08005c80 <fFaraabinDatabase_AddDict>:
	if(!FaraabinInit___) {
 8005c80:	4b26      	ldr	r3, [pc, #152]	@ (8005d1c <fFaraabinDatabase_AddDict+0x9c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	b1db      	cbz	r3, 8005cbe <fFaraabinDatabase_AddDict+0x3e>
uint8_t fFaraabinDatabase_AddDict(uint32_t fobjectPtr) {
 8005c86:	b510      	push	{r4, lr}
 8005c88:	4604      	mov	r4, r0
  if(fobjectPtr == 0U) {
 8005c8a:	b1f8      	cbz	r0, 8005ccc <fFaraabinDatabase_AddDict+0x4c>
	if(fFaraabinDatabase_IsDictExist(fobjectPtr)) {
 8005c8c:	f7ff ffe8 	bl	8005c60 <fFaraabinDatabase_IsDictExist>
 8005c90:	bb38      	cbnz	r0, 8005ce2 <fFaraabinDatabase_AddDict+0x62>
	if(LinkHandler.DictSendingMode.SendFlag) {
 8005c92:	4b23      	ldr	r3, [pc, #140]	@ (8005d20 <fFaraabinDatabase_AddDict+0xa0>)
 8005c94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c98:	bb53      	cbnz	r3, 8005cf0 <fFaraabinDatabase_AddDict+0x70>
  if(FaraabinDatabase.DatabaseArrayIndex >= (uint16_t)((uint16_t)FB_MAX_FOBJECT_QTY - (uint16_t)1)) {
 8005c9a:	4b22      	ldr	r3, [pc, #136]	@ (8005d24 <fFaraabinDatabase_AddDict+0xa4>)
 8005c9c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8005ca0:	2b62      	cmp	r3, #98	@ 0x62
 8005ca2:	d830      	bhi.n	8005d06 <fFaraabinDatabase_AddDict+0x86>
  FaraabinDatabase.DatabaseArray[FaraabinDatabase.DatabaseArrayIndex] = fobjectPtr;
 8005ca4:	491f      	ldr	r1, [pc, #124]	@ (8005d24 <fFaraabinDatabase_AddDict+0xa4>)
 8005ca6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  FaraabinFlags.Status.Bitfield.NewDict = 1U;
 8005caa:	481f      	ldr	r0, [pc, #124]	@ (8005d28 <fFaraabinDatabase_AddDict+0xa8>)
 8005cac:	7902      	ldrb	r2, [r0, #4]
 8005cae:	f042 0202 	orr.w	r2, r2, #2
 8005cb2:	7102      	strb	r2, [r0, #4]
  FaraabinDatabase.DatabaseArrayIndex++;
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f8a1 3190 	strh.w	r3, [r1, #400]	@ 0x190
  return 0;
 8005cba:	2000      	movs	r0, #0
}
 8005cbc:	bd10      	pop	{r4, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8005cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8005d28 <fFaraabinDatabase_AddDict+0xa8>)
 8005cc0:	7953      	ldrb	r3, [r2, #5]
 8005cc2:	f043 0308 	orr.w	r3, r3, #8
 8005cc6:	7153      	strb	r3, [r2, #5]
		return 1;
 8005cc8:	2001      	movs	r0, #1
}
 8005cca:	4770      	bx	lr
    FaraabinFlags.Status.Bitfield.NullDict = 1U;
 8005ccc:	4a16      	ldr	r2, [pc, #88]	@ (8005d28 <fFaraabinDatabase_AddDict+0xa8>)
 8005cce:	7913      	ldrb	r3, [r2, #4]
 8005cd0:	f043 0310 	orr.w	r3, r3, #16
 8005cd4:	7113      	strb	r3, [r2, #4]
    fFaraabinFobjectMcu_GetFobject()->_init = false;
 8005cd6:	f001 f9eb 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	7043      	strb	r3, [r0, #1]
    return 1;
 8005cde:	2001      	movs	r0, #1
 8005ce0:	e7ec      	b.n	8005cbc <fFaraabinDatabase_AddDict+0x3c>
		FaraabinFlags.Status.Bitfield.DictDuplicate = 1U;
 8005ce2:	4a11      	ldr	r2, [pc, #68]	@ (8005d28 <fFaraabinDatabase_AddDict+0xa8>)
 8005ce4:	7953      	ldrb	r3, [r2, #5]
 8005ce6:	f043 0304 	orr.w	r3, r3, #4
 8005cea:	7153      	strb	r3, [r2, #5]
		return 1;
 8005cec:	2001      	movs	r0, #1
 8005cee:	e7e5      	b.n	8005cbc <fFaraabinDatabase_AddDict+0x3c>
		FaraabinFlags.Status.Bitfield.UnexpectedDict = 1U;
 8005cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d28 <fFaraabinDatabase_AddDict+0xa8>)
 8005cf2:	7913      	ldrb	r3, [r2, #4]
 8005cf4:	f043 0320 	orr.w	r3, r3, #32
 8005cf8:	7113      	strb	r3, [r2, #4]
    fFaraabinFobjectMcu_GetFobject()->_init = false;
 8005cfa:	f001 f9d9 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	7043      	strb	r3, [r0, #1]
		return 1;
 8005d02:	2001      	movs	r0, #1
 8005d04:	e7da      	b.n	8005cbc <fFaraabinDatabase_AddDict+0x3c>
    FaraabinFlags.Status.Bitfield.DictOverflow = 1U;
 8005d06:	4a08      	ldr	r2, [pc, #32]	@ (8005d28 <fFaraabinDatabase_AddDict+0xa8>)
 8005d08:	7913      	ldrb	r3, [r2, #4]
 8005d0a:	f043 0308 	orr.w	r3, r3, #8
 8005d0e:	7113      	strb	r3, [r2, #4]
    fFaraabinFobjectMcu_GetFobject()->_init = false;
 8005d10:	f001 f9ce 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 8005d14:	2300      	movs	r3, #0
 8005d16:	7043      	strb	r3, [r0, #1]
    return 1;
 8005d18:	2001      	movs	r0, #1
 8005d1a:	e7cf      	b.n	8005cbc <fFaraabinDatabase_AddDict+0x3c>
 8005d1c:	20002500 	.word	0x20002500
 8005d20:	20002a50 	.word	0x20002a50
 8005d24:	20002640 	.word	0x20002640
 8005d28:	20002638 	.word	0x20002638

08005d2c <fFaraabinDatabase_GetFobjectPointerFromDict>:
 * @param dictIndex Index of the dictionary in database.
 * @return fobjectPtr Pointer of the fobject.
 */
uint32_t fFaraabinDatabase_GetFobjectPointerFromDict(uint16_t dictIndex) {
  
  if(dictIndex >= FaraabinDatabase.DatabaseArrayIndex) {
 8005d2c:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <fFaraabinDatabase_GetFobjectPointerFromDict+0x14>)
 8005d2e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8005d32:	4283      	cmp	r3, r0
    //TODO: Send error
    return 0;
  }
  
  return FaraabinDatabase.DatabaseArray[dictIndex];
 8005d34:	bf86      	itte	hi
 8005d36:	4b02      	ldrhi	r3, [pc, #8]	@ (8005d40 <fFaraabinDatabase_GetFobjectPointerFromDict+0x14>)
 8005d38:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 8005d3c:	2000      	movls	r0, #0
}
 8005d3e:	4770      	bx	lr
 8005d40:	20002640 	.word	0x20002640

08005d44 <fFaraabinDatabase_GetAllFeatureFlags>:
 * 
 * @return flagsStat Status of the feature flags.
 */
uint32_t fFaraabinDatabase_GetAllFeatureFlags(void) {
  return FaraabinFlags.Features.U32;
}
 8005d44:	4b01      	ldr	r3, [pc, #4]	@ (8005d4c <fFaraabinDatabase_GetAllFeatureFlags+0x8>)
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20002638 	.word	0x20002638

08005d50 <fFaraabinDatabase_GetAllStatusFlags>:
 * 
 * @return flagsStat Status of the status flags.
 */
uint32_t fFaraabinDatabase_GetAllStatusFlags(void) {
  return FaraabinFlags.Status.U32;
}
 8005d50:	4b01      	ldr	r3, [pc, #4]	@ (8005d58 <fFaraabinDatabase_GetAllStatusFlags+0x8>)
 8005d52:	6858      	ldr	r0, [r3, #4]
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20002638 	.word	0x20002638

08005d5c <fFaraabinDatabase_GetRamUsage>:
 * @return uint32_t Amount of RAM usage in bytes.
 */
uint32_t fFaraabinDatabase_GetRamUsage(void) {
	
	return sizeof(sFaraabinDatabase) + sizeof(sFaraabinFlags);
}
 8005d5c:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 8005d60:	4770      	bx	lr
	...

08005d64 <fFaraabinDefaultFobjects_Init>:
 * 
 * @note This function is called internally and user does not need to call it manually.
 * 
 * @return result Returns '0' if successful, otherwise '1'. 
 */
uint8_t fFaraabinDefaultFobjects_Init(void) {
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
#if defined(FB_FEATURE_FLAG_DEFAULT_DATABUS) && defined(FARAABIN_ENABLE)
  
  FARAABIN_DATABUS_SET_VALUE_(DefaultDatabus.ChannelQty, FB_DEFAULT_DATABUS_CHANNEL_QTY);
 8005d66:	4c0e      	ldr	r4, [pc, #56]	@ (8005da0 <fFaraabinDefaultFobjects_Init+0x3c>)
 8005d68:	2314      	movs	r3, #20
 8005d6a:	8263      	strh	r3, [r4, #18]
  FARAABIN_DataBus_Init_WithPath_(&DefaultDatabus, DefaultFobjectPath);
 8005d6c:	4f0d      	ldr	r7, [pc, #52]	@ (8005da4 <fFaraabinDefaultFobjects_Init+0x40>)
 8005d6e:	60a7      	str	r7, [r4, #8]
 8005d70:	4e0d      	ldr	r6, [pc, #52]	@ (8005da8 <fFaraabinDefaultFobjects_Init+0x44>)
 8005d72:	60e6      	str	r6, [r4, #12]
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 f8f3 	bl	8005f60 <fFaraabinFobjectDataBus_Init>
  
  FARAABIN_DataBus_StartStreamMode_(&DefaultDatabus);
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 ff2c 	bl	8006bd8 <fFaraabinFobjectDataBus_StartStream>
	FARAABIN_DataBus_Enable_(&DefaultDatabus);
 8005d80:	2501      	movs	r5, #1
 8005d82:	70a5      	strb	r5, [r4, #2]
  
  fChrono_StartTimeoutMs(&DefaultDatabusRunner, FB_DEFAULT_DATABUS_CYCLE_MS);
 8005d84:	2164      	movs	r1, #100	@ 0x64
 8005d86:	4809      	ldr	r0, [pc, #36]	@ (8005dac <fFaraabinDefaultFobjects_Init+0x48>)
 8005d88:	f7ff fdb2 	bl	80058f0 <fChrono_StartTimeoutMs>
  
#endif
  
#if defined(FB_FEATURE_FLAG_DEFAULT_EVENT_GROUP) && defined(FARAABIN_ENABLE)
  
  FARAABIN_EventGroup_Init_WithPath_(&DefaultEventGroup, DefaultFobjectPath);
 8005d8c:	4c08      	ldr	r4, [pc, #32]	@ (8005db0 <fFaraabinDefaultFobjects_Init+0x4c>)
 8005d8e:	60a7      	str	r7, [r4, #8]
 8005d90:	60e6      	str	r6, [r4, #12]
 8005d92:	4620      	mov	r0, r4
 8005d94:	f001 f886 	bl	8006ea4 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_EventGroup_Enable_(&DefaultEventGroup);
 8005d98:	70a5      	strb	r5, [r4, #2]
  
#endif

  return 0;
}
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200003b0 	.word	0x200003b0
 8005da4:	0800b0d0 	.word	0x0800b0d0
 8005da8:	0800b144 	.word	0x0800b144
 8005dac:	200027d4 	.word	0x200027d4
 8005db0:	20000394 	.word	0x20000394

08005db4 <fFaraabinDefaultFobjects_Run>:

/**
 * @brief Runs default databus.
 * 
 */
void fFaraabinDefaultFobjects_Run(void) {
 8005db4:	b508      	push	{r3, lr}
	
#if defined(FB_FEATURE_FLAG_DEFAULT_DATABUS) && defined(FARAABIN_ENABLE)
  
  if(fChrono_IsTimeout(&DefaultDatabusRunner)) {
 8005db6:	4806      	ldr	r0, [pc, #24]	@ (8005dd0 <fFaraabinDefaultFobjects_Run+0x1c>)
 8005db8:	f7ff fdbe 	bl	8005938 <fChrono_IsTimeout>
 8005dbc:	b900      	cbnz	r0, 8005dc0 <fFaraabinDefaultFobjects_Run+0xc>
    FARAABIN_DataBus_Run_(&DefaultDatabus);
    
  }
	
#endif
}
 8005dbe:	bd08      	pop	{r3, pc}
    fChrono_StartTimeoutMs(&DefaultDatabusRunner, FB_DEFAULT_DATABUS_CYCLE_MS);
 8005dc0:	2164      	movs	r1, #100	@ 0x64
 8005dc2:	4803      	ldr	r0, [pc, #12]	@ (8005dd0 <fFaraabinDefaultFobjects_Run+0x1c>)
 8005dc4:	f7ff fd94 	bl	80058f0 <fChrono_StartTimeoutMs>
    FARAABIN_DataBus_Run_(&DefaultDatabus);
 8005dc8:	4802      	ldr	r0, [pc, #8]	@ (8005dd4 <fFaraabinDefaultFobjects_Run+0x20>)
 8005dca:	f000 f945 	bl	8006058 <fFaraabinFobjectDataBus_Run>
}
 8005dce:	e7f6      	b.n	8005dbe <fFaraabinDefaultFobjects_Run+0xa>
 8005dd0:	200027d4 	.word	0x200027d4
 8005dd4:	200003b0 	.word	0x200003b0

08005dd8 <fFaraabinFobjectContainer_Init>:
 * @brief Initializes a container fobject.
 * 
 * @param me Pointer to the Container.
 * @return InitStat Returns '1' if failed, '0' if successful.
 */
uint8_t fFaraabinFobjectContainer_Init(sFaraabinFobjectContainer *me) {
 8005dd8:	b538      	push	{r3, r4, r5, lr}
	
	if(!FaraabinInit___) {
 8005dda:	4b0d      	ldr	r3, [pc, #52]	@ (8005e10 <fFaraabinFobjectContainer_Init+0x38>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	b93b      	cbnz	r3, 8005df0 <fFaraabinFobjectContainer_Init+0x18>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8005de0:	4a0c      	ldr	r2, [pc, #48]	@ (8005e14 <fFaraabinFobjectContainer_Init+0x3c>)
 8005de2:	7953      	ldrb	r3, [r2, #5]
 8005de4:	f043 0308 	orr.w	r3, r3, #8
 8005de8:	7153      	strb	r3, [r2, #5]
		return 1;
 8005dea:	2501      	movs	r5, #1
  if(fFaraabinLinkSerializer_CountDictsFrames((uint32_t)me) == 0U) {
    return 0;
  }
  
  return 0;
}
 8005dec:	4628      	mov	r0, r5
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8005df2:	f7ff ff45 	bl	8005c80 <fFaraabinDatabase_AddDict>
 8005df6:	4605      	mov	r5, r0
 8005df8:	b108      	cbz	r0, 8005dfe <fFaraabinFobjectContainer_Init+0x26>
    return 1;
 8005dfa:	2501      	movs	r5, #1
 8005dfc:	e7f6      	b.n	8005dec <fFaraabinFobjectContainer_Init+0x14>
  me->_type = (uint8_t)eFO_TYPE_CONTAINER;
 8005dfe:	230c      	movs	r3, #12
 8005e00:	7023      	strb	r3, [r4, #0]
  me->Enable = true;
 8005e02:	2301      	movs	r3, #1
 8005e04:	7463      	strb	r3, [r4, #17]
	me->_init = true;
 8005e06:	7063      	strb	r3, [r4, #1]
  if(fFaraabinLinkSerializer_CountDictsFrames((uint32_t)me) == 0U) {
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f003 fdc3 	bl	8009994 <fFaraabinLinkSerializer_CountDictsFrames>
 8005e0e:	e7ed      	b.n	8005dec <fFaraabinFobjectContainer_Init+0x14>
 8005e10:	20002500 	.word	0x20002500
 8005e14:	20002638 	.word	0x20002638

08005e18 <fQueueRead>:
static uint8_t fQueueRead(sFaraabinFobjectDataBus * const me, uint32_t num, uint8_t *item) {
  
  uint32_t offset;
  uint32_t index;
  
  if(me->QueueItemCount == 0U) {
 8005e18:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8005e1c:	b1f3      	cbz	r3, 8005e5c <fQueueRead+0x44>
    return FARAABIN_DB_QUEUE_EMPTY;
  }
  
  if(num >= me->QueueItemCount) {
 8005e1e:	428b      	cmp	r3, r1
 8005e20:	d91e      	bls.n	8005e60 <fQueueRead+0x48>
static uint8_t fQueueRead(sFaraabinFobjectDataBus * const me, uint32_t num, uint8_t *item) {
 8005e22:	b500      	push	{lr}
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
  }
  
  index = (num + me->_queueFrontIndex) % me->BufferCaptureSize;
 8005e24:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8005e28:	4419      	add	r1, r3
 8005e2a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8005e2c:	fbb1 fcf3 	udiv	ip, r1, r3
 8005e30:	fb03 1c1c 	mls	ip, r3, ip, r1
  
  READ_ELEMENT_(index, item);
 8005e34:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005e38:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005e3c:	1e51      	subs	r1, r2, #1
 8005e3e:	f102 0e17 	add.w	lr, r2, #23
 8005e42:	f1c2 0201 	rsb	r2, r2, #1
 8005e46:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005e48:	4463      	add	r3, ip
 8005e4a:	440b      	add	r3, r1
 8005e4c:	5c9b      	ldrb	r3, [r3, r2]
 8005e4e:	f801 3f01 	strb.w	r3, [r1, #1]!
 8005e52:	4571      	cmp	r1, lr
 8005e54:	d1f7      	bne.n	8005e46 <fQueueRead+0x2e>
  
  return FARAABIN_DB_OK;
 8005e56:	2000      	movs	r0, #0
}
 8005e58:	f85d fb04 	ldr.w	pc, [sp], #4
    return FARAABIN_DB_QUEUE_EMPTY;
 8005e5c:	2006      	movs	r0, #6
 8005e5e:	4770      	bx	lr
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
 8005e60:	2001      	movs	r0, #1
}
 8005e62:	4770      	bx	lr

08005e64 <fFreeAllocatedMemory>:
/**
 * @brief Frees dynamically allocated memories of the databus.
 * 
 * @param me Pointer to the databus fobject.
 */
static void fFreeAllocatedMemory(sFaraabinFobjectDataBus * const me) {
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4604      	mov	r4, r0

  if(!me->_isBufferChannelsStatic) {
 8005e68:	7e03      	ldrb	r3, [r0, #24]
 8005e6a:	b11b      	cbz	r3, 8005e74 <fFreeAllocatedMemory+0x10>
    free(me->_pBufferChannels);
  }

  if(!me->_isBufferCaptureStatic) {
 8005e6c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005e70:	b123      	cbz	r3, 8005e7c <fFreeAllocatedMemory+0x18>
    free(me->_pBufferCapture);
  }
}
 8005e72:	bd10      	pop	{r4, pc}
    free(me->_pBufferChannels);
 8005e74:	6940      	ldr	r0, [r0, #20]
 8005e76:	f003 fda5 	bl	80099c4 <free>
 8005e7a:	e7f7      	b.n	8005e6c <fFreeAllocatedMemory+0x8>
    free(me->_pBufferCapture);
 8005e7c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005e7e:	f003 fda1 	bl	80099c4 <free>
}
 8005e82:	e7f6      	b.n	8005e72 <fFreeAllocatedMemory+0xe>

08005e84 <fRunCapture>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005e84:	b672      	cpsid	i
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8005e86:	8a43      	ldrh	r3, [r0, #18]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d066      	beq.n	8005f5a <fRunCapture+0xd6>
static void fRunCapture(sFaraabinFobjectDataBus *me) {
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	4605      	mov	r5, r0
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8005e92:	2400      	movs	r4, #0
 8005e94:	e006      	b.n	8005ea4 <fRunCapture+0x20>
        if(me->_pBufferChannels[i].PrimitiveVariableId != 0U) {
 8005e96:	7adb      	ldrb	r3, [r3, #11]
 8005e98:	b9ab      	cbnz	r3, 8005ec6 <fRunCapture+0x42>
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8005e9a:	3401      	adds	r4, #1
 8005e9c:	8a6a      	ldrh	r2, [r5, #18]
 8005e9e:	b2a3      	uxth	r3, r4
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d957      	bls.n	8005f54 <fRunCapture+0xd0>
    if(me->_pBufferChannels[i].ItemFobjectPtr == 0U) {
 8005ea4:	b2a3      	uxth	r3, r4
 8005ea6:	011e      	lsls	r6, r3, #4
 8005ea8:	696a      	ldr	r2, [r5, #20]
 8005eaa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8005eae:	6859      	ldr	r1, [r3, #4]
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	d0f2      	beq.n	8005e9a <fRunCapture+0x16>
    if(!me->_pBufferChannels[i].Enable) {
 8005eb4:	7b18      	ldrb	r0, [r3, #12]
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d0ef      	beq.n	8005e9a <fRunCapture+0x16>
    switch(me->_pBufferChannels[i].ItemFobjectType) {
 8005eba:	5d92      	ldrb	r2, [r2, r6]
 8005ebc:	2a02      	cmp	r2, #2
 8005ebe:	d0ea      	beq.n	8005e96 <fRunCapture+0x12>
 8005ec0:	2a13      	cmp	r2, #19
 8005ec2:	d1ea      	bne.n	8005e9a <fRunCapture+0x16>
 8005ec4:	e7e7      	b.n	8005e96 <fRunCapture+0x12>
          tmp_capture.FobjectType = me->_pBufferChannels[i].ItemFobjectType;
 8005ec6:	f88d 2000 	strb.w	r2, [sp]
          tmp_capture.FobjectPtr = me->_pBufferChannels[i].ItemFobjectPtr;
 8005eca:	9101      	str	r1, [sp, #4]
          tmp_capture.CapturedTimeStamp = fChrono_GetTick();
 8005ecc:	f7ff fc10 	bl	80056f0 <fChrono_GetTick>
 8005ed0:	9002      	str	r0, [sp, #8]
          uint8_t *src = (uint8_t*)me->_pBufferChannels[i].ItemFobjectPtr;
 8005ed2:	696a      	ldr	r2, [r5, #20]
 8005ed4:	4432      	add	r2, r6
 8005ed6:	6853      	ldr	r3, [r2, #4]
          for(uint16_t j = 0; j < me->_pBufferChannels[i].ItemFobjectParam; j++) {
 8005ed8:	8910      	ldrh	r0, [r2, #8]
 8005eda:	b140      	cbz	r0, 8005eee <fRunCapture+0x6a>
 8005edc:	f10d 020f 	add.w	r2, sp, #15
 8005ee0:	4418      	add	r0, r3
            dst[j] = src[j];
 8005ee2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005ee6:	f802 1f01 	strb.w	r1, [r2, #1]!
          for(uint16_t j = 0; j < me->_pBufferChannels[i].ItemFobjectParam; j++) {
 8005eea:	4283      	cmp	r3, r0
 8005eec:	d1f9      	bne.n	8005ee2 <fRunCapture+0x5e>
  if(me->QueueItemCount >= me->BufferCaptureSize) {
 8005eee:	f8d5 e0a0 	ldr.w	lr, [r5, #160]	@ 0xa0
 8005ef2:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
  WRITE_ELEMENT_(me->_queueRearIndex, item);
 8005ef4:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8005ef8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005efc:	f10d 33ff 	add.w	r3, sp, #4294967295
 8005f00:	f10d 0c17 	add.w	ip, sp, #23
 8005f04:	a906      	add	r1, sp, #24
 8005f06:	f1c1 0619 	rsb	r6, r1, #25
 8005f0a:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 8005f0e:	18f2      	adds	r2, r6, r3
 8005f10:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8005f12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005f16:	5488      	strb	r0, [r1, r2]
 8005f18:	459c      	cmp	ip, r3
 8005f1a:	d1f8      	bne.n	8005f0e <fRunCapture+0x8a>
  INCREMENT_REAR_INDEX_();
 8005f1c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8005f1e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8005f22:	3301      	adds	r3, #1
 8005f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f28:	fb02 3311 	mls	r3, r2, r1, r3
 8005f2c:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
  if(over_write == 1U) {
 8005f30:	45be      	cmp	lr, r7
 8005f32:	d205      	bcs.n	8005f40 <fRunCapture+0xbc>
    INCREMENT_COUNT_();
 8005f34:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f8c5 30a0 	str.w	r3, [r5, #160]	@ 0xa0
        break;
 8005f3e:	e7ac      	b.n	8005e9a <fRunCapture+0x16>
    INCREMENT_FRONT_INDEX_();
 8005f40:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 8005f44:	3301      	adds	r3, #1
 8005f46:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f4a:	fb02 3311 	mls	r3, r2, r1, r3
 8005f4e:	f8c5 30a4 	str.w	r3, [r5, #164]	@ 0xa4
 8005f52:	e7a2      	b.n	8005e9a <fRunCapture+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8005f54:	b662      	cpsie	i
}
 8005f56:	b007      	add	sp, #28
 8005f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5a:	b662      	cpsie	i
 8005f5c:	4770      	bx	lr
	...

08005f60 <fFaraabinFobjectDataBus_Init>:
uint8_t fFaraabinFobjectDataBus_Init(sFaraabinFobjectDataBus *me) {
 8005f60:	b570      	push	{r4, r5, r6, lr}
	if(!FaraabinInit___) {
 8005f62:	4b3b      	ldr	r3, [pc, #236]	@ (8006050 <fFaraabinFobjectDataBus_Init+0xf0>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b93b      	cbnz	r3, 8005f78 <fFaraabinFobjectDataBus_Init+0x18>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8005f68:	4a3a      	ldr	r2, [pc, #232]	@ (8006054 <fFaraabinFobjectDataBus_Init+0xf4>)
 8005f6a:	7953      	ldrb	r3, [r2, #5]
 8005f6c:	f043 0308 	orr.w	r3, r3, #8
 8005f70:	7153      	strb	r3, [r2, #5]
		return 1;
 8005f72:	2501      	movs	r5, #1
}
 8005f74:	4628      	mov	r0, r5
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8005f7a:	f7ff fe81 	bl	8005c80 <fFaraabinDatabase_AddDict>
 8005f7e:	4605      	mov	r5, r0
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d15c      	bne.n	800603e <fFaraabinFobjectDataBus_Init+0xde>
	me->_init = false;
 8005f84:	2300      	movs	r3, #0
 8005f86:	7063      	strb	r3, [r4, #1]
	me->_type = (uint8_t)eFO_TYPE_DATABUS;
 8005f88:	2308      	movs	r3, #8
 8005f8a:	7023      	strb	r3, [r4, #0]
  if(me->ChannelQty == 0U) {
 8005f8c:	8a60      	ldrh	r0, [r4, #18]
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d057      	beq.n	8006042 <fFaraabinFobjectDataBus_Init+0xe2>
	if(me->_isBufferChannelsStatic) {
 8005f92:	7e23      	ldrb	r3, [r4, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d03a      	beq.n	800600e <fFaraabinFobjectDataBus_Init+0xae>
		if(me->_pBufferChannels == NULL) {
 8005f98:	6963      	ldr	r3, [r4, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d053      	beq.n	8006046 <fFaraabinFobjectDataBus_Init+0xe6>
uint8_t fFaraabinFobjectDataBus_Init(sFaraabinFobjectDataBus *me) {
 8005f9e:	2100      	movs	r1, #0
    me->_pBufferChannels[i].ItemFobjectType = 0U;
 8005fa0:	460a      	mov	r2, r1
 8005fa2:	b28b      	uxth	r3, r1
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	6960      	ldr	r0, [r4, #20]
 8005fa8:	54c2      	strb	r2, [r0, r3]
    me->_pBufferChannels[i].ItemFobjectPtr = 0U;
 8005faa:	6960      	ldr	r0, [r4, #20]
 8005fac:	4418      	add	r0, r3
 8005fae:	6042      	str	r2, [r0, #4]
    me->_pBufferChannels[i].ItemFobjectParam = 0U;
 8005fb0:	6960      	ldr	r0, [r4, #20]
 8005fb2:	4418      	add	r0, r3
 8005fb4:	8102      	strh	r2, [r0, #8]
    me->_pBufferChannels[i].VariableDataType = 0U;
 8005fb6:	6960      	ldr	r0, [r4, #20]
 8005fb8:	4418      	add	r0, r3
 8005fba:	7282      	strb	r2, [r0, #10]
    me->_pBufferChannels[i].PrimitiveVariableId = 0U;
 8005fbc:	6960      	ldr	r0, [r4, #20]
 8005fbe:	4418      	add	r0, r3
 8005fc0:	72c2      	strb	r2, [r0, #11]
    me->_pBufferChannels[i].Enable = false;
 8005fc2:	6960      	ldr	r0, [r4, #20]
 8005fc4:	4418      	add	r0, r3
 8005fc6:	7302      	strb	r2, [r0, #12]
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8005fc8:	3101      	adds	r1, #1
 8005fca:	8a60      	ldrh	r0, [r4, #18]
 8005fcc:	b28b      	uxth	r3, r1
 8005fce:	4298      	cmp	r0, r3
 8005fd0:	d8e7      	bhi.n	8005fa2 <fFaraabinFobjectDataBus_Init+0x42>
	if(me->_isBufferCaptureStatic) {
 8005fd2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005fd6:	b313      	cbz	r3, 800601e <fFaraabinFobjectDataBus_Init+0xbe>
		if(me->_pBufferCapture == NULL) {
 8005fd8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d035      	beq.n	800604a <fFaraabinFobjectDataBus_Init+0xea>
  me->QueueItemCount = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
  me->_queueFrontIndex = 0U;
 8005fe4:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
  me->_queueRearIndex = 0U;
 8005fe8:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  me->CurrentState = eDATABUS_STATE_OFF;
 8005fec:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
  me->ApiTrigEnable = true;
 8005ff0:	2601      	movs	r6, #1
 8005ff2:	f884 606c 	strb.w	r6, [r4, #108]	@ 0x6c
  me->LastTrigSource = eDATABUS_TRIG_SOURCE_API;
 8005ff6:	f884 606e 	strb.w	r6, [r4, #110]	@ 0x6e
  me->AttachedItemsQty = 0U;
 8005ffa:	8363      	strh	r3, [r4, #26]
  me->AvailableItemsQty = 0U;
 8005ffc:	83a3      	strh	r3, [r4, #28]
  me->CaptureSendingQty = 0U;
 8005ffe:	6563      	str	r3, [r4, #84]	@ 0x54
  fChrono_Start(&me->_chronoCycle);
 8006000:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8006004:	f7ff fbc6 	bl	8005794 <fChrono_Start>
  me->Enable = TRUE;
 8006008:	70a6      	strb	r6, [r4, #2]
  me->_init = true;
 800600a:	7066      	strb	r6, [r4, #1]
  return 0;
 800600c:	e7b2      	b.n	8005f74 <fFaraabinFobjectDataBus_Init+0x14>
		me->_pBufferChannels = (sFaraabinFobjectDataBus_Channel*)malloc(me->ChannelQty * sizeof(sFaraabinFobjectDataBus_Channel));
 800600e:	0100      	lsls	r0, r0, #4
 8006010:	f003 fcd0 	bl	80099b4 <malloc>
 8006014:	6160      	str	r0, [r4, #20]
    if(me->_pBufferChannels == NULL) {
 8006016:	2800      	cmp	r0, #0
 8006018:	d1c1      	bne.n	8005f9e <fFaraabinFobjectDataBus_Init+0x3e>
      return 1;
 800601a:	2501      	movs	r5, #1
 800601c:	e7aa      	b.n	8005f74 <fFaraabinFobjectDataBus_Init+0x14>
		if(me->BufferCaptureSize > 0U) {
 800601e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006020:	2800      	cmp	r0, #0
 8006022:	d0dc      	beq.n	8005fde <fFaraabinFobjectDataBus_Init+0x7e>
			me->_pBufferCapture = (sFaraabinFobjectDataBus_CaptureValue*)malloc(sizeof(sFaraabinFobjectDataBus_CaptureValue) * me->BufferCaptureSize);
 8006024:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006028:	00c0      	lsls	r0, r0, #3
 800602a:	f003 fcc3 	bl	80099b4 <malloc>
 800602e:	6260      	str	r0, [r4, #36]	@ 0x24
      if(me->_pBufferCapture == NULL) {
 8006030:	2800      	cmp	r0, #0
 8006032:	d1d4      	bne.n	8005fde <fFaraabinFobjectDataBus_Init+0x7e>
        fFreeAllocatedMemory(me);
 8006034:	4620      	mov	r0, r4
 8006036:	f7ff ff15 	bl	8005e64 <fFreeAllocatedMemory>
        return 1;
 800603a:	2501      	movs	r5, #1
 800603c:	e79a      	b.n	8005f74 <fFaraabinFobjectDataBus_Init+0x14>
    return 1;
 800603e:	2501      	movs	r5, #1
 8006040:	e798      	b.n	8005f74 <fFaraabinFobjectDataBus_Init+0x14>
    return 1;
 8006042:	2501      	movs	r5, #1
 8006044:	e796      	b.n	8005f74 <fFaraabinFobjectDataBus_Init+0x14>
			return 1;
 8006046:	2501      	movs	r5, #1
 8006048:	e794      	b.n	8005f74 <fFaraabinFobjectDataBus_Init+0x14>
			return 1;
 800604a:	2501      	movs	r5, #1
 800604c:	e792      	b.n	8005f74 <fFaraabinFobjectDataBus_Init+0x14>
 800604e:	bf00      	nop
 8006050:	20002500 	.word	0x20002500
 8006054:	20002638 	.word	0x20002638

08006058 <fFaraabinFobjectDataBus_Run>:
	if(!FaraabinInit___) {
 8006058:	4ba5      	ldr	r3, [pc, #660]	@ (80062f0 <fFaraabinFobjectDataBus_Run+0x298>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b143      	cbz	r3, 8006070 <fFaraabinFobjectDataBus_Run+0x18>
void fFaraabinFobjectDataBus_Run(sFaraabinFobjectDataBus *me)  {
 800605e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006062:	b08f      	sub	sp, #60	@ 0x3c
 8006064:	4604      	mov	r4, r0
  if(!me->_init) {
 8006066:	7843      	ldrb	r3, [r0, #1]
 8006068:	b943      	cbnz	r3, 800607c <fFaraabinFobjectDataBus_Run+0x24>
}
 800606a:	b00f      	add	sp, #60	@ 0x3c
 800606c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006070:	4aa0      	ldr	r2, [pc, #640]	@ (80062f4 <fFaraabinFobjectDataBus_Run+0x29c>)
 8006072:	7953      	ldrb	r3, [r2, #5]
 8006074:	f043 0308 	orr.w	r3, r3, #8
 8006078:	7153      	strb	r3, [r2, #5]
		return;
 800607a:	4770      	bx	lr
	if(!fFaraabin_IsAllowEvent()) {
 800607c:	f7ff fd8c 	bl	8005b98 <fFaraabin_IsAllowEvent>
 8006080:	2800      	cmp	r0, #0
 8006082:	d0f2      	beq.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
  me->CycleUs = fChrono_IntervalUs(&(me->_chronoCycle));
 8006084:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8006088:	f7ff fc7a 	bl	8005980 <fChrono_IntervalUs>
 800608c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  if(!me->Enable) {
 8006090:	78a3      	ldrb	r3, [r4, #2]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0e9      	beq.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
  if(me->AvailableItemsQty == 0U) {
 8006096:	8ba3      	ldrh	r3, [r4, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0e6      	beq.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
	switch(me->CurrentState) {
 800609c:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 80060a0:	3b01      	subs	r3, #1
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d8e1      	bhi.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
 80060a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80060aa:	0004      	.short	0x0004
 80060ac:	004c001a 	.word	0x004c001a
 80060b0:	0416      	.short	0x0416
      RUN_EVERY_QTY_OBJ_(me->StreamDivideBy, me->_streamDivbyCnt) {
 80060b2:	8c23      	ldrh	r3, [r4, #32]
 80060b4:	3301      	adds	r3, #1
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	bf08      	it	eq
 80060bc:	2302      	moveq	r3, #2
 80060be:	8423      	strh	r3, [r4, #32]
 80060c0:	8be2      	ldrh	r2, [r4, #30]
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d9d1      	bls.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	d0cf      	beq.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
 80060ca:	2301      	movs	r3, #1
 80060cc:	8423      	strh	r3, [r4, #32]
        fFaraabinLinkSerializer_DataBusSendValue((uint32_t)me, &me->Seq, 0, false);
 80060ce:	2300      	movs	r3, #0
 80060d0:	461a      	mov	r2, r3
 80060d2:	f104 0110 	add.w	r1, r4, #16
 80060d6:	4620      	mov	r0, r4
 80060d8:	f003 fb6c 	bl	80097b4 <fFaraabinLinkSerializer_DataBusSendValue>
 80060dc:	e7c5      	b.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TimerDivideBy, me->_timerDivbyCnt) {
 80060de:	f8b4 304e 	ldrh.w	r3, [r4, #78]	@ 0x4e
 80060e2:	3301      	adds	r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	bf08      	it	eq
 80060ea:	2302      	moveq	r3, #2
 80060ec:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 80060f0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d900      	bls.n	80060fa <fFaraabinFobjectDataBus_Run+0xa2>
 80060f8:	b9e2      	cbnz	r2, 8006134 <fFaraabinFobjectDataBus_Run+0xdc>
      if(fChrono_IsTimeout(&(me->_chronoTrigWindow)) == true) {
 80060fa:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80060fe:	f7ff fc1b 	bl	8005938 <fChrono_IsTimeout>
 8006102:	2800      	cmp	r0, #0
 8006104:	d0b1      	beq.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
        me->CurrentState = eDATABUS_STATE_OFF;
 8006106:	2100      	movs	r1, #0
 8006108:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
        Faraabin_EventSystem_End_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_CAPTURE_END);
 800610c:	2301      	movs	r3, #1
 800610e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006110:	9108      	str	r1, [sp, #32]
 8006112:	9107      	str	r1, [sp, #28]
 8006114:	9106      	str	r1, [sp, #24]
 8006116:	9105      	str	r1, [sp, #20]
 8006118:	9104      	str	r1, [sp, #16]
 800611a:	9103      	str	r1, [sp, #12]
 800611c:	2304      	movs	r3, #4
 800611e:	9302      	str	r3, [sp, #8]
 8006120:	9101      	str	r1, [sp, #4]
 8006122:	2302      	movs	r3, #2
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	78a3      	ldrb	r3, [r4, #2]
 8006128:	f104 0210 	add.w	r2, r4, #16
 800612c:	4620      	mov	r0, r4
 800612e:	f003 fa37 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8006132:	e79a      	b.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TimerDivideBy, me->_timerDivbyCnt) {
 8006134:	2301      	movs	r3, #1
 8006136:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
        fRunCapture(me);
 800613a:	4620      	mov	r0, r4
 800613c:	f7ff fea2 	bl	8005e84 <fRunCapture>
 8006140:	e7db      	b.n	80060fa <fFaraabinFobjectDataBus_Run+0xa2>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 8006142:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006146:	3301      	adds	r3, #1
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	bf08      	it	eq
 800614e:	2302      	moveq	r3, #2
 8006150:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8006154:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
 800615c:	2a00      	cmp	r2, #0
 800615e:	d147      	bne.n	80061f0 <fFaraabinFobjectDataBus_Run+0x198>
      if(me->_isTriggered == true) {
 8006160:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8006164:	2b00      	cmp	r3, #0
 8006166:	d080      	beq.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
        fChrono_StartTimeoutMs(&(me->_chronoTrigWindow), me->TimeAfterTrigMs);
 8006168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800616a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800616e:	f7ff fbbf 	bl	80058f0 <fChrono_StartTimeoutMs>
        me->CurrentState = eDATABUS_STATE_TRIG_WINDOW;
 8006172:	2304      	movs	r3, #4
 8006174:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
				eventParam[0] = (uint8_t)me->CurrentState;
 8006178:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
				eventParam[1] = (uint8_t)me->LastTrigSource;
 800617c:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 8006180:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
				trigTimestamp.U32 = me->_trigTimeStamp;
 8006184:	6e23      	ldr	r3, [r4, #96]	@ 0x60
				eventParam[2] = trigTimestamp.Byte[0];
 8006186:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
				eventParam[3] = trigTimestamp.Byte[1];
 800618a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800618e:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
				eventParam[4] = trigTimestamp.Byte[2];
 8006192:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006196:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
				eventParam[5] = trigTimestamp.Byte[3];
 800619a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800619e:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
				cycleUs.U32 = me->CycleUs;
 80061a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
				eventParam[6] = cycleUs.Byte[0];
 80061a6:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
				eventParam[7] = cycleUs.Byte[1];
 80061aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80061ae:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
				eventParam[8] = cycleUs.Byte[2];
 80061b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80061b6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
				eventParam[9] = cycleUs.Byte[3];
 80061ba:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80061be:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
        Faraabin_EventSystem_ParamEnd_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 10U);
 80061c2:	2301      	movs	r3, #1
 80061c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c6:	2100      	movs	r1, #0
 80061c8:	9108      	str	r1, [sp, #32]
 80061ca:	9107      	str	r1, [sp, #28]
 80061cc:	9106      	str	r1, [sp, #24]
 80061ce:	9105      	str	r1, [sp, #20]
 80061d0:	230a      	movs	r3, #10
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	ab0b      	add	r3, sp, #44	@ 0x2c
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	2303      	movs	r3, #3
 80061da:	9302      	str	r3, [sp, #8]
 80061dc:	9101      	str	r1, [sp, #4]
 80061de:	2302      	movs	r3, #2
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	78a3      	ldrb	r3, [r4, #2]
 80061e4:	f104 0210 	add.w	r2, r4, #16
 80061e8:	4620      	mov	r0, r4
 80061ea:	f003 f9d9 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 80061ee:	e73c      	b.n	800606a <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 80061f0:	2301      	movs	r3, #1
 80061f2:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
        fRunCapture(me);
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff fe44 	bl	8005e84 <fRunCapture>
  if(!me->ChTrigEnable) {
 80061fc:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ad      	beq.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
  if(me->ChTrigNo >= me->ChannelQty) {
 8006204:	f8b4 308a 	ldrh.w	r3, [r4, #138]	@ 0x8a
 8006208:	8a62      	ldrh	r2, [r4, #18]
 800620a:	429a      	cmp	r2, r3
 800620c:	d9a8      	bls.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
  if(!me->_pBufferChannels[me->ChTrigNo].Enable) {
 800620e:	6960      	ldr	r0, [r4, #20]
 8006210:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8006214:	7b03      	ldrb	r3, [r0, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0a2      	beq.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
  uint8_t *ptr = (uint8_t*)me->_pBufferChannels[me->ChTrigNo].ItemFobjectPtr;
 800621a:	6841      	ldr	r1, [r0, #4]
  uByte8 tmp = {0x00};
 800621c:	2700      	movs	r7, #0
 800621e:	f04f 0800 	mov.w	r8, #0
  switch((eFaraabinFobjectVarType_PrimitiveId)me->_pBufferChannels[me->ChTrigNo].PrimitiveVariableId) {
 8006222:	7ac0      	ldrb	r0, [r0, #11]
 8006224:	3801      	subs	r0, #1
 8006226:	280a      	cmp	r0, #10
 8006228:	d89a      	bhi.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
 800622a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800622e:	000b      	.short	0x000b
 8006230:	00890047 	.word	0x00890047
 8006234:	010b00c8 	.word	0x010b00c8
 8006238:	0197014e 	.word	0x0197014e
 800623c:	024701e0 	.word	0x024701e0
 8006240:	02f902b1 	.word	0x02f902b1
      bool value = (bool)ptr[0];
 8006244:	780d      	ldrb	r5, [r1, #0]
 8006246:	3d00      	subs	r5, #0
 8006248:	bf18      	it	ne
 800624a:	2501      	movne	r5, #1
      switch(me->ChTrigType) {
 800624c:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d013      	beq.n	800627c <fFaraabinFobjectDataBus_Run+0x224>
 8006254:	2b02      	cmp	r3, #2
 8006256:	d021      	beq.n	800629c <fFaraabinFobjectDataBus_Run+0x244>
 8006258:	b113      	cbz	r3, 8006260 <fFaraabinFobjectDataBus_Run+0x208>
      me->_trigChannelPayload.Byte[0] = (uint8_t)value;
 800625a:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
      break;
 800625e:	e77f      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.Byte[0]) {
 8006260:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8006264:	429d      	cmp	r5, r3
 8006266:	d0f8      	beq.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
            me->_trigTimeStamp = fChrono_GetTick();
 8006268:	f7ff fa42 	bl	80056f0 <fChrono_GetTick>
 800626c:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800626e:	2303      	movs	r3, #3
 8006270:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006274:	2301      	movs	r3, #1
 8006276:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800627a:	e7ee      	b.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
          if((value != me->_trigChannelPayload.Byte[0]) && (me->_trigChannelPayload.Byte[0] == false)) {
 800627c:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8006280:	429d      	cmp	r5, r3
 8006282:	d0ea      	beq.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e8      	bne.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
            me->_trigTimeStamp = fChrono_GetTick();
 8006288:	f7ff fa32 	bl	80056f0 <fChrono_GetTick>
 800628c:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800628e:	2303      	movs	r3, #3
 8006290:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006294:	2301      	movs	r3, #1
 8006296:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800629a:	e7de      	b.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
          if((value != me->_trigChannelPayload.Byte[0]) && (me->_trigChannelPayload.Byte[0] == true)) {
 800629c:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80062a0:	429d      	cmp	r5, r3
 80062a2:	d0da      	beq.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d1d8      	bne.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
            me->_trigTimeStamp = fChrono_GetTick();
 80062a8:	f7ff fa22 	bl	80056f0 <fChrono_GetTick>
 80062ac:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80062ae:	2303      	movs	r3, #3
 80062b0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80062ba:	e7ce      	b.n	800625a <fFaraabinFobjectDataBus_Run+0x202>
      uint8_t value = (uint8_t)ptr[0];
 80062bc:	780d      	ldrb	r5, [r1, #0]
      switch(me->ChTrigType) {
 80062be:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d018      	beq.n	80062f8 <fFaraabinFobjectDataBus_Run+0x2a0>
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d028      	beq.n	800631c <fFaraabinFobjectDataBus_Run+0x2c4>
 80062ca:	b113      	cbz	r3, 80062d2 <fFaraabinFobjectDataBus_Run+0x27a>
      me->_trigChannelPayload.Byte[0] = value;
 80062cc:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
      break;
 80062d0:	e746      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.Byte[0]) {
 80062d2:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80062d6:	42ab      	cmp	r3, r5
 80062d8:	d0f8      	beq.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
            me->_trigTimeStamp = fChrono_GetTick();
 80062da:	f7ff fa09 	bl	80056f0 <fChrono_GetTick>
 80062de:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80062e0:	2303      	movs	r3, #3
 80062e2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80062ec:	e7ee      	b.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
 80062ee:	bf00      	nop
 80062f0:	20002500 	.word	0x20002500
 80062f4:	20002638 	.word	0x20002638
          if((value > me->ChTrigThreshold.Byte[0]) && (me->_trigChannelPayload.Byte[0] <= me->ChTrigThreshold.Byte[0])) {
 80062f8:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 80062fc:	429d      	cmp	r5, r3
 80062fe:	d9e5      	bls.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
 8006300:	f894 2098 	ldrb.w	r2, [r4, #152]	@ 0x98
 8006304:	429a      	cmp	r2, r3
 8006306:	d8e1      	bhi.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
            me->_trigTimeStamp = fChrono_GetTick();
 8006308:	f7ff f9f2 	bl	80056f0 <fChrono_GetTick>
 800630c:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800630e:	2303      	movs	r3, #3
 8006310:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006314:	2301      	movs	r3, #1
 8006316:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800631a:	e7d7      	b.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
          if((value < me->ChTrigThreshold.Byte[0]) && (me->_trigChannelPayload.Byte[0] >= me->ChTrigThreshold.Byte[0])) {
 800631c:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 8006320:	429d      	cmp	r5, r3
 8006322:	d2d3      	bcs.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
 8006324:	f894 2098 	ldrb.w	r2, [r4, #152]	@ 0x98
 8006328:	429a      	cmp	r2, r3
 800632a:	d3cf      	bcc.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
            me->_trigTimeStamp = fChrono_GetTick();
 800632c:	f7ff f9e0 	bl	80056f0 <fChrono_GetTick>
 8006330:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006332:	2303      	movs	r3, #3
 8006334:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006338:	2301      	movs	r3, #1
 800633a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800633e:	e7c5      	b.n	80062cc <fFaraabinFobjectDataBus_Run+0x274>
      int8_t value = (int8_t)ptr[0];
 8006340:	780d      	ldrb	r5, [r1, #0]
 8006342:	f991 2000 	ldrsb.w	r2, [r1]
      switch(me->ChTrigType) {
 8006346:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d013      	beq.n	8006376 <fFaraabinFobjectDataBus_Run+0x31e>
 800634e:	2b02      	cmp	r3, #2
 8006350:	d023      	beq.n	800639a <fFaraabinFobjectDataBus_Run+0x342>
 8006352:	b113      	cbz	r3, 800635a <fFaraabinFobjectDataBus_Run+0x302>
      me->_trigChannelPayload.Byte[0] = value;
 8006354:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
      break;
 8006358:	e702      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != (int8_t)me->_trigChannelPayload.Byte[0]) {
 800635a:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 800635e:	42ab      	cmp	r3, r5
 8006360:	d0f8      	beq.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
            me->_trigTimeStamp = fChrono_GetTick();
 8006362:	f7ff f9c5 	bl	80056f0 <fChrono_GetTick>
 8006366:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006368:	2303      	movs	r3, #3
 800636a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800636e:	2301      	movs	r3, #1
 8006370:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006374:	e7ee      	b.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
          if((value > (int8_t)me->ChTrigThreshold.Byte[0]) && ((int8_t)me->_trigChannelPayload.Byte[0] <= (int8_t)me->ChTrigThreshold.Byte[0])) {
 8006376:	f994 3090 	ldrsb.w	r3, [r4, #144]	@ 0x90
 800637a:	429a      	cmp	r2, r3
 800637c:	ddea      	ble.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
 800637e:	f994 2098 	ldrsb.w	r2, [r4, #152]	@ 0x98
 8006382:	429a      	cmp	r2, r3
 8006384:	dce6      	bgt.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
            me->_trigTimeStamp = fChrono_GetTick();
 8006386:	f7ff f9b3 	bl	80056f0 <fChrono_GetTick>
 800638a:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800638c:	2303      	movs	r3, #3
 800638e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006392:	2301      	movs	r3, #1
 8006394:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006398:	e7dc      	b.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
          if((value < (int8_t)me->ChTrigThreshold.Byte[0]) && ((int8_t)me->_trigChannelPayload.Byte[0] >= (int8_t)me->ChTrigThreshold.Byte[0])) {
 800639a:	f994 3090 	ldrsb.w	r3, [r4, #144]	@ 0x90
 800639e:	429a      	cmp	r2, r3
 80063a0:	dad8      	bge.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
 80063a2:	f994 2098 	ldrsb.w	r2, [r4, #152]	@ 0x98
 80063a6:	429a      	cmp	r2, r3
 80063a8:	dbd4      	blt.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
            me->_trigTimeStamp = fChrono_GetTick();
 80063aa:	f7ff f9a1 	bl	80056f0 <fChrono_GetTick>
 80063ae:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80063bc:	e7ca      	b.n	8006354 <fFaraabinFobjectDataBus_Run+0x2fc>
      tmp.Byte[0] = ptr[0];
 80063be:	780b      	ldrb	r3, [r1, #0]
 80063c0:	f363 0707 	bfi	r7, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 80063c4:	784b      	ldrb	r3, [r1, #1]
 80063c6:	f363 270f 	bfi	r7, r3, #8, #8
      uint16_t value = tmp.U16[0];
 80063ca:	b2bd      	uxth	r5, r7
      switch(me->ChTrigType) {
 80063cc:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d013      	beq.n	80063fc <fFaraabinFobjectDataBus_Run+0x3a4>
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d023      	beq.n	8006420 <fFaraabinFobjectDataBus_Run+0x3c8>
 80063d8:	b113      	cbz	r3, 80063e0 <fFaraabinFobjectDataBus_Run+0x388>
      me->_trigChannelPayload.U16[0] = value;
 80063da:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
      break;
 80063de:	e6bf      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.U16[0]) {
 80063e0:	f8b4 3098 	ldrh.w	r3, [r4, #152]	@ 0x98
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	d0f8      	beq.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
            me->_trigTimeStamp = fChrono_GetTick();
 80063e8:	f7ff f982 	bl	80056f0 <fChrono_GetTick>
 80063ec:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80063ee:	2303      	movs	r3, #3
 80063f0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80063fa:	e7ee      	b.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
          if((value > me->ChTrigThreshold.U16[0]) && (me->_trigChannelPayload.U16[0] <= me->ChTrigThreshold.U16[0])) {
 80063fc:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 8006400:	429d      	cmp	r5, r3
 8006402:	d9ea      	bls.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
 8006404:	f8b4 2098 	ldrh.w	r2, [r4, #152]	@ 0x98
 8006408:	429a      	cmp	r2, r3
 800640a:	d8e6      	bhi.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
            me->_trigTimeStamp = fChrono_GetTick();
 800640c:	f7ff f970 	bl	80056f0 <fChrono_GetTick>
 8006410:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006412:	2303      	movs	r3, #3
 8006414:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006418:	2301      	movs	r3, #1
 800641a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800641e:	e7dc      	b.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
          if((value < me->ChTrigThreshold.U16[0]) && (me->_trigChannelPayload.U16[0] >= me->ChTrigThreshold.U16[0])) {
 8006420:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 8006424:	429d      	cmp	r5, r3
 8006426:	d2d8      	bcs.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
 8006428:	f8b4 2098 	ldrh.w	r2, [r4, #152]	@ 0x98
 800642c:	429a      	cmp	r2, r3
 800642e:	d3d4      	bcc.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
            me->_trigTimeStamp = fChrono_GetTick();
 8006430:	f7ff f95e 	bl	80056f0 <fChrono_GetTick>
 8006434:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006436:	2303      	movs	r3, #3
 8006438:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800643c:	2301      	movs	r3, #1
 800643e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006442:	e7ca      	b.n	80063da <fFaraabinFobjectDataBus_Run+0x382>
      tmp.Byte[0] = ptr[0];
 8006444:	780b      	ldrb	r3, [r1, #0]
 8006446:	f363 0707 	bfi	r7, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 800644a:	784b      	ldrb	r3, [r1, #1]
 800644c:	f363 270f 	bfi	r7, r3, #8, #8
      int16_t value = tmp.I16[0];
 8006450:	b23d      	sxth	r5, r7
      switch(me->ChTrigType) {
 8006452:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d013      	beq.n	8006482 <fFaraabinFobjectDataBus_Run+0x42a>
 800645a:	2b02      	cmp	r3, #2
 800645c:	d023      	beq.n	80064a6 <fFaraabinFobjectDataBus_Run+0x44e>
 800645e:	b113      	cbz	r3, 8006466 <fFaraabinFobjectDataBus_Run+0x40e>
      me->_trigChannelPayload.I16[0] = value;
 8006460:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
      break;
 8006464:	e67c      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.I16[0]) {
 8006466:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 800646a:	42ab      	cmp	r3, r5
 800646c:	d0f8      	beq.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
            me->_trigTimeStamp = fChrono_GetTick();
 800646e:	f7ff f93f 	bl	80056f0 <fChrono_GetTick>
 8006472:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006474:	2303      	movs	r3, #3
 8006476:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800647a:	2301      	movs	r3, #1
 800647c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006480:	e7ee      	b.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
          if((value > me->ChTrigThreshold.I16[0]) && (me->_trigChannelPayload.I16[0] <= me->ChTrigThreshold.I16[0])) {
 8006482:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	@ 0x90
 8006486:	429d      	cmp	r5, r3
 8006488:	ddea      	ble.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
 800648a:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	@ 0x98
 800648e:	429a      	cmp	r2, r3
 8006490:	dce6      	bgt.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
            me->_trigTimeStamp = fChrono_GetTick();
 8006492:	f7ff f92d 	bl	80056f0 <fChrono_GetTick>
 8006496:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006498:	2303      	movs	r3, #3
 800649a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800649e:	2301      	movs	r3, #1
 80064a0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80064a4:	e7dc      	b.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
          if((value < me->ChTrigThreshold.I16[0]) && (me->_trigChannelPayload.I16[0] >= me->ChTrigThreshold.I16[0])) {
 80064a6:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	@ 0x90
 80064aa:	429d      	cmp	r5, r3
 80064ac:	dad8      	bge.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
 80064ae:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	@ 0x98
 80064b2:	429a      	cmp	r2, r3
 80064b4:	dbd4      	blt.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
            me->_trigTimeStamp = fChrono_GetTick();
 80064b6:	f7ff f91b 	bl	80056f0 <fChrono_GetTick>
 80064ba:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80064bc:	2303      	movs	r3, #3
 80064be:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80064c8:	e7ca      	b.n	8006460 <fFaraabinFobjectDataBus_Run+0x408>
      tmp.Byte[0] = ptr[0];
 80064ca:	7808      	ldrb	r0, [r1, #0]
 80064cc:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 80064d0:	7848      	ldrb	r0, [r1, #1]
 80064d2:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 80064d6:	7888      	ldrb	r0, [r1, #2]
 80064d8:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 80064dc:	78c9      	ldrb	r1, [r1, #3]
 80064de:	f361 671f 	bfi	r7, r1, #24, #8
      uint32_t value = tmp.U32[0];
 80064e2:	463d      	mov	r5, r7
      switch(me->ChTrigType) {
 80064e4:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 80064e8:	2901      	cmp	r1, #1
 80064ea:	d013      	beq.n	8006514 <fFaraabinFobjectDataBus_Run+0x4bc>
 80064ec:	2902      	cmp	r1, #2
 80064ee:	d023      	beq.n	8006538 <fFaraabinFobjectDataBus_Run+0x4e0>
 80064f0:	b111      	cbz	r1, 80064f8 <fFaraabinFobjectDataBus_Run+0x4a0>
      me->_trigChannelPayload.U32[0] = value;
 80064f2:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
      break;
 80064f6:	e633      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.U32[0]) {
 80064f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80064fc:	429f      	cmp	r7, r3
 80064fe:	d0f8      	beq.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
            me->_trigTimeStamp = fChrono_GetTick();
 8006500:	f7ff f8f6 	bl	80056f0 <fChrono_GetTick>
 8006504:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006506:	2303      	movs	r3, #3
 8006508:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800650c:	2301      	movs	r3, #1
 800650e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006512:	e7ee      	b.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
          if((value > me->ChTrigThreshold.U32[0]) && (me->_trigChannelPayload.U32[0] <= me->ChTrigThreshold.U32[0])) {
 8006514:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006518:	429f      	cmp	r7, r3
 800651a:	d9ea      	bls.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
 800651c:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8006520:	4293      	cmp	r3, r2
 8006522:	d3e6      	bcc.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
            me->_trigTimeStamp = fChrono_GetTick();
 8006524:	f7ff f8e4 	bl	80056f0 <fChrono_GetTick>
 8006528:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800652a:	2303      	movs	r3, #3
 800652c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006530:	2301      	movs	r3, #1
 8006532:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006536:	e7dc      	b.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
          if((value < me->ChTrigThreshold.U32[0]) && (me->_trigChannelPayload.U32[0] >= me->ChTrigThreshold.U32[0])) {
 8006538:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800653c:	429f      	cmp	r7, r3
 800653e:	d2d8      	bcs.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
 8006540:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8006544:	4293      	cmp	r3, r2
 8006546:	d8d4      	bhi.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
            me->_trigTimeStamp = fChrono_GetTick();
 8006548:	f7ff f8d2 	bl	80056f0 <fChrono_GetTick>
 800654c:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800654e:	2303      	movs	r3, #3
 8006550:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006554:	2301      	movs	r3, #1
 8006556:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800655a:	e7ca      	b.n	80064f2 <fFaraabinFobjectDataBus_Run+0x49a>
      tmp.Byte[0] = ptr[0];
 800655c:	7808      	ldrb	r0, [r1, #0]
 800655e:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 8006562:	7848      	ldrb	r0, [r1, #1]
 8006564:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 8006568:	7888      	ldrb	r0, [r1, #2]
 800656a:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 800656e:	78c9      	ldrb	r1, [r1, #3]
 8006570:	f361 671f 	bfi	r7, r1, #24, #8
      int32_t value = tmp.I32[0];
 8006574:	463d      	mov	r5, r7
      switch(me->ChTrigType) {
 8006576:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 800657a:	2901      	cmp	r1, #1
 800657c:	d013      	beq.n	80065a6 <fFaraabinFobjectDataBus_Run+0x54e>
 800657e:	2902      	cmp	r1, #2
 8006580:	d023      	beq.n	80065ca <fFaraabinFobjectDataBus_Run+0x572>
 8006582:	b111      	cbz	r1, 800658a <fFaraabinFobjectDataBus_Run+0x532>
      me->_trigChannelPayload.I32[0] = value;
 8006584:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
      break;
 8006588:	e5ea      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.I32[0]) {
 800658a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800658e:	429f      	cmp	r7, r3
 8006590:	d0f8      	beq.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
            me->_trigTimeStamp = fChrono_GetTick();
 8006592:	f7ff f8ad 	bl	80056f0 <fChrono_GetTick>
 8006596:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006598:	2303      	movs	r3, #3
 800659a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800659e:	2301      	movs	r3, #1
 80065a0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80065a4:	e7ee      	b.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
          if((value > me->ChTrigThreshold.I32[0]) && (me->_trigChannelPayload.I32[0] <= me->ChTrigThreshold.I32[0])) {
 80065a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80065aa:	429f      	cmp	r7, r3
 80065ac:	ddea      	ble.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
 80065ae:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80065b2:	4293      	cmp	r3, r2
 80065b4:	dbe6      	blt.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
            me->_trigTimeStamp = fChrono_GetTick();
 80065b6:	f7ff f89b 	bl	80056f0 <fChrono_GetTick>
 80065ba:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80065bc:	2303      	movs	r3, #3
 80065be:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80065c8:	e7dc      	b.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
          if((value < me->ChTrigThreshold.I32[0]) && (me->_trigChannelPayload.I32[0] >= me->ChTrigThreshold.I32[0])) {
 80065ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80065ce:	429f      	cmp	r7, r3
 80065d0:	dad8      	bge.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
 80065d2:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80065d6:	4293      	cmp	r3, r2
 80065d8:	dcd4      	bgt.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
            me->_trigTimeStamp = fChrono_GetTick();
 80065da:	f7ff f889 	bl	80056f0 <fChrono_GetTick>
 80065de:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80065ec:	e7ca      	b.n	8006584 <fFaraabinFobjectDataBus_Run+0x52c>
      tmp.Byte[0] = ptr[0];
 80065ee:	7808      	ldrb	r0, [r1, #0]
 80065f0:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 80065f4:	7848      	ldrb	r0, [r1, #1]
 80065f6:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 80065fa:	7888      	ldrb	r0, [r1, #2]
 80065fc:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 8006600:	78c8      	ldrb	r0, [r1, #3]
 8006602:	f360 671f 	bfi	r7, r0, #24, #8
      tmp.Byte[4] = ptr[4];
 8006606:	7908      	ldrb	r0, [r1, #4]
 8006608:	f360 0807 	bfi	r8, r0, #0, #8
      tmp.Byte[5] = ptr[5];
 800660c:	7948      	ldrb	r0, [r1, #5]
 800660e:	f360 280f 	bfi	r8, r0, #8, #8
      tmp.Byte[6] = ptr[6];
 8006612:	7988      	ldrb	r0, [r1, #6]
 8006614:	f360 4817 	bfi	r8, r0, #16, #8
      tmp.Byte[7] = ptr[7];
 8006618:	79c9      	ldrb	r1, [r1, #7]
 800661a:	f361 681f 	bfi	r8, r1, #24, #8
      uint64_t value = tmp.U64;
 800661e:	463e      	mov	r6, r7
 8006620:	4645      	mov	r5, r8
      switch(me->ChTrigType) {
 8006622:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 8006626:	2901      	cmp	r1, #1
 8006628:	d019      	beq.n	800665e <fFaraabinFobjectDataBus_Run+0x606>
 800662a:	2902      	cmp	r1, #2
 800662c:	d02d      	beq.n	800668a <fFaraabinFobjectDataBus_Run+0x632>
 800662e:	b121      	cbz	r1, 800663a <fFaraabinFobjectDataBus_Run+0x5e2>
      me->_trigChannelPayload.U64 = value;
 8006630:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
 8006634:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
      break;
 8006638:	e592      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.U64) {
 800663a:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800663e:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006642:	429d      	cmp	r5, r3
 8006644:	bf08      	it	eq
 8006646:	4297      	cmpeq	r7, r2
 8006648:	d0f2      	beq.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
            me->_trigTimeStamp = fChrono_GetTick();
 800664a:	f7ff f851 	bl	80056f0 <fChrono_GetTick>
 800664e:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006650:	2303      	movs	r3, #3
 8006652:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006656:	2301      	movs	r3, #1
 8006658:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800665c:	e7e8      	b.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
          if((value > me->ChTrigThreshold.U64) && (me->_trigChannelPayload.U64 <= me->ChTrigThreshold.U64)) {
 800665e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006662:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8006666:	42b8      	cmp	r0, r7
 8006668:	eb71 0308 	sbcs.w	r3, r1, r8
 800666c:	d2e0      	bcs.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
 800666e:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8006672:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006676:	4290      	cmp	r0, r2
 8006678:	4199      	sbcs	r1, r3
 800667a:	d3d9      	bcc.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800667c:	2303      	movs	r3, #3
 800667e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006682:	2301      	movs	r3, #1
 8006684:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006688:	e7d2      	b.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
          if((value < me->ChTrigThreshold.U64) && (me->_trigChannelPayload.U64 >= me->ChTrigThreshold.U64)) {
 800668a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800668e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8006692:	428f      	cmp	r7, r1
 8006694:	eb78 0203 	sbcs.w	r2, r8, r3
 8006698:	d2ca      	bcs.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
 800669a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800669e:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 80066a2:	4288      	cmp	r0, r1
 80066a4:	419a      	sbcs	r2, r3
 80066a6:	d3c3      	bcc.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
            me->_trigTimeStamp = fChrono_GetTick();
 80066a8:	f7ff f822 	bl	80056f0 <fChrono_GetTick>
 80066ac:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80066ae:	2303      	movs	r3, #3
 80066b0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80066ba:	e7b9      	b.n	8006630 <fFaraabinFobjectDataBus_Run+0x5d8>
      tmp.Byte[0] = ptr[0];
 80066bc:	7808      	ldrb	r0, [r1, #0]
 80066be:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 80066c2:	7848      	ldrb	r0, [r1, #1]
 80066c4:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 80066c8:	7888      	ldrb	r0, [r1, #2]
 80066ca:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 80066ce:	78c8      	ldrb	r0, [r1, #3]
 80066d0:	f360 671f 	bfi	r7, r0, #24, #8
      tmp.Byte[4] = ptr[4];
 80066d4:	7908      	ldrb	r0, [r1, #4]
 80066d6:	f360 0807 	bfi	r8, r0, #0, #8
      tmp.Byte[5] = ptr[5];
 80066da:	7948      	ldrb	r0, [r1, #5]
 80066dc:	f360 280f 	bfi	r8, r0, #8, #8
      tmp.Byte[6] = ptr[6];
 80066e0:	7988      	ldrb	r0, [r1, #6]
 80066e2:	f360 4817 	bfi	r8, r0, #16, #8
      tmp.Byte[7] = ptr[7];
 80066e6:	79c9      	ldrb	r1, [r1, #7]
 80066e8:	f361 681f 	bfi	r8, r1, #24, #8
      int64_t value = tmp.I64;
 80066ec:	463e      	mov	r6, r7
 80066ee:	4645      	mov	r5, r8
      switch(me->ChTrigType) {
 80066f0:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 80066f4:	2901      	cmp	r1, #1
 80066f6:	d019      	beq.n	800672c <fFaraabinFobjectDataBus_Run+0x6d4>
 80066f8:	2902      	cmp	r1, #2
 80066fa:	d030      	beq.n	800675e <fFaraabinFobjectDataBus_Run+0x706>
 80066fc:	b121      	cbz	r1, 8006708 <fFaraabinFobjectDataBus_Run+0x6b0>
      me->_trigChannelPayload.I64 = value;
 80066fe:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
 8006702:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
      break;
 8006706:	e52b      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.I64) {
 8006708:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800670c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006710:	429d      	cmp	r5, r3
 8006712:	bf08      	it	eq
 8006714:	4297      	cmpeq	r7, r2
 8006716:	d0f2      	beq.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
            me->_trigTimeStamp = fChrono_GetTick();
 8006718:	f7fe ffea 	bl	80056f0 <fChrono_GetTick>
 800671c:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800671e:	2303      	movs	r3, #3
 8006720:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006724:	2301      	movs	r3, #1
 8006726:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800672a:	e7e8      	b.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
          if((value > me->ChTrigThreshold.I64) && (me->_trigChannelPayload.I64 <= me->ChTrigThreshold.I64)) {
 800672c:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006730:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8006734:	42b8      	cmp	r0, r7
 8006736:	eb71 0308 	sbcs.w	r3, r1, r8
 800673a:	dae0      	bge.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
 800673c:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8006740:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006744:	4290      	cmp	r0, r2
 8006746:	4199      	sbcs	r1, r3
 8006748:	dbd9      	blt.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
            me->_trigTimeStamp = fChrono_GetTick();
 800674a:	f7fe ffd1 	bl	80056f0 <fChrono_GetTick>
 800674e:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006750:	2303      	movs	r3, #3
 8006752:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006756:	2301      	movs	r3, #1
 8006758:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800675c:	e7cf      	b.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
          if((value < me->ChTrigThreshold.I64) && (me->_trigChannelPayload.I64 >= me->ChTrigThreshold.I64)) {
 800675e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8006762:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8006766:	428f      	cmp	r7, r1
 8006768:	eb78 0203 	sbcs.w	r2, r8, r3
 800676c:	dac7      	bge.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
 800676e:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8006772:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8006776:	4288      	cmp	r0, r1
 8006778:	419a      	sbcs	r2, r3
 800677a:	dbc0      	blt.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
            me->_trigTimeStamp = fChrono_GetTick();
 800677c:	f7fe ffb8 	bl	80056f0 <fChrono_GetTick>
 8006780:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006782:	2303      	movs	r3, #3
 8006784:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006788:	2301      	movs	r3, #1
 800678a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800678e:	e7b6      	b.n	80066fe <fFaraabinFobjectDataBus_Run+0x6a6>
      tmp.Byte[0] = ptr[0];
 8006790:	780b      	ldrb	r3, [r1, #0]
 8006792:	f363 0707 	bfi	r7, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006796:	784b      	ldrb	r3, [r1, #1]
 8006798:	f363 270f 	bfi	r7, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 800679c:	788b      	ldrb	r3, [r1, #2]
 800679e:	f363 4717 	bfi	r7, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 80067a2:	78cb      	ldrb	r3, [r1, #3]
 80067a4:	f363 671f 	bfi	r7, r3, #24, #8
      float32_t value = tmp.F32[0];
 80067a8:	463d      	mov	r5, r7
      switch(me->ChTrigType) {
 80067aa:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d004      	beq.n	80067bc <fFaraabinFobjectDataBus_Run+0x764>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d01b      	beq.n	80067ee <fFaraabinFobjectDataBus_Run+0x796>
      me->_trigChannelPayload.F32[0] = value;
 80067b6:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
      break;
 80067ba:	e4d1      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if((value > me->ChTrigThreshold.F32[0]) && (me->_trigChannelPayload.F32[0] <= me->ChTrigThreshold.F32[0])) {
 80067bc:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80067c0:	4631      	mov	r1, r6
 80067c2:	4638      	mov	r0, r7
 80067c4:	f7fa fc52 	bl	800106c <__aeabi_fcmpgt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d0f4      	beq.n	80067b6 <fFaraabinFobjectDataBus_Run+0x75e>
 80067cc:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7fa fc41 	bl	8001058 <__aeabi_fcmpge>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d0ed      	beq.n	80067b6 <fFaraabinFobjectDataBus_Run+0x75e>
            me->_trigTimeStamp = fChrono_GetTick();
 80067da:	f7fe ff89 	bl	80056f0 <fChrono_GetTick>
 80067de:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80067ec:	e7e3      	b.n	80067b6 <fFaraabinFobjectDataBus_Run+0x75e>
          if((value < me->ChTrigThreshold.F32[0]) && (me->_trigChannelPayload.F32[0] >= me->ChTrigThreshold.F32[0])) {
 80067ee:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80067f2:	4631      	mov	r1, r6
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7fa fc1b 	bl	8001030 <__aeabi_fcmplt>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d0db      	beq.n	80067b6 <fFaraabinFobjectDataBus_Run+0x75e>
 80067fe:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8006802:	4630      	mov	r0, r6
 8006804:	f7fa fc1e 	bl	8001044 <__aeabi_fcmple>
 8006808:	2800      	cmp	r0, #0
 800680a:	d0d4      	beq.n	80067b6 <fFaraabinFobjectDataBus_Run+0x75e>
            me->_trigTimeStamp = fChrono_GetTick();
 800680c:	f7fe ff70 	bl	80056f0 <fChrono_GetTick>
 8006810:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006812:	2303      	movs	r3, #3
 8006814:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006818:	2301      	movs	r3, #1
 800681a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800681e:	e7ca      	b.n	80067b6 <fFaraabinFobjectDataBus_Run+0x75e>
      tmp.Byte[0] = ptr[0];
 8006820:	7808      	ldrb	r0, [r1, #0]
 8006822:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 8006826:	7848      	ldrb	r0, [r1, #1]
 8006828:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 800682c:	7888      	ldrb	r0, [r1, #2]
 800682e:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 8006832:	78c8      	ldrb	r0, [r1, #3]
 8006834:	f360 671f 	bfi	r7, r0, #24, #8
      tmp.Byte[4] = ptr[4];
 8006838:	7908      	ldrb	r0, [r1, #4]
 800683a:	f360 0807 	bfi	r8, r0, #0, #8
      tmp.Byte[5] = ptr[5];
 800683e:	7948      	ldrb	r0, [r1, #5]
 8006840:	f360 280f 	bfi	r8, r0, #8, #8
      tmp.Byte[6] = ptr[6];
 8006844:	7988      	ldrb	r0, [r1, #6]
 8006846:	f360 4817 	bfi	r8, r0, #16, #8
      tmp.Byte[7] = ptr[7];
 800684a:	79c9      	ldrb	r1, [r1, #7]
 800684c:	f361 681f 	bfi	r8, r1, #24, #8
      float64_t value = tmp.F64;
 8006850:	463e      	mov	r6, r7
 8006852:	4647      	mov	r7, r8
      switch(me->ChTrigType) {
 8006854:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d004      	beq.n	8006866 <fFaraabinFobjectDataBus_Run+0x80e>
 800685c:	2b02      	cmp	r3, #2
 800685e:	d01e      	beq.n	800689e <fFaraabinFobjectDataBus_Run+0x846>
      me->_trigChannelPayload.F64 = value;
 8006860:	e9c4 6726 	strd	r6, r7, [r4, #152]	@ 0x98
      break;
 8006864:	e47c      	b.n	8006160 <fFaraabinFobjectDataBus_Run+0x108>
          if((value > me->ChTrigThreshold.F64) && (me->_trigChannelPayload.F64 <= me->ChTrigThreshold.F64)) {
 8006866:	e9d4 8924 	ldrd	r8, r9, [r4, #144]	@ 0x90
 800686a:	4642      	mov	r2, r8
 800686c:	464b      	mov	r3, r9
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7fa f8c1 	bl	80009f8 <__aeabi_dcmpgt>
 8006876:	2800      	cmp	r0, #0
 8006878:	d0f2      	beq.n	8006860 <fFaraabinFobjectDataBus_Run+0x808>
 800687a:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	@ 0x98
 800687e:	4640      	mov	r0, r8
 8006880:	4649      	mov	r1, r9
 8006882:	f7fa f8af 	bl	80009e4 <__aeabi_dcmpge>
 8006886:	2800      	cmp	r0, #0
 8006888:	d0ea      	beq.n	8006860 <fFaraabinFobjectDataBus_Run+0x808>
            me->_trigTimeStamp = fChrono_GetTick();
 800688a:	f7fe ff31 	bl	80056f0 <fChrono_GetTick>
 800688e:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8006890:	2303      	movs	r3, #3
 8006892:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8006896:	2301      	movs	r3, #1
 8006898:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800689c:	e7e0      	b.n	8006860 <fFaraabinFobjectDataBus_Run+0x808>
          if((value < me->ChTrigThreshold.F64) && (me->_trigChannelPayload.F64 >= me->ChTrigThreshold.F64)) {
 800689e:	e9d4 8924 	ldrd	r8, r9, [r4, #144]	@ 0x90
 80068a2:	4642      	mov	r2, r8
 80068a4:	464b      	mov	r3, r9
 80068a6:	4630      	mov	r0, r6
 80068a8:	4639      	mov	r1, r7
 80068aa:	f7fa f887 	bl	80009bc <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d0d6      	beq.n	8006860 <fFaraabinFobjectDataBus_Run+0x808>
 80068b2:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	@ 0x98
 80068b6:	4640      	mov	r0, r8
 80068b8:	4649      	mov	r1, r9
 80068ba:	f7fa f889 	bl	80009d0 <__aeabi_dcmple>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d0ce      	beq.n	8006860 <fFaraabinFobjectDataBus_Run+0x808>
            me->_trigTimeStamp = fChrono_GetTick();
 80068c2:	f7fe ff15 	bl	80056f0 <fChrono_GetTick>
 80068c6:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80068d4:	e7c4      	b.n	8006860 <fFaraabinFobjectDataBus_Run+0x808>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 80068d6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80068da:	3301      	adds	r3, #1
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b01      	cmp	r3, #1
 80068e0:	bf08      	it	eq
 80068e2:	2302      	moveq	r3, #2
 80068e4:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 80068e8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d900      	bls.n	80068f2 <fFaraabinFobjectDataBus_Run+0x89a>
 80068f0:	bb02      	cbnz	r2, 8006934 <fFaraabinFobjectDataBus_Run+0x8dc>
      if(fChrono_IsTimeout(&(me->_chronoTrigWindow)) == true) {
 80068f2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80068f6:	f7ff f81f 	bl	8005938 <fChrono_IsTimeout>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f43f abb5 	beq.w	800606a <fFaraabinFobjectDataBus_Run+0x12>
        me->IsCaptureEnd = true;
 8006900:	2301      	movs	r3, #1
 8006902:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
        me->CurrentState = eDATABUS_STATE_OFF;
 8006906:	2100      	movs	r1, #0
 8006908:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
        Faraabin_EventSystem_End_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_CAPTURE_END);
 800690c:	9309      	str	r3, [sp, #36]	@ 0x24
 800690e:	9108      	str	r1, [sp, #32]
 8006910:	9107      	str	r1, [sp, #28]
 8006912:	9106      	str	r1, [sp, #24]
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	9104      	str	r1, [sp, #16]
 8006918:	9103      	str	r1, [sp, #12]
 800691a:	2304      	movs	r3, #4
 800691c:	9302      	str	r3, [sp, #8]
 800691e:	9101      	str	r1, [sp, #4]
 8006920:	2302      	movs	r3, #2
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	78a3      	ldrb	r3, [r4, #2]
 8006926:	f104 0210 	add.w	r2, r4, #16
 800692a:	4620      	mov	r0, r4
 800692c:	f002 fe38 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8006930:	f7ff bb9b 	b.w	800606a <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 8006934:	2301      	movs	r3, #1
 8006936:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
        fRunCapture(me);
 800693a:	4620      	mov	r0, r4
 800693c:	f7ff faa2 	bl	8005e84 <fRunCapture>
 8006940:	e7d7      	b.n	80068f2 <fFaraabinFobjectDataBus_Run+0x89a>
 8006942:	bf00      	nop

08006944 <fFaraabinFobjectDataBus_SendCaptureDataRun>:
	if(!FaraabinInit___) {
 8006944:	4b33      	ldr	r3, [pc, #204]	@ (8006a14 <fFaraabinFobjectDataBus_SendCaptureDataRun+0xd0>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	b163      	cbz	r3, 8006964 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x20>
void fFaraabinFobjectDataBus_SendCaptureDataRun(sFaraabinFobjectDataBus *me) {
 800694a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	b090      	sub	sp, #64	@ 0x40
 8006950:	4604      	mov	r4, r0
  if(!me->_init) {
 8006952:	7843      	ldrb	r3, [r0, #1]
 8006954:	b11b      	cbz	r3, 800695e <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
  switch(me->CurrentState) {
 8006956:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
 800695a:	2b05      	cmp	r3, #5
 800695c:	d008      	beq.n	8006970 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x2c>
}
 800695e:	b010      	add	sp, #64	@ 0x40
 8006960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006964:	4a2c      	ldr	r2, [pc, #176]	@ (8006a18 <fFaraabinFobjectDataBus_SendCaptureDataRun+0xd4>)
 8006966:	7953      	ldrb	r3, [r2, #5]
 8006968:	f043 0308 	orr.w	r3, r3, #8
 800696c:	7153      	strb	r3, [r2, #5]
		return;
 800696e:	4770      	bx	lr
  switch(me->CurrentState) {
 8006970:	2614      	movs	r6, #20
        uint8_t ret = fQueueRead(me, me->CaptureSendingCnt, (uint8_t*)&tmp_capture);
 8006972:	ad0a      	add	r5, sp, #40	@ 0x28
          fFaraabinLinkSerializer_DataBusSendCaptureValue(
 8006974:	f100 0710 	add.w	r7, r0, #16
 8006978:	f04f 0800 	mov.w	r8, #0
        uint8_t ret = fQueueRead(me, me->CaptureSendingCnt, (uint8_t*)&tmp_capture);
 800697c:	462a      	mov	r2, r5
 800697e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006980:	4620      	mov	r0, r4
 8006982:	f7ff fa49 	bl	8005e18 <fQueueRead>
        if(ret == 0U) {
 8006986:	b9a0      	cbnz	r0, 80069b2 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x6e>
          fFaraabinLinkSerializer_DataBusSendCaptureValue(
 8006988:	9500      	str	r5, [sp, #0]
 800698a:	4643      	mov	r3, r8
 800698c:	f894 205c 	ldrb.w	r2, [r4, #92]	@ 0x5c
 8006990:	4639      	mov	r1, r7
 8006992:	4620      	mov	r0, r4
 8006994:	f002 fefa 	bl	800978c <fFaraabinLinkSerializer_DataBusSendCaptureValue>
          fFaraabinLinkHandler_FlushBuffer();
 8006998:	f001 fe98 	bl	80086cc <fFaraabinLinkHandler_FlushBuffer>
        me->CaptureSendingCnt++;
 800699c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800699e:	3301      	adds	r3, #1
 80069a0:	65a3      	str	r3, [r4, #88]	@ 0x58
        if(me->CaptureSendingCnt >= me->CaptureSendingQty) {
 80069a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d21b      	bcs.n	80069e0 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x9c>
      for(uint16_t i = 0; i < FB_DATABUS_CAPTURE_SEND_ITEMS; i++) {
 80069a8:	3e01      	subs	r6, #1
 80069aa:	b2b6      	uxth	r6, r6
 80069ac:	2e00      	cmp	r6, #0
 80069ae:	d1e5      	bne.n	800697c <fFaraabinFobjectDataBus_SendCaptureDataRun+0x38>
 80069b0:	e7d5      	b.n	800695e <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
          Faraabin_EventSystem_EndResponse_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_ERROR_CAPTURE_QUEUE, me->CaptureSendingReqSeq);
 80069b2:	2301      	movs	r3, #1
 80069b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b6:	2100      	movs	r1, #0
 80069b8:	9108      	str	r1, [sp, #32]
 80069ba:	9107      	str	r1, [sp, #28]
 80069bc:	9306      	str	r3, [sp, #24]
 80069be:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	9104      	str	r1, [sp, #16]
 80069c6:	9103      	str	r1, [sp, #12]
 80069c8:	230a      	movs	r3, #10
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	9101      	str	r1, [sp, #4]
 80069ce:	2302      	movs	r3, #2
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	78a3      	ldrb	r3, [r4, #2]
 80069d4:	f104 0210 	add.w	r2, r4, #16
 80069d8:	4620      	mov	r0, r4
 80069da:	f002 fde1 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
          break;
 80069de:	e7be      	b.n	800695e <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
          me->CurrentState = eDATABUS_STATE_OFF;
 80069e0:	2100      	movs	r1, #0
 80069e2:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
          Faraabin_EventSystem_ParamEndResponse_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, (uint8_t*)&me->CurrentState, 1, me->CaptureSendingReqSeq);
 80069e6:	2301      	movs	r3, #1
 80069e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ea:	9108      	str	r1, [sp, #32]
 80069ec:	9107      	str	r1, [sp, #28]
 80069ee:	9306      	str	r3, [sp, #24]
 80069f0:	f894 205c 	ldrb.w	r2, [r4, #92]	@ 0x5c
 80069f4:	9205      	str	r2, [sp, #20]
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	2303      	movs	r3, #3
 8006a00:	9302      	str	r3, [sp, #8]
 8006a02:	9101      	str	r1, [sp, #4]
 8006a04:	2302      	movs	r3, #2
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	78a3      	ldrb	r3, [r4, #2]
 8006a0a:	463a      	mov	r2, r7
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f002 fdc7 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
          break;
 8006a12:	e7a4      	b.n	800695e <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
 8006a14:	20002500 	.word	0x20002500
 8006a18:	20002638 	.word	0x20002638

08006a1c <fFaraabinFobjectDataBus_GetAttachCount>:
uint16_t fFaraabinFobjectDataBus_GetAttachCount(sFaraabinFobjectDataBus *me) {
 8006a1c:	4603      	mov	r3, r0
  if(!me->_init) {
 8006a1e:	7842      	ldrb	r2, [r0, #1]
 8006a20:	b182      	cbz	r2, 8006a44 <fFaraabinFobjectDataBus_GetAttachCount+0x28>
  for(uint16_t i = 0; i<me->ChannelQty; i++) {
 8006a22:	8a40      	ldrh	r0, [r0, #18]
 8006a24:	b178      	cbz	r0, 8006a46 <fFaraabinFobjectDataBus_GetAttachCount+0x2a>
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	eb03 1100 	add.w	r1, r3, r0, lsl #4
  uint16_t cnt = 0;
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e002      	b.n	8006a36 <fFaraabinFobjectDataBus_GetAttachCount+0x1a>
  for(uint16_t i = 0; i<me->ChannelQty; i++) {
 8006a30:	3310      	adds	r3, #16
 8006a32:	428b      	cmp	r3, r1
 8006a34:	d005      	beq.n	8006a42 <fFaraabinFobjectDataBus_GetAttachCount+0x26>
    if(me->_pBufferChannels[i].ItemFobjectPtr != 0U) {
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	d0f9      	beq.n	8006a30 <fFaraabinFobjectDataBus_GetAttachCount+0x14>
      cnt++;
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	b280      	uxth	r0, r0
 8006a40:	e7f6      	b.n	8006a30 <fFaraabinFobjectDataBus_GetAttachCount+0x14>
 8006a42:	4770      	bx	lr
    return 0;
 8006a44:	2000      	movs	r0, #0
}
 8006a46:	4770      	bx	lr

08006a48 <fFaraabinFobjectDataBus_ResetTrigger>:
  if(!me->_init) {
 8006a48:	7843      	ldrb	r3, [r0, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80c2 	beq.w	8006bd4 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  if(!me->ChTrigEnable) {
 8006a50:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80bd 	beq.w	8006bd4 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  if(me->ChTrigNo >= me->ChannelQty) {
 8006a5a:	f8b0 208a 	ldrh.w	r2, [r0, #138]	@ 0x8a
 8006a5e:	8a43      	ldrh	r3, [r0, #18]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	f240 80b7 	bls.w	8006bd4 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  if(!me->_pBufferChannels[me->ChTrigNo].Enable) {
 8006a66:	6943      	ldr	r3, [r0, #20]
 8006a68:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006a6c:	7b1a      	ldrb	r2, [r3, #12]
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	f000 80b0 	beq.w	8006bd4 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  uint8_t *ptr = (uint8_t*)me->_pBufferChannels[me->ChTrigNo].ItemFobjectPtr;
 8006a74:	685a      	ldr	r2, [r3, #4]
  if(ptr == NULL) {
 8006a76:	2a00      	cmp	r2, #0
 8006a78:	f000 80ac 	beq.w	8006bd4 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
void fFaraabinFobjectDataBus_ResetTrigger(sFaraabinFobjectDataBus *me) {
 8006a7c:	b430      	push	{r4, r5}
  uByte8 tmp = {0x00};
 8006a7e:	2400      	movs	r4, #0
 8006a80:	2500      	movs	r5, #0
  switch((eFaraabinFobjectVarType_PrimitiveId)me->_pBufferChannels[me->ChTrigNo].PrimitiveVariableId) {
 8006a82:	7adb      	ldrb	r3, [r3, #11]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	2b0a      	cmp	r3, #10
 8006a88:	d80a      	bhi.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
 8006a8a:	e8df f003 	tbb	[pc, r3]
 8006a8e:	0b06      	.short	0x0b06
 8006a90:	251c130f 	.word	0x251c130f
 8006a94:	795e4334 	.word	0x795e4334
 8006a98:	88          	.byte	0x88
 8006a99:	00          	.byte	0x00
      me->_trigChannelPayload.Byte[0] = ptr[0];
 8006a9a:	7813      	ldrb	r3, [r2, #0]
 8006a9c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
}
 8006aa0:	bc30      	pop	{r4, r5}
 8006aa2:	4770      	bx	lr
      me->_trigChannelPayload.Byte[0] = ptr[0];
 8006aa4:	7813      	ldrb	r3, [r2, #0]
 8006aa6:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      break;
 8006aaa:	e7f9      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      me->_trigChannelPayload.Byte[0] = ptr[0];
 8006aac:	7813      	ldrb	r3, [r2, #0]
 8006aae:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      break;
 8006ab2:	e7f5      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006ab4:	7813      	ldrb	r3, [r2, #0]
 8006ab6:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006aba:	7853      	ldrb	r3, [r2, #1]
 8006abc:	f363 240f 	bfi	r4, r3, #8, #8
      me->_trigChannelPayload.U16[0] = tmp.U16[0];
 8006ac0:	f8a0 4098 	strh.w	r4, [r0, #152]	@ 0x98
      break;
 8006ac4:	e7ec      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006ac6:	7813      	ldrb	r3, [r2, #0]
 8006ac8:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006acc:	7853      	ldrb	r3, [r2, #1]
 8006ace:	f363 240f 	bfi	r4, r3, #8, #8
      me->_trigChannelPayload.I16[0] = tmp.I16[0];
 8006ad2:	f8a0 4098 	strh.w	r4, [r0, #152]	@ 0x98
      break;
 8006ad6:	e7e3      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006ad8:	7813      	ldrb	r3, [r2, #0]
 8006ada:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006ade:	7853      	ldrb	r3, [r2, #1]
 8006ae0:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8006ae4:	7893      	ldrb	r3, [r2, #2]
 8006ae6:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8006aea:	78d3      	ldrb	r3, [r2, #3]
 8006aec:	f363 641f 	bfi	r4, r3, #24, #8
      me->_trigChannelPayload.U32[0] = tmp.U32[0];
 8006af0:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
      break;
 8006af4:	e7d4      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006af6:	7813      	ldrb	r3, [r2, #0]
 8006af8:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006afc:	7853      	ldrb	r3, [r2, #1]
 8006afe:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8006b02:	7893      	ldrb	r3, [r2, #2]
 8006b04:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8006b08:	78d3      	ldrb	r3, [r2, #3]
 8006b0a:	f363 641f 	bfi	r4, r3, #24, #8
      me->_trigChannelPayload.I32[0] = tmp.I32[0];
 8006b0e:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
      break;
 8006b12:	e7c5      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006b14:	7813      	ldrb	r3, [r2, #0]
 8006b16:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006b1a:	7853      	ldrb	r3, [r2, #1]
 8006b1c:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8006b20:	7893      	ldrb	r3, [r2, #2]
 8006b22:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8006b26:	78d3      	ldrb	r3, [r2, #3]
 8006b28:	f363 641f 	bfi	r4, r3, #24, #8
      tmp.Byte[4] = ptr[4];
 8006b2c:	7913      	ldrb	r3, [r2, #4]
 8006b2e:	f363 0507 	bfi	r5, r3, #0, #8
      tmp.Byte[5] = ptr[5];
 8006b32:	7953      	ldrb	r3, [r2, #5]
 8006b34:	f363 250f 	bfi	r5, r3, #8, #8
      tmp.Byte[6] = ptr[6];
 8006b38:	7993      	ldrb	r3, [r2, #6]
 8006b3a:	f363 4517 	bfi	r5, r3, #16, #8
      tmp.Byte[7] = ptr[7];
 8006b3e:	79d3      	ldrb	r3, [r2, #7]
 8006b40:	f363 651f 	bfi	r5, r3, #24, #8
      me->_trigChannelPayload.U64 = tmp.U64;
 8006b44:	e9c0 4526 	strd	r4, r5, [r0, #152]	@ 0x98
      break;
 8006b48:	e7aa      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006b4a:	7813      	ldrb	r3, [r2, #0]
 8006b4c:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006b50:	7853      	ldrb	r3, [r2, #1]
 8006b52:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8006b56:	7893      	ldrb	r3, [r2, #2]
 8006b58:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8006b5c:	78d3      	ldrb	r3, [r2, #3]
 8006b5e:	f363 641f 	bfi	r4, r3, #24, #8
      tmp.Byte[4] = ptr[4];
 8006b62:	7913      	ldrb	r3, [r2, #4]
 8006b64:	f363 0507 	bfi	r5, r3, #0, #8
      tmp.Byte[5] = ptr[5];
 8006b68:	7953      	ldrb	r3, [r2, #5]
 8006b6a:	f363 250f 	bfi	r5, r3, #8, #8
      tmp.Byte[6] = ptr[6];
 8006b6e:	7993      	ldrb	r3, [r2, #6]
 8006b70:	f363 4517 	bfi	r5, r3, #16, #8
      tmp.Byte[7] = ptr[7];
 8006b74:	79d3      	ldrb	r3, [r2, #7]
 8006b76:	f363 651f 	bfi	r5, r3, #24, #8
      me->_trigChannelPayload.I64 = tmp.I64;
 8006b7a:	e9c0 4526 	strd	r4, r5, [r0, #152]	@ 0x98
      break;
 8006b7e:	e78f      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006b80:	7813      	ldrb	r3, [r2, #0]
 8006b82:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006b86:	7853      	ldrb	r3, [r2, #1]
 8006b88:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8006b8c:	7893      	ldrb	r3, [r2, #2]
 8006b8e:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8006b92:	78d3      	ldrb	r3, [r2, #3]
 8006b94:	f363 641f 	bfi	r4, r3, #24, #8
      me->_trigChannelPayload.F32[0] = tmp.F32[0];
 8006b98:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
      break;
 8006b9c:	e780      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8006b9e:	7813      	ldrb	r3, [r2, #0]
 8006ba0:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8006ba4:	7853      	ldrb	r3, [r2, #1]
 8006ba6:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8006baa:	7893      	ldrb	r3, [r2, #2]
 8006bac:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8006bb0:	78d3      	ldrb	r3, [r2, #3]
 8006bb2:	f363 641f 	bfi	r4, r3, #24, #8
      tmp.Byte[4] = ptr[4];
 8006bb6:	7913      	ldrb	r3, [r2, #4]
 8006bb8:	f363 0507 	bfi	r5, r3, #0, #8
      tmp.Byte[5] = ptr[5];
 8006bbc:	7953      	ldrb	r3, [r2, #5]
 8006bbe:	f363 250f 	bfi	r5, r3, #8, #8
      tmp.Byte[6] = ptr[6];
 8006bc2:	7993      	ldrb	r3, [r2, #6]
 8006bc4:	f363 4517 	bfi	r5, r3, #16, #8
      tmp.Byte[7] = ptr[7];
 8006bc8:	79d3      	ldrb	r3, [r2, #7]
 8006bca:	f363 651f 	bfi	r5, r3, #24, #8
      me->_trigChannelPayload.F64 = tmp.F64;
 8006bce:	e9c0 4526 	strd	r4, r5, [r0, #152]	@ 0x98
      break;
 8006bd2:	e765      	b.n	8006aa0 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
 8006bd4:	4770      	bx	lr
	...

08006bd8 <fFaraabinFobjectDataBus_StartStream>:
	if(!FaraabinInit___) {
 8006bd8:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <fFaraabinFobjectDataBus_StartStream+0x20>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b12b      	cbz	r3, 8006bea <fFaraabinFobjectDataBus_StartStream+0x12>
  if(!me->_init) {
 8006bde:	7843      	ldrb	r3, [r0, #1]
 8006be0:	b113      	cbz	r3, 8006be8 <fFaraabinFobjectDataBus_StartStream+0x10>
  me->CurrentState = eDATABUS_STATE_STREAM;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
}
 8006be8:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006bea:	4a04      	ldr	r2, [pc, #16]	@ (8006bfc <fFaraabinFobjectDataBus_StartStream+0x24>)
 8006bec:	7953      	ldrb	r3, [r2, #5]
 8006bee:	f043 0308 	orr.w	r3, r3, #8
 8006bf2:	7153      	strb	r3, [r2, #5]
		return;
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20002500 	.word	0x20002500
 8006bfc:	20002638 	.word	0x20002638

08006c00 <fFaraabinFobjectDataBus_StartTimer>:
	if(!FaraabinInit___) {
 8006c00:	4b0e      	ldr	r3, [pc, #56]	@ (8006c3c <fFaraabinFobjectDataBus_StartTimer+0x3c>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	b123      	cbz	r3, 8006c10 <fFaraabinFobjectDataBus_StartTimer+0x10>
void fFaraabinFobjectDataBus_StartTimer(sFaraabinFobjectDataBus *me) {
 8006c06:	b510      	push	{r4, lr}
 8006c08:	4604      	mov	r4, r0
  if(!me->_init) {
 8006c0a:	7843      	ldrb	r3, [r0, #1]
 8006c0c:	b933      	cbnz	r3, 8006c1c <fFaraabinFobjectDataBus_StartTimer+0x1c>
}
 8006c0e:	bd10      	pop	{r4, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006c10:	4a0b      	ldr	r2, [pc, #44]	@ (8006c40 <fFaraabinFobjectDataBus_StartTimer+0x40>)
 8006c12:	7953      	ldrb	r3, [r2, #5]
 8006c14:	f043 0308 	orr.w	r3, r3, #8
 8006c18:	7153      	strb	r3, [r2, #5]
		return;
 8006c1a:	4770      	bx	lr
  me->QueueItemCount = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  me->_queueFrontIndex = 0U;
 8006c22:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  me->_queueRearIndex = 0U;
 8006c26:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
	fChrono_StartTimeoutMs(&me->_chronoTrigWindow, me->TimerWindowMs);
 8006c2a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006c2c:	3038      	adds	r0, #56	@ 0x38
 8006c2e:	f7fe fe5f 	bl	80058f0 <fChrono_StartTimeoutMs>
  me->CurrentState = eDATABUS_STATE_TIMER;
 8006c32:	2302      	movs	r3, #2
 8006c34:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8006c38:	e7e9      	b.n	8006c0e <fFaraabinFobjectDataBus_StartTimer+0xe>
 8006c3a:	bf00      	nop
 8006c3c:	20002500 	.word	0x20002500
 8006c40:	20002638 	.word	0x20002638

08006c44 <fFaraabinFobjectDataBus_StartTrigger>:
void fFaraabinFobjectDataBus_StartTrigger(sFaraabinFobjectDataBus *me) {
 8006c44:	b538      	push	{r3, r4, r5, lr}
	if(!FaraabinInit___) {
 8006c46:	4b0e      	ldr	r3, [pc, #56]	@ (8006c80 <fFaraabinFobjectDataBus_StartTrigger+0x3c>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b19b      	cbz	r3, 8006c74 <fFaraabinFobjectDataBus_StartTrigger+0x30>
 8006c4c:	4604      	mov	r4, r0
  if(!me->_init) {
 8006c4e:	7843      	ldrb	r3, [r0, #1]
 8006c50:	b1ab      	cbz	r3, 8006c7e <fFaraabinFobjectDataBus_StartTrigger+0x3a>
  me->_isTriggered = false;
 8006c52:	2500      	movs	r5, #0
 8006c54:	f880 506d 	strb.w	r5, [r0, #109]	@ 0x6d
  me->IsCaptureEnd = false;
 8006c58:	f880 5088 	strb.w	r5, [r0, #136]	@ 0x88
  fFaraabinFobjectDataBus_ResetTrigger(me);
 8006c5c:	f7ff fef4 	bl	8006a48 <fFaraabinFobjectDataBus_ResetTrigger>
  me->QueueItemCount = 0U;
 8006c60:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
  me->_queueFrontIndex = 0U;
 8006c64:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
  me->_queueRearIndex = 0U;
 8006c68:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
  me->CurrentState = eDATABUS_STATE_TRIG_WAIT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8006c72:	e004      	b.n	8006c7e <fFaraabinFobjectDataBus_StartTrigger+0x3a>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006c74:	4a03      	ldr	r2, [pc, #12]	@ (8006c84 <fFaraabinFobjectDataBus_StartTrigger+0x40>)
 8006c76:	7953      	ldrb	r3, [r2, #5]
 8006c78:	f043 0308 	orr.w	r3, r3, #8
 8006c7c:	7153      	strb	r3, [r2, #5]
}
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20002500 	.word	0x20002500
 8006c84:	20002638 	.word	0x20002638

08006c88 <fFaraabinFobjectDataBus_ForceManualTrigger>:
	if(!FaraabinInit___) {
 8006c88:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc0 <fFaraabinFobjectDataBus_ForceManualTrigger+0x38>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b143      	cbz	r3, 8006ca0 <fFaraabinFobjectDataBus_ForceManualTrigger+0x18>
void fFaraabinFobjectDataBus_ForceManualTrigger(sFaraabinFobjectDataBus *me) {
 8006c8e:	b510      	push	{r4, lr}
 8006c90:	4604      	mov	r4, r0
  if(!me->_init) {
 8006c92:	7843      	ldrb	r3, [r0, #1]
 8006c94:	b11b      	cbz	r3, 8006c9e <fFaraabinFobjectDataBus_ForceManualTrigger+0x16>
  if(me->CurrentState == eDATABUS_STATE_TRIG_WAIT) {
 8006c96:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d006      	beq.n	8006cac <fFaraabinFobjectDataBus_ForceManualTrigger+0x24>
}
 8006c9e:	bd10      	pop	{r4, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006ca0:	4a08      	ldr	r2, [pc, #32]	@ (8006cc4 <fFaraabinFobjectDataBus_ForceManualTrigger+0x3c>)
 8006ca2:	7953      	ldrb	r3, [r2, #5]
 8006ca4:	f043 0308 	orr.w	r3, r3, #8
 8006ca8:	7153      	strb	r3, [r2, #5]
		return;
 8006caa:	4770      	bx	lr
    me->_trigTimeStamp = fChrono_GetTick();
 8006cac:	f7fe fd20 	bl	80056f0 <fChrono_GetTick>
 8006cb0:	6620      	str	r0, [r4, #96]	@ 0x60
    me->LastTrigSource = eDATABUS_TRIG_SOURCE_MANUAL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
    me->_isTriggered = true;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006cbe:	e7ee      	b.n	8006c9e <fFaraabinFobjectDataBus_ForceManualTrigger+0x16>
 8006cc0:	20002500 	.word	0x20002500
 8006cc4:	20002638 	.word	0x20002638

08006cc8 <fFaraabinFobjectDataBus_Stop>:
	if(!FaraabinInit___) {
 8006cc8:	4b07      	ldr	r3, [pc, #28]	@ (8006ce8 <fFaraabinFobjectDataBus_Stop+0x20>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b12b      	cbz	r3, 8006cda <fFaraabinFobjectDataBus_Stop+0x12>
  if(!me->_init) {
 8006cce:	7843      	ldrb	r3, [r0, #1]
 8006cd0:	b113      	cbz	r3, 8006cd8 <fFaraabinFobjectDataBus_Stop+0x10>
  me->CurrentState = eDATABUS_STATE_OFF;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
}
 8006cd8:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006cda:	4a04      	ldr	r2, [pc, #16]	@ (8006cec <fFaraabinFobjectDataBus_Stop+0x24>)
 8006cdc:	7953      	ldrb	r3, [r2, #5]
 8006cde:	f043 0308 	orr.w	r3, r3, #8
 8006ce2:	7153      	strb	r3, [r2, #5]
		return;
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20002500 	.word	0x20002500
 8006cec:	20002638 	.word	0x20002638

08006cf0 <fFaraabinFobjectDataBus_AttachVariableToChannel>:
  uint8_t fobjectType) {
 8006cf0:	b410      	push	{r4}
	if(!FaraabinInit___) {
 8006cf2:	4c1c      	ldr	r4, [pc, #112]	@ (8006d64 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x74>)
 8006cf4:	7824      	ldrb	r4, [r4, #0]
 8006cf6:	b33c      	cbz	r4, 8006d48 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x58>
  if(!me->_init) {
 8006cf8:	7844      	ldrb	r4, [r0, #1]
 8006cfa:	b36c      	cbz	r4, 8006d58 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x68>
  if(channel >= me->ChannelQty) {
 8006cfc:	8a44      	ldrh	r4, [r0, #18]
 8006cfe:	428c      	cmp	r4, r1
 8006d00:	d92c      	bls.n	8006d5c <fFaraabinFobjectDataBus_AttachVariableToChannel+0x6c>
  if(varPtr == 0U) {
 8006d02:	b36a      	cbz	r2, 8006d60 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x70>
  me->_pBufferChannels[channel].ItemFobjectType = fobjectType;
 8006d04:	0109      	lsls	r1, r1, #4
 8006d06:	6944      	ldr	r4, [r0, #20]
 8006d08:	f89d c00c 	ldrb.w	ip, [sp, #12]
 8006d0c:	f804 c001 	strb.w	ip, [r4, r1]
  me->_pBufferChannels[channel].ItemFobjectPtr = varPtr;
 8006d10:	6944      	ldr	r4, [r0, #20]
 8006d12:	440c      	add	r4, r1
 8006d14:	6062      	str	r2, [r4, #4]
  me->_pBufferChannels[channel].ItemFobjectParam = varSize;
 8006d16:	6942      	ldr	r2, [r0, #20]
 8006d18:	440a      	add	r2, r1
 8006d1a:	8113      	strh	r3, [r2, #8]
  me->_pBufferChannels[channel].VariableDataType = varTypeArchitecture;
 8006d1c:	6943      	ldr	r3, [r0, #20]
 8006d1e:	440b      	add	r3, r1
 8006d20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006d24:	729a      	strb	r2, [r3, #10]
  me->_pBufferChannels[channel].PrimitiveVariableId = varPrimitiveId;
 8006d26:	6943      	ldr	r3, [r0, #20]
 8006d28:	440b      	add	r3, r1
 8006d2a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006d2e:	72da      	strb	r2, [r3, #11]
  me->_pBufferChannels[channel].Enable = true;
 8006d30:	6943      	ldr	r3, [r0, #20]
 8006d32:	440b      	add	r3, r1
 8006d34:	2201      	movs	r2, #1
 8006d36:	731a      	strb	r2, [r3, #12]
  me->AttachedItemsQty++;
 8006d38:	8b43      	ldrh	r3, [r0, #26]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	8343      	strh	r3, [r0, #26]
  me->AvailableItemsQty++;
 8006d3e:	8b83      	ldrh	r3, [r0, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	8383      	strh	r3, [r0, #28]
  return FARAABIN_DB_OK;
 8006d44:	2000      	movs	r0, #0
 8006d46:	e005      	b.n	8006d54 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006d48:	4a07      	ldr	r2, [pc, #28]	@ (8006d68 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x78>)
 8006d4a:	7953      	ldrb	r3, [r2, #5]
 8006d4c:	f043 0308 	orr.w	r3, r3, #8
 8006d50:	7153      	strb	r3, [r2, #5]
		return 1;
 8006d52:	2001      	movs	r0, #1
}
 8006d54:	bc10      	pop	{r4}
 8006d56:	4770      	bx	lr
    return FARAABIN_DB_NOT_INIT;
 8006d58:	2005      	movs	r0, #5
 8006d5a:	e7fb      	b.n	8006d54 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
 8006d5c:	2001      	movs	r0, #1
 8006d5e:	e7f9      	b.n	8006d54 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
    return FARAABIN_DB_ACTION_WITH_NULL_REFERENCE;
 8006d60:	2003      	movs	r0, #3
 8006d62:	e7f7      	b.n	8006d54 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
 8006d64:	20002500 	.word	0x20002500
 8006d68:	20002638 	.word	0x20002638

08006d6c <fFaraabinFobjectDataBus_AttachVariable>:
uint8_t fFaraabinFobjectDataBus_AttachVariable(sFaraabinFobjectDataBus *me, uint32_t varPtr, uint16_t varSize, uint8_t varTypeArchitecture, uint8_t varPrimitiveId, uint8_t fobjectType) {
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	b084      	sub	sp, #16
	if(!FaraabinInit___) {
 8006d70:	4c16      	ldr	r4, [pc, #88]	@ (8006dcc <fFaraabinFobjectDataBus_AttachVariable+0x60>)
 8006d72:	7824      	ldrb	r4, [r4, #0]
 8006d74:	b17c      	cbz	r4, 8006d96 <fFaraabinFobjectDataBus_AttachVariable+0x2a>
  if(!me->_init) {
 8006d76:	7844      	ldrb	r4, [r0, #1]
 8006d78:	b31c      	cbz	r4, 8006dc2 <fFaraabinFobjectDataBus_AttachVariable+0x56>
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8006d7a:	8a45      	ldrh	r5, [r0, #18]
 8006d7c:	b31d      	cbz	r5, 8006dc6 <fFaraabinFobjectDataBus_AttachVariable+0x5a>
 8006d7e:	6944      	ldr	r4, [r0, #20]
    if(me->_pBufferChannels[i].ItemFobjectPtr == 0U) {
 8006d80:	f04f 0c00 	mov.w	ip, #0
 8006d84:	6866      	ldr	r6, [r4, #4]
 8006d86:	b176      	cbz	r6, 8006da6 <fFaraabinFobjectDataBus_AttachVariable+0x3a>
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8006d88:	f10c 0c01 	add.w	ip, ip, #1
 8006d8c:	3410      	adds	r4, #16
 8006d8e:	45ac      	cmp	ip, r5
 8006d90:	d1f8      	bne.n	8006d84 <fFaraabinFobjectDataBus_AttachVariable+0x18>
  return FARAABIN_DB_IS_FULL;
 8006d92:	2002      	movs	r0, #2
 8006d94:	e005      	b.n	8006da2 <fFaraabinFobjectDataBus_AttachVariable+0x36>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006d96:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd0 <fFaraabinFobjectDataBus_AttachVariable+0x64>)
 8006d98:	7953      	ldrb	r3, [r2, #5]
 8006d9a:	f043 0308 	orr.w	r3, r3, #8
 8006d9e:	7153      	strb	r3, [r2, #5]
		return 1;
 8006da0:	2001      	movs	r0, #1
}
 8006da2:	b004      	add	sp, #16
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
      return fFaraabinFobjectDataBus_AttachVariableToChannel(me, i, varPtr, varSize, varTypeArchitecture, varPrimitiveId, fobjectType);
 8006da6:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 8006daa:	9402      	str	r4, [sp, #8]
 8006dac:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8006db0:	9401      	str	r4, [sp, #4]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	460a      	mov	r2, r1
 8006db8:	fa1f f18c 	uxth.w	r1, ip
 8006dbc:	f7ff ff98 	bl	8006cf0 <fFaraabinFobjectDataBus_AttachVariableToChannel>
 8006dc0:	e7ef      	b.n	8006da2 <fFaraabinFobjectDataBus_AttachVariable+0x36>
    return FARAABIN_DB_NOT_INIT;
 8006dc2:	2005      	movs	r0, #5
 8006dc4:	e7ed      	b.n	8006da2 <fFaraabinFobjectDataBus_AttachVariable+0x36>
  return FARAABIN_DB_IS_FULL;
 8006dc6:	2002      	movs	r0, #2
 8006dc8:	e7eb      	b.n	8006da2 <fFaraabinFobjectDataBus_AttachVariable+0x36>
 8006dca:	bf00      	nop
 8006dcc:	20002500 	.word	0x20002500
 8006dd0:	20002638 	.word	0x20002638

08006dd4 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel>:
	if(!FaraabinInit___) {
 8006dd4:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <fFaraabinFobjectDataBus_AttachCodeBlockToChannel+0x18>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b10b      	cbz	r3, 8006dde <fFaraabinFobjectDataBus_AttachCodeBlockToChannel+0xa>
	return FARAABIN_DB_NOT_INIT;
 8006dda:	2005      	movs	r0, #5
}
 8006ddc:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006dde:	4a04      	ldr	r2, [pc, #16]	@ (8006df0 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel+0x1c>)
 8006de0:	7953      	ldrb	r3, [r2, #5]
 8006de2:	f043 0308 	orr.w	r3, r3, #8
 8006de6:	7153      	strb	r3, [r2, #5]
		return 1;
 8006de8:	2001      	movs	r0, #1
 8006dea:	4770      	bx	lr
 8006dec:	20002500 	.word	0x20002500
 8006df0:	20002638 	.word	0x20002638

08006df4 <fFaraabinFobjectDataBus_DetachFromChannel>:
	if(!FaraabinInit___) {
 8006df4:	4b15      	ldr	r3, [pc, #84]	@ (8006e4c <fFaraabinFobjectDataBus_DetachFromChannel+0x58>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	b1eb      	cbz	r3, 8006e36 <fFaraabinFobjectDataBus_DetachFromChannel+0x42>
  if(!me->_init) {
 8006dfa:	7843      	ldrb	r3, [r0, #1]
 8006dfc:	b313      	cbz	r3, 8006e44 <fFaraabinFobjectDataBus_DetachFromChannel+0x50>
  if(channel >= me->ChannelQty) {
 8006dfe:	8a43      	ldrh	r3, [r0, #18]
 8006e00:	428b      	cmp	r3, r1
 8006e02:	d921      	bls.n	8006e48 <fFaraabinFobjectDataBus_DetachFromChannel+0x54>
  me->_pBufferChannels[channel].ItemFobjectParam = 0U;
 8006e04:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006e08:	6943      	ldr	r3, [r0, #20]
 8006e0a:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8006e0e:	2300      	movs	r3, #0
 8006e10:	8113      	strh	r3, [r2, #8]
  me->_pBufferChannels[channel].ItemFobjectPtr = 0U;
 8006e12:	6942      	ldr	r2, [r0, #20]
 8006e14:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006e18:	6053      	str	r3, [r2, #4]
  me->_pBufferChannels[channel].ItemFobjectType = 0U;
 8006e1a:	6942      	ldr	r2, [r0, #20]
 8006e1c:	f802 300c 	strb.w	r3, [r2, ip]
  me->_pBufferChannels[channel].Enable = false;
 8006e20:	6942      	ldr	r2, [r0, #20]
 8006e22:	4462      	add	r2, ip
 8006e24:	7313      	strb	r3, [r2, #12]
  me->AttachedItemsQty--;
 8006e26:	8b42      	ldrh	r2, [r0, #26]
 8006e28:	3a01      	subs	r2, #1
 8006e2a:	8342      	strh	r2, [r0, #26]
  me->AvailableItemsQty--;
 8006e2c:	8b82      	ldrh	r2, [r0, #28]
 8006e2e:	3a01      	subs	r2, #1
 8006e30:	8382      	strh	r2, [r0, #28]
  return FARAABIN_DB_OK;
 8006e32:	4618      	mov	r0, r3
 8006e34:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006e36:	4a06      	ldr	r2, [pc, #24]	@ (8006e50 <fFaraabinFobjectDataBus_DetachFromChannel+0x5c>)
 8006e38:	7953      	ldrb	r3, [r2, #5]
 8006e3a:	f043 0308 	orr.w	r3, r3, #8
 8006e3e:	7153      	strb	r3, [r2, #5]
		return 1;
 8006e40:	2001      	movs	r0, #1
 8006e42:	4770      	bx	lr
    return FARAABIN_DB_NOT_INIT;
 8006e44:	2005      	movs	r0, #5
 8006e46:	4770      	bx	lr
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
 8006e48:	2001      	movs	r0, #1
}
 8006e4a:	4770      	bx	lr
 8006e4c:	20002500 	.word	0x20002500
 8006e50:	20002638 	.word	0x20002638

08006e54 <fFaraabinFobjectDataBus_DetachAllChannels>:
uint8_t fFaraabinFobjectDataBus_DetachAllChannels(sFaraabinFobjectDataBus *me) {
 8006e54:	b538      	push	{r3, r4, r5, lr}
	if(!FaraabinInit___) {
 8006e56:	4b11      	ldr	r3, [pc, #68]	@ (8006e9c <fFaraabinFobjectDataBus_DetachAllChannels+0x48>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b1a3      	cbz	r3, 8006e86 <fFaraabinFobjectDataBus_DetachAllChannels+0x32>
 8006e5c:	4605      	mov	r5, r0
  if(!me->_init) {
 8006e5e:	7843      	ldrb	r3, [r0, #1]
 8006e60:	b1cb      	cbz	r3, 8006e96 <fFaraabinFobjectDataBus_DetachAllChannels+0x42>
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8006e62:	8a43      	ldrh	r3, [r0, #18]
 8006e64:	b15b      	cbz	r3, 8006e7e <fFaraabinFobjectDataBus_DetachAllChannels+0x2a>
 8006e66:	2400      	movs	r4, #0
    result = fFaraabinFobjectDataBus_DetachFromChannel(me, i);
 8006e68:	b2a1      	uxth	r1, r4
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f7ff ffc2 	bl	8006df4 <fFaraabinFobjectDataBus_DetachFromChannel>
    if(result != FARAABIN_DB_OK) {
 8006e70:	4603      	mov	r3, r0
 8006e72:	b970      	cbnz	r0, 8006e92 <fFaraabinFobjectDataBus_DetachAllChannels+0x3e>
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8006e74:	3401      	adds	r4, #1
 8006e76:	8a6a      	ldrh	r2, [r5, #18]
 8006e78:	b2a3      	uxth	r3, r4
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d8f4      	bhi.n	8006e68 <fFaraabinFobjectDataBus_DetachAllChannels+0x14>
  me->AttachedItemsQty = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	836b      	strh	r3, [r5, #26]
  me->AvailableItemsQty = 0U;
 8006e82:	83ab      	strh	r3, [r5, #28]
  return FARAABIN_DB_OK;
 8006e84:	e005      	b.n	8006e92 <fFaraabinFobjectDataBus_DetachAllChannels+0x3e>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006e86:	4a06      	ldr	r2, [pc, #24]	@ (8006ea0 <fFaraabinFobjectDataBus_DetachAllChannels+0x4c>)
 8006e88:	7953      	ldrb	r3, [r2, #5]
 8006e8a:	f043 0308 	orr.w	r3, r3, #8
 8006e8e:	7153      	strb	r3, [r2, #5]
		return 1;
 8006e90:	2301      	movs	r3, #1
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
    return FARAABIN_DB_NOT_INIT;
 8006e96:	2305      	movs	r3, #5
 8006e98:	e7fb      	b.n	8006e92 <fFaraabinFobjectDataBus_DetachAllChannels+0x3e>
 8006e9a:	bf00      	nop
 8006e9c:	20002500 	.word	0x20002500
 8006ea0:	20002638 	.word	0x20002638

08006ea4 <fFaraabinFobjectEventGroup_Init>:
 * @param me Pointer to the event group fobject.
 * @return InitResult '1' if fails, '0' if successful.
 */
uint8_t fFaraabinFobjectEventGroup_Init(sFaraabinFobjectEventGroup *me) {
	
	if(!FaraabinInit___) {
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <fFaraabinFobjectEventGroup_Init+0x30>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b933      	cbnz	r3, 8006eb8 <fFaraabinFobjectEventGroup_Init+0x14>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8006ed8 <fFaraabinFobjectEventGroup_Init+0x34>)
 8006eac:	7953      	ldrb	r3, [r2, #5]
 8006eae:	f043 0308 	orr.w	r3, r3, #8
 8006eb2:	7153      	strb	r3, [r2, #5]
		return 1;
 8006eb4:	2001      	movs	r0, #1
	me->_type = (uint8_t)eFO_TYPE_EVENT_GROUP;
	
	me->Enable = true;
  me->_init = true;
  return 0;
}
 8006eb6:	4770      	bx	lr
uint8_t fFaraabinFobjectEventGroup_Init(sFaraabinFobjectEventGroup *me) {
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8006ebc:	f7fe fee0 	bl	8005c80 <fFaraabinDatabase_AddDict>
 8006ec0:	b928      	cbnz	r0, 8006ece <fFaraabinFobjectEventGroup_Init+0x2a>
	me->_type = (uint8_t)eFO_TYPE_EVENT_GROUP;
 8006ec2:	2304      	movs	r3, #4
 8006ec4:	7023      	strb	r3, [r4, #0]
	me->Enable = true;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	70a3      	strb	r3, [r4, #2]
  me->_init = true;
 8006eca:	7063      	strb	r3, [r4, #1]
}
 8006ecc:	bd10      	pop	{r4, pc}
    return 1;
 8006ece:	2001      	movs	r0, #1
 8006ed0:	e7fc      	b.n	8006ecc <fFaraabinFobjectEventGroup_Init+0x28>
 8006ed2:	bf00      	nop
 8006ed4:	20002500 	.word	0x20002500
 8006ed8:	20002638 	.word	0x20002638

08006edc <fFaraabinFobjectFunctionGroupType_Init>:
 * @param me Pointer to the function group.
 * @return InitStat Returns '0' if successful, '1' if failed. 
 */
uint8_t fFaraabinFobjectFunctionGroupType_Init(sFaraabinFobjectFunctionGroupType *me) {
	
	if(!FaraabinInit___) {
 8006edc:	4b0a      	ldr	r3, [pc, #40]	@ (8006f08 <fFaraabinFobjectFunctionGroupType_Init+0x2c>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b933      	cbnz	r3, 8006ef0 <fFaraabinFobjectFunctionGroupType_Init+0x14>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8006f0c <fFaraabinFobjectFunctionGroupType_Init+0x30>)
 8006ee4:	7953      	ldrb	r3, [r2, #5]
 8006ee6:	f043 0308 	orr.w	r3, r3, #8
 8006eea:	7153      	strb	r3, [r2, #5]
		return 1;
 8006eec:	2001      	movs	r0, #1
  
	me->_type = (uint8_t)eFO_TYPE_FUNCTION_GROUP_TYPE;
	
  me->_init = true;
  return 0;
}
 8006eee:	4770      	bx	lr
uint8_t fFaraabinFobjectFunctionGroupType_Init(sFaraabinFobjectFunctionGroupType *me) {
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8006ef4:	f7fe fec4 	bl	8005c80 <fFaraabinDatabase_AddDict>
 8006ef8:	b920      	cbnz	r0, 8006f04 <fFaraabinFobjectFunctionGroupType_Init+0x28>
	me->_type = (uint8_t)eFO_TYPE_FUNCTION_GROUP_TYPE;
 8006efa:	2307      	movs	r3, #7
 8006efc:	7023      	strb	r3, [r4, #0]
  me->_init = true;
 8006efe:	2301      	movs	r3, #1
 8006f00:	7063      	strb	r3, [r4, #1]
}
 8006f02:	bd10      	pop	{r4, pc}
    return 1;
 8006f04:	2001      	movs	r0, #1
 8006f06:	e7fc      	b.n	8006f02 <fFaraabinFobjectFunctionGroupType_Init+0x26>
 8006f08:	20002500 	.word	0x20002500
 8006f0c:	20002638 	.word	0x20002638

08006f10 <fFaraabinFobjectMcu_Init>:
/**
 * @brief Initializes MCU Fobject.
 * 
 * @return result Returns '0' if success
 */
uint8_t fFaraabinFobjectMcu_Init(void) {
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
	FaraabinInit___ = true;
 8006f12:	4b15      	ldr	r3, [pc, #84]	@ (8006f68 <fFaraabinFobjectMcu_Init+0x58>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	701a      	strb	r2, [r3, #0]
  if(fFaraabinDatabase_AddDict((uint32_t)&faraabin_mcu__) != 0U) {
 8006f18:	4814      	ldr	r0, [pc, #80]	@ (8006f6c <fFaraabinFobjectMcu_Init+0x5c>)
 8006f1a:	f7fe feb1 	bl	8005c80 <fFaraabinDatabase_AddDict>
 8006f1e:	b110      	cbz	r0, 8006f26 <fFaraabinFobjectMcu_Init+0x16>
    return 1;
 8006f20:	2601      	movs	r6, #1
	faraabin_mcu__.BootTimeMs = 0;
	faraabin_mcu__.BootTimeFirstFlag = TRUE;
	
  faraabin_mcu__._init = TRUE;
  return 0;
}
 8006f22:	4630      	mov	r0, r6
 8006f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f26:	4606      	mov	r6, r0
	FaraabinInit___ = false;
 8006f28:	2500      	movs	r5, #0
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <fFaraabinFobjectMcu_Init+0x58>)
 8006f2c:	701d      	strb	r5, [r3, #0]
	faraabin_mcu__._type = (uint8_t)eFO_TYPE_MCU;
 8006f2e:	4c0f      	ldr	r4, [pc, #60]	@ (8006f6c <fFaraabinFobjectMcu_Init+0x5c>)
 8006f30:	7025      	strb	r5, [r4, #0]
  faraabin_mcu__._init = FALSE;
 8006f32:	7065      	strb	r5, [r4, #1]
	faraabin_mcu__.Enable = TRUE;
 8006f34:	2701      	movs	r7, #1
 8006f36:	70a7      	strb	r7, [r4, #2]
	faraabin_mcu__.Path = "System";
 8006f38:	4b0d      	ldr	r3, [pc, #52]	@ (8006f70 <fFaraabinFobjectMcu_Init+0x60>)
 8006f3a:	60a3      	str	r3, [r4, #8]
  faraabin_mcu__.Seq = 0U;
 8006f3c:	7425      	strb	r5, [r4, #16]
	faraabin_mcu__._isHostConnected = FALSE;
 8006f3e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
  fChrono_StartTimeoutMs(&(faraabin_mcu__.ChronoLiveTimeout), FB_LIVE_TIMEOUT_MS);
 8006f42:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8006f46:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8006f4a:	f7fe fcd1 	bl	80058f0 <fChrono_StartTimeoutMs>
  faraabin_mcu__.StatisticsRxFramesCnt = 0U;
 8006f4e:	61a5      	str	r5, [r4, #24]
  faraabin_mcu__.StatisticsRxBytesCnt = 0U;
 8006f50:	61e5      	str	r5, [r4, #28]
  faraabin_mcu__.StatisticsRxFramesEscapingErrorCnt = 0U;
 8006f52:	6225      	str	r5, [r4, #32]
  faraabin_mcu__.StatisticsRxFramesChecksumErrorCnt = 0U;
 8006f54:	6265      	str	r5, [r4, #36]	@ 0x24
  faraabin_mcu__.StatisticsRxFramesOverrideErrorCnt = 0U;
 8006f56:	62a5      	str	r5, [r4, #40]	@ 0x28
  faraabin_mcu__.StatisticsRxFramesMinimumSizeErrorCnt = 0U;
 8006f58:	62e5      	str	r5, [r4, #44]	@ 0x2c
  faraabin_mcu__.StatisticsTxFramesCnt = 0U;
 8006f5a:	6325      	str	r5, [r4, #48]	@ 0x30
  faraabin_mcu__.StatisticsTxBytesCnt = 0U;
 8006f5c:	6365      	str	r5, [r4, #52]	@ 0x34
	faraabin_mcu__.BootTimeMs = 0;
 8006f5e:	6565      	str	r5, [r4, #84]	@ 0x54
	faraabin_mcu__.BootTimeFirstFlag = TRUE;
 8006f60:	f884 7058 	strb.w	r7, [r4, #88]	@ 0x58
  faraabin_mcu__._init = TRUE;
 8006f64:	7067      	strb	r7, [r4, #1]
  return 0;
 8006f66:	e7dc      	b.n	8006f22 <fFaraabinFobjectMcu_Init+0x12>
 8006f68:	20002500 	.word	0x20002500
 8006f6c:	200027e8 	.word	0x200027e8
 8006f70:	0800b0d0 	.word	0x0800b0d0

08006f74 <fFaraabinFobjectMcu_Run>:

/**
 * @brief Runs all statistics in Faraabin related to the MCU Fobject.
 * 
 */
void fFaraabinFobjectMcu_Run(void) {
 8006f74:	b538      	push	{r3, r4, r5, lr}

  if(!faraabin_mcu__._init) {
 8006f76:	4b15      	ldr	r3, [pc, #84]	@ (8006fcc <fFaraabinFobjectMcu_Run+0x58>)
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	b17b      	cbz	r3, 8006f9c <fFaraabinFobjectMcu_Run+0x28>
    return;
  }
	
	if(faraabin_mcu__.BootTimeFirstFlag) {
 8006f7c:	4b13      	ldr	r3, [pc, #76]	@ (8006fcc <fFaraabinFobjectMcu_Run+0x58>)
 8006f7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f82:	b963      	cbnz	r3, 8006f9e <fFaraabinFobjectMcu_Run+0x2a>
		faraabin_mcu__.BootTimeFirstFlag = false;
		
		faraabin_mcu__.BootTimeMs = fChrono_TimeSpanMs(fChrono_GetTickInitValue(), fChrono_GetTick());
	}
	
	FaraabinFlags.Status.Bitfield.ProfilerSend = faraabin_mcu__.IsSendingCpuProfiler;
 8006f84:	4b12      	ldr	r3, [pc, #72]	@ (8006fd0 <fFaraabinFobjectMcu_Run+0x5c>)
 8006f86:	4811      	ldr	r0, [pc, #68]	@ (8006fcc <fFaraabinFobjectMcu_Run+0x58>)
 8006f88:	791a      	ldrb	r2, [r3, #4]
 8006f8a:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 8006f8e:	f361 1286 	bfi	r2, r1, #6, #1
 8006f92:	711a      	strb	r2, [r3, #4]
	
	if(fChrono_IsTimeout(&(faraabin_mcu__.ChronoLiveTimeout)) == true) {
 8006f94:	3038      	adds	r0, #56	@ 0x38
 8006f96:	f7fe fccf 	bl	8005938 <fChrono_IsTimeout>
 8006f9a:	b978      	cbnz	r0, 8006fbc <fFaraabinFobjectMcu_Run+0x48>
    
    fChrono_Start(&(faraabin_mcu__.ChronoLiveTimeout));
    
    faraabin_mcu__._isHostConnected = false;
  }
}
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
		faraabin_mcu__.BootTimeFirstFlag = false;
 8006f9e:	4d0b      	ldr	r5, [pc, #44]	@ (8006fcc <fFaraabinFobjectMcu_Run+0x58>)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f885 3058 	strb.w	r3, [r5, #88]	@ 0x58
		faraabin_mcu__.BootTimeMs = fChrono_TimeSpanMs(fChrono_GetTickInitValue(), fChrono_GetTick());
 8006fa6:	f7fe fbb9 	bl	800571c <fChrono_GetTickInitValue>
 8006faa:	4604      	mov	r4, r0
 8006fac:	f7fe fba0 	bl	80056f0 <fChrono_GetTick>
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7fe fbc6 	bl	8005744 <fChrono_TimeSpanMs>
 8006fb8:	6568      	str	r0, [r5, #84]	@ 0x54
 8006fba:	e7e3      	b.n	8006f84 <fFaraabinFobjectMcu_Run+0x10>
    fChrono_Start(&(faraabin_mcu__.ChronoLiveTimeout));
 8006fbc:	4c05      	ldr	r4, [pc, #20]	@ (8006fd4 <fFaraabinFobjectMcu_Run+0x60>)
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7fe fbe8 	bl	8005794 <fChrono_Start>
    faraabin_mcu__._isHostConnected = false;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	7523      	strb	r3, [r4, #20]
 8006fc8:	e7e8      	b.n	8006f9c <fFaraabinFobjectMcu_Run+0x28>
 8006fca:	bf00      	nop
 8006fcc:	200027e8 	.word	0x200027e8
 8006fd0:	20002638 	.word	0x20002638
 8006fd4:	20002820 	.word	0x20002820

08006fd8 <fFaraabinFobjectMcu_SendEventSystem>:
/**
 * @brief Sends system event to Faraabin.
 * 
 * @param eventId ID of the event.
 */
void fFaraabinFobjectMcu_SendEventSystem(uint16_t eventId) {
 8006fd8:	b500      	push	{lr}
 8006fda:	b08b      	sub	sp, #44	@ 0x2c
	
	Faraabin_EventSystem_End_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, faraabin_mcu__.Enable, eventId);
 8006fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800700c <fFaraabinFobjectMcu_SendEventSystem+0x34>)
 8006fde:	2301      	movs	r3, #1
 8006fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	9108      	str	r1, [sp, #32]
 8006fe6:	9107      	str	r1, [sp, #28]
 8006fe8:	9106      	str	r1, [sp, #24]
 8006fea:	9105      	str	r1, [sp, #20]
 8006fec:	9104      	str	r1, [sp, #16]
 8006fee:	9103      	str	r1, [sp, #12]
 8006ff0:	9002      	str	r0, [sp, #8]
 8006ff2:	9101      	str	r1, [sp, #4]
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	7893      	ldrb	r3, [r2, #2]
 8006ffa:	3210      	adds	r2, #16
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8007000:	f002 face 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 8007004:	b00b      	add	sp, #44	@ 0x2c
 8007006:	f85d fb04 	ldr.w	pc, [sp], #4
 800700a:	bf00      	nop
 800700c:	200027e8 	.word	0x200027e8

08007010 <fFaraabinFobjectMcu_SendEventSystemException>:
/**
 * @brief Sends system exception event to Faraabin.
 * 
 * @param eventId ID of the event.
 */
void fFaraabinFobjectMcu_SendEventSystemException(uint16_t eventId) {
 8007010:	b500      	push	{lr}
 8007012:	b08b      	sub	sp, #44	@ 0x2c
	
	Faraabin_EventSystemException_End_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, faraabin_mcu__.Enable, eventId);
 8007014:	4a0b      	ldr	r2, [pc, #44]	@ (8007044 <fFaraabinFobjectMcu_SendEventSystemException+0x34>)
 8007016:	2301      	movs	r3, #1
 8007018:	9309      	str	r3, [sp, #36]	@ 0x24
 800701a:	2100      	movs	r1, #0
 800701c:	9108      	str	r1, [sp, #32]
 800701e:	9107      	str	r1, [sp, #28]
 8007020:	9106      	str	r1, [sp, #24]
 8007022:	9105      	str	r1, [sp, #20]
 8007024:	9104      	str	r1, [sp, #16]
 8007026:	9103      	str	r1, [sp, #12]
 8007028:	9002      	str	r0, [sp, #8]
 800702a:	9101      	str	r1, [sp, #4]
 800702c:	2303      	movs	r3, #3
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	7893      	ldrb	r3, [r2, #2]
 8007032:	3210      	adds	r2, #16
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	f002 fab2 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 800703c:	b00b      	add	sp, #44	@ 0x2c
 800703e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007042:	bf00      	nop
 8007044:	200027e8 	.word	0x200027e8

08007048 <fFaraabinFobjectMcu_SendEventSystemResponse>:
 * @brief Sends system event response.
 * 
 * @param eventId ID of the event.
 * @param reqSeq Request sequence.
 */
void fFaraabinFobjectMcu_SendEventSystemResponse(uint16_t eventId, uint8_t reqSeq) {
 8007048:	b500      	push	{lr}
 800704a:	b08b      	sub	sp, #44	@ 0x2c
 800704c:	460a      	mov	r2, r1
	
	Faraabin_EventSystem_EndResponse_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, true, eventId, reqSeq);
 800704e:	2301      	movs	r3, #1
 8007050:	9309      	str	r3, [sp, #36]	@ 0x24
 8007052:	2100      	movs	r1, #0
 8007054:	9108      	str	r1, [sp, #32]
 8007056:	9107      	str	r1, [sp, #28]
 8007058:	9306      	str	r3, [sp, #24]
 800705a:	9205      	str	r2, [sp, #20]
 800705c:	9104      	str	r1, [sp, #16]
 800705e:	9103      	str	r1, [sp, #12]
 8007060:	9002      	str	r0, [sp, #8]
 8007062:	9101      	str	r1, [sp, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	9200      	str	r2, [sp, #0]
 8007068:	4a03      	ldr	r2, [pc, #12]	@ (8007078 <fFaraabinFobjectMcu_SendEventSystemResponse+0x30>)
 800706a:	f04f 30ff 	mov.w	r0, #4294967295
 800706e:	f002 fa97 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 8007072:	b00b      	add	sp, #44	@ 0x2c
 8007074:	f85d fb04 	ldr.w	pc, [sp], #4
 8007078:	200027f8 	.word	0x200027f8

0800707c <fFaraabinFobjectMcu_SendEventSystemExceptionResponse>:
 * @brief Sends system exception event response.
 * 
 * @param eventId 
 * @param reqSeq 
 */
void fFaraabinFobjectMcu_SendEventSystemExceptionResponse(uint16_t eventId, uint8_t reqSeq) {
 800707c:	b500      	push	{lr}
 800707e:	b08b      	sub	sp, #44	@ 0x2c
 8007080:	460a      	mov	r2, r1
	
	Faraabin_EventSystemException_EndResponse_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, true, eventId, reqSeq);
 8007082:	2301      	movs	r3, #1
 8007084:	9309      	str	r3, [sp, #36]	@ 0x24
 8007086:	2100      	movs	r1, #0
 8007088:	9108      	str	r1, [sp, #32]
 800708a:	9107      	str	r1, [sp, #28]
 800708c:	9306      	str	r3, [sp, #24]
 800708e:	9205      	str	r2, [sp, #20]
 8007090:	9104      	str	r1, [sp, #16]
 8007092:	9103      	str	r1, [sp, #12]
 8007094:	9002      	str	r0, [sp, #8]
 8007096:	9101      	str	r1, [sp, #4]
 8007098:	2203      	movs	r2, #3
 800709a:	9200      	str	r2, [sp, #0]
 800709c:	4a03      	ldr	r2, [pc, #12]	@ (80070ac <fFaraabinFobjectMcu_SendEventSystemExceptionResponse+0x30>)
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	f002 fa7d 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 80070a6:	b00b      	add	sp, #44	@ 0x2c
 80070a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ac:	200027f8 	.word	0x200027f8

080070b0 <fFaraabinFobjectMcu_GetFobject>:
 * @return ptr Pointer to the MCU fobject.
 */
sFaraabinFobjectMcu* fFaraabinFobjectMcu_GetFobject(void) {
	
	return &faraabin_mcu__;
}
 80070b0:	4800      	ldr	r0, [pc, #0]	@ (80070b4 <fFaraabinFobjectMcu_GetFobject+0x4>)
 80070b2:	4770      	bx	lr
 80070b4:	200027e8 	.word	0x200027e8

080070b8 <fFaraabinFobjectVarType_Init>:
 * @param me Pointer to the fobject.
 * @return InitStat Returns zero on success, 1 on failure.
 */
uint8_t fFaraabinFobjectVarType_Init(sFaraabinFobjectVarType *me) {
	
	if(!FaraabinInit___) {
 80070b8:	4b0b      	ldr	r3, [pc, #44]	@ (80070e8 <fFaraabinFobjectVarType_Init+0x30>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b933      	cbnz	r3, 80070cc <fFaraabinFobjectVarType_Init+0x14>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 80070be:	4a0b      	ldr	r2, [pc, #44]	@ (80070ec <fFaraabinFobjectVarType_Init+0x34>)
 80070c0:	7953      	ldrb	r3, [r2, #5]
 80070c2:	f043 0308 	orr.w	r3, r3, #8
 80070c6:	7153      	strb	r3, [r2, #5]
		return 1;
 80070c8:	2001      	movs	r0, #1
  me->_type = (uint8_t)eFO_TYPE_VAR_TYPE;
	
  me->Enable = true;
  me->_init = true;
  return 0;
}
 80070ca:	4770      	bx	lr
uint8_t fFaraabinFobjectVarType_Init(sFaraabinFobjectVarType *me) {
 80070cc:	b510      	push	{r4, lr}
 80070ce:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 80070d0:	f7fe fdd6 	bl	8005c80 <fFaraabinDatabase_AddDict>
 80070d4:	b928      	cbnz	r0, 80070e2 <fFaraabinFobjectVarType_Init+0x2a>
  me->_type = (uint8_t)eFO_TYPE_VAR_TYPE;
 80070d6:	2303      	movs	r3, #3
 80070d8:	7023      	strb	r3, [r4, #0]
  me->Enable = true;
 80070da:	2301      	movs	r3, #1
 80070dc:	7463      	strb	r3, [r4, #17]
  me->_init = true;
 80070de:	7063      	strb	r3, [r4, #1]
}
 80070e0:	bd10      	pop	{r4, pc}
    return 1;
 80070e2:	2001      	movs	r0, #1
 80070e4:	e7fc      	b.n	80070e0 <fFaraabinFobjectVarType_Init+0x28>
 80070e6:	bf00      	nop
 80070e8:	20002500 	.word	0x20002500
 80070ec:	20002638 	.word	0x20002638

080070f0 <fFindFunction>:
 */
static sFaraabinFunctionEngine_Item* fFindFunction(uint32_t functionPtr, uint32_t objectPtr) {
  
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
    
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 80070f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007130 <fFindFunction+0x40>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4283      	cmp	r3, r0
 80070f6:	d006      	beq.n	8007106 <fFindFunction+0x16>
 80070f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <fFindFunction+0x40>)
 80070fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80070fe:	4283      	cmp	r3, r0
 8007100:	d00d      	beq.n	800711e <fFindFunction+0x2e>
      return &(FunctionsList[i]);
    }
  }
  
  return NULL;
 8007102:	2000      	movs	r0, #0
 8007104:	4770      	bx	lr
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 8007106:	4b0a      	ldr	r3, [pc, #40]	@ (8007130 <fFindFunction+0x40>)
 8007108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800710c:	4299      	cmp	r1, r3
 800710e:	d1f3      	bne.n	80070f8 <fFindFunction+0x8>
 8007110:	2300      	movs	r3, #0
      return &(FunctionsList[i]);
 8007112:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8007116:	4806      	ldr	r0, [pc, #24]	@ (8007130 <fFindFunction+0x40>)
 8007118:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800711c:	4770      	bx	lr
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 800711e:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <fFindFunction+0x40>)
 8007120:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 8007124:	428b      	cmp	r3, r1
 8007126:	bf08      	it	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	d0f2      	beq.n	8007112 <fFindFunction+0x22>
  return NULL;
 800712c:	2000      	movs	r0, #0
}
 800712e:	4770      	bx	lr
 8007130:	20002844 	.word	0x20002844

08007134 <fFaraabinFunctionEngine_Init>:
uint8_t fFaraabinFunctionEngine_Init(void) {
 8007134:	b570      	push	{r4, r5, r6, lr}
    FunctionsList[i].Function = NULL;
 8007136:	4d1c      	ldr	r5, [pc, #112]	@ (80071a8 <fFaraabinFunctionEngine_Init+0x74>)
 8007138:	2400      	movs	r4, #0
 800713a:	4628      	mov	r0, r5
 800713c:	f840 4b04 	str.w	r4, [r0], #4
    if(memset(FunctionsList[i].Param, 0x00, sizeof(FunctionsList[i].Param)) == NULL) {
 8007140:	26c8      	movs	r6, #200	@ 0xc8
 8007142:	4632      	mov	r2, r6
 8007144:	4621      	mov	r1, r4
 8007146:	f002 fd2d 	bl	8009ba4 <memset>
    FunctionsList[i].IsFirstRun = false;
 800714a:	f885 40cc 	strb.w	r4, [r5, #204]	@ 0xcc
    FunctionsList[i]._result = 0U;
 800714e:	f885 40e4 	strb.w	r4, [r5, #228]	@ 0xe4
    FunctionsList[i].fpUserTerminalCallback = NULL;
 8007152:	f8c5 40e8 	str.w	r4, [r5, #232]	@ 0xe8
    FunctionsList[i].Status = eFN_STATUS_STOP;
 8007156:	f885 40ec 	strb.w	r4, [r5, #236]	@ 0xec
    FunctionsList[i].ObjectPtr = 0U;
 800715a:	f8c5 40f0 	str.w	r4, [r5, #240]	@ 0xf0
    FunctionsList[i].IsBusy = false;
 800715e:	f885 40f4 	strb.w	r4, [r5, #244]	@ 0xf4
    FunctionsList[i].IsRunning = false;
 8007162:	f885 40f5 	strb.w	r4, [r5, #245]	@ 0xf5
    fChrono_Stop(&FunctionsList[i]._chrono);
 8007166:	f105 00d0 	add.w	r0, r5, #208	@ 0xd0
 800716a:	f7fe fb5d 	bl	8005828 <fChrono_Stop>
    FunctionsList[i].Function = NULL;
 800716e:	f8c5 40f8 	str.w	r4, [r5, #248]	@ 0xf8
    if(memset(FunctionsList[i].Param, 0x00, sizeof(FunctionsList[i].Param)) == NULL) {
 8007172:	4632      	mov	r2, r6
 8007174:	4621      	mov	r1, r4
 8007176:	f105 00fc 	add.w	r0, r5, #252	@ 0xfc
 800717a:	f002 fd13 	bl	8009ba4 <memset>
    FunctionsList[i].IsFirstRun = false;
 800717e:	f885 41c4 	strb.w	r4, [r5, #452]	@ 0x1c4
    FunctionsList[i]._result = 0U;
 8007182:	f885 41dc 	strb.w	r4, [r5, #476]	@ 0x1dc
    FunctionsList[i].fpUserTerminalCallback = NULL;
 8007186:	f8c5 41e0 	str.w	r4, [r5, #480]	@ 0x1e0
    FunctionsList[i].Status = eFN_STATUS_STOP;
 800718a:	f885 41e4 	strb.w	r4, [r5, #484]	@ 0x1e4
    FunctionsList[i].ObjectPtr = 0U;
 800718e:	f8c5 41e8 	str.w	r4, [r5, #488]	@ 0x1e8
    FunctionsList[i].IsBusy = false;
 8007192:	f885 41ec 	strb.w	r4, [r5, #492]	@ 0x1ec
    FunctionsList[i].IsRunning = false;
 8007196:	f885 41ed 	strb.w	r4, [r5, #493]	@ 0x1ed
    fChrono_Stop(&FunctionsList[i]._chrono);
 800719a:	f505 70e4 	add.w	r0, r5, #456	@ 0x1c8
 800719e:	f7fe fb43 	bl	8005828 <fChrono_Stop>
}
 80071a2:	4620      	mov	r0, r4
 80071a4:	bd70      	pop	{r4, r5, r6, pc}
 80071a6:	bf00      	nop
 80071a8:	20002844 	.word	0x20002844

080071ac <fFaraabinFunctionEngine_Run>:
void fFaraabinFunctionEngine_Run(void) {
 80071ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	b08c      	sub	sp, #48	@ 0x30
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 80071b2:	4c2f      	ldr	r4, [pc, #188]	@ (8007270 <fFaraabinFunctionEngine_Run+0xc4>)
 80071b4:	f504 77f8 	add.w	r7, r4, #496	@ 0x1f0
 80071b8:	e006      	b.n	80071c8 <fFaraabinFunctionEngine_Run+0x1c>
				fChrono_Start(&(item->_chrono));
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7fe faea 	bl	8005794 <fChrono_Start>
 80071c0:	e010      	b.n	80071e4 <fFaraabinFunctionEngine_Run+0x38>
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 80071c2:	34f8      	adds	r4, #248	@ 0xf8
 80071c4:	42bc      	cmp	r4, r7
 80071c6:	d04f      	beq.n	8007268 <fFaraabinFunctionEngine_Run+0xbc>
    if(item->IsRunning == false) {
 80071c8:	4625      	mov	r5, r4
 80071ca:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f7      	beq.n	80071c2 <fFaraabinFunctionEngine_Run+0x16>
    if(item->Function->FunctionPtr != NULL) {
 80071d2:	f854 3cd0 	ldr.w	r3, [r4, #-208]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f2      	beq.n	80071c2 <fFaraabinFunctionEngine_Run+0x16>
			if(item->IsFirstRun) {
 80071dc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1ea      	bne.n	80071ba <fFaraabinFunctionEngine_Run+0xe>
      uint8_t res = item->Function->FunctionPtr(item->ObjectPtr, (char*)item->Param, item->IsFirstRun);
 80071e4:	f855 3cd0 	ldr.w	r3, [r5, #-208]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 80071ee:	f1a4 01cc 	sub.w	r1, r4, #204	@ 0xcc
 80071f2:	6a28      	ldr	r0, [r5, #32]
 80071f4:	4798      	blx	r3
 80071f6:	4606      	mov	r6, r0
      item->IsFirstRun = false;
 80071f8:	2300      	movs	r3, #0
 80071fa:	f805 3c04 	strb.w	r3, [r5, #-4]
      if(res != FUNCTION_CONTINUE) {
 80071fe:	28ff      	cmp	r0, #255	@ 0xff
 8007200:	d0df      	beq.n	80071c2 <fFaraabinFunctionEngine_Run+0x16>
        item->IsBusy = false;
 8007202:	4698      	mov	r8, r3
 8007204:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
        item->IsRunning = false;
 8007208:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
				executeUs.U32 = fChrono_ElapsedUs(&(item->_chrono));
 800720c:	4628      	mov	r0, r5
 800720e:	f7fe fb4d 	bl	80058ac <fChrono_ElapsedUs>
				arg[0] = res;
 8007212:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
				arg[1] = executeUs.Byte[0];
 8007216:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
				arg[2] = executeUs.Byte[1];
 800721a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800721e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
				arg[3] = executeUs.Byte[2];
 8007222:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8007226:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
				arg[4] = executeUs.Byte[3];
 800722a:	f3c0 6007 	ubfx	r0, r0, #24, #8
 800722e:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
        Faraabin_EventSystemExtended_ParamEnd_((uint32_t)item->Function, item->ObjectPtr, &(item->Function->Seq), true, eFN_EVENT_INFO_STOP, arg, sizeof(arg));
 8007232:	f855 0cd0 	ldr.w	r0, [r5, #-208]
 8007236:	2301      	movs	r3, #1
 8007238:	9309      	str	r3, [sp, #36]	@ 0x24
 800723a:	f8cd 8020 	str.w	r8, [sp, #32]
 800723e:	f8cd 801c 	str.w	r8, [sp, #28]
 8007242:	f8cd 8018 	str.w	r8, [sp, #24]
 8007246:	f8cd 8014 	str.w	r8, [sp, #20]
 800724a:	2205      	movs	r2, #5
 800724c:	9204      	str	r2, [sp, #16]
 800724e:	aa0a      	add	r2, sp, #40	@ 0x28
 8007250:	9203      	str	r2, [sp, #12]
 8007252:	2202      	movs	r2, #2
 8007254:	9202      	str	r2, [sp, #8]
 8007256:	f8cd 8004 	str.w	r8, [sp, #4]
 800725a:	9200      	str	r2, [sp, #0]
 800725c:	f100 020c 	add.w	r2, r0, #12
 8007260:	6a29      	ldr	r1, [r5, #32]
 8007262:	f002 f99d 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8007266:	e7ac      	b.n	80071c2 <fFaraabinFunctionEngine_Run+0x16>
}
 8007268:	b00c      	add	sp, #48	@ 0x30
 800726a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800726e:	bf00      	nop
 8007270:	20002914 	.word	0x20002914

08007274 <fFaraabinFunctionEngine_Start>:
uint8_t fFaraabinFunctionEngine_Start(uint32_t functionPtr, uint32_t objectPtr, uint8_t* arg, uint16_t argSize) {
 8007274:	b530      	push	{r4, r5, lr}
 */
static sFaraabinFunctionEngine_Item* fFindRunningFunction(uint32_t functionPtr, uint32_t objectPtr) {
  
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
    
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 8007276:	4c28      	ldr	r4, [pc, #160]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 8007278:	6824      	ldr	r4, [r4, #0]
 800727a:	4284      	cmp	r4, r0
 800727c:	d00f      	beq.n	800729e <fFaraabinFunctionEngine_Start+0x2a>
 800727e:	4c26      	ldr	r4, [pc, #152]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 8007280:	f8d4 40f8 	ldr.w	r4, [r4, #248]	@ 0xf8
 8007284:	4284      	cmp	r4, r0
 8007286:	d016      	beq.n	80072b6 <fFaraabinFunctionEngine_Start+0x42>
 */
static uint8_t fFaraabinFn_GetFreeIndex(void) {
  
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
    
    if(FunctionsList[i].IsBusy == false) {
 8007288:	4c23      	ldr	r4, [pc, #140]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 800728a:	f894 40f4 	ldrb.w	r4, [r4, #244]	@ 0xf4
 800728e:	b1f4      	cbz	r4, 80072ce <fFaraabinFunctionEngine_Start+0x5a>
 8007290:	4c21      	ldr	r4, [pc, #132]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 8007292:	f894 41ec 	ldrb.w	r4, [r4, #492]	@ 0x1ec
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 8007296:	2501      	movs	r5, #1
    if(FunctionsList[i].IsBusy == false) {
 8007298:	b1d4      	cbz	r4, 80072d0 <fFaraabinFunctionEngine_Start+0x5c>
    return FB_FENGINE_MAX_CONCURRENT_LIMIT_REACHED;
 800729a:	2002      	movs	r0, #2
}
 800729c:	bd30      	pop	{r4, r5, pc}
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 800729e:	4c1e      	ldr	r4, [pc, #120]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 80072a0:	f8d4 40f0 	ldr.w	r4, [r4, #240]	@ 0xf0
 80072a4:	42a1      	cmp	r1, r4
 80072a6:	d1ea      	bne.n	800727e <fFaraabinFunctionEngine_Start+0xa>
      if(FunctionsList[i].IsRunning) {
 80072a8:	4c1b      	ldr	r4, [pc, #108]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 80072aa:	f894 40f5 	ldrb.w	r4, [r4, #245]	@ 0xf5
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	d0e5      	beq.n	800727e <fFaraabinFunctionEngine_Start+0xa>
    return FB_FENGINE_FUNCTION_ALREADY_RUNNING;
 80072b2:	2001      	movs	r0, #1
 80072b4:	e7f2      	b.n	800729c <fFaraabinFunctionEngine_Start+0x28>
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 80072b6:	4c18      	ldr	r4, [pc, #96]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 80072b8:	f8d4 41e8 	ldr.w	r4, [r4, #488]	@ 0x1e8
 80072bc:	42a1      	cmp	r1, r4
 80072be:	d1e3      	bne.n	8007288 <fFaraabinFunctionEngine_Start+0x14>
      if(FunctionsList[i].IsRunning) {
 80072c0:	4c15      	ldr	r4, [pc, #84]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 80072c2:	f894 41ed 	ldrb.w	r4, [r4, #493]	@ 0x1ed
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	d0de      	beq.n	8007288 <fFaraabinFunctionEngine_Start+0x14>
    return FB_FENGINE_FUNCTION_ALREADY_RUNNING;
 80072ca:	2001      	movs	r0, #1
 80072cc:	e7e6      	b.n	800729c <fFaraabinFunctionEngine_Start+0x28>
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 80072ce:	2500      	movs	r5, #0
      
      return i;
 80072d0:	b2ed      	uxtb	r5, r5
  for(uint16_t i = 0; i < argSize; i++) {
 80072d2:	b163      	cbz	r3, 80072ee <fFaraabinFunctionEngine_Start+0x7a>
 80072d4:	4694      	mov	ip, r2
 80072d6:	ebc5 1e45 	rsb	lr, r5, r5, lsl #5
 80072da:	4c10      	ldr	r4, [pc, #64]	@ (800731c <fFaraabinFunctionEngine_Start+0xa8>)
 80072dc:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 80072e0:	441a      	add	r2, r3
    FunctionsList[freeIndex].Param[i] = arg[i];
 80072e2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80072e6:	f80e 4f01 	strb.w	r4, [lr, #1]!
  for(uint16_t i = 0; i < argSize; i++) {
 80072ea:	4594      	cmp	ip, r2
 80072ec:	d1f9      	bne.n	80072e2 <fFaraabinFunctionEngine_Start+0x6e>
  FunctionsList[freeIndex].Param[argSize] = 0x00U;
 80072ee:	4c0a      	ldr	r4, [pc, #40]	@ (8007318 <fFaraabinFunctionEngine_Start+0xa4>)
 80072f0:	ebc5 1e45 	rsb	lr, r5, r5, lsl #5
 80072f4:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 80072f8:	4463      	add	r3, ip
 80072fa:	2200      	movs	r2, #0
 80072fc:	711a      	strb	r2, [r3, #4]
  FunctionsList[freeIndex].ObjectPtr = objectPtr;
 80072fe:	f8cc 10f0 	str.w	r1, [ip, #240]	@ 0xf0
  FunctionsList[freeIndex].IsFirstRun = true;
 8007302:	2301      	movs	r3, #1
 8007304:	f88c 30cc 	strb.w	r3, [ip, #204]	@ 0xcc
  FunctionsList[freeIndex].Function = (sFaraabinFobjectFunction*)functionPtr;
 8007308:	f844 003e 	str.w	r0, [r4, lr, lsl #3]
  FunctionsList[freeIndex].IsBusy = true;
 800730c:	f88c 30f4 	strb.w	r3, [ip, #244]	@ 0xf4
  FunctionsList[freeIndex].IsRunning = true;
 8007310:	f88c 30f5 	strb.w	r3, [ip, #245]	@ 0xf5
  return FB_FENGINE_FUNCTION_CMD_OK;
 8007314:	4610      	mov	r0, r2
 8007316:	e7c1      	b.n	800729c <fFaraabinFunctionEngine_Start+0x28>
 8007318:	20002844 	.word	0x20002844
 800731c:	20002847 	.word	0x20002847

08007320 <fFaraabinFunctionEngine_Stop>:
uint8_t fFaraabinFunctionEngine_Stop(uint32_t functionPtr, uint32_t objectPtr) {
 8007320:	b508      	push	{r3, lr}
  sFaraabinFunctionEngine_Item* item = (sFaraabinFunctionEngine_Item*)fFindFunction(functionPtr, objectPtr);
 8007322:	f7ff fee5 	bl	80070f0 <fFindFunction>
  if(item == NULL) {
 8007326:	b130      	cbz	r0, 8007336 <fFaraabinFunctionEngine_Stop+0x16>
 8007328:	4603      	mov	r3, r0
  item->IsBusy = false;
 800732a:	2000      	movs	r0, #0
 800732c:	f883 00f4 	strb.w	r0, [r3, #244]	@ 0xf4
  item->IsRunning = false;
 8007330:	f883 00f5 	strb.w	r0, [r3, #245]	@ 0xf5
}
 8007334:	bd08      	pop	{r3, pc}
    return FB_FENGINE_FUNCTION_NOT_IN_LIST;
 8007336:	2003      	movs	r0, #3
 8007338:	e7fc      	b.n	8007334 <fFaraabinFunctionEngine_Stop+0x14>

0800733a <fFaraabinFunctionEngine_Pause>:
uint8_t fFaraabinFunctionEngine_Pause(uint32_t functionPtr, uint32_t objectPtr) {
 800733a:	b508      	push	{r3, lr}
  sFaraabinFunctionEngine_Item* item = (sFaraabinFunctionEngine_Item*)fFindFunction(functionPtr, objectPtr);
 800733c:	f7ff fed8 	bl	80070f0 <fFindFunction>
  if(item == NULL) {
 8007340:	b138      	cbz	r0, 8007352 <fFaraabinFunctionEngine_Pause+0x18>
 8007342:	4603      	mov	r3, r0
  item->IsBusy = true;
 8007344:	2201      	movs	r2, #1
 8007346:	f880 20f4 	strb.w	r2, [r0, #244]	@ 0xf4
  item->IsRunning = false;
 800734a:	2000      	movs	r0, #0
 800734c:	f883 00f5 	strb.w	r0, [r3, #245]	@ 0xf5
}
 8007350:	bd08      	pop	{r3, pc}
    return FB_FENGINE_FUNCTION_NOT_IN_LIST;
 8007352:	2003      	movs	r0, #3
 8007354:	e7fc      	b.n	8007350 <fFaraabinFunctionEngine_Pause+0x16>

08007356 <fFaraabinFunctionEngine_Resume>:
uint8_t fFaraabinFunctionEngine_Resume(uint32_t functionPtr, uint32_t objectPtr) {
 8007356:	b508      	push	{r3, lr}
  sFaraabinFunctionEngine_Item* item = (sFaraabinFunctionEngine_Item*)fFindFunction(functionPtr, objectPtr);
 8007358:	f7ff feca 	bl	80070f0 <fFindFunction>
  if(item == NULL) {
 800735c:	b130      	cbz	r0, 800736c <fFaraabinFunctionEngine_Resume+0x16>
  item->IsBusy = true;
 800735e:	2201      	movs	r2, #1
 8007360:	f880 20f4 	strb.w	r2, [r0, #244]	@ 0xf4
  item->IsRunning = true;
 8007364:	f880 20f5 	strb.w	r2, [r0, #245]	@ 0xf5
  return FB_FENGINE_FUNCTION_CMD_OK;
 8007368:	2000      	movs	r0, #0
}
 800736a:	bd08      	pop	{r3, pc}
    return FB_FENGINE_FUNCTION_NOT_IN_LIST;
 800736c:	2003      	movs	r0, #3
 800736e:	e7fc      	b.n	800736a <fFaraabinFunctionEngine_Resume+0x14>

08007370 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions>:
    if(FunctionsList[i].IsRunning == true) {
 8007370:	4b03      	ldr	r3, [pc, #12]	@ (8007380 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions+0x10>)
 8007372:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 8007376:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800737a:	b103      	cbz	r3, 800737e <fFaraabinFunctionEngine_GetQtyOfRunningFunctions+0xe>
      cnt++;
 800737c:	3001      	adds	r0, #1
}
 800737e:	4770      	bx	lr
 8007380:	20002844 	.word	0x20002844

08007384 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction>:
uint8_t fFaraabinFunctionEngine_GetPtrsOfRunningFunction(uint16_t index, uint32_t *ptr, uint32_t *objectPtr) {
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	460e      	mov	r6, r1
 800738a:	4615      	mov	r5, r2
  if(index >= fFaraabinFunctionEngine_GetQtyOfRunningFunctions()) {
 800738c:	f7ff fff0 	bl	8007370 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions>
 8007390:	42a0      	cmp	r0, r4
 8007392:	d921      	bls.n	80073d8 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x54>
    if(FunctionsList[i].IsRunning == true) {
 8007394:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x5c>)
 8007396:	f893 30f5 	ldrb.w	r3, [r3, #245]	@ 0xf5
 800739a:	b113      	cbz	r3, 80073a2 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x1e>
      if(cnt == index) {
 800739c:	b164      	cbz	r4, 80073b8 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x34>
      cnt++;
 800739e:	2201      	movs	r2, #1
 80073a0:	e000      	b.n	80073a4 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x20>
  uint16_t cnt = 0;
 80073a2:	2200      	movs	r2, #0
    if(FunctionsList[i].IsRunning == true) {
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x5c>)
 80073a6:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80073aa:	b1bb      	cbz	r3, 80073dc <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x58>
      if(cnt == index) {
 80073ac:	4294      	cmp	r4, r2
    if(FunctionsList[i].IsRunning == true) {
 80073ae:	bf08      	it	eq
 80073b0:	2301      	moveq	r3, #1
      if(cnt == index) {
 80073b2:	d002      	beq.n	80073ba <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x36>
  return 0;
 80073b4:	2000      	movs	r0, #0
 80073b6:	e010      	b.n	80073da <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x56>
    if(FunctionsList[i].IsRunning == true) {
 80073b8:	2300      	movs	r3, #0
        *ptr = (uint32_t)FunctionsList[i].Function;
 80073ba:	4a09      	ldr	r2, [pc, #36]	@ (80073e0 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x5c>)
 80073bc:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 80073c0:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
 80073c4:	6031      	str	r1, [r6, #0]
        *objectPtr = FunctionsList[i].ObjectPtr;
 80073c6:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 80073ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80073ce:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 80073d2:	602b      	str	r3, [r5, #0]
  return 0;
 80073d4:	2000      	movs	r0, #0
        break;
 80073d6:	e000      	b.n	80073da <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x56>
    return 1;
 80073d8:	2001      	movs	r0, #1
}
 80073da:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 80073dc:	2000      	movs	r0, #0
 80073de:	e7fc      	b.n	80073da <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x56>
 80073e0:	20002844 	.word	0x20002844

080073e4 <fFaraabinFunctionEngine_GetRamUsage>:
 * @return usage Amount of bytes dedicated to Faraabin function feature. 
 */
uint32_t fFaraabinFunctionEngine_GetRamUsage(void) {
	
	return sizeof(sFaraabinFunctionEngine_Item) * FB_MAX_CONCURRENT_FUNCTION;
}
 80073e4:	f44f 70f8 	mov.w	r0, #496	@ 0x1f0
 80073e8:	4770      	bx	lr
	...

080073ec <fFaraabinLinkBuffer_GetRamUsage>:
 * 
 * @return usage Amount of RAM used by Faraabin link in bytes.
 */
uint32_t fFaraabinLinkBuffer_GetRamUsage(void) {
	
	return sizeof(sFaraabinLinkBuffer) + FbCircularBuffer.Size;
 80073ec:	4b01      	ldr	r3, [pc, #4]	@ (80073f4 <fFaraabinLinkBuffer_GetRamUsage+0x8>)
 80073ee:	6858      	ldr	r0, [r3, #4]
}
 80073f0:	3018      	adds	r0, #24
 80073f2:	4770      	bx	lr
 80073f4:	20002a34 	.word	0x20002a34

080073f8 <fFaraabinLinkBuffer_Clear>:

void fFaraabinLinkBuffer_Clear(void) {
	
	FbCircularBuffer._head = 0U;
 80073f8:	4b08      	ldr	r3, [pc, #32]	@ (800741c <fFaraabinLinkBuffer_Clear+0x24>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]
  FbCircularBuffer._tail = 0U;
 80073fe:	60da      	str	r2, [r3, #12]
  FbCircularBuffer._isFull = false;
 8007400:	751a      	strb	r2, [r3, #20]
  FbCircularBuffer._count = 0U;
 8007402:	611a      	str	r2, [r3, #16]
  
  for(uint32_t i = 0; i < FbCircularBuffer.Size; i++) {
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	b143      	cbz	r3, 800741a <fFaraabinLinkBuffer_Clear+0x22>
 8007408:	4613      	mov	r3, r2
    FbCircularBuffer.Buffer[i] = 0x00U;
 800740a:	4a04      	ldr	r2, [pc, #16]	@ (800741c <fFaraabinLinkBuffer_Clear+0x24>)
 800740c:	4618      	mov	r0, r3
 800740e:	6811      	ldr	r1, [r2, #0]
 8007410:	54c8      	strb	r0, [r1, r3]
  for(uint32_t i = 0; i < FbCircularBuffer.Size; i++) {
 8007412:	3301      	adds	r3, #1
 8007414:	6851      	ldr	r1, [r2, #4]
 8007416:	4299      	cmp	r1, r3
 8007418:	d8f9      	bhi.n	800740e <fFaraabinLinkBuffer_Clear+0x16>
  }
}
 800741a:	4770      	bx	lr
 800741c:	20002a34 	.word	0x20002a34

08007420 <fFaraabinLinkBuffer_Init>:
  if(size == 0U) {
 8007420:	b189      	cbz	r1, 8007446 <fFaraabinLinkBuffer_Init+0x26>
uint8_t fFaraabinLinkBuffer_Init(uint8_t *txBuffer, uint32_t size) {
 8007422:	b508      	push	{r3, lr}
  FbCircularBuffer.Size = size;
 8007424:	4a09      	ldr	r2, [pc, #36]	@ (800744c <fFaraabinLinkBuffer_Init+0x2c>)
 8007426:	6051      	str	r1, [r2, #4]
  if(txBuffer != NULL) {
 8007428:	b120      	cbz	r0, 8007434 <fFaraabinLinkBuffer_Init+0x14>
    FbCircularBuffer.Buffer = txBuffer;
 800742a:	6010      	str	r0, [r2, #0]
  fFaraabinLinkBuffer_Clear();
 800742c:	f7ff ffe4 	bl	80073f8 <fFaraabinLinkBuffer_Clear>
  return 0;
 8007430:	2000      	movs	r0, #0
}
 8007432:	bd08      	pop	{r3, pc}
    FbCircularBuffer.Buffer = malloc(FbCircularBuffer.Size);
 8007434:	4608      	mov	r0, r1
 8007436:	f002 fabd 	bl	80099b4 <malloc>
 800743a:	4b04      	ldr	r3, [pc, #16]	@ (800744c <fFaraabinLinkBuffer_Init+0x2c>)
 800743c:	6018      	str	r0, [r3, #0]
    if(FbCircularBuffer.Buffer == NULL) {
 800743e:	2800      	cmp	r0, #0
 8007440:	d1f4      	bne.n	800742c <fFaraabinLinkBuffer_Init+0xc>
      return 1;
 8007442:	2001      	movs	r0, #1
 8007444:	e7f5      	b.n	8007432 <fFaraabinLinkBuffer_Init+0x12>
    return 1;
 8007446:	2001      	movs	r0, #1
}
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	20002a34 	.word	0x20002a34

08007450 <fFaraaninLinkDeserializer_Deserialize>:
static uint16_t fDeEscape(uint8_t *buffer, uint16_t size) {
  
  uint16_t j = 0;
  uint16_t deescape_size = size;
  
  for (uint16_t i = 0; i < size;) {
 8007450:	2900      	cmp	r1, #0
 8007452:	d04b      	beq.n	80074ec <fFaraaninLinkDeserializer_Deserialize+0x9c>
uint8_t fFaraaninLinkDeserializer_Deserialize(uint8_t * const buffer, uint16_t size, sClientFrame *deserializedFrame) {
 8007454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007456:	460d      	mov	r5, r1
  uint16_t deescape_size = size;
 8007458:	460c      	mov	r4, r1
  for (uint16_t i = 0; i < size;) {
 800745a:	f04f 0e01 	mov.w	lr, #1
 800745e:	2300      	movs	r3, #0
          j++;
          break;
        }
        
        case 0x5D: {
          buffer[j] = (0x7DU);
 8007460:	277d      	movs	r7, #125	@ 0x7d
          buffer[j] = (0x7EU);
 8007462:	267e      	movs	r6, #126	@ 0x7e
 8007464:	e00f      	b.n	8007486 <fFaraaninLinkDeserializer_Deserialize+0x36>
          buffer[j] = (0x7DU);
 8007466:	5447      	strb	r7, [r0, r1]
          
          deescape_size--;
 8007468:	3c01      	subs	r4, #1
 800746a:	b2a4      	uxth	r4, r4
          i += 2U;
 800746c:	3302      	adds	r3, #2
 800746e:	b29b      	uxth	r3, r3
          j++;
          break;
 8007470:	e003      	b.n	800747a <fFaraaninLinkDeserializer_Deserialize+0x2a>
        return 0;
      }

    } else {
      
      buffer[j] = buffer[i];
 8007472:	f800 c001 	strb.w	ip, [r0, r1]
      i++;
 8007476:	3301      	adds	r3, #1
 8007478:	b29b      	uxth	r3, r3
  for (uint16_t i = 0; i < size;) {
 800747a:	f10e 0101 	add.w	r1, lr, #1
 800747e:	fa1f fe81 	uxth.w	lr, r1
 8007482:	429d      	cmp	r5, r3
 8007484:	d917      	bls.n	80074b6 <fFaraaninLinkDeserializer_Deserialize+0x66>
 8007486:	f10e 31ff 	add.w	r1, lr, #4294967295
 800748a:	b289      	uxth	r1, r1
    if (buffer[i] == (0x7DU)) {
 800748c:	f810 c003 	ldrb.w	ip, [r0, r3]
 8007490:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8007494:	d1ed      	bne.n	8007472 <fFaraaninLinkDeserializer_Deserialize+0x22>
      switch (buffer[i + 1U]) {
 8007496:	eb00 0c03 	add.w	ip, r0, r3
 800749a:	f89c c001 	ldrb.w	ip, [ip, #1]
 800749e:	f1bc 0f5d 	cmp.w	ip, #93	@ 0x5d
 80074a2:	d0e0      	beq.n	8007466 <fFaraaninLinkDeserializer_Deserialize+0x16>
 80074a4:	f1bc 0f5e 	cmp.w	ip, #94	@ 0x5e
 80074a8:	d122      	bne.n	80074f0 <fFaraaninLinkDeserializer_Deserialize+0xa0>
          buffer[j] = (0x7EU);
 80074aa:	5446      	strb	r6, [r0, r1]
          deescape_size--;
 80074ac:	3c01      	subs	r4, #1
 80074ae:	b2a4      	uxth	r4, r4
          i += 2U;
 80074b0:	3302      	adds	r3, #2
 80074b2:	b29b      	uxth	r3, r3
          break;
 80074b4:	e7e1      	b.n	800747a <fFaraaninLinkDeserializer_Deserialize+0x2a>
  if(deescapedSize == 0U) {
 80074b6:	b1ec      	cbz	r4, 80074f4 <fFaraaninLinkDeserializer_Deserialize+0xa4>
  if(deescapedSize < MINIMUM_FRAME_SIZE) {
 80074b8:	2c06      	cmp	r4, #6
 80074ba:	d91d      	bls.n	80074f8 <fFaraaninLinkDeserializer_Deserialize+0xa8>
 80074bc:	4601      	mov	r1, r0
 80074be:	1826      	adds	r6, r4, r0
 * @param size Size of the frame.
 * @return ChecksuIsValid true if valid and false if it is incorrect.
 */
static bool fIsChecksumOk(uint8_t *buffer, uint16_t size) {
  
  uint8_t checksum = 0;
 80074c0:	2300      	movs	r3, #0
  
  for (uint16_t i = 0; i < size; i++) {
    
    checksum += buffer[i];
 80074c2:	f811 5b01 	ldrb.w	r5, [r1], #1
 80074c6:	442b      	add	r3, r5
 80074c8:	b2db      	uxtb	r3, r3
  for (uint16_t i = 0; i < size; i++) {
 80074ca:	428e      	cmp	r6, r1
 80074cc:	d1f9      	bne.n	80074c2 <fFaraaninLinkDeserializer_Deserialize+0x72>
  if(!fIsChecksumOk(buffer, deescapedSize)) {
 80074ce:	2bff      	cmp	r3, #255	@ 0xff
 80074d0:	d114      	bne.n	80074fc <fFaraaninLinkDeserializer_Deserialize+0xac>
	deserializedFrame->Control = buffer[0];
 80074d2:	7803      	ldrb	r3, [r0, #0]
 80074d4:	7013      	strb	r3, [r2, #0]
	deserializedFrame->FobjectProperty = buffer[1];
 80074d6:	7843      	ldrb	r3, [r0, #1]
 80074d8:	7053      	strb	r3, [r2, #1]
	if(memcpy(&deserializedFrame->FobjectPtr, &buffer[2], sizeof(deserializedFrame->FobjectPtr)) == NULL) {
 80074da:	f8d0 3002 	ldr.w	r3, [r0, #2]
 80074de:	6053      	str	r3, [r2, #4]
	deserializedFrame->Payload = &buffer[6];
 80074e0:	3006      	adds	r0, #6
 80074e2:	6090      	str	r0, [r2, #8]
	deserializedFrame->PayloadSize = deescapedSize - MINIMUM_FRAME_SIZE;
 80074e4:	3c07      	subs	r4, #7
 80074e6:	8194      	strh	r4, [r2, #12]
  return DESERIALIZE_OK;
 80074e8:	2000      	movs	r0, #0
 80074ea:	e002      	b.n	80074f2 <fFaraaninLinkDeserializer_Deserialize+0xa2>
    return DESERIALIZE_ERROR_DEESCAPE;
 80074ec:	2002      	movs	r0, #2
}
 80074ee:	4770      	bx	lr
    return DESERIALIZE_ERROR_DEESCAPE;
 80074f0:	2002      	movs	r0, #2
}
 80074f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return DESERIALIZE_ERROR_DEESCAPE;
 80074f4:	2002      	movs	r0, #2
 80074f6:	e7fc      	b.n	80074f2 <fFaraaninLinkDeserializer_Deserialize+0xa2>
    return DESERIALIZE_ERROR_MINIMUM_FRAME_SIZE;
 80074f8:	2001      	movs	r0, #1
 80074fa:	e7fa      	b.n	80074f2 <fFaraaninLinkDeserializer_Deserialize+0xa2>
    return DESERIALIZE_ERROR_CHECKSUM;
 80074fc:	2003      	movs	r0, #3
 80074fe:	e7f8      	b.n	80074f2 <fFaraaninLinkDeserializer_Deserialize+0xa2>

08007500 <fFrameHandler>:
/**
 * @brief Handles new valid frame.
 * 
 * @param LinkHandler.ClientFrame Pointer to the client frame.
 */
static void fFrameHandler(sClientFrame *clientFrame) {
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	b08f      	sub	sp, #60	@ 0x3c
 8007506:	4604      	mov	r4, r0
  
  uint8_t *fobjectType = (clientFrame->FobjectPtr == 0xFFFFFFFFU) ? (uint8_t*)fFaraabinFobjectMcu_GetFobject() : (uint8_t*)clientFrame->FobjectPtr;
 8007508:	6843      	ldr	r3, [r0, #4]
 800750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750e:	d016      	beq.n	800753e <fFrameHandler+0x3e>

  switch((eFaraabin_FobjectType)*fobjectType) {
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b10      	cmp	r3, #16
 8007514:	f200 8774 	bhi.w	8008400 <fFrameHandler+0xf00>
 8007518:	e8df f013 	tbh	[pc, r3, lsl #1]
 800751c:	07720031 	.word	0x07720031
 8007520:	07720772 	.word	0x07720772
 8007524:	05e1071c 	.word	0x05e1071c
 8007528:	07720772 	.word	0x07720772
 800752c:	077201fa 	.word	0x077201fa
 8007530:	07780778 	.word	0x07780778
 8007534:	07720772 	.word	0x07720772
 8007538:	07780772 	.word	0x07780772
 800753c:	0778      	.short	0x0778
  uint8_t *fobjectType = (clientFrame->FobjectPtr == 0xFFFFFFFFU) ? (uint8_t*)fFaraabinFobjectMcu_GetFobject() : (uint8_t*)clientFrame->FobjectPtr;
 800753e:	f7ff fdb7 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
  switch((eFaraabin_FobjectType)*fobjectType) {
 8007542:	7803      	ldrb	r3, [r0, #0]
 8007544:	2b10      	cmp	r3, #16
 8007546:	f200 875b 	bhi.w	8008400 <fFrameHandler+0xf00>
 800754a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800754e:	0011      	.short	0x0011
 8007550:	07590759 	.word	0x07590759
 8007554:	07030759 	.word	0x07030759
 8007558:	075905c8 	.word	0x075905c8
 800755c:	01e10759 	.word	0x01e10759
 8007560:	075f0759 	.word	0x075f0759
 8007564:	0759075f 	.word	0x0759075f
 8007568:	07590759 	.word	0x07590759
 800756c:	075f075f 	.word	0x075f075f
  
  #ifdef FARAABIN_ENABLE
  
  bool errorFobjectProperty = false;
  
  if(clientFrame->FobjectPtr == 0xFFFFFFFFU) {
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d102      	bne.n	800757e <fFrameHandler+0x7e>
    clientFrame->FobjectPtr = (uint32_t)fFaraabinFobjectMcu_GetFobject();
 8007578:	f7ff fd9a 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 800757c:	6060      	str	r0, [r4, #4]
  }

  sFaraabinFobjectMcu *mcuHandle = (sFaraabinFobjectMcu*)clientFrame->FobjectPtr;
 800757e:	6865      	ldr	r5, [r4, #4]
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 8007580:	7863      	ldrb	r3, [r4, #1]
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
 8007582:	f003 011f 	and.w	r1, r3, #31
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 8007586:	7822      	ldrb	r2, [r4, #0]
 8007588:	f002 060f 	and.w	r6, r2, #15
  uint8_t controlAccessType = ClientFrame_GetAccessType_(clientFrame->Control);
 800758c:	f3c2 1280 	ubfx	r2, r2, #6, #1

  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	2b04      	cmp	r3, #4
 8007594:	f200 8193 	bhi.w	80078be <fFrameHandler+0x3be>
 8007598:	e8df f013 	tbh	[pc, r3, lsl #1]
 800759c:	00260005 	.word	0x00260005
 80075a0:	00db0050 	.word	0x00db0050
 80075a4:	018f      	.short	0x018f
    
    case eFB_PROP_GROUP_DICT: {
      
      uByte2 dictIndex;
      dictIndex.Byte[0] = clientFrame->Payload[0];
 80075a6:	68a2      	ldr	r2, [r4, #8]
 80075a8:	7811      	ldrb	r1, [r2, #0]
 80075aa:	f04f 0300 	mov.w	r3, #0
 80075ae:	f361 0307 	bfi	r3, r1, #0, #8
      dictIndex.Byte[1] = clientFrame->Payload[1];
 80075b2:	7852      	ldrb	r2, [r2, #1]
 80075b4:	f362 230f 	bfi	r3, r2, #8, #8
      
      if(dictIndex.U16 >= fFaraabinDatabase_GetNumberOfAddedDicts()) {
 80075b8:	b29c      	uxth	r4, r3
 80075ba:	f7fe fb4b 	bl	8005c54 <fFaraabinDatabase_GetNumberOfAddedDicts>
 80075be:	4284      	cmp	r4, r0
 80075c0:	d305      	bcc.n	80075ce <fFrameHandler+0xce>

        fFaraabinFobjectMcu_SendEventSystemExceptionResponse(eMCU_EVENT_ERROR_DICT_INDEX_OVERFLOW, controlReqSeq);
 80075c2:	4631      	mov	r1, r6
 80075c4:	200e      	movs	r0, #14
 80075c6:	f7ff fd59 	bl	800707c <fFaraabinFobjectMcu_SendEventSystemExceptionResponse>

        break;
 80075ca:	f000 bf1f 	b.w	800840c <fFrameHandler+0xf0c>
      }
      
      fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(dictIndex.U16), dictIndex.U16, controlReqSeq);
 80075ce:	4620      	mov	r0, r4
 80075d0:	f7fe fbac 	bl	8005d2c <fFaraabinDatabase_GetFobjectPointerFromDict>
 80075d4:	4632      	mov	r2, r6
 80075d6:	4621      	mov	r1, r4
 80075d8:	f002 f868 	bl	80096ac <fFaraabinLinkSerializer_SerializeDict>
      
      fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_DICT_END, controlReqSeq);
 80075dc:	4631      	mov	r1, r6
 80075de:	2001      	movs	r0, #1
 80075e0:	f7ff fd32 	bl	8007048 <fFaraabinFobjectMcu_SendEventSystemResponse>
      
      break;
 80075e4:	f000 bf12 	b.w	800840c <fFrameHandler+0xf0c>
    
    case eFB_PROP_GROUP_SETTING: {
      
      eFaraabinLinkSerializer_McuPropertyIdSetting propId = (eFaraabinLinkSerializer_McuPropertyIdSetting)framePropId;
      
      switch(propId) {
 80075e8:	b1a9      	cbz	r1, 8007616 <fFrameHandler+0x116>
 80075ea:	2902      	cmp	r1, #2
 80075ec:	f040 8167 	bne.w	80078be <fFrameHandler+0x3be>
          break;
        }
				
				case eFB_MCU_PROP_ID_SETTING_SEND_PROFILER_ENABLE: {
          
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 80075f0:	b132      	cbz	r2, 8007600 <fFrameHandler+0x100>

            sFaraabinFobjectMcu *obj = (sFaraabinFobjectMcu*)clientFrame->FobjectPtr;

            obj->IsSendingCpuProfiler = (*clientFrame->Payload == 0U) ? false : true;
 80075f2:	68a3      	ldr	r3, [r4, #8]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	3b00      	subs	r3, #0
 80075f8:	bf18      	it	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
          }
          
          if(controlReqSeq != 0U) {
 8007600:	2e00      	cmp	r6, #0
 8007602:	f000 8703 	beq.w	800840c <fFrameHandler+0xf0c>
						
						fFaraabinLinkSerializer_McuSendLive(clientFrame->FobjectPtr, &mcuHandle->Seq, controlReqSeq);
 8007606:	4632      	mov	r2, r6
 8007608:	f105 0110 	add.w	r1, r5, #16
 800760c:	6860      	ldr	r0, [r4, #4]
 800760e:	f002 f917 	bl	8009840 <fFaraabinLinkSerializer_McuSendLive>
      errorFobjectProperty = true;
      break;
    }
  }
  
  if(errorFobjectProperty) {
 8007612:	f000 befb 	b.w	800840c <fFrameHandler+0xf0c>
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 8007616:	b12a      	cbz	r2, 8007624 <fFrameHandler+0x124>
            obj->Enable = (*clientFrame->Payload == 0U) ? false : true;
 8007618:	68a3      	ldr	r3, [r4, #8]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	3b00      	subs	r3, #0
 800761e:	bf18      	it	ne
 8007620:	2301      	movne	r3, #1
 8007622:	70ab      	strb	r3, [r5, #2]
          if(controlReqSeq != 0U) {
 8007624:	2e00      	cmp	r6, #0
 8007626:	f000 86f1 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_CommonSendEnable(clientFrame->FobjectPtr, &mcuHandle->Seq, controlReqSeq, true);
 800762a:	2301      	movs	r3, #1
 800762c:	4632      	mov	r2, r6
 800762e:	f105 0110 	add.w	r1, r5, #16
 8007632:	6860      	ldr	r0, [r4, #4]
 8007634:	f002 f884 	bl	8009740 <fFaraabinLinkSerializer_CommonSendEnable>
  if(errorFobjectProperty) {
 8007638:	f000 bee8 	b.w	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 800763c:	2900      	cmp	r1, #0
 800763e:	f040 813e 	bne.w	80078be <fFrameHandler+0x3be>
          ptr.Byte[0] = clientFrame->Payload[0];
 8007642:	68a3      	ldr	r3, [r4, #8]
 8007644:	7819      	ldrb	r1, [r3, #0]
 8007646:	2700      	movs	r7, #0
 8007648:	f361 0707 	bfi	r7, r1, #0, #8
          ptr.Byte[1] = clientFrame->Payload[1];
 800764c:	7859      	ldrb	r1, [r3, #1]
 800764e:	f361 270f 	bfi	r7, r1, #8, #8
          ptr.Byte[2] = clientFrame->Payload[2];
 8007652:	7899      	ldrb	r1, [r3, #2]
 8007654:	f361 4717 	bfi	r7, r1, #16, #8
          ptr.Byte[3] = clientFrame->Payload[3];
 8007658:	78d9      	ldrb	r1, [r3, #3]
 800765a:	f361 671f 	bfi	r7, r1, #24, #8
          size.Byte[0] = clientFrame->Payload[4];
 800765e:	7919      	ldrb	r1, [r3, #4]
 8007660:	2400      	movs	r4, #0
 8007662:	f361 0407 	bfi	r4, r1, #0, #8
          size.Byte[1] = clientFrame->Payload[5];
 8007666:	7959      	ldrb	r1, [r3, #5]
 8007668:	f361 240f 	bfi	r4, r1, #8, #8
          size.Byte[2] = clientFrame->Payload[6];
 800766c:	7999      	ldrb	r1, [r3, #6]
 800766e:	f361 4417 	bfi	r4, r1, #16, #8
          size.Byte[3] = clientFrame->Payload[7];
 8007672:	79d9      	ldrb	r1, [r3, #7]
 8007674:	f361 641f 	bfi	r4, r1, #24, #8
          bool isExternal = (clientFrame->Payload[8] != 0U);
 8007678:	f893 a008 	ldrb.w	sl, [r3, #8]
          externalFuncPtr.Byte[0] = clientFrame->Payload[9];
 800767c:	7a59      	ldrb	r1, [r3, #9]
 800767e:	f04f 0800 	mov.w	r8, #0
 8007682:	f361 0807 	bfi	r8, r1, #0, #8
          externalFuncPtr.Byte[1] = clientFrame->Payload[10];
 8007686:	7a99      	ldrb	r1, [r3, #10]
 8007688:	f361 280f 	bfi	r8, r1, #8, #8
          externalFuncPtr.Byte[2] = clientFrame->Payload[11];
 800768c:	7ad9      	ldrb	r1, [r3, #11]
 800768e:	f361 4817 	bfi	r8, r1, #16, #8
          externalFuncPtr.Byte[3] = clientFrame->Payload[12];
 8007692:	7b19      	ldrb	r1, [r3, #12]
 8007694:	f361 681f 	bfi	r8, r1, #24, #8
          bool isAccessCb = (clientFrame->Payload[13] != 0U);
 8007698:	7b58      	ldrb	r0, [r3, #13]
          accessCbFuncPtr.Byte[0] = clientFrame->Payload[14];
 800769a:	7b99      	ldrb	r1, [r3, #14]
 800769c:	f04f 0900 	mov.w	r9, #0
 80076a0:	f361 0907 	bfi	r9, r1, #0, #8
          accessCbFuncPtr.Byte[1] = clientFrame->Payload[15];
 80076a4:	7bd9      	ldrb	r1, [r3, #15]
 80076a6:	f361 290f 	bfi	r9, r1, #8, #8
          accessCbFuncPtr.Byte[2] = clientFrame->Payload[16];
 80076aa:	7c19      	ldrb	r1, [r3, #16]
 80076ac:	f361 4917 	bfi	r9, r1, #16, #8
          accessCbFuncPtr.Byte[3] = clientFrame->Payload[17];
 80076b0:	7c59      	ldrb	r1, [r3, #17]
 80076b2:	f361 691f 	bfi	r9, r1, #24, #8
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 80076b6:	b312      	cbz	r2, 80076fe <fFrameHandler+0x1fe>
          uint8_t *valuePtr = &(clientFrame->Payload[18]);
 80076b8:	f103 0b12 	add.w	fp, r3, #18
            if(isAccessCb) {
 80076bc:	b140      	cbz	r0, 80076d0 <fFrameHandler+0x1d0>
              if(func != NULL) {
 80076be:	f1b8 0f00 	cmp.w	r8, #0
 80076c2:	d014      	beq.n	80076ee <fFrameHandler+0x1ee>
                uint8_t res = func(eVAR_ACCESS_TYPE_WRITE, ptr.U32, valuePtr, size.U32);
 80076c4:	b2a3      	uxth	r3, r4
 80076c6:	465a      	mov	r2, fp
 80076c8:	4639      	mov	r1, r7
 80076ca:	2001      	movs	r0, #1
 80076cc:	47c0      	blx	r8
                if(res != 0U) {
 80076ce:	e00e      	b.n	80076ee <fFrameHandler+0x1ee>
              for(uint32_t i = 0U; i < size.U32; i++) {
 80076d0:	b16c      	cbz	r4, 80076ee <fFrameHandler+0x1ee>
 80076d2:	f103 0211 	add.w	r2, r3, #17
 80076d6:	f104 0c11 	add.w	ip, r4, #17
 80076da:	449c      	add	ip, r3
                dst[i] = src[i];
 80076dc:	f1a7 0011 	sub.w	r0, r7, #17
 80076e0:	1ac0      	subs	r0, r0, r3
 80076e2:	1883      	adds	r3, r0, r2
 80076e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80076e8:	7019      	strb	r1, [r3, #0]
              for(uint32_t i = 0U; i < size.U32; i++) {
 80076ea:	4594      	cmp	ip, r2
 80076ec:	d1f9      	bne.n	80076e2 <fFrameHandler+0x1e2>
            if(func != NULL) {
 80076ee:	f1b9 0f00 	cmp.w	r9, #0
 80076f2:	d004      	beq.n	80076fe <fFrameHandler+0x1fe>
              uint8_t res = func(eVAR_ACCESS_TYPE_WRITE, ptr.U32, valuePtr, size.U32);
 80076f4:	b2a3      	uxth	r3, r4
 80076f6:	465a      	mov	r2, fp
 80076f8:	4639      	mov	r1, r7
 80076fa:	2001      	movs	r0, #1
 80076fc:	47c8      	blx	r9
          if(controlReqSeq != 0U) {
 80076fe:	2e00      	cmp	r6, #0
 8007700:	f000 8684 	beq.w	800840c <fFrameHandler+0xf0c>
            if(isExternal) {
 8007704:	f1ba 0f00 	cmp.w	sl, #0
 8007708:	d017      	beq.n	800773a <fFrameHandler+0x23a>
              if(func != NULL) {
 800770a:	f1b8 0f00 	cmp.w	r8, #0
 800770e:	f000 867d 	beq.w	800840c <fFrameHandler+0xf0c>
                uint8_t res = func(eVAR_ACCESS_TYPE_READ, ptr.U32, dataPtr, size.U32);
 8007712:	b2a3      	uxth	r3, r4
 8007714:	2200      	movs	r2, #0
 8007716:	4639      	mov	r1, r7
 8007718:	4610      	mov	r0, r2
 800771a:	47c0      	blx	r8
                if(res != 0U) {
 800771c:	2800      	cmp	r0, #0
 800771e:	f040 8675 	bne.w	800840c <fFrameHandler+0xf0c>
                  fFaraabinLinkSerializer_VarSendValue(ptr.U32, (uint32_t)dataPtr, size.U32, &mcuHandle->Seq, controlReqSeq, true);
 8007722:	2301      	movs	r3, #1
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	9600      	str	r6, [sp, #0]
 8007728:	f105 0310 	add.w	r3, r5, #16
 800772c:	4622      	mov	r2, r4
 800772e:	2100      	movs	r1, #0
 8007730:	4638      	mov	r0, r7
 8007732:	f002 f853 	bl	80097dc <fFaraabinLinkSerializer_VarSendValue>
 8007736:	f000 be69 	b.w	800840c <fFrameHandler+0xf0c>
              fFaraabinLinkSerializer_VarSendValue(ptr.U32, ptr.U32, size.U32, &mcuHandle->Seq, controlReqSeq, true);
 800773a:	2301      	movs	r3, #1
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	9600      	str	r6, [sp, #0]
 8007740:	f105 0310 	add.w	r3, r5, #16
 8007744:	4622      	mov	r2, r4
 8007746:	4639      	mov	r1, r7
 8007748:	4638      	mov	r0, r7
 800774a:	f002 f847 	bl	80097dc <fFaraabinLinkSerializer_VarSendValue>
  if(errorFobjectProperty) {
 800774e:	f000 be5d 	b.w	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 8007752:	2905      	cmp	r1, #5
 8007754:	f200 80b3 	bhi.w	80078be <fFrameHandler+0x3be>
 8007758:	e8df f001 	tbb	[pc, r1]
 800775c:	32220f03 	.word	0x32220f03
 8007760:	957d      	.short	0x957d
          if(controlReqSeq != 0U) {
 8007762:	2e00      	cmp	r6, #0
 8007764:	f000 8652 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_McuSendPing((uint32_t)mcuHandle, &mcuHandle->Seq, controlReqSeq, clientFrame->Payload);
 8007768:	68a3      	ldr	r3, [r4, #8]
 800776a:	4632      	mov	r2, r6
 800776c:	f105 0110 	add.w	r1, r5, #16
 8007770:	4628      	mov	r0, r5
 8007772:	f002 f851 	bl	8009818 <fFaraabinLinkSerializer_McuSendPing>
  if(errorFobjectProperty) {
 8007776:	f000 be49 	b.w	800840c <fFrameHandler+0xf0c>
          fChrono_Start(&(mcuHandle->ChronoLiveTimeout));
 800777a:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800777e:	f7fe f809 	bl	8005794 <fChrono_Start>
          mcuHandle->_isHostConnected = true;
 8007782:	2301      	movs	r3, #1
 8007784:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
          if(controlReqSeq != 0U) {
 8007788:	2e00      	cmp	r6, #0
 800778a:	f000 863f 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_McuSendLive((uint32_t)0xFFFFFFFFU, &mcuHandle->Seq, controlReqSeq);
 800778e:	4632      	mov	r2, r6
 8007790:	f105 0110 	add.w	r1, r5, #16
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	f002 f852 	bl	8009840 <fFaraabinLinkSerializer_McuSendLive>
  if(errorFobjectProperty) {
 800779c:	f000 be36 	b.w	800840c <fFrameHandler+0xf0c>
          if(controlReqSeq != 0U) {
 80077a0:	2e00      	cmp	r6, #0
 80077a2:	f000 8633 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_McuSendWhoAmI((uint32_t)mcuHandle, &mcuHandle->Seq, controlReqSeq);
 80077a6:	4632      	mov	r2, r6
 80077a8:	f105 0110 	add.w	r1, r5, #16
 80077ac:	4628      	mov	r0, r5
 80077ae:	f002 f85b 	bl	8009868 <fFaraabinLinkSerializer_McuSendWhoAmI>
            FaraabinFlags.Status.Bitfield.McuReset = 0U;
 80077b2:	4ba8      	ldr	r3, [pc, #672]	@ (8007a54 <fFrameHandler+0x554>)
 80077b4:	791a      	ldrb	r2, [r3, #4]
 80077b6:	f36f 0200 	bfc	r2, #0, #1
 80077ba:	711a      	strb	r2, [r3, #4]
  if(errorFobjectProperty) {
 80077bc:	f000 be26 	b.w	800840c <fFrameHandler+0xf0c>
					if(FaraabinFlags.Features.Bitfield.AllowSendDickBlocking) {
 80077c0:	4ba4      	ldr	r3, [pc, #656]	@ (8007a54 <fFrameHandler+0x554>)
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	f013 0f01 	tst.w	r3, #1
 80077c8:	d02d      	beq.n	8007826 <fFrameHandler+0x326>
						LinkHandler.DictSendingMode.IsBlocking = (clientFrame->Payload[0] == 0U) ? false : true;
 80077ca:	68a3      	ldr	r3, [r4, #8]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	3b00      	subs	r3, #0
 80077d0:	bf18      	it	ne
 80077d2:	2301      	movne	r3, #1
 80077d4:	4aa0      	ldr	r2, [pc, #640]	@ (8007a58 <fFrameHandler+0x558>)
 80077d6:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
					tmp2.Byte[0] = clientFrame->Payload[1];
 80077da:	68a2      	ldr	r2, [r4, #8]
 80077dc:	7851      	ldrb	r1, [r2, #1]
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	f361 0307 	bfi	r3, r1, #0, #8
					tmp2.Byte[1] = clientFrame->Payload[2];
 80077e6:	7892      	ldrb	r2, [r2, #2]
 80077e8:	f362 230f 	bfi	r3, r2, #8, #8
					mcuHandle->SessionId = tmp2.U16;
 80077ec:	f8a5 304e 	strh.w	r3, [r5, #78]	@ 0x4e
          if(FaraabinFlags.Features.Bitfield.Password == 1U) {
 80077f0:	4b98      	ldr	r3, [pc, #608]	@ (8007a54 <fFrameHandler+0x554>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f013 0f10 	tst.w	r3, #16
 80077f8:	d00b      	beq.n	8007812 <fFrameHandler+0x312>
            if(strncmp(LinkHandler.Password, (char*)(&(clientFrame->Payload[3])), strlen(LinkHandler.Password)) != 0) {
 80077fa:	4b97      	ldr	r3, [pc, #604]	@ (8007a58 <fFrameHandler+0x558>)
 80077fc:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80077fe:	4638      	mov	r0, r7
 8007800:	f7f8 fca6 	bl	8000150 <strlen>
 8007804:	4602      	mov	r2, r0
 8007806:	68a1      	ldr	r1, [r4, #8]
 8007808:	3103      	adds	r1, #3
 800780a:	4638      	mov	r0, r7
 800780c:	f002 f9d2 	bl	8009bb4 <strncmp>
 8007810:	b958      	cbnz	r0, 800782a <fFrameHandler+0x32a>
						fFaraabinLinkBuffer_Clear();						
 8007812:	f7ff fdf1 	bl	80073f8 <fFaraabinLinkBuffer_Clear>
            LinkHandler.DictSendingMode.SendFlag = true;
 8007816:	4b90      	ldr	r3, [pc, #576]	@ (8007a58 <fFrameHandler+0x558>)
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            LinkHandler.DictSendingMode.ReqSeq = controlReqSeq;
 800781e:	f883 6035 	strb.w	r6, [r3, #53]	@ 0x35
  if(errorFobjectProperty) {
 8007822:	f000 bdf3 	b.w	800840c <fFrameHandler+0xf0c>
						LinkHandler.DictSendingMode.IsBlocking = false;
 8007826:	2300      	movs	r3, #0
 8007828:	e7d4      	b.n	80077d4 <fFrameHandler+0x2d4>
            Faraabin_EventSystemException_EndResponse_((uint32_t)mcuHandle, 
 800782a:	78ab      	ldrb	r3, [r5, #2]
 800782c:	2201      	movs	r2, #1
 800782e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007830:	2100      	movs	r1, #0
 8007832:	9108      	str	r1, [sp, #32]
 8007834:	9107      	str	r1, [sp, #28]
 8007836:	9206      	str	r2, [sp, #24]
 8007838:	9605      	str	r6, [sp, #20]
 800783a:	9104      	str	r1, [sp, #16]
 800783c:	9103      	str	r1, [sp, #12]
 800783e:	2211      	movs	r2, #17
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	9101      	str	r1, [sp, #4]
 8007844:	2203      	movs	r2, #3
 8007846:	9200      	str	r2, [sp, #0]
 8007848:	f105 0210 	add.w	r2, r5, #16
 800784c:	4628      	mov	r0, r5
 800784e:	f001 fea7 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8007852:	f000 bddb 	b.w	800840c <fFrameHandler+0xf0c>
          fFaraabin_ResetMcu();
 8007856:	f7f9 fdec 	bl	8001432 <fFaraabin_ResetMcu>
          Faraabin_EventSystemException_EndResponse_((uint32_t)mcuHandle, 
 800785a:	78ab      	ldrb	r3, [r5, #2]
 800785c:	2201      	movs	r2, #1
 800785e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007860:	2100      	movs	r1, #0
 8007862:	9108      	str	r1, [sp, #32]
 8007864:	9107      	str	r1, [sp, #28]
 8007866:	9206      	str	r2, [sp, #24]
 8007868:	9605      	str	r6, [sp, #20]
 800786a:	9104      	str	r1, [sp, #16]
 800786c:	9103      	str	r1, [sp, #12]
 800786e:	2212      	movs	r2, #18
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	9101      	str	r1, [sp, #4]
 8007874:	2203      	movs	r2, #3
 8007876:	9200      	str	r2, [sp, #0]
 8007878:	f105 0210 	add.w	r2, r5, #16
 800787c:	4628      	mov	r0, r5
 800787e:	f001 fe8f 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8007882:	f000 bdc3 	b.w	800840c <fFrameHandler+0xf0c>
          FaraabinFlags.Status.Bitfield.BufferOverflow = 0U;
 8007886:	4b73      	ldr	r3, [pc, #460]	@ (8007a54 <fFrameHandler+0x554>)
 8007888:	791a      	ldrb	r2, [r3, #4]
 800788a:	f36f 0282 	bfc	r2, #2, #1
 800788e:	711a      	strb	r2, [r3, #4]
          Faraabin_EventSystem_EndResponse_((uint32_t)mcuHandle, 
 8007890:	78ab      	ldrb	r3, [r5, #2]
 8007892:	2201      	movs	r2, #1
 8007894:	9209      	str	r2, [sp, #36]	@ 0x24
 8007896:	2100      	movs	r1, #0
 8007898:	9108      	str	r1, [sp, #32]
 800789a:	9107      	str	r1, [sp, #28]
 800789c:	9206      	str	r2, [sp, #24]
 800789e:	9605      	str	r6, [sp, #20]
 80078a0:	9104      	str	r1, [sp, #16]
 80078a2:	9103      	str	r1, [sp, #12]
 80078a4:	2202      	movs	r2, #2
 80078a6:	9202      	str	r2, [sp, #8]
 80078a8:	9101      	str	r1, [sp, #4]
 80078aa:	9200      	str	r2, [sp, #0]
 80078ac:	f105 0210 	add.w	r2, r5, #16
 80078b0:	4628      	mov	r0, r5
 80078b2:	f001 fe75 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 80078b6:	f000 bda9 	b.w	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 80078ba:	2906      	cmp	r1, #6
 80078bc:	d016      	beq.n	80078ec <fFrameHandler+0x3ec>
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)mcuHandle,
 80078be:	78ab      	ldrb	r3, [r5, #2]
 80078c0:	2201      	movs	r2, #1
 80078c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80078c4:	2100      	movs	r1, #0
 80078c6:	9108      	str	r1, [sp, #32]
 80078c8:	9107      	str	r1, [sp, #28]
 80078ca:	9206      	str	r2, [sp, #24]
 80078cc:	9605      	str	r6, [sp, #20]
 80078ce:	9204      	str	r2, [sp, #16]
 80078d0:	4414      	add	r4, r2
 80078d2:	9403      	str	r4, [sp, #12]
 80078d4:	220f      	movs	r2, #15
 80078d6:	9202      	str	r2, [sp, #8]
 80078d8:	9101      	str	r1, [sp, #4]
 80078da:	2203      	movs	r2, #3
 80078dc:	9200      	str	r2, [sp, #0]
 80078de:	f105 0210 	add.w	r2, r5, #16
 80078e2:	4628      	mov	r0, r5
 80078e4:	f001 fe5c 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 80078e8:	f000 bd90 	b.w	800840c <fFrameHandler+0xf0c>
          clientFrame->Payload[clientFrame->PayloadSize] = 0x00U; // Terminate end of data
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	68a2      	ldr	r2, [r4, #8]
 80078f0:	2100      	movs	r1, #0
 80078f2:	54d1      	strb	r1, [r2, r3]
          if(mcuHandle->fpUserTerminalCallback != NULL) {
 80078f4:	696b      	ldr	r3, [r5, #20]
 80078f6:	b113      	cbz	r3, 80078fe <fFrameHandler+0x3fe>
            mcuHandle->fpUserTerminalCallback(clientFrame->Payload, clientFrame->PayloadSize);
 80078f8:	89a1      	ldrh	r1, [r4, #12]
 80078fa:	68a0      	ldr	r0, [r4, #8]
 80078fc:	4798      	blx	r3
          if(controlReqSeq != 0U) {
 80078fe:	2e00      	cmp	r6, #0
 8007900:	f000 8584 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_USER_DATA_RECEIVED, controlReqSeq);
 8007904:	4631      	mov	r1, r6
 8007906:	2000      	movs	r0, #0
 8007908:	f7ff fb9e 	bl	8007048 <fFaraabinFobjectMcu_SendEventSystemResponse>
  if(errorFobjectProperty) {
 800790c:	f000 bd7e 	b.w	800840c <fFrameHandler+0xf0c>
  
  #ifdef FARAABIN_ENABLE
  
  bool errorFobjectProperty = false;
  
  sFaraabinFobjectDataBus *dbHandle = (sFaraabinFobjectDataBus*)clientFrame->FobjectPtr;
 8007910:	6865      	ldr	r5, [r4, #4]
  uint8_t *param = clientFrame->Payload;
 8007912:	68a7      	ldr	r7, [r4, #8]
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 8007914:	7863      	ldrb	r3, [r4, #1]
 8007916:	095a      	lsrs	r2, r3, #5
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
 8007918:	f003 031f 	and.w	r3, r3, #31
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 800791c:	7821      	ldrb	r1, [r4, #0]
 800791e:	f001 060f 	and.w	r6, r1, #15
  uint8_t controlAccessType = ClientFrame_GetAccessType_(clientFrame->Control);

  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 8007922:	2a03      	cmp	r2, #3
 8007924:	f000 815e 	beq.w	8007be4 <fFrameHandler+0x6e4>
 8007928:	2a04      	cmp	r2, #4
 800792a:	f000 83b6 	beq.w	800809a <fFrameHandler+0xb9a>
 800792e:	2a01      	cmp	r2, #1
 8007930:	d016      	beq.n	8007960 <fFrameHandler+0x460>
    }
  }
  
  if(errorFobjectProperty) {
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)dbHandle,
 8007932:	78ab      	ldrb	r3, [r5, #2]
 8007934:	2201      	movs	r2, #1
 8007936:	9209      	str	r2, [sp, #36]	@ 0x24
 8007938:	2100      	movs	r1, #0
 800793a:	9108      	str	r1, [sp, #32]
 800793c:	9107      	str	r1, [sp, #28]
 800793e:	9206      	str	r2, [sp, #24]
 8007940:	9605      	str	r6, [sp, #20]
 8007942:	9204      	str	r2, [sp, #16]
 8007944:	4414      	add	r4, r2
 8007946:	9403      	str	r4, [sp, #12]
 8007948:	2206      	movs	r2, #6
 800794a:	9202      	str	r2, [sp, #8]
 800794c:	9101      	str	r1, [sp, #4]
 800794e:	2203      	movs	r2, #3
 8007950:	9200      	str	r2, [sp, #0]
 8007952:	f105 0210 	add.w	r2, r5, #16
 8007956:	4628      	mov	r0, r5
 8007958:	f001 fe22 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 800795c:	f000 bd56 	b.w	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 8007960:	2b08      	cmp	r3, #8
 8007962:	d8e6      	bhi.n	8007932 <fFrameHandler+0x432>
 8007964:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007968:	001d0009 	.word	0x001d0009
 800796c:	00650028 	.word	0x00650028
 8007970:	008b007a 	.word	0x008b007a
 8007974:	00e400b8 	.word	0x00e400b8
 8007978:	0111      	.short	0x0111
              if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 800797a:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800797e:	d004      	beq.n	800798a <fFrameHandler+0x48a>
                dbHandle->Enable = (*clientFrame->Payload == 0U) ? false : true;
 8007980:	783b      	ldrb	r3, [r7, #0]
 8007982:	3b00      	subs	r3, #0
 8007984:	bf18      	it	ne
 8007986:	2301      	movne	r3, #1
 8007988:	70ab      	strb	r3, [r5, #2]
              if(controlReqSeq != 0U) {
 800798a:	2e00      	cmp	r6, #0
 800798c:	f000 853e 	beq.w	800840c <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_CommonSendEnable(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq, true);
 8007990:	2301      	movs	r3, #1
 8007992:	4632      	mov	r2, r6
 8007994:	f105 0110 	add.w	r1, r5, #16
 8007998:	6860      	ldr	r0, [r4, #4]
 800799a:	f001 fed1 	bl	8009740 <fFaraabinLinkSerializer_CommonSendEnable>
  if(errorFobjectProperty) {
 800799e:	f000 bd35 	b.w	800840c <fFrameHandler+0xf0c>
              if(controlReqSeq != 0U) {
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	f000 8532 	beq.w	800840c <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 80079a8:	4632      	mov	r2, r6
 80079aa:	f105 0110 	add.w	r1, r5, #16
 80079ae:	4628      	mov	r0, r5
 80079b0:	f001 feda 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 80079b4:	f000 bd2a 	b.w	800840c <fFrameHandler+0xf0c>
              channelNo.Byte[0] = param[0];
 80079b8:	7839      	ldrb	r1, [r7, #0]
 80079ba:	f04f 0300 	mov.w	r3, #0
 80079be:	f361 0307 	bfi	r3, r1, #0, #8
              channelNo.Byte[1] = param[1];
 80079c2:	787a      	ldrb	r2, [r7, #1]
 80079c4:	f362 230f 	bfi	r3, r2, #8, #8
              if(channelNo.U16 >= dbHandle->ChannelQty) {
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	8a6a      	ldrh	r2, [r5, #18]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d91a      	bls.n	8007a06 <fFrameHandler+0x506>
                if(dbHandle->_pBufferChannels[channelNo.U16].ItemFobjectPtr != 0U) {
 80079d0:	696a      	ldr	r2, [r5, #20]
 80079d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	b152      	cbz	r2, 80079f0 <fFrameHandler+0x4f0>
              bool itemEnable = (param[0] != 0U);
 80079da:	2900      	cmp	r1, #0
 80079dc:	bf14      	ite	ne
 80079de:	2201      	movne	r2, #1
 80079e0:	2200      	moveq	r2, #0
 80079e2:	731a      	strb	r2, [r3, #12]
                    dbHandle->AvailableItemsQty++;
 80079e4:	8bab      	ldrh	r3, [r5, #28]
 80079e6:	bf14      	ite	ne
 80079e8:	3301      	addne	r3, #1
                    dbHandle->AvailableItemsQty--;
 80079ea:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80079ee:	83ab      	strh	r3, [r5, #28]
              if(controlReqSeq != 0U) {
 80079f0:	2e00      	cmp	r6, #0
 80079f2:	f000 850b 	beq.w	800840c <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 80079f6:	4632      	mov	r2, r6
 80079f8:	f105 0110 	add.w	r1, r5, #16
 80079fc:	6860      	ldr	r0, [r4, #4]
 80079fe:	f001 feb3 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007a02:	f000 bd03 	b.w	800840c <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_NOT_FREE_LOCATION_FOR_ATTACH, controlReqSeq);
 8007a06:	78ab      	ldrb	r3, [r5, #2]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	9108      	str	r1, [sp, #32]
 8007a10:	9107      	str	r1, [sp, #28]
 8007a12:	9206      	str	r2, [sp, #24]
 8007a14:	9605      	str	r6, [sp, #20]
 8007a16:	9104      	str	r1, [sp, #16]
 8007a18:	9103      	str	r1, [sp, #12]
 8007a1a:	2207      	movs	r2, #7
 8007a1c:	9202      	str	r2, [sp, #8]
 8007a1e:	9101      	str	r1, [sp, #4]
 8007a20:	2203      	movs	r2, #3
 8007a22:	9200      	str	r2, [sp, #0]
 8007a24:	f105 0210 	add.w	r2, r5, #16
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f001 fdb9 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 8007a2e:	f000 bced 	b.w	800840c <fFrameHandler+0xf0c>
          dbHandle->ApiTrigEnable = (param[0] != 0U);
 8007a32:	783b      	ldrb	r3, [r7, #0]
 8007a34:	3b00      	subs	r3, #0
 8007a36:	bf18      	it	ne
 8007a38:	2301      	movne	r3, #1
 8007a3a:	f885 306c 	strb.w	r3, [r5, #108]	@ 0x6c
          if(controlReqSeq != 0U) {
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	f000 84e4 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007a44:	4632      	mov	r2, r6
 8007a46:	f105 0110 	add.w	r1, r5, #16
 8007a4a:	6860      	ldr	r0, [r4, #4]
 8007a4c:	f001 fe8c 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007a50:	f000 bcdc 	b.w	800840c <fFrameHandler+0xf0c>
 8007a54:	20002638 	.word	0x20002638
 8007a58:	20002a50 	.word	0x20002a50
          dbHandle->ChTrigEnable = (param[0] != 0U);
 8007a5c:	783b      	ldrb	r3, [r7, #0]
 8007a5e:	3b00      	subs	r3, #0
 8007a60:	bf18      	it	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	f885 3089 	strb.w	r3, [r5, #137]	@ 0x89
          if(controlReqSeq != 0U) {
 8007a68:	2e00      	cmp	r6, #0
 8007a6a:	f000 84cf 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007a6e:	4632      	mov	r2, r6
 8007a70:	f105 0110 	add.w	r1, r5, #16
 8007a74:	6860      	ldr	r0, [r4, #4]
 8007a76:	f001 fe77 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007a7a:	f000 bcc7 	b.w	800840c <fFrameHandler+0xf0c>
          chNo.Byte[0] = param[0];
 8007a7e:	783a      	ldrb	r2, [r7, #0]
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	f362 0307 	bfi	r3, r2, #0, #8
          chNo.Byte[1] = param[1];
 8007a88:	787a      	ldrb	r2, [r7, #1]
 8007a8a:	f362 230f 	bfi	r3, r2, #8, #8
          uint8_t chTrigType = param[2];
 8007a8e:	f897 9002 	ldrb.w	r9, [r7, #2]
          if(dbHandle->ChTrigNo != chNo.U16) {
 8007a92:	fa1f f883 	uxth.w	r8, r3
 8007a96:	f8b5 308a 	ldrh.w	r3, [r5, #138]	@ 0x8a
 8007a9a:	4543      	cmp	r3, r8
 8007a9c:	d118      	bne.n	8007ad0 <fFrameHandler+0x5d0>
          dbHandle->ChTrigNo = chNo.U16;
 8007a9e:	f8a5 808a 	strh.w	r8, [r5, #138]	@ 0x8a
          dbHandle->ChTrigType = chTrigType;
 8007aa2:	f885 908c 	strb.w	r9, [r5, #140]	@ 0x8c
          for(int i=0; i<8; i++) {
 8007aa6:	1cbb      	adds	r3, r7, #2
 8007aa8:	f105 028f 	add.w	r2, r5, #143	@ 0x8f
 8007aac:	370a      	adds	r7, #10
            dbHandle->ChTrigThreshold.Byte[i] = param[3 + i];
 8007aae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007ab2:	f802 1f01 	strb.w	r1, [r2, #1]!
          for(int i=0; i<8; i++) {
 8007ab6:	42bb      	cmp	r3, r7
 8007ab8:	d1f9      	bne.n	8007aae <fFrameHandler+0x5ae>
          if(controlReqSeq != 0U) {
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	f000 84a6 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	f105 0110 	add.w	r1, r5, #16
 8007ac6:	6860      	ldr	r0, [r4, #4]
 8007ac8:	f001 fe4e 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007acc:	f000 bc9e 	b.w	800840c <fFrameHandler+0xf0c>
            fFaraabinFobjectDataBus_ResetTrigger(dbHandle);
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f7fe ffb9 	bl	8006a48 <fFaraabinFobjectDataBus_ResetTrigger>
 8007ad6:	e7e2      	b.n	8007a9e <fFrameHandler+0x59e>
              divideBy.Byte[0] = param[0];
 8007ad8:	783a      	ldrb	r2, [r7, #0]
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	f362 0307 	bfi	r3, r2, #0, #8
              divideBy.Byte[1] = param[1];
 8007ae2:	787a      	ldrb	r2, [r7, #1]
 8007ae4:	f362 230f 	bfi	r3, r2, #8, #8
              if(divideBy.U16 == 0) {
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	b15a      	cbz	r2, 8007b04 <fFrameHandler+0x604>
								dbHandle->StreamDivideBy = divideBy.U16;
 8007aec:	83eb      	strh	r3, [r5, #30]
              if(controlReqSeq != 0U) {
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	f000 848c 	beq.w	800840c <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007af4:	4632      	mov	r2, r6
 8007af6:	f105 0110 	add.w	r1, r5, #16
 8007afa:	6860      	ldr	r0, [r4, #4]
 8007afc:	f001 fe34 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007b00:	f000 bc84 	b.w	800840c <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_PARAM, controlReqSeq);
 8007b04:	78ab      	ldrb	r3, [r5, #2]
 8007b06:	2201      	movs	r2, #1
 8007b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	9108      	str	r1, [sp, #32]
 8007b0e:	9107      	str	r1, [sp, #28]
 8007b10:	9206      	str	r2, [sp, #24]
 8007b12:	9605      	str	r6, [sp, #20]
 8007b14:	9104      	str	r1, [sp, #16]
 8007b16:	9103      	str	r1, [sp, #12]
 8007b18:	220c      	movs	r2, #12
 8007b1a:	9202      	str	r2, [sp, #8]
 8007b1c:	9101      	str	r1, [sp, #4]
 8007b1e:	2203      	movs	r2, #3
 8007b20:	9200      	str	r2, [sp, #0]
 8007b22:	f105 0210 	add.w	r2, r5, #16
 8007b26:	4628      	mov	r0, r5
 8007b28:	f001 fd3a 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 8007b2c:	f000 bc6e 	b.w	800840c <fFrameHandler+0xf0c>
              divideBy.Byte[0] = param[0];
 8007b30:	783a      	ldrb	r2, [r7, #0]
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	f362 0307 	bfi	r3, r2, #0, #8
              divideBy.Byte[1] = param[1];
 8007b3a:	787a      	ldrb	r2, [r7, #1]
 8007b3c:	f362 230f 	bfi	r3, r2, #8, #8
              if(divideBy.U16 == 0) {
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	b162      	cbz	r2, 8007b5e <fFrameHandler+0x65e>
								dbHandle->TimerDivideBy = divideBy.U16;
 8007b44:	f8a5 304c 	strh.w	r3, [r5, #76]	@ 0x4c
              if(controlReqSeq != 0U) {
 8007b48:	2e00      	cmp	r6, #0
 8007b4a:	f000 845f 	beq.w	800840c <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007b4e:	4632      	mov	r2, r6
 8007b50:	f105 0110 	add.w	r1, r5, #16
 8007b54:	6860      	ldr	r0, [r4, #4]
 8007b56:	f001 fe07 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007b5a:	f000 bc57 	b.w	800840c <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_PARAM, controlReqSeq);
 8007b5e:	78ab      	ldrb	r3, [r5, #2]
 8007b60:	2201      	movs	r2, #1
 8007b62:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b64:	2100      	movs	r1, #0
 8007b66:	9108      	str	r1, [sp, #32]
 8007b68:	9107      	str	r1, [sp, #28]
 8007b6a:	9206      	str	r2, [sp, #24]
 8007b6c:	9605      	str	r6, [sp, #20]
 8007b6e:	9104      	str	r1, [sp, #16]
 8007b70:	9103      	str	r1, [sp, #12]
 8007b72:	220c      	movs	r2, #12
 8007b74:	9202      	str	r2, [sp, #8]
 8007b76:	9101      	str	r1, [sp, #4]
 8007b78:	2203      	movs	r2, #3
 8007b7a:	9200      	str	r2, [sp, #0]
 8007b7c:	f105 0210 	add.w	r2, r5, #16
 8007b80:	4628      	mov	r0, r5
 8007b82:	f001 fd0d 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 8007b86:	f000 bc41 	b.w	800840c <fFrameHandler+0xf0c>
              divideBy.Byte[0] = param[0];
 8007b8a:	783a      	ldrb	r2, [r7, #0]
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	f362 0307 	bfi	r3, r2, #0, #8
              divideBy.Byte[1] = param[1];
 8007b94:	787a      	ldrb	r2, [r7, #1]
 8007b96:	f362 230f 	bfi	r3, r2, #8, #8
              if(divideBy.U16 == 0) {
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	b162      	cbz	r2, 8007bb8 <fFrameHandler+0x6b8>
								dbHandle->TrigDivideBy = divideBy.U16;
 8007b9e:	f8a5 3050 	strh.w	r3, [r5, #80]	@ 0x50
              if(controlReqSeq != 0U) {
 8007ba2:	2e00      	cmp	r6, #0
 8007ba4:	f000 8432 	beq.w	800840c <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007ba8:	4632      	mov	r2, r6
 8007baa:	f105 0110 	add.w	r1, r5, #16
 8007bae:	6860      	ldr	r0, [r4, #4]
 8007bb0:	f001 fdda 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007bb4:	f000 bc2a 	b.w	800840c <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_PARAM, controlReqSeq);
 8007bb8:	78ab      	ldrb	r3, [r5, #2]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	9108      	str	r1, [sp, #32]
 8007bc2:	9107      	str	r1, [sp, #28]
 8007bc4:	9206      	str	r2, [sp, #24]
 8007bc6:	9605      	str	r6, [sp, #20]
 8007bc8:	9104      	str	r1, [sp, #16]
 8007bca:	9103      	str	r1, [sp, #12]
 8007bcc:	220c      	movs	r2, #12
 8007bce:	9202      	str	r2, [sp, #8]
 8007bd0:	9101      	str	r1, [sp, #4]
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	9200      	str	r2, [sp, #0]
 8007bd6:	f105 0210 	add.w	r2, r5, #16
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f001 fce0 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 8007be0:	f000 bc14 	b.w	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 8007be4:	2b0a      	cmp	r3, #10
 8007be6:	f63f aea4 	bhi.w	8007932 <fFrameHandler+0x432>
 8007bea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007bee:	003b      	.short	0x003b
 8007bf0:	00bb008f 	.word	0x00bb008f
 8007bf4:	011c00de 	.word	0x011c00de
 8007bf8:	01de017d 	.word	0x01de017d
 8007bfc:	023e01f8 	.word	0x023e01f8
 8007c00:	000b0023 	.word	0x000b0023
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8007c04:	8a6b      	ldrh	r3, [r5, #18]
 8007c06:	b15b      	cbz	r3, 8007c20 <fFrameHandler+0x720>
 8007c08:	2300      	movs	r3, #0
            dbHandle->_pBufferChannels[i].Enable = false;
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	b299      	uxth	r1, r3
 8007c0e:	696a      	ldr	r2, [r5, #20]
 8007c10:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007c14:	7310      	strb	r0, [r2, #12]
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8007c16:	3301      	adds	r3, #1
 8007c18:	8a69      	ldrh	r1, [r5, #18]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	4291      	cmp	r1, r2
 8007c1e:	d8f5      	bhi.n	8007c0c <fFrameHandler+0x70c>
          if(controlReqSeq != 0U) {
 8007c20:	2e00      	cmp	r6, #0
 8007c22:	f000 83f3 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007c26:	4632      	mov	r2, r6
 8007c28:	f105 0110 	add.w	r1, r5, #16
 8007c2c:	6860      	ldr	r0, [r4, #4]
 8007c2e:	f001 fd9b 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007c32:	e3eb      	b.n	800840c <fFrameHandler+0xf0c>
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8007c34:	8a6b      	ldrh	r3, [r5, #18]
 8007c36:	b15b      	cbz	r3, 8007c50 <fFrameHandler+0x750>
 8007c38:	2300      	movs	r3, #0
            dbHandle->_pBufferChannels[i].Enable = true;
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	b299      	uxth	r1, r3
 8007c3e:	696a      	ldr	r2, [r5, #20]
 8007c40:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007c44:	7310      	strb	r0, [r2, #12]
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8007c46:	3301      	adds	r3, #1
 8007c48:	8a69      	ldrh	r1, [r5, #18]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	4291      	cmp	r1, r2
 8007c4e:	d8f5      	bhi.n	8007c3c <fFrameHandler+0x73c>
          if(controlReqSeq != 0U) {
 8007c50:	2e00      	cmp	r6, #0
 8007c52:	f000 83db 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007c56:	4632      	mov	r2, r6
 8007c58:	f105 0110 	add.w	r1, r5, #16
 8007c5c:	6860      	ldr	r0, [r4, #4]
 8007c5e:	f001 fd83 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007c62:	e3d3      	b.n	800840c <fFrameHandler+0xf0c>
          uint8_t itemFobjectType = param[0];
 8007c64:	7838      	ldrb	r0, [r7, #0]
          itemFobjectPtr.Byte[0] = param[1];
 8007c66:	787b      	ldrb	r3, [r7, #1]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f363 0207 	bfi	r2, r3, #0, #8
          itemFobjectPtr.Byte[1] = param[2];
 8007c6e:	78bb      	ldrb	r3, [r7, #2]
 8007c70:	f363 220f 	bfi	r2, r3, #8, #8
          itemFobjectPtr.Byte[2] = param[3];
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	f363 4217 	bfi	r2, r3, #16, #8
          itemFobjectPtr.Byte[3] = param[4];
 8007c7a:	793b      	ldrb	r3, [r7, #4]
 8007c7c:	f363 621f 	bfi	r2, r3, #24, #8
          itemFobjectParam.Byte[0] = param[5];
 8007c80:	7979      	ldrb	r1, [r7, #5]
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	f361 0307 	bfi	r3, r1, #0, #8
          itemFobjectParam.Byte[1] = param[6];
 8007c8a:	79b9      	ldrb	r1, [r7, #6]
 8007c8c:	f361 230f 	bfi	r3, r1, #8, #8
          uint8_t varTypeArchitecture = param[7];
 8007c90:	f897 e007 	ldrb.w	lr, [r7, #7]
          uint8_t varPrimitiveId = param[8];
 8007c94:	f897 8008 	ldrb.w	r8, [r7, #8]
          itemChannelNo.Byte[0] = param[9];
 8007c98:	f897 c009 	ldrb.w	ip, [r7, #9]
 8007c9c:	f04f 0100 	mov.w	r1, #0
 8007ca0:	f36c 0107 	bfi	r1, ip, #0, #8
          itemChannelNo.Byte[1] = param[10];
 8007ca4:	7abf      	ldrb	r7, [r7, #10]
 8007ca6:	f367 210f 	bfi	r1, r7, #8, #8
          if(itemFobjectType == (uint8_t)eFO_TYPE_CODE_BLOCK) {
 8007caa:	280a      	cmp	r0, #10
 8007cac:	d014      	beq.n	8007cd8 <fFrameHandler+0x7d8>
            ret = fFaraabinFobjectDataBus_AttachVariableToChannel(dbHandle, itemChannelNo.U16, itemFobjectPtr.U32, itemFobjectParam.U16, varTypeArchitecture, varPrimitiveId, itemFobjectType);
 8007cae:	9002      	str	r0, [sp, #8]
 8007cb0:	f8cd 8004 	str.w	r8, [sp, #4]
 8007cb4:	f8cd e000 	str.w	lr, [sp]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	b289      	uxth	r1, r1
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f7ff f817 	bl	8006cf0 <fFaraabinFobjectDataBus_AttachVariableToChannel>
          if(ret != FARAABIN_DB_OK) {
 8007cc2:	b970      	cbnz	r0, 8007ce2 <fFrameHandler+0x7e2>
            if(controlReqSeq != 0U) {
 8007cc4:	2e00      	cmp	r6, #0
 8007cc6:	f000 83a1 	beq.w	800840c <fFrameHandler+0xf0c>
              fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007cca:	4632      	mov	r2, r6
 8007ccc:	f105 0110 	add.w	r1, r5, #16
 8007cd0:	6860      	ldr	r0, [r4, #4]
 8007cd2:	f001 fd49 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007cd6:	e399      	b.n	800840c <fFrameHandler+0xf0c>
            ret = fFaraabinFobjectDataBus_AttachCodeBlockToChannel(dbHandle, itemChannelNo.U16, itemFobjectPtr.U32);
 8007cd8:	b289      	uxth	r1, r1
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f7ff f87a 	bl	8006dd4 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel>
 8007ce0:	e7ef      	b.n	8007cc2 <fFrameHandler+0x7c2>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_ATTACH, controlReqSeq);
 8007ce2:	78ab      	ldrb	r3, [r5, #2]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ce8:	2100      	movs	r1, #0
 8007cea:	9108      	str	r1, [sp, #32]
 8007cec:	9107      	str	r1, [sp, #28]
 8007cee:	9206      	str	r2, [sp, #24]
 8007cf0:	9605      	str	r6, [sp, #20]
 8007cf2:	9104      	str	r1, [sp, #16]
 8007cf4:	9103      	str	r1, [sp, #12]
 8007cf6:	220e      	movs	r2, #14
 8007cf8:	9202      	str	r2, [sp, #8]
 8007cfa:	9101      	str	r1, [sp, #4]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	f105 0210 	add.w	r2, r5, #16
 8007d04:	4628      	mov	r0, r5
 8007d06:	f001 fc4b 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8007d0a:	e37f      	b.n	800840c <fFrameHandler+0xf0c>
          itemChannelNo.Byte[0] = param[0];
 8007d0c:	783b      	ldrb	r3, [r7, #0]
 8007d0e:	f04f 0100 	mov.w	r1, #0
 8007d12:	f363 0107 	bfi	r1, r3, #0, #8
          itemChannelNo.Byte[1] = param[1];
 8007d16:	787b      	ldrb	r3, [r7, #1]
 8007d18:	f363 210f 	bfi	r1, r3, #8, #8
          ret = fFaraabinFobjectDataBus_DetachFromChannel(dbHandle, itemChannelNo.U16);
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7ff f868 	bl	8006df4 <fFaraabinFobjectDataBus_DetachFromChannel>
          if(ret != FARAABIN_DB_OK) {
 8007d24:	b948      	cbnz	r0, 8007d3a <fFrameHandler+0x83a>
            if(controlReqSeq != 0U) {
 8007d26:	2e00      	cmp	r6, #0
 8007d28:	f000 8370 	beq.w	800840c <fFrameHandler+0xf0c>
              fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	f105 0110 	add.w	r1, r5, #16
 8007d32:	6860      	ldr	r0, [r4, #4]
 8007d34:	f001 fd18 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007d38:	e368      	b.n	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_DETACH, controlReqSeq);
 8007d3a:	78ab      	ldrb	r3, [r5, #2]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d40:	2100      	movs	r1, #0
 8007d42:	9108      	str	r1, [sp, #32]
 8007d44:	9107      	str	r1, [sp, #28]
 8007d46:	9206      	str	r2, [sp, #24]
 8007d48:	9605      	str	r6, [sp, #20]
 8007d4a:	9104      	str	r1, [sp, #16]
 8007d4c:	9103      	str	r1, [sp, #12]
 8007d4e:	220d      	movs	r2, #13
 8007d50:	9202      	str	r2, [sp, #8]
 8007d52:	9101      	str	r1, [sp, #4]
 8007d54:	2203      	movs	r2, #3
 8007d56:	9200      	str	r2, [sp, #0]
 8007d58:	f105 0210 	add.w	r2, r5, #16
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f001 fc1f 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8007d62:	e353      	b.n	800840c <fFrameHandler+0xf0c>
          if(fFaraabinFobjectDataBus_DetachAllChannels(dbHandle) != FARAABIN_DB_OK) {
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7ff f875 	bl	8006e54 <fFaraabinFobjectDataBus_DetachAllChannels>
 8007d6a:	b948      	cbnz	r0, 8007d80 <fFrameHandler+0x880>
          if(controlReqSeq != 0U) {
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	f000 834d 	beq.w	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8007d72:	4632      	mov	r2, r6
 8007d74:	f105 0110 	add.w	r1, r5, #16
 8007d78:	6860      	ldr	r0, [r4, #4]
 8007d7a:	f001 fcf5 	bl	8009768 <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8007d7e:	e345      	b.n	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_CODE_BLOCK_NOT_EMPTY, controlReqSeq);
 8007d80:	78ab      	ldrb	r3, [r5, #2]
 8007d82:	2201      	movs	r2, #1
 8007d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d86:	2100      	movs	r1, #0
 8007d88:	9108      	str	r1, [sp, #32]
 8007d8a:	9107      	str	r1, [sp, #28]
 8007d8c:	9206      	str	r2, [sp, #24]
 8007d8e:	9605      	str	r6, [sp, #20]
 8007d90:	9104      	str	r1, [sp, #16]
 8007d92:	9103      	str	r1, [sp, #12]
 8007d94:	220b      	movs	r2, #11
 8007d96:	9202      	str	r2, [sp, #8]
 8007d98:	9101      	str	r1, [sp, #4]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	9200      	str	r2, [sp, #0]
 8007d9e:	f105 0210 	add.w	r2, r5, #16
 8007da2:	4628      	mov	r0, r5
 8007da4:	f001 fbfc 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8007da8:	e7e0      	b.n	8007d6c <fFrameHandler+0x86c>
          streamDivideBy.Byte[0] = param[0];
 8007daa:	783a      	ldrb	r2, [r7, #0]
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	f362 0307 	bfi	r3, r2, #0, #8
          streamDivideBy.Byte[1] = param[1];
 8007db4:	787a      	ldrb	r2, [r7, #1]
 8007db6:	f362 230f 	bfi	r3, r2, #8, #8
          dbHandle->StreamDivideBy = streamDivideBy.U16;
 8007dba:	83eb      	strh	r3, [r5, #30]
          fFaraabinFobjectDataBus_StartStream(dbHandle);
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f7fe ff0b 	bl	8006bd8 <fFaraabinFobjectDataBus_StartStream>
          eventParam[0] = (uint8_t)dbHandle->CurrentState;
 8007dc2:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 8007dc6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
          tmp2.U16 = dbHandle->StreamDivideBy;
 8007dca:	8beb      	ldrh	r3, [r5, #30]
          eventParam[1] = tmp2.Byte[0];
 8007dcc:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
          eventParam[2] = tmp2.Byte[1];
 8007dd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007dd4:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
          tmp4.U32 = dbHandle->CycleUs;
 8007dd8:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
          eventParam[3] = tmp4.Byte[0];
 8007ddc:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
          eventParam[4] = tmp4.Byte[1];
 8007de0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007de4:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
          eventParam[5] = tmp4.Byte[2];
 8007de8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007dec:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
          eventParam[6] = tmp4.Byte[3];
 8007df0:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007df4:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
          Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 7U, controlReqSeq);
 8007df8:	78ab      	ldrb	r3, [r5, #2]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dfe:	2100      	movs	r1, #0
 8007e00:	9108      	str	r1, [sp, #32]
 8007e02:	9107      	str	r1, [sp, #28]
 8007e04:	9206      	str	r2, [sp, #24]
 8007e06:	9605      	str	r6, [sp, #20]
 8007e08:	2207      	movs	r2, #7
 8007e0a:	9204      	str	r2, [sp, #16]
 8007e0c:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e0e:	9203      	str	r2, [sp, #12]
 8007e10:	2203      	movs	r2, #3
 8007e12:	9202      	str	r2, [sp, #8]
 8007e14:	9101      	str	r1, [sp, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	9200      	str	r2, [sp, #0]
 8007e1a:	f105 0210 	add.w	r2, r5, #16
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f001 fbbe 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8007e24:	e2f2      	b.n	800840c <fFrameHandler+0xf0c>
          if(dbHandle->BufferCaptureSize > 0U) {
 8007e26:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 82ef 	beq.w	800840c <fFrameHandler+0xf0c>
            timeAfterTrigMs.Byte[0] = param[0];
 8007e2e:	783a      	ldrb	r2, [r7, #0]
 8007e30:	2300      	movs	r3, #0
 8007e32:	f362 0307 	bfi	r3, r2, #0, #8
            timeAfterTrigMs.Byte[1] = param[1];
 8007e36:	787a      	ldrb	r2, [r7, #1]
 8007e38:	f362 230f 	bfi	r3, r2, #8, #8
            timeAfterTrigMs.Byte[2] = param[2];
 8007e3c:	78ba      	ldrb	r2, [r7, #2]
 8007e3e:	f362 4317 	bfi	r3, r2, #16, #8
            timeAfterTrigMs.Byte[3] = param[3];
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	f362 631f 	bfi	r3, r2, #24, #8
            dbHandle->TimeAfterTrigMs = timeAfterTrigMs.U32;
 8007e48:	636b      	str	r3, [r5, #52]	@ 0x34
            trigDivideBy.Byte[0] = param[4];
 8007e4a:	793a      	ldrb	r2, [r7, #4]
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	f362 0307 	bfi	r3, r2, #0, #8
            trigDivideBy.Byte[1] = param[5];
 8007e54:	797a      	ldrb	r2, [r7, #5]
 8007e56:	f362 230f 	bfi	r3, r2, #8, #8
            dbHandle->TrigDivideBy = trigDivideBy.U16;
 8007e5a:	f8a5 3050 	strh.w	r3, [r5, #80]	@ 0x50
            fFaraabinFobjectDataBus_StartTrigger(dbHandle);
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f7fe fef0 	bl	8006c44 <fFaraabinFobjectDataBus_StartTrigger>
            eventParam[0] = (uint8_t)dbHandle->CurrentState;
 8007e64:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 8007e68:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
            tmp4.U32 = dbHandle->TimeAfterTrigMs;
 8007e6c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            eventParam[1] = tmp4.Byte[0];
 8007e6e:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
            eventParam[2] = tmp4.Byte[1];
 8007e72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007e76:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            eventParam[3] = tmp4.Byte[2];
 8007e7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007e7e:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
            eventParam[4] = tmp4.Byte[3];
 8007e82:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007e86:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            tmp2.U16 = dbHandle->TrigDivideBy;
 8007e8a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
            eventParam[5] = tmp2.Byte[0];
 8007e8e:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
            eventParam[6] = tmp2.Byte[1];
 8007e92:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007e96:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
            tmp4.U32 = dbHandle->CycleUs;
 8007e9a:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
            eventParam[7] = tmp4.Byte[0];
 8007e9e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
            eventParam[8] = tmp4.Byte[1];
 8007ea2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007ea6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
            eventParam[9] = tmp4.Byte[2];
 8007eaa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007eae:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
            eventParam[10] = tmp4.Byte[3];
 8007eb2:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007eb6:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
            Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 11U, controlReqSeq);        
 8007eba:	78ab      	ldrb	r3, [r5, #2]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	9108      	str	r1, [sp, #32]
 8007ec4:	9107      	str	r1, [sp, #28]
 8007ec6:	9206      	str	r2, [sp, #24]
 8007ec8:	9605      	str	r6, [sp, #20]
 8007eca:	220b      	movs	r2, #11
 8007ecc:	9204      	str	r2, [sp, #16]
 8007ece:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ed0:	9203      	str	r2, [sp, #12]
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	9202      	str	r2, [sp, #8]
 8007ed6:	9101      	str	r1, [sp, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	9200      	str	r2, [sp, #0]
 8007edc:	f105 0210 	add.w	r2, r5, #16
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	f001 fb5d 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8007ee6:	e291      	b.n	800840c <fFrameHandler+0xf0c>
          if(dbHandle->BufferCaptureSize > 0U) {
 8007ee8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 828e 	beq.w	800840c <fFrameHandler+0xf0c>
            timerWindowMs.Byte[0] = param[0];
 8007ef0:	783a      	ldrb	r2, [r7, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f362 0307 	bfi	r3, r2, #0, #8
            timerWindowMs.Byte[1] = param[1];
 8007ef8:	787a      	ldrb	r2, [r7, #1]
 8007efa:	f362 230f 	bfi	r3, r2, #8, #8
            timerWindowMs.Byte[2] = param[2];
 8007efe:	78ba      	ldrb	r2, [r7, #2]
 8007f00:	f362 4317 	bfi	r3, r2, #16, #8
            timerWindowMs.Byte[3] = param[3];
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	f362 631f 	bfi	r3, r2, #24, #8
            dbHandle->TimerWindowMs = timerWindowMs.U32;
 8007f0a:	632b      	str	r3, [r5, #48]	@ 0x30
            timerDivideBy.Byte[0] = param[4];
 8007f0c:	793a      	ldrb	r2, [r7, #4]
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	f362 0307 	bfi	r3, r2, #0, #8
            timerDivideBy.Byte[1] = param[5];
 8007f16:	797a      	ldrb	r2, [r7, #5]
 8007f18:	f362 230f 	bfi	r3, r2, #8, #8
            dbHandle->TimerDivideBy = timerDivideBy.U16;
 8007f1c:	f8a5 304c 	strh.w	r3, [r5, #76]	@ 0x4c
            fFaraabinFobjectDataBus_StartTimer(dbHandle);
 8007f20:	4628      	mov	r0, r5
 8007f22:	f7fe fe6d 	bl	8006c00 <fFaraabinFobjectDataBus_StartTimer>
            eventParam[0] = (uint8_t)dbHandle->CurrentState;
 8007f26:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 8007f2a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
            tmp4.U32 = dbHandle->TimerWindowMs;
 8007f2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
            eventParam[1] = tmp4.Byte[0];
 8007f30:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
            eventParam[2] = tmp4.Byte[1];
 8007f34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007f38:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            eventParam[3] = tmp4.Byte[2];
 8007f3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007f40:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
            eventParam[4] = tmp4.Byte[3];
 8007f44:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007f48:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            tmp2.U16 = dbHandle->TimerDivideBy;
 8007f4c:	f8b5 304c 	ldrh.w	r3, [r5, #76]	@ 0x4c
            eventParam[5] = tmp2.Byte[0];
 8007f50:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
            eventParam[6] = tmp2.Byte[1];
 8007f54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007f58:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
            tmp4.U32 = dbHandle->CycleUs;
 8007f5c:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
            eventParam[7] = tmp4.Byte[0];
 8007f60:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
            eventParam[8] = tmp4.Byte[1];
 8007f64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007f68:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
            eventParam[9] = tmp4.Byte[2];
 8007f6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007f70:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
            eventParam[10] = tmp4.Byte[3];
 8007f74:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007f78:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
            Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 11U, controlReqSeq);        
 8007f7c:	78ab      	ldrb	r3, [r5, #2]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f82:	2100      	movs	r1, #0
 8007f84:	9108      	str	r1, [sp, #32]
 8007f86:	9107      	str	r1, [sp, #28]
 8007f88:	9206      	str	r2, [sp, #24]
 8007f8a:	9605      	str	r6, [sp, #20]
 8007f8c:	220b      	movs	r2, #11
 8007f8e:	9204      	str	r2, [sp, #16]
 8007f90:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f92:	9203      	str	r2, [sp, #12]
 8007f94:	2203      	movs	r2, #3
 8007f96:	9202      	str	r2, [sp, #8]
 8007f98:	9101      	str	r1, [sp, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	9200      	str	r2, [sp, #0]
 8007f9e:	f105 0210 	add.w	r2, r5, #16
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f001 fafc 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8007fa8:	e230      	b.n	800840c <fFrameHandler+0xf0c>
          fFaraabinFobjectDataBus_Stop(dbHandle);
 8007faa:	4628      	mov	r0, r5
 8007fac:	f7fe fe8c 	bl	8006cc8 <fFaraabinFobjectDataBus_Stop>
          Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, (uint8_t*)&dbHandle->CurrentState, 1, controlReqSeq);
 8007fb0:	78ab      	ldrb	r3, [r5, #2]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	9108      	str	r1, [sp, #32]
 8007fba:	9107      	str	r1, [sp, #28]
 8007fbc:	9206      	str	r2, [sp, #24]
 8007fbe:	9605      	str	r6, [sp, #20]
 8007fc0:	9204      	str	r2, [sp, #16]
 8007fc2:	f105 0264 	add.w	r2, r5, #100	@ 0x64
 8007fc6:	9203      	str	r2, [sp, #12]
 8007fc8:	2203      	movs	r2, #3
 8007fca:	9202      	str	r2, [sp, #8]
 8007fcc:	9101      	str	r1, [sp, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	9200      	str	r2, [sp, #0]
 8007fd2:	f105 0210 	add.w	r2, r5, #16
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f001 fae2 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8007fdc:	e216      	b.n	800840c <fFrameHandler+0xf0c>
          dbHandle->CaptureSendingCnt = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	65ab      	str	r3, [r5, #88]	@ 0x58
          dbHandle->CaptureSendingReqSeq = controlReqSeq;
 8007fe2:	f885 605c 	strb.w	r6, [r5, #92]	@ 0x5c
          dbHandle->CaptureSendingQty = dbHandle->QueueItemCount;
 8007fe6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8007fea:	656b      	str	r3, [r5, #84]	@ 0x54
          if(dbHandle->CaptureSendingQty == 0U) {
 8007fec:	b9a3      	cbnz	r3, 8008018 <fFrameHandler+0xb18>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_NO_CAPTURE_DATA_FOR_SEND, controlReqSeq);
 8007fee:	78ab      	ldrb	r3, [r5, #2]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	9108      	str	r1, [sp, #32]
 8007ff8:	9107      	str	r1, [sp, #28]
 8007ffa:	9206      	str	r2, [sp, #24]
 8007ffc:	9605      	str	r6, [sp, #20]
 8007ffe:	9104      	str	r1, [sp, #16]
 8008000:	9103      	str	r1, [sp, #12]
 8008002:	2208      	movs	r2, #8
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	9101      	str	r1, [sp, #4]
 8008008:	2203      	movs	r2, #3
 800800a:	9200      	str	r2, [sp, #0]
 800800c:	f105 0210 	add.w	r2, r5, #16
 8008010:	4628      	mov	r0, r5
 8008012:	f001 fac5 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008016:	e1f9      	b.n	800840c <fFrameHandler+0xf0c>
            dbHandle->CurrentState = eDATABUS_STATE_CAPTURE_SEND;
 8008018:	2205      	movs	r2, #5
 800801a:	f885 2064 	strb.w	r2, [r5, #100]	@ 0x64
            eventParam[0] = (uint8_t)dbHandle->CurrentState;
 800801e:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
            eventParam[1] = tmp4.Byte[0];
 8008022:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
            eventParam[2] = tmp4.Byte[1];
 8008026:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800802a:	f88d 102e 	strb.w	r1, [sp, #46]	@ 0x2e
            eventParam[3] = tmp4.Byte[2];
 800802e:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008032:	f88d 102f 	strb.w	r1, [sp, #47]	@ 0x2f
            eventParam[4] = tmp4.Byte[3];
 8008036:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800803a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            Faraabin_EventSystem_ParamResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 5U, controlReqSeq);
 800803e:	78ab      	ldrb	r3, [r5, #2]
 8008040:	2100      	movs	r1, #0
 8008042:	9109      	str	r1, [sp, #36]	@ 0x24
 8008044:	9108      	str	r1, [sp, #32]
 8008046:	9107      	str	r1, [sp, #28]
 8008048:	2001      	movs	r0, #1
 800804a:	9006      	str	r0, [sp, #24]
 800804c:	9605      	str	r6, [sp, #20]
 800804e:	9204      	str	r2, [sp, #16]
 8008050:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008052:	9203      	str	r2, [sp, #12]
 8008054:	2203      	movs	r2, #3
 8008056:	9202      	str	r2, [sp, #8]
 8008058:	9101      	str	r1, [sp, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	9200      	str	r2, [sp, #0]
 800805e:	f105 0210 	add.w	r2, r5, #16
 8008062:	4628      	mov	r0, r5
 8008064:	f001 fa9c 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008068:	e1d0      	b.n	800840c <fFrameHandler+0xf0c>
          fFaraabinFobjectDataBus_ForceManualTrigger(dbHandle);
 800806a:	4628      	mov	r0, r5
 800806c:	f7fe fe0c 	bl	8006c88 <fFaraabinFobjectDataBus_ForceManualTrigger>
          Faraabin_EventSystem_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_MANUAL_TRIG, controlReqSeq);
 8008070:	78ab      	ldrb	r3, [r5, #2]
 8008072:	2201      	movs	r2, #1
 8008074:	9209      	str	r2, [sp, #36]	@ 0x24
 8008076:	2100      	movs	r1, #0
 8008078:	9108      	str	r1, [sp, #32]
 800807a:	9107      	str	r1, [sp, #28]
 800807c:	9206      	str	r2, [sp, #24]
 800807e:	9605      	str	r6, [sp, #20]
 8008080:	9104      	str	r1, [sp, #16]
 8008082:	9103      	str	r1, [sp, #12]
 8008084:	2205      	movs	r2, #5
 8008086:	9202      	str	r2, [sp, #8]
 8008088:	9101      	str	r1, [sp, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	9200      	str	r2, [sp, #0]
 800808e:	f105 0210 	add.w	r2, r5, #16
 8008092:	4628      	mov	r0, r5
 8008094:	f001 fa84 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008098:	e1b8      	b.n	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 800809a:	2b06      	cmp	r3, #6
 800809c:	f47f ac49 	bne.w	8007932 <fFrameHandler+0x432>
          clientFrame->Payload[clientFrame->PayloadSize] = 0x00U; // Terminate end of data
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	54fa      	strb	r2, [r7, r3]
          if(dbHandle->fpUserTerminalCallback != NULL) {
 80080a6:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 80080a8:	b113      	cbz	r3, 80080b0 <fFrameHandler+0xbb0>
            dbHandle->fpUserTerminalCallback(clientFrame->Payload, clientFrame->PayloadSize);
 80080aa:	89a1      	ldrh	r1, [r4, #12]
 80080ac:	68a0      	ldr	r0, [r4, #8]
 80080ae:	4798      	blx	r3
          if(controlReqSeq != 0U) {
 80080b0:	2e00      	cmp	r6, #0
 80080b2:	f000 81ab 	beq.w	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystem_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_USER_DATA_RECEIVED, controlReqSeq);
 80080b6:	78ab      	ldrb	r3, [r5, #2]
 80080b8:	2201      	movs	r2, #1
 80080ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80080bc:	2100      	movs	r1, #0
 80080be:	9108      	str	r1, [sp, #32]
 80080c0:	9107      	str	r1, [sp, #28]
 80080c2:	9206      	str	r2, [sp, #24]
 80080c4:	9605      	str	r6, [sp, #20]
 80080c6:	9104      	str	r1, [sp, #16]
 80080c8:	9103      	str	r1, [sp, #12]
 80080ca:	9102      	str	r1, [sp, #8]
 80080cc:	9101      	str	r1, [sp, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	9200      	str	r2, [sp, #0]
 80080d2:	f105 0210 	add.w	r2, r5, #16
 80080d6:	4628      	mov	r0, r5
 80080d8:	f001 fa62 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 80080dc:	e196      	b.n	800840c <fFrameHandler+0xf0c>
  
  bool errorFobjectProperty = false;
    
  sFaraabinFobjectFunction *fnHandle = (sFaraabinFobjectFunction*)clientFrame->FobjectPtr;
  uint8_t *param = (uint8_t*)clientFrame->Payload;
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 80080de:	7863      	ldrb	r3, [r4, #1]
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
  
  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 80080e0:	095a      	lsrs	r2, r3, #5
 80080e2:	2a03      	cmp	r2, #3
 80080e4:	f040 8192 	bne.w	800840c <fFrameHandler+0xf0c>
  sFaraabinFobjectFunction *fnHandle = (sFaraabinFobjectFunction*)clientFrame->FobjectPtr;
 80080e8:	6866      	ldr	r6, [r4, #4]
  uint8_t *param = (uint8_t*)clientFrame->Payload;
 80080ea:	68a2      	ldr	r2, [r4, #8]
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 80080ec:	7821      	ldrb	r1, [r4, #0]
 80080ee:	f001 050f 	and.w	r5, r1, #15
    
    case eFB_PROP_GROUP_COMMAND: {
      
      eFaraabinLinkSerializer_FunctionPropertyIdCommand propId = (eFaraabinLinkSerializer_FunctionPropertyIdCommand)framePropId;

      switch(propId) {
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	f200 8117 	bhi.w	800832a <fFrameHandler+0xe2a>
 80080fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008100:	00610004 	.word	0x00610004
 8008104:	00d9009d 	.word	0x00d9009d
        
        case eFB_FN_PROP_ID_COMMAND_RUN: {
          
          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 8008108:	7813      	ldrb	r3, [r2, #0]
 800810a:	2400      	movs	r4, #0
 800810c:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 8008110:	7853      	ldrb	r3, [r2, #1]
 8008112:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 8008116:	7893      	ldrb	r3, [r2, #2]
 8008118:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 800811c:	78d3      	ldrb	r3, [r2, #3]
 800811e:	f363 641f 	bfi	r4, r3, #24, #8
          
          uByte2 paramSize;
          paramSize.Byte[0] = param[4];
 8008122:	7911      	ldrb	r1, [r2, #4]
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	f361 0307 	bfi	r3, r1, #0, #8
          paramSize.Byte[1] = param[5];
 800812c:	7951      	ldrb	r1, [r2, #5]
 800812e:	f361 230f 	bfi	r3, r1, #8, #8

          uint8_t ret = fFaraabinFunctionEngine_Start((uint32_t)fnHandle, objectPtr.U32, &(param[6]), paramSize.U16);
 8008132:	b29b      	uxth	r3, r3
 8008134:	3206      	adds	r2, #6
 8008136:	4621      	mov	r1, r4
 8008138:	4630      	mov	r0, r6
 800813a:	f7ff f89b 	bl	8007274 <fFaraabinFunctionEngine_Start>

          if(ret == FB_FENGINE_FUNCTION_ALREADY_RUNNING) {
 800813e:	2801      	cmp	r0, #1
 8008140:	d015      	beq.n	800816e <fFrameHandler+0xc6e>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_IS_RUNNING_NOW, controlReqSeq);
            
            break;
          }

          if(ret == FB_FENGINE_MAX_CONCURRENT_LIMIT_REACHED) {
 8008142:	2802      	cmp	r0, #2
 8008144:	d028      	beq.n	8008198 <fFrameHandler+0xc98>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_MAX_CONCURRENT_CMD_REACHED, controlReqSeq);
            
            break;
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_RUN, controlReqSeq);
 8008146:	2301      	movs	r3, #1
 8008148:	9309      	str	r3, [sp, #36]	@ 0x24
 800814a:	2200      	movs	r2, #0
 800814c:	9208      	str	r2, [sp, #32]
 800814e:	9207      	str	r2, [sp, #28]
 8008150:	9306      	str	r3, [sp, #24]
 8008152:	9505      	str	r5, [sp, #20]
 8008154:	9204      	str	r2, [sp, #16]
 8008156:	9203      	str	r2, [sp, #12]
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	9201      	str	r2, [sp, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	9200      	str	r2, [sp, #0]
 8008160:	f106 020c 	add.w	r2, r6, #12
 8008164:	4621      	mov	r1, r4
 8008166:	4630      	mov	r0, r6
 8008168:	f001 fa1a 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
          
          break;
 800816c:	e14e      	b.n	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_IS_RUNNING_NOW, controlReqSeq);
 800816e:	2301      	movs	r3, #1
 8008170:	9309      	str	r3, [sp, #36]	@ 0x24
 8008172:	2200      	movs	r2, #0
 8008174:	9208      	str	r2, [sp, #32]
 8008176:	9207      	str	r2, [sp, #28]
 8008178:	9306      	str	r3, [sp, #24]
 800817a:	9505      	str	r5, [sp, #20]
 800817c:	9204      	str	r2, [sp, #16]
 800817e:	9203      	str	r2, [sp, #12]
 8008180:	2106      	movs	r1, #6
 8008182:	9102      	str	r1, [sp, #8]
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	2203      	movs	r2, #3
 8008188:	9200      	str	r2, [sp, #0]
 800818a:	f106 020c 	add.w	r2, r6, #12
 800818e:	4621      	mov	r1, r4
 8008190:	4630      	mov	r0, r6
 8008192:	f001 fa05 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 8008196:	e139      	b.n	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_MAX_CONCURRENT_CMD_REACHED, controlReqSeq);
 8008198:	2301      	movs	r3, #1
 800819a:	9309      	str	r3, [sp, #36]	@ 0x24
 800819c:	2200      	movs	r2, #0
 800819e:	9208      	str	r2, [sp, #32]
 80081a0:	9207      	str	r2, [sp, #28]
 80081a2:	9306      	str	r3, [sp, #24]
 80081a4:	9505      	str	r5, [sp, #20]
 80081a6:	9204      	str	r2, [sp, #16]
 80081a8:	9203      	str	r2, [sp, #12]
 80081aa:	2107      	movs	r1, #7
 80081ac:	9102      	str	r1, [sp, #8]
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	2203      	movs	r2, #3
 80081b2:	9200      	str	r2, [sp, #0]
 80081b4:	f106 020c 	add.w	r2, r6, #12
 80081b8:	4621      	mov	r1, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f001 f9f0 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 80081c0:	e124      	b.n	800840c <fFrameHandler+0xf0c>
        }
        
        case eFB_FN_PROP_ID_COMMAND_STOP: {
          
          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 80081c2:	7813      	ldrb	r3, [r2, #0]
 80081c4:	2400      	movs	r4, #0
 80081c6:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 80081ca:	7853      	ldrb	r3, [r2, #1]
 80081cc:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 80081d0:	7893      	ldrb	r3, [r2, #2]
 80081d2:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 80081d6:	78d3      	ldrb	r3, [r2, #3]
 80081d8:	f363 641f 	bfi	r4, r3, #24, #8
          
          uint8_t ret = fFaraabinFunctionEngine_Stop(clientFrame->FobjectPtr, objectPtr.U32);
 80081dc:	4621      	mov	r1, r4
 80081de:	4630      	mov	r0, r6
 80081e0:	f7ff f89e 	bl	8007320 <fFaraabinFunctionEngine_Stop>

          if(ret == FB_FENGINE_FUNCTION_NOT_IN_LIST) {
 80081e4:	2803      	cmp	r0, #3
 80081e6:	d013      	beq.n	8008210 <fFrameHandler+0xd10>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
            
            break;
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_STOP, controlReqSeq);
 80081e8:	2301      	movs	r3, #1
 80081ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ec:	2200      	movs	r2, #0
 80081ee:	9208      	str	r2, [sp, #32]
 80081f0:	9207      	str	r2, [sp, #28]
 80081f2:	9306      	str	r3, [sp, #24]
 80081f4:	9505      	str	r5, [sp, #20]
 80081f6:	9204      	str	r2, [sp, #16]
 80081f8:	9203      	str	r2, [sp, #12]
 80081fa:	2102      	movs	r1, #2
 80081fc:	9102      	str	r1, [sp, #8]
 80081fe:	9201      	str	r2, [sp, #4]
 8008200:	9100      	str	r1, [sp, #0]
 8008202:	f106 020c 	add.w	r2, r6, #12
 8008206:	4621      	mov	r1, r4
 8008208:	4630      	mov	r0, r6
 800820a:	f001 f9c9 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>

          break;
 800820e:	e0fd      	b.n	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
 8008210:	2301      	movs	r3, #1
 8008212:	9309      	str	r3, [sp, #36]	@ 0x24
 8008214:	2200      	movs	r2, #0
 8008216:	9208      	str	r2, [sp, #32]
 8008218:	9207      	str	r2, [sp, #28]
 800821a:	9306      	str	r3, [sp, #24]
 800821c:	9505      	str	r5, [sp, #20]
 800821e:	9204      	str	r2, [sp, #16]
 8008220:	9203      	str	r2, [sp, #12]
 8008222:	2108      	movs	r1, #8
 8008224:	9102      	str	r1, [sp, #8]
 8008226:	9201      	str	r2, [sp, #4]
 8008228:	2203      	movs	r2, #3
 800822a:	9200      	str	r2, [sp, #0]
 800822c:	f106 020c 	add.w	r2, r6, #12
 8008230:	4621      	mov	r1, r4
 8008232:	4630      	mov	r0, r6
 8008234:	f001 f9b4 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 8008238:	e0e8      	b.n	800840c <fFrameHandler+0xf0c>
        }
        
        case eFB_FN_PROP_ID_COMMAND_PAUSE: {

          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 800823a:	7813      	ldrb	r3, [r2, #0]
 800823c:	2400      	movs	r4, #0
 800823e:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 8008242:	7853      	ldrb	r3, [r2, #1]
 8008244:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 8008248:	7893      	ldrb	r3, [r2, #2]
 800824a:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 800824e:	78d3      	ldrb	r3, [r2, #3]
 8008250:	f363 641f 	bfi	r4, r3, #24, #8
          
          uint8_t ret = fFaraabinFunctionEngine_Pause(clientFrame->FobjectPtr, objectPtr.U32);
 8008254:	4621      	mov	r1, r4
 8008256:	4630      	mov	r0, r6
 8008258:	f7ff f86f 	bl	800733a <fFaraabinFunctionEngine_Pause>
          
          if(ret == FB_FENGINE_FUNCTION_NOT_IN_LIST) {
 800825c:	2803      	cmp	r0, #3
 800825e:	d014      	beq.n	800828a <fFrameHandler+0xd8a>
            Faraabin_EventSystemException_EndResponse_((uint32_t)fnHandle, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
            
            break;
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_PAUSE, controlReqSeq);
 8008260:	2301      	movs	r3, #1
 8008262:	9309      	str	r3, [sp, #36]	@ 0x24
 8008264:	2200      	movs	r2, #0
 8008266:	9208      	str	r2, [sp, #32]
 8008268:	9207      	str	r2, [sp, #28]
 800826a:	9306      	str	r3, [sp, #24]
 800826c:	9505      	str	r5, [sp, #20]
 800826e:	9204      	str	r2, [sp, #16]
 8008270:	9203      	str	r2, [sp, #12]
 8008272:	2103      	movs	r1, #3
 8008274:	9102      	str	r1, [sp, #8]
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	9200      	str	r2, [sp, #0]
 800827c:	f106 020c 	add.w	r2, r6, #12
 8008280:	4621      	mov	r1, r4
 8008282:	4630      	mov	r0, r6
 8008284:	f001 f98c 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>

          break;
 8008288:	e0c0      	b.n	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)fnHandle, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
 800828a:	2301      	movs	r3, #1
 800828c:	9309      	str	r3, [sp, #36]	@ 0x24
 800828e:	2100      	movs	r1, #0
 8008290:	9108      	str	r1, [sp, #32]
 8008292:	9107      	str	r1, [sp, #28]
 8008294:	9306      	str	r3, [sp, #24]
 8008296:	9505      	str	r5, [sp, #20]
 8008298:	9104      	str	r1, [sp, #16]
 800829a:	9103      	str	r1, [sp, #12]
 800829c:	2208      	movs	r2, #8
 800829e:	9202      	str	r2, [sp, #8]
 80082a0:	9101      	str	r1, [sp, #4]
 80082a2:	2203      	movs	r2, #3
 80082a4:	9200      	str	r2, [sp, #0]
 80082a6:	f106 020c 	add.w	r2, r6, #12
 80082aa:	4630      	mov	r0, r6
 80082ac:	f001 f978 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 80082b0:	e0ac      	b.n	800840c <fFrameHandler+0xf0c>
        }
        
        case eFB_FN_PROP_ID_COMMAND_RESUME: {

          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 80082b2:	7813      	ldrb	r3, [r2, #0]
 80082b4:	2400      	movs	r4, #0
 80082b6:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 80082ba:	7853      	ldrb	r3, [r2, #1]
 80082bc:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 80082c0:	7893      	ldrb	r3, [r2, #2]
 80082c2:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 80082c6:	78d3      	ldrb	r3, [r2, #3]
 80082c8:	f363 641f 	bfi	r4, r3, #24, #8
          
          uint8_t ret = fFaraabinFunctionEngine_Resume(clientFrame->FobjectPtr, objectPtr.U32);
 80082cc:	4621      	mov	r1, r4
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff f841 	bl	8007356 <fFaraabinFunctionEngine_Resume>
          
          if(ret == FB_FENGINE_FUNCTION_NOT_IN_LIST) {
 80082d4:	2803      	cmp	r0, #3
 80082d6:	d014      	beq.n	8008302 <fFrameHandler+0xe02>
            
            break;
            
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_RESUME, controlReqSeq);
 80082d8:	2301      	movs	r3, #1
 80082da:	9309      	str	r3, [sp, #36]	@ 0x24
 80082dc:	2200      	movs	r2, #0
 80082de:	9208      	str	r2, [sp, #32]
 80082e0:	9207      	str	r2, [sp, #28]
 80082e2:	9306      	str	r3, [sp, #24]
 80082e4:	9505      	str	r5, [sp, #20]
 80082e6:	9204      	str	r2, [sp, #16]
 80082e8:	9203      	str	r2, [sp, #12]
 80082ea:	2104      	movs	r1, #4
 80082ec:	9102      	str	r1, [sp, #8]
 80082ee:	9201      	str	r2, [sp, #4]
 80082f0:	2202      	movs	r2, #2
 80082f2:	9200      	str	r2, [sp, #0]
 80082f4:	f106 020c 	add.w	r2, r6, #12
 80082f8:	4621      	mov	r1, r4
 80082fa:	4630      	mov	r0, r6
 80082fc:	f001 f950 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>

          break;
 8008300:	e084      	b.n	800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)fnHandle, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
 8008302:	2301      	movs	r3, #1
 8008304:	9309      	str	r3, [sp, #36]	@ 0x24
 8008306:	2100      	movs	r1, #0
 8008308:	9108      	str	r1, [sp, #32]
 800830a:	9107      	str	r1, [sp, #28]
 800830c:	9306      	str	r3, [sp, #24]
 800830e:	9505      	str	r5, [sp, #20]
 8008310:	9104      	str	r1, [sp, #16]
 8008312:	9103      	str	r1, [sp, #12]
 8008314:	2208      	movs	r2, #8
 8008316:	9202      	str	r2, [sp, #8]
 8008318:	9101      	str	r1, [sp, #4]
 800831a:	2203      	movs	r2, #3
 800831c:	9200      	str	r2, [sp, #0]
 800831e:	f106 020c 	add.w	r2, r6, #12
 8008322:	4630      	mov	r0, r6
 8008324:	f001 f93c 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 8008328:	e070      	b.n	800840c <fFrameHandler+0xf0c>
    }
  }
  
  if(errorFobjectProperty) {
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)fnHandle,
 800832a:	2301      	movs	r3, #1
 800832c:	9309      	str	r3, [sp, #36]	@ 0x24
 800832e:	2100      	movs	r1, #0
 8008330:	9108      	str	r1, [sp, #32]
 8008332:	9107      	str	r1, [sp, #28]
 8008334:	9306      	str	r3, [sp, #24]
 8008336:	9505      	str	r5, [sp, #20]
 8008338:	9304      	str	r3, [sp, #16]
 800833a:	441c      	add	r4, r3
 800833c:	9403      	str	r4, [sp, #12]
 800833e:	2205      	movs	r2, #5
 8008340:	9202      	str	r2, [sp, #8]
 8008342:	9101      	str	r1, [sp, #4]
 8008344:	2203      	movs	r2, #3
 8008346:	9200      	str	r2, [sp, #0]
 8008348:	f106 020c 	add.w	r2, r6, #12
 800834c:	4630      	mov	r0, r6
 800834e:	f001 f927 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8008352:	e05b      	b.n	800840c <fFrameHandler+0xf0c>
  
  #ifdef FARAABIN_ENABLE
  
  bool errorFobjectProperty = false;
  
  sFaraabinFobjectEventGroup *egHandle = (sFaraabinFobjectEventGroup*)clientFrame->FobjectPtr;
 8008354:	6865      	ldr	r5, [r4, #4]
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 8008356:	7863      	ldrb	r3, [r4, #1]
 8008358:	095a      	lsrs	r2, r3, #5
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
 800835a:	f003 031f 	and.w	r3, r3, #31
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 800835e:	7821      	ldrb	r1, [r4, #0]
 8008360:	f001 060f 	and.w	r6, r1, #15
  uint8_t controlAccessType = ClientFrame_GetAccessType_(clientFrame->Control);

  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 8008364:	2a01      	cmp	r2, #1
 8008366:	d016      	beq.n	8008396 <fFrameHandler+0xe96>
 8008368:	2a04      	cmp	r2, #4
 800836a:	d029      	beq.n	80083c0 <fFrameHandler+0xec0>
    }
  }
  
  if(errorFobjectProperty) {
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)egHandle,
 800836c:	78ab      	ldrb	r3, [r5, #2]
 800836e:	2201      	movs	r2, #1
 8008370:	9209      	str	r2, [sp, #36]	@ 0x24
 8008372:	2100      	movs	r1, #0
 8008374:	9108      	str	r1, [sp, #32]
 8008376:	9107      	str	r1, [sp, #28]
 8008378:	9206      	str	r2, [sp, #24]
 800837a:	9605      	str	r6, [sp, #20]
 800837c:	9204      	str	r2, [sp, #16]
 800837e:	4414      	add	r4, r2
 8008380:	9403      	str	r4, [sp, #12]
 8008382:	9202      	str	r2, [sp, #8]
 8008384:	9101      	str	r1, [sp, #4]
 8008386:	2203      	movs	r2, #3
 8008388:	9200      	str	r2, [sp, #0]
 800838a:	f105 0210 	add.w	r2, r5, #16
 800838e:	4628      	mov	r0, r5
 8008390:	f001 f906 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
 8008394:	e03a      	b.n	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e8      	bne.n	800836c <fFrameHandler+0xe6c>
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 800839a:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800839e:	d005      	beq.n	80083ac <fFrameHandler+0xeac>
            egHandle->Enable = (*clientFrame->Payload == 0U) ? false : true;
 80083a0:	68a3      	ldr	r3, [r4, #8]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	3b00      	subs	r3, #0
 80083a6:	bf18      	it	ne
 80083a8:	2301      	movne	r3, #1
 80083aa:	70ab      	strb	r3, [r5, #2]
          if(controlReqSeq != 0U) {
 80083ac:	2e00      	cmp	r6, #0
 80083ae:	d02d      	beq.n	800840c <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_CommonSendEnable(clientFrame->FobjectPtr, &egHandle->Seq, controlReqSeq, true);
 80083b0:	2301      	movs	r3, #1
 80083b2:	4632      	mov	r2, r6
 80083b4:	f105 0110 	add.w	r1, r5, #16
 80083b8:	6860      	ldr	r0, [r4, #4]
 80083ba:	f001 f9c1 	bl	8009740 <fFaraabinLinkSerializer_CommonSendEnable>
  if(errorFobjectProperty) {
 80083be:	e025      	b.n	800840c <fFrameHandler+0xf0c>
      switch(propId) {
 80083c0:	2b06      	cmp	r3, #6
 80083c2:	d1d3      	bne.n	800836c <fFrameHandler+0xe6c>
          clientFrame->Payload[clientFrame->PayloadSize] = 0x00U; // Terminate end of data
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	68a2      	ldr	r2, [r4, #8]
 80083c8:	2100      	movs	r1, #0
 80083ca:	54d1      	strb	r1, [r2, r3]
          if(egHandle->fpUserTerminalCallback != NULL) {
 80083cc:	696b      	ldr	r3, [r5, #20]
 80083ce:	b113      	cbz	r3, 80083d6 <fFrameHandler+0xed6>
            egHandle->fpUserTerminalCallback(clientFrame->Payload, clientFrame->PayloadSize);
 80083d0:	89a1      	ldrh	r1, [r4, #12]
 80083d2:	68a0      	ldr	r0, [r4, #8]
 80083d4:	4798      	blx	r3
          if(controlReqSeq != 0U) {
 80083d6:	b1ce      	cbz	r6, 800840c <fFrameHandler+0xf0c>
            Faraabin_EventSystem_EndResponse_((uint32_t)egHandle, &egHandle->Seq, egHandle->Enable, eEG_EVENT_INFO_USER_DATA_RECEIVED, controlReqSeq);
 80083d8:	78ab      	ldrb	r3, [r5, #2]
 80083da:	2201      	movs	r2, #1
 80083dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80083de:	2100      	movs	r1, #0
 80083e0:	9108      	str	r1, [sp, #32]
 80083e2:	9107      	str	r1, [sp, #28]
 80083e4:	9206      	str	r2, [sp, #24]
 80083e6:	9605      	str	r6, [sp, #20]
 80083e8:	9104      	str	r1, [sp, #16]
 80083ea:	9103      	str	r1, [sp, #12]
 80083ec:	9102      	str	r1, [sp, #8]
 80083ee:	9101      	str	r1, [sp, #4]
 80083f0:	2202      	movs	r2, #2
 80083f2:	9200      	str	r2, [sp, #0]
 80083f4:	f105 0210 	add.w	r2, r5, #16
 80083f8:	4628      	mov	r0, r5
 80083fa:	f001 f8d1 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 80083fe:	e005      	b.n	800840c <fFrameHandler+0xf0c>
      uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 8008400:	7821      	ldrb	r1, [r4, #0]
      fFaraabinFobjectMcu_SendEventSystemExceptionResponse(eMCU_EVENT_ERROR_UNSUPPORTED_FOBJECT_TYPE, controlReqSeq);
 8008402:	f001 010f 	and.w	r1, r1, #15
 8008406:	2010      	movs	r0, #16
 8008408:	f7fe fe38 	bl	800707c <fFaraabinFobjectMcu_SendEventSystemExceptionResponse>
}
 800840c:	b00f      	add	sp, #60	@ 0x3c
 800840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008412:	bf00      	nop

08008414 <fSendCircularBuffer>:
/**
 * @brief Transmits available data in TX buffer to the link.
 * 
 * @param flush Forces the function to flsuh the buffer.
 */
static void fSendCircularBuffer(bool flush) {
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	b082      	sub	sp, #8
  uint8_t *buffPtr = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	9301      	str	r3, [sp, #4]
  uint16_t transmitSize = 0;
  
  if(LinkHandler.IsFlushingBuffer == true) {
 800841c:	4b21      	ldr	r3, [pc, #132]	@ (80084a4 <fSendCircularBuffer+0x90>)
 800841e:	7f1b      	ldrb	r3, [r3, #28]
 8008420:	b9a3      	cbnz	r3, 800844c <fSendCircularBuffer+0x38>
 8008422:	4606      	mov	r6, r0
    return;
  }
  
  if(flush == true) {
 8008424:	b110      	cbz	r0, 800842c <fSendCircularBuffer+0x18>
    LinkHandler.IsFlushingBuffer = true;
 8008426:	4b1f      	ldr	r3, [pc, #124]	@ (80084a4 <fSendCircularBuffer+0x90>)
 8008428:	2201      	movs	r2, #1
 800842a:	771a      	strb	r2, [r3, #28]
    
    if(flush == true) {
  
      while(fFaraabin_IsSending() == true) {
        
        if(fChrono_IsTimeout(&(LinkHandler.ChronoPortSending)) == true) {
 800842c:	4c1e      	ldr	r4, [pc, #120]	@ (80084a8 <fSendCircularBuffer+0x94>)
 800842e:	e011      	b.n	8008454 <fSendCircularBuffer+0x40>
      while(fFaraabin_IsSending() == true) {
 8008430:	f7f8 fffd 	bl	800142e <fFaraabin_IsSending>
 8008434:	b1a0      	cbz	r0, 8008460 <fSendCircularBuffer+0x4c>
        if(fChrono_IsTimeout(&(LinkHandler.ChronoPortSending)) == true) {
 8008436:	4620      	mov	r0, r4
 8008438:	f7fd fa7e 	bl	8005938 <fChrono_IsTimeout>
 800843c:	2800      	cmp	r0, #0
 800843e:	d0f7      	beq.n	8008430 <fSendCircularBuffer+0x1c>
          
          fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_TX_FRAME_TIMEOUT);
 8008440:	2009      	movs	r0, #9
 8008442:	f7fe fde5 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>

          if(flush) {
            LinkHandler.IsFlushingBuffer = false;
 8008446:	4b17      	ldr	r3, [pc, #92]	@ (80084a4 <fSendCircularBuffer+0x90>)
 8008448:	2200      	movs	r2, #0
 800844a:	771a      	strb	r2, [r3, #28]
  }while((flush == true) && (transmitSize > 0U));
  
  if(flush == true) {
    LinkHandler.IsFlushingBuffer = false;
  }
}
 800844c:	b002      	add	sp, #8
 800844e:	bd70      	pop	{r4, r5, r6, pc}
  }while((flush == true) && (transmitSize > 0U));
 8008450:	2e00      	cmp	r6, #0
 8008452:	d0fb      	beq.n	800844c <fSendCircularBuffer+0x38>
    if(flush == true) {
 8008454:	2e00      	cmp	r6, #0
 8008456:	d1eb      	bne.n	8008430 <fSendCircularBuffer+0x1c>
      if(fFaraabin_IsSending() == true) {
 8008458:	f7f8 ffe9 	bl	800142e <fFaraabin_IsSending>
 800845c:	2800      	cmp	r0, #0
 800845e:	d1f5      	bne.n	800844c <fSendCircularBuffer+0x38>
    transmitSize = fFaraabinLinkSerializer_FlushBuffer(&buffPtr);
 8008460:	a801      	add	r0, sp, #4
 8008462:	f001 f939 	bl	80096d8 <fFaraabinLinkSerializer_FlushBuffer>
    if(transmitSize > 0U) {
 8008466:	4605      	mov	r5, r0
 8008468:	b1b0      	cbz	r0, 8008498 <fSendCircularBuffer+0x84>
      if(buffPtr == NULL) {
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	b1a3      	cbz	r3, 8008498 <fSendCircularBuffer+0x84>
      fChrono_StartTimeoutMs(&LinkHandler.ChronoPortSending, (transmitSize * FB_BYTE_SENDING_TIME_MS) * 2U);
 800846e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8008472:	0089      	lsls	r1, r1, #2
 8008474:	4620      	mov	r0, r4
 8008476:	f7fd fa3b 	bl	80058f0 <fChrono_StartTimeoutMs>
      (fFaraabinFobjectMcu_GetFobject())->StatisticsTxBytesCnt += transmitSize;
 800847a:	f7fe fe19 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 800847e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008480:	442b      	add	r3, r5
 8008482:	6343      	str	r3, [r0, #52]	@ 0x34
      if(fFaraabin_Send(buffPtr, transmitSize) != 0U) {
 8008484:	4629      	mov	r1, r5
 8008486:	9801      	ldr	r0, [sp, #4]
 8008488:	f7f8 ffcd 	bl	8001426 <fFaraabin_Send>
 800848c:	2800      	cmp	r0, #0
 800848e:	d0df      	beq.n	8008450 <fSendCircularBuffer+0x3c>
        fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_TX_FRAME_SEND);
 8008490:	200a      	movs	r0, #10
 8008492:	f7fe fdbd 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>
 8008496:	e7db      	b.n	8008450 <fSendCircularBuffer+0x3c>
  if(flush == true) {
 8008498:	2e00      	cmp	r6, #0
 800849a:	d0d7      	beq.n	800844c <fSendCircularBuffer+0x38>
    LinkHandler.IsFlushingBuffer = false;
 800849c:	4b01      	ldr	r3, [pc, #4]	@ (80084a4 <fSendCircularBuffer+0x90>)
 800849e:	2200      	movs	r2, #0
 80084a0:	771a      	strb	r2, [r3, #28]
 80084a2:	e7d3      	b.n	800844c <fSendCircularBuffer+0x38>
 80084a4:	20002a50 	.word	0x20002a50
 80084a8:	20002a70 	.word	0x20002a70

080084ac <fFaraabinLinkHandler_Init>:
uint8_t fFaraabinLinkHandler_Init(uint8_t *rxBuffer, uint16_t rxBufferSize) {
 80084ac:	b508      	push	{r3, lr}
  LinkHandler.Init = false;
 80084ae:	4b11      	ldr	r3, [pc, #68]	@ (80084f4 <fFaraabinLinkHandler_Init+0x48>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
  LinkHandler.Password = NULL;
 80084b4:	639a      	str	r2, [r3, #56]	@ 0x38
  if(rxBufferSize < 20U) {
 80084b6:	2913      	cmp	r1, #19
 80084b8:	d91a      	bls.n	80084f0 <fFaraabinLinkHandler_Init+0x44>
  LinkHandler.RxCharBufferSize = rxBufferSize;
 80084ba:	8119      	strh	r1, [r3, #8]
  if(rxBuffer != NULL) {
 80084bc:	b178      	cbz	r0, 80084de <fFaraabinLinkHandler_Init+0x32>
    LinkHandler.RxCharBuffer = rxBuffer;
 80084be:	6058      	str	r0, [r3, #4]
    LinkHandler.RxCharBuffer[i] = 0x00U;
 80084c0:	4b0c      	ldr	r3, [pc, #48]	@ (80084f4 <fFaraabinLinkHandler_Init+0x48>)
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	2000      	movs	r0, #0
 80084c6:	7010      	strb	r0, [r2, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	7050      	strb	r0, [r2, #1]
  LinkHandler.IsNewFrameDetected = false;
 80084cc:	7298      	strb	r0, [r3, #10]
  LinkHandler.IsFlushingBuffer = false;
 80084ce:	7718      	strb	r0, [r3, #28]
  LinkHandler.DictSendingMode.ReqSeq = 0U;
 80084d0:	f883 0035 	strb.w	r0, [r3, #53]	@ 0x35
  LinkHandler.DictSendingMode.SendFlag = false;
 80084d4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
  LinkHandler.Init = true;
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
}
 80084dc:	bd08      	pop	{r3, pc}
    LinkHandler.RxCharBuffer = malloc(rxBufferSize);
 80084de:	4608      	mov	r0, r1
 80084e0:	f001 fa68 	bl	80099b4 <malloc>
 80084e4:	4b03      	ldr	r3, [pc, #12]	@ (80084f4 <fFaraabinLinkHandler_Init+0x48>)
 80084e6:	6058      	str	r0, [r3, #4]
    if(LinkHandler.RxCharBuffer == NULL) {
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d1e9      	bne.n	80084c0 <fFaraabinLinkHandler_Init+0x14>
      return FB_LINK_HANDLER_RESULT_ERROR_RX_BUFFER_SIZE_IS_NULL;
 80084ec:	2002      	movs	r0, #2
 80084ee:	e7f5      	b.n	80084dc <fFaraabinLinkHandler_Init+0x30>
    return FB_LINK_HANDLER_RESULT_ERROR_ALLOCATED_RX_BUFFER_SIZE_IS_SMALL;
 80084f0:	2001      	movs	r0, #1
 80084f2:	e7f3      	b.n	80084dc <fFaraabinLinkHandler_Init+0x30>
 80084f4:	20002a50 	.word	0x20002a50

080084f8 <fFaraabinLinkHandler_Run>:
  if(!LinkHandler.Init) {
 80084f8:	4b37      	ldr	r3, [pc, #220]	@ (80085d8 <fFaraabinLinkHandler_Run+0xe0>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d069      	beq.n	80085d4 <fFaraabinLinkHandler_Run+0xdc>
void fFaraabinLinkHandler_Run(void) {
 8008500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(LinkHandler.IsNewFrameDetected) {
 8008504:	4b34      	ldr	r3, [pc, #208]	@ (80085d8 <fFaraabinLinkHandler_Run+0xe0>)
 8008506:	7a9b      	ldrb	r3, [r3, #10]
 8008508:	b943      	cbnz	r3, 800851c <fFaraabinLinkHandler_Run+0x24>
  fSendCircularBuffer(false);
 800850a:	2000      	movs	r0, #0
 800850c:	f7ff ff82 	bl	8008414 <fSendCircularBuffer>
  if(LinkHandler.DictSendingMode.SendFlag == true) {
 8008510:	4b31      	ldr	r3, [pc, #196]	@ (80085d8 <fFaraabinLinkHandler_Run+0xe0>)
 8008512:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008516:	b94b      	cbnz	r3, 800852c <fFaraabinLinkHandler_Run+0x34>
}
 8008518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fFrameHandler(&LinkHandler.ClientFrame);
 800851c:	4c2f      	ldr	r4, [pc, #188]	@ (80085dc <fFaraabinLinkHandler_Run+0xe4>)
 800851e:	4620      	mov	r0, r4
 8008520:	f7fe ffee 	bl	8007500 <fFrameHandler>
    LinkHandler.IsNewFrameDetected = false;
 8008524:	2300      	movs	r3, #0
 8008526:	f804 3c02 	strb.w	r3, [r4, #-2]
 800852a:	e7ee      	b.n	800850a <fFaraabinLinkHandler_Run+0x12>
    uint16_t dictQty = fFaraabinDatabase_GetNumberOfAddedDicts();
 800852c:	f7fd fb92 	bl	8005c54 <fFaraabinDatabase_GetNumberOfAddedDicts>
 8008530:	4606      	mov	r6, r0
    if(LinkHandler.DictSendingMode.IsBlocking && FaraabinFlags.Features.Bitfield.AllowSendDickBlocking) {
 8008532:	4b29      	ldr	r3, [pc, #164]	@ (80085d8 <fFaraabinLinkHandler_Run+0xe0>)
 8008534:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008538:	b33b      	cbz	r3, 800858a <fFaraabinLinkHandler_Run+0x92>
 800853a:	4b29      	ldr	r3, [pc, #164]	@ (80085e0 <fFaraabinLinkHandler_Run+0xe8>)
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	f013 0f01 	tst.w	r3, #1
 8008542:	d022      	beq.n	800858a <fFaraabinLinkHandler_Run+0x92>
      for(uint16_t i = 0; i < dictQty; i++) {
 8008544:	b190      	cbz	r0, 800856c <fFaraabinLinkHandler_Run+0x74>
 8008546:	2400      	movs	r4, #0
        fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), i, LinkHandler.DictSendingMode.ReqSeq);
 8008548:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80085d8 <fFaraabinLinkHandler_Run+0xe0>
        fSendCircularBuffer(true);
 800854c:	2701      	movs	r7, #1
 800854e:	b2a5      	uxth	r5, r4
        fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), i, LinkHandler.DictSendingMode.ReqSeq);
 8008550:	4628      	mov	r0, r5
 8008552:	f7fd fbeb 	bl	8005d2c <fFaraabinDatabase_GetFobjectPointerFromDict>
 8008556:	f898 2035 	ldrb.w	r2, [r8, #53]	@ 0x35
 800855a:	4629      	mov	r1, r5
 800855c:	f001 f8a6 	bl	80096ac <fFaraabinLinkSerializer_SerializeDict>
        fSendCircularBuffer(true);
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ff57 	bl	8008414 <fSendCircularBuffer>
      for(uint16_t i = 0; i < dictQty; i++) {
 8008566:	3401      	adds	r4, #1
 8008568:	42b4      	cmp	r4, r6
 800856a:	d1f0      	bne.n	800854e <fFaraabinLinkHandler_Run+0x56>
      LinkHandler.DictSendingMode.SendFlag = false;
 800856c:	4b1a      	ldr	r3, [pc, #104]	@ (80085d8 <fFaraabinLinkHandler_Run+0xe0>)
 800856e:	2400      	movs	r4, #0
 8008570:	f883 4034 	strb.w	r4, [r3, #52]	@ 0x34
      fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_DICT_END, LinkHandler.DictSendingMode.ReqSeq);
 8008574:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 8008578:	2001      	movs	r0, #1
 800857a:	f7fe fd65 	bl	8007048 <fFaraabinFobjectMcu_SendEventSystemResponse>
      FaraabinFlags.Status.Bitfield.NewDict = 0U;
 800857e:	4b18      	ldr	r3, [pc, #96]	@ (80085e0 <fFaraabinLinkHandler_Run+0xe8>)
 8008580:	791a      	ldrb	r2, [r3, #4]
 8008582:	f364 0241 	bfi	r2, r4, #1, #1
 8008586:	711a      	strb	r2, [r3, #4]
 8008588:	e7c6      	b.n	8008518 <fFaraabinLinkHandler_Run+0x20>
       fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(dictIndex), dictIndex, LinkHandler.DictSendingMode.ReqSeq);
 800858a:	4c16      	ldr	r4, [pc, #88]	@ (80085e4 <fFaraabinLinkHandler_Run+0xec>)
 800858c:	8820      	ldrh	r0, [r4, #0]
 800858e:	f7fd fbcd 	bl	8005d2c <fFaraabinDatabase_GetFobjectPointerFromDict>
 8008592:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <fFaraabinLinkHandler_Run+0xe0>)
 8008594:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8008598:	8821      	ldrh	r1, [r4, #0]
 800859a:	f001 f887 	bl	80096ac <fFaraabinLinkSerializer_SerializeDict>
       fSendCircularBuffer(true);
 800859e:	2001      	movs	r0, #1
 80085a0:	f7ff ff38 	bl	8008414 <fSendCircularBuffer>
       dictIndex++;
 80085a4:	8823      	ldrh	r3, [r4, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	b29b      	uxth	r3, r3
       if(dictIndex >= dictQty) {
 80085aa:	42b3      	cmp	r3, r6
 80085ac:	d201      	bcs.n	80085b2 <fFaraabinLinkHandler_Run+0xba>
       dictIndex++;
 80085ae:	8023      	strh	r3, [r4, #0]
 80085b0:	e7b2      	b.n	8008518 <fFaraabinLinkHandler_Run+0x20>
         dictIndex = 0U;
 80085b2:	2400      	movs	r4, #0
 80085b4:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <fFaraabinLinkHandler_Run+0xec>)
 80085b6:	801c      	strh	r4, [r3, #0]
         LinkHandler.DictSendingMode.SendFlag = false;
 80085b8:	4b07      	ldr	r3, [pc, #28]	@ (80085d8 <fFaraabinLinkHandler_Run+0xe0>)
 80085ba:	f883 4034 	strb.w	r4, [r3, #52]	@ 0x34
         fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_DICT_END, LinkHandler.DictSendingMode.ReqSeq);
 80085be:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 80085c2:	2001      	movs	r0, #1
 80085c4:	f7fe fd40 	bl	8007048 <fFaraabinFobjectMcu_SendEventSystemResponse>
         FaraabinFlags.Status.Bitfield.NewDict = 0U;
 80085c8:	4b05      	ldr	r3, [pc, #20]	@ (80085e0 <fFaraabinLinkHandler_Run+0xe8>)
 80085ca:	791a      	ldrb	r2, [r3, #4]
 80085cc:	f364 0241 	bfi	r2, r4, #1, #1
 80085d0:	711a      	strb	r2, [r3, #4]
 80085d2:	e7a1      	b.n	8008518 <fFaraabinLinkHandler_Run+0x20>
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	20002a50 	.word	0x20002a50
 80085dc:	20002a5c 	.word	0x20002a5c
 80085e0:	20002638 	.word	0x20002638
 80085e4:	20002a4e 	.word	0x20002a4e

080085e8 <fFaraabinLinkHandler_CharReceived>:
void fFaraabinLinkHandler_CharReceived(uint8_t c) {
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4605      	mov	r5, r0
  sFaraabinFobjectMcu* mcuHandle = fFaraabinFobjectMcu_GetFobject();
 80085ec:	f7fe fd60 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 80085f0:	4604      	mov	r4, r0
  mcuHandle->StatisticsRxBytesCnt++;
 80085f2:	69c3      	ldr	r3, [r0, #28]
 80085f4:	3301      	adds	r3, #1
 80085f6:	61c3      	str	r3, [r0, #28]
  if(LinkHandler.IsNewFrameDetected) {
 80085f8:	4b31      	ldr	r3, [pc, #196]	@ (80086c0 <fFaraabinLinkHandler_CharReceived+0xd8>)
 80085fa:	7a9b      	ldrb	r3, [r3, #10]
 80085fc:	b96b      	cbnz	r3, 800861a <fFaraabinLinkHandler_CharReceived+0x32>
  if(c != FB_EOF) {
 80085fe:	2d7e      	cmp	r5, #126	@ 0x7e
 8008600:	d01b      	beq.n	800863a <fFaraabinLinkHandler_CharReceived+0x52>
    LinkHandler.RxCharBuffer[RxCharBufferIndex++] = c;
 8008602:	4a2f      	ldr	r2, [pc, #188]	@ (80086c0 <fFaraabinLinkHandler_CharReceived+0xd8>)
 8008604:	6854      	ldr	r4, [r2, #4]
 8008606:	482f      	ldr	r0, [pc, #188]	@ (80086c4 <fFaraabinLinkHandler_CharReceived+0xdc>)
 8008608:	8801      	ldrh	r1, [r0, #0]
 800860a:	1c4b      	adds	r3, r1, #1
 800860c:	b29b      	uxth	r3, r3
 800860e:	8003      	strh	r3, [r0, #0]
 8008610:	5465      	strb	r5, [r4, r1]
    if(RxCharBufferIndex >= LinkHandler.RxCharBufferSize) {
 8008612:	8912      	ldrh	r2, [r2, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d90a      	bls.n	800862e <fFaraabinLinkHandler_CharReceived+0x46>
}
 8008618:	bd38      	pop	{r3, r4, r5, pc}
    mcuHandle->StatisticsRxFramesOverrideErrorCnt++;
 800861a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800861c:	3301      	adds	r3, #1
 800861e:	6283      	str	r3, [r0, #40]	@ 0x28
    RxCharBufferIndex = 0U;
 8008620:	4b28      	ldr	r3, [pc, #160]	@ (80086c4 <fFaraabinLinkHandler_CharReceived+0xdc>)
 8008622:	2200      	movs	r2, #0
 8008624:	801a      	strh	r2, [r3, #0]
    fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_RX_FRAME_BEFORE_END_OF_PREVIOUS_FRAME);
 8008626:	2005      	movs	r0, #5
 8008628:	f7fe fcf2 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>
 800862c:	e7e7      	b.n	80085fe <fFaraabinLinkHandler_CharReceived+0x16>
      RxCharBufferIndex = 0U;
 800862e:	2200      	movs	r2, #0
 8008630:	8002      	strh	r2, [r0, #0]
      fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_RX_FRAME_BIG_SIZE);
 8008632:	2004      	movs	r0, #4
 8008634:	f7fe fcec 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>
 8008638:	e7ee      	b.n	8008618 <fFaraabinLinkHandler_CharReceived+0x30>
    mcuHandle->StatisticsRxFramesCnt++;
 800863a:	69a3      	ldr	r3, [r4, #24]
 800863c:	3301      	adds	r3, #1
 800863e:	61a3      	str	r3, [r4, #24]
    uint8_t ret = fFaraaninLinkDeserializer_Deserialize(LinkHandler.RxCharBuffer, RxCharBufferIndex, &LinkHandler.ClientFrame);
 8008640:	4a21      	ldr	r2, [pc, #132]	@ (80086c8 <fFaraabinLinkHandler_CharReceived+0xe0>)
 8008642:	4b20      	ldr	r3, [pc, #128]	@ (80086c4 <fFaraabinLinkHandler_CharReceived+0xdc>)
 8008644:	8819      	ldrh	r1, [r3, #0]
 8008646:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800864a:	f7fe ff01 	bl	8007450 <fFaraaninLinkDeserializer_Deserialize>
    switch(ret) {
 800864e:	2803      	cmp	r0, #3
 8008650:	d831      	bhi.n	80086b6 <fFaraabinLinkHandler_CharReceived+0xce>
 8008652:	e8df f000 	tbb	[pc, r0]
 8008656:	2602      	.short	0x2602
 8008658:	0f1c      	.short	0x0f1c
        uint8_t ClientFramePriority = ClientFrame_GetPriority_(LinkHandler.ClientFrame.Control);
 800865a:	4b19      	ldr	r3, [pc, #100]	@ (80086c0 <fFaraabinLinkHandler_CharReceived+0xd8>)
 800865c:	7b1b      	ldrb	r3, [r3, #12]
        if(ClientFramePriority == (uint8_t)eFB_CLIENT_FRAME_PRIORITY_HIGH) {
 800865e:	f013 0f20 	tst.w	r3, #32
 8008662:	d103      	bne.n	800866c <fFaraabinLinkHandler_CharReceived+0x84>
          LinkHandler.IsNewFrameDetected = true;
 8008664:	4b16      	ldr	r3, [pc, #88]	@ (80086c0 <fFaraabinLinkHandler_CharReceived+0xd8>)
 8008666:	2201      	movs	r2, #1
 8008668:	729a      	strb	r2, [r3, #10]
 800866a:	e00c      	b.n	8008686 <fFaraabinLinkHandler_CharReceived+0x9e>
          fFrameHandler(&LinkHandler.ClientFrame);
 800866c:	4816      	ldr	r0, [pc, #88]	@ (80086c8 <fFaraabinLinkHandler_CharReceived+0xe0>)
 800866e:	f7fe ff47 	bl	8007500 <fFrameHandler>
 8008672:	e008      	b.n	8008686 <fFaraabinLinkHandler_CharReceived+0x9e>
        mcuHandle->StatisticsRxFramesChecksumErrorCnt++;
 8008674:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008676:	3301      	adds	r3, #1
 8008678:	6263      	str	r3, [r4, #36]	@ 0x24
        LinkHandler.IsNewFrameDetected = false;
 800867a:	4b11      	ldr	r3, [pc, #68]	@ (80086c0 <fFaraabinLinkHandler_CharReceived+0xd8>)
 800867c:	2200      	movs	r2, #0
 800867e:	729a      	strb	r2, [r3, #10]
        fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_RX_FRAME_CHECKSUM);
 8008680:	2007      	movs	r0, #7
 8008682:	f7fe fcc5 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>
    RxCharBufferIndex = 0U;
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <fFaraabinLinkHandler_CharReceived+0xdc>)
 8008688:	2200      	movs	r2, #0
 800868a:	801a      	strh	r2, [r3, #0]
}
 800868c:	e7c4      	b.n	8008618 <fFaraabinLinkHandler_CharReceived+0x30>
        mcuHandle->StatisticsRxFramesEscapingErrorCnt++;
 800868e:	6a23      	ldr	r3, [r4, #32]
 8008690:	3301      	adds	r3, #1
 8008692:	6223      	str	r3, [r4, #32]
        LinkHandler.IsNewFrameDetected = false;
 8008694:	4b0a      	ldr	r3, [pc, #40]	@ (80086c0 <fFaraabinLinkHandler_CharReceived+0xd8>)
 8008696:	2200      	movs	r2, #0
 8008698:	729a      	strb	r2, [r3, #10]
        fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_RX_FRAME_DESCAPE);
 800869a:	2006      	movs	r0, #6
 800869c:	f7fe fcb8 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>
        break;
 80086a0:	e7f1      	b.n	8008686 <fFaraabinLinkHandler_CharReceived+0x9e>
        mcuHandle->StatisticsRxFramesMinimumSizeErrorCnt++;
 80086a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80086a4:	3301      	adds	r3, #1
 80086a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        LinkHandler.IsNewFrameDetected = false;
 80086a8:	4b05      	ldr	r3, [pc, #20]	@ (80086c0 <fFaraabinLinkHandler_CharReceived+0xd8>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	729a      	strb	r2, [r3, #10]
        fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_RX_FRAME_SMALL_SIZE);
 80086ae:	2008      	movs	r0, #8
 80086b0:	f7fe fcae 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>
        break;
 80086b4:	e7e7      	b.n	8008686 <fFaraabinLinkHandler_CharReceived+0x9e>
        fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_UNDEF);
 80086b6:	200c      	movs	r0, #12
 80086b8:	f7fe fcaa 	bl	8007010 <fFaraabinFobjectMcu_SendEventSystemException>
        break;
 80086bc:	e7e3      	b.n	8008686 <fFaraabinLinkHandler_CharReceived+0x9e>
 80086be:	bf00      	nop
 80086c0:	20002a50 	.word	0x20002a50
 80086c4:	20002a4c 	.word	0x20002a4c
 80086c8:	20002a5c 	.word	0x20002a5c

080086cc <fFaraabinLinkHandler_FlushBuffer>:
void fFaraabinLinkHandler_FlushBuffer(void) {
 80086cc:	b508      	push	{r3, lr}
  fSendCircularBuffer(true);
 80086ce:	2001      	movs	r0, #1
 80086d0:	f7ff fea0 	bl	8008414 <fSendCircularBuffer>
}
 80086d4:	bd08      	pop	{r3, pc}

080086d6 <fFaraabinLinkHandler_GetRamUsage>:
}
 80086d6:	203c      	movs	r0, #60	@ 0x3c
 80086d8:	4770      	bx	lr
	...

080086dc <fAddToBufferU8>:
 */
static void fAddToBufferU8(uint8_t d) {
  
  uint8_t tmp = 0;

  _serializer.Serializer.CheckSum += d;
 80086dc:	4a48      	ldr	r2, [pc, #288]	@ (8008800 <fAddToBufferU8+0x124>)
 80086de:	f892 38a2 	ldrb.w	r3, [r2, #2210]	@ 0x8a2
 80086e2:	4403      	add	r3, r0
 80086e4:	f882 38a2 	strb.w	r3, [r2, #2210]	@ 0x8a2

  if ((d == FB_EOF) || (d == FB_ESC)) { // If byte escaping is needed
 80086e8:	f1a0 037d 	sub.w	r3, r0, #125	@ 0x7d
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d927      	bls.n	8008742 <fAddToBufferU8+0x66>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
    tmp = d ^ FB_ESC_XOR;
    fFaraabinLinkBuffer_Put_(&tmp, 1);
  } else {
    tmp = d;
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80086f2:	4b44      	ldr	r3, [pc, #272]	@ (8008804 <fAddToBufferU8+0x128>)
 80086f4:	6819      	ldr	r1, [r3, #0]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	5488      	strb	r0, [r1, r2]
 80086fa:	7d1b      	ldrb	r3, [r3, #20]
 80086fc:	b133      	cbz	r3, 800870c <fAddToBufferU8+0x30>
 80086fe:	4a41      	ldr	r2, [pc, #260]	@ (8008804 <fAddToBufferU8+0x128>)
 8008700:	68d3      	ldr	r3, [r2, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60d3      	str	r3, [r2, #12]
 8008706:	6852      	ldr	r2, [r2, #4]
 8008708:	4293      	cmp	r3, r2
 800870a:	d074      	beq.n	80087f6 <fAddToBufferU8+0x11a>
 800870c:	4a3d      	ldr	r2, [pc, #244]	@ (8008804 <fAddToBufferU8+0x128>)
 800870e:	6893      	ldr	r3, [r2, #8]
 8008710:	3301      	adds	r3, #1
 8008712:	6850      	ldr	r0, [r2, #4]
 8008714:	4283      	cmp	r3, r0
 8008716:	bf08      	it	eq
 8008718:	2300      	moveq	r3, #0
 800871a:	6093      	str	r3, [r2, #8]
 800871c:	6911      	ldr	r1, [r2, #16]
 800871e:	3101      	adds	r1, #1
 8008720:	4281      	cmp	r1, r0
 8008722:	bf28      	it	cs
 8008724:	4601      	movcs	r1, r0
 8008726:	6111      	str	r1, [r2, #16]
 8008728:	68d1      	ldr	r1, [r2, #12]
 800872a:	4299      	cmp	r1, r3
 800872c:	bf0c      	ite	eq
 800872e:	2301      	moveq	r3, #1
 8008730:	2300      	movne	r3, #0
 8008732:	7513      	strb	r3, [r2, #20]
 8008734:	d163      	bne.n	80087fe <fAddToBufferU8+0x122>
 8008736:	4a34      	ldr	r2, [pc, #208]	@ (8008808 <fAddToBufferU8+0x12c>)
 8008738:	7913      	ldrb	r3, [r2, #4]
 800873a:	f043 0304 	orr.w	r3, r3, #4
 800873e:	7113      	strb	r3, [r2, #4]
  }
}
 8008740:	4770      	bx	lr
static void fAddToBufferU8(uint8_t d) {
 8008742:	b410      	push	{r4}
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008744:	4b2f      	ldr	r3, [pc, #188]	@ (8008804 <fAddToBufferU8+0x128>)
 8008746:	6819      	ldr	r1, [r3, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	247d      	movs	r4, #125	@ 0x7d
 800874c:	548c      	strb	r4, [r1, r2]
 800874e:	7d1b      	ldrb	r3, [r3, #20]
 8008750:	b133      	cbz	r3, 8008760 <fAddToBufferU8+0x84>
 8008752:	4a2c      	ldr	r2, [pc, #176]	@ (8008804 <fAddToBufferU8+0x128>)
 8008754:	68d3      	ldr	r3, [r2, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60d3      	str	r3, [r2, #12]
 800875a:	6852      	ldr	r2, [r2, #4]
 800875c:	4293      	cmp	r3, r2
 800875e:	d042      	beq.n	80087e6 <fAddToBufferU8+0x10a>
 8008760:	4a28      	ldr	r2, [pc, #160]	@ (8008804 <fAddToBufferU8+0x128>)
 8008762:	6893      	ldr	r3, [r2, #8]
 8008764:	3301      	adds	r3, #1
 8008766:	6854      	ldr	r4, [r2, #4]
 8008768:	42a3      	cmp	r3, r4
 800876a:	bf08      	it	eq
 800876c:	2300      	moveq	r3, #0
 800876e:	6093      	str	r3, [r2, #8]
 8008770:	6911      	ldr	r1, [r2, #16]
 8008772:	3101      	adds	r1, #1
 8008774:	42a1      	cmp	r1, r4
 8008776:	bf28      	it	cs
 8008778:	4621      	movcs	r1, r4
 800877a:	6111      	str	r1, [r2, #16]
 800877c:	68d1      	ldr	r1, [r2, #12]
 800877e:	4299      	cmp	r1, r3
 8008780:	bf0c      	ite	eq
 8008782:	2101      	moveq	r1, #1
 8008784:	2100      	movne	r1, #0
 8008786:	7511      	strb	r1, [r2, #20]
 8008788:	d104      	bne.n	8008794 <fAddToBufferU8+0xb8>
 800878a:	491f      	ldr	r1, [pc, #124]	@ (8008808 <fAddToBufferU8+0x12c>)
 800878c:	790a      	ldrb	r2, [r1, #4]
 800878e:	f042 0204 	orr.w	r2, r2, #4
 8008792:	710a      	strb	r2, [r1, #4]
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008794:	4a1b      	ldr	r2, [pc, #108]	@ (8008804 <fAddToBufferU8+0x128>)
 8008796:	6811      	ldr	r1, [r2, #0]
    tmp = d ^ FB_ESC_XOR;
 8008798:	f080 0020 	eor.w	r0, r0, #32
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 800879c:	54c8      	strb	r0, [r1, r3]
 800879e:	7d13      	ldrb	r3, [r2, #20]
 80087a0:	b12b      	cbz	r3, 80087ae <fAddToBufferU8+0xd2>
 80087a2:	68d3      	ldr	r3, [r2, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60d3      	str	r3, [r2, #12]
 80087a8:	6852      	ldr	r2, [r2, #4]
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d01f      	beq.n	80087ee <fAddToBufferU8+0x112>
 80087ae:	4a15      	ldr	r2, [pc, #84]	@ (8008804 <fAddToBufferU8+0x128>)
 80087b0:	6893      	ldr	r3, [r2, #8]
 80087b2:	3301      	adds	r3, #1
 80087b4:	6850      	ldr	r0, [r2, #4]
 80087b6:	4283      	cmp	r3, r0
 80087b8:	bf08      	it	eq
 80087ba:	2300      	moveq	r3, #0
 80087bc:	6093      	str	r3, [r2, #8]
 80087be:	6911      	ldr	r1, [r2, #16]
 80087c0:	3101      	adds	r1, #1
 80087c2:	4281      	cmp	r1, r0
 80087c4:	bf28      	it	cs
 80087c6:	4601      	movcs	r1, r0
 80087c8:	6111      	str	r1, [r2, #16]
 80087ca:	68d1      	ldr	r1, [r2, #12]
 80087cc:	4299      	cmp	r1, r3
 80087ce:	bf0c      	ite	eq
 80087d0:	2301      	moveq	r3, #1
 80087d2:	2300      	movne	r3, #0
 80087d4:	7513      	strb	r3, [r2, #20]
 80087d6:	d104      	bne.n	80087e2 <fAddToBufferU8+0x106>
 80087d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008808 <fAddToBufferU8+0x12c>)
 80087da:	7913      	ldrb	r3, [r2, #4]
 80087dc:	f043 0304 	orr.w	r3, r3, #4
 80087e0:	7113      	strb	r3, [r2, #4]
}
 80087e2:	bc10      	pop	{r4}
 80087e4:	4770      	bx	lr
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80087e6:	4b07      	ldr	r3, [pc, #28]	@ (8008804 <fAddToBufferU8+0x128>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	60da      	str	r2, [r3, #12]
 80087ec:	e7b8      	b.n	8008760 <fAddToBufferU8+0x84>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80087ee:	4b05      	ldr	r3, [pc, #20]	@ (8008804 <fAddToBufferU8+0x128>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	60da      	str	r2, [r3, #12]
 80087f4:	e7db      	b.n	80087ae <fAddToBufferU8+0xd2>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80087f6:	4b03      	ldr	r3, [pc, #12]	@ (8008804 <fAddToBufferU8+0x128>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	60da      	str	r2, [r3, #12]
 80087fc:	e786      	b.n	800870c <fAddToBufferU8+0x30>
 80087fe:	4770      	bx	lr
 8008800:	20002a8c 	.word	0x20002a8c
 8008804:	20002a34 	.word	0x20002a34
 8008808:	20002638 	.word	0x20002638

0800880c <fAddToBufferU16>:
/**
 * @brief Adds an unsigned 16-bit data to faraabin TX buffer.
 * 
 * @param d Value of data.
 */
static void fAddToBufferU16(uint16_t d) {
 800880c:	b510      	push	{r4, lr}
 800880e:	4604      	mov	r4, r0
  
  uByte2 tmp;
  tmp.U16 = d;

  fAddToBufferU8(tmp.Byte[0]);
 8008810:	b2c0      	uxtb	r0, r0
 8008812:	f7ff ff63 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[1]);
 8008816:	0a20      	lsrs	r0, r4, #8
 8008818:	f7ff ff60 	bl	80086dc <fAddToBufferU8>
}
 800881c:	bd10      	pop	{r4, pc}

0800881e <fAddToBufferU32>:
/**
 * @brief Adds an unsigned 32-bit data to faraabin TX buffer.
 * 
 * @param d Value of data.
 */
static void fAddToBufferU32(uint32_t d) {
 800881e:	b510      	push	{r4, lr}
 8008820:	4604      	mov	r4, r0
  
  uByte4 tmp;
  tmp.U32 = d;
  
  fAddToBufferU8(tmp.Byte[0]);
 8008822:	b2c0      	uxtb	r0, r0
 8008824:	f7ff ff5a 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[1]);
 8008828:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800882c:	f7ff ff56 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[2]);
 8008830:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8008834:	f7ff ff52 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[3]);
 8008838:	0e20      	lsrs	r0, r4, #24
 800883a:	f7ff ff4f 	bl	80086dc <fAddToBufferU8>
}
 800883e:	bd10      	pop	{r4, pc}

08008840 <fAddToBuffer>:
 * @param data Pointer to the data.
 * @param size Size of data.
 */
static void fAddToBuffer(uint8_t *data, uint32_t size) {

  for(uint32_t i = 0; i < size; i++) {
 8008840:	b151      	cbz	r1, 8008858 <fAddToBuffer+0x18>
static void fAddToBuffer(uint8_t *data, uint32_t size) {
 8008842:	b538      	push	{r3, r4, r5, lr}
 8008844:	1e44      	subs	r4, r0, #1
 8008846:	4408      	add	r0, r1
 8008848:	1e45      	subs	r5, r0, #1
    fAddToBufferU8(data[i]);
 800884a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800884e:	f7ff ff45 	bl	80086dc <fAddToBufferU8>
  for(uint32_t i = 0; i < size; i++) {
 8008852:	42ac      	cmp	r4, r5
 8008854:	d1f9      	bne.n	800884a <fAddToBuffer+0xa>
  }
}
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	4770      	bx	lr

0800885a <fCommonEnableStatusGeneratePayload>:
 * @brief Generates payload for reporting enable status of common fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fCommonEnableStatusGeneratePayload(uint32_t fobjectPtr, void *param) {
 800885a:	b508      	push	{r3, lr}

  UNUSED_(param);
  uint8_t *fobjectType = (uint8_t*)fobjectPtr;
  
  switch((eFaraabin_FobjectType)*fobjectType) {
 800885c:	7803      	ldrb	r3, [r0, #0]
 800885e:	2b10      	cmp	r3, #16
 8008860:	d80d      	bhi.n	800887e <fCommonEnableStatusGeneratePayload+0x24>
 8008862:	e8df f003 	tbb	[pc, r3]
 8008866:	0c15      	.short	0x0c15
 8008868:	0c190c0c 	.word	0x0c190c0c
 800886c:	0c1d0c0c 	.word	0x0c1d0c0c
 8008870:	0c0c0921 	.word	0x0c0c0921
 8008874:	0d0c      	.short	0x0d0c
 8008876:	11          	.byte	0x11
 8008877:	00          	.byte	0x00
    case eFO_TYPE_STATE_MACHINE: {
#ifdef FB_ADD_ON_FEATURE_FLAG_STATE_MACHINE
      fAddToBufferU8(((sStateMachine*)fobjectPtr)->_enable);
#else
			fAddToBufferU8(0);
 8008878:	2000      	movs	r0, #0
 800887a:	f7ff ff2f 	bl	80086dc <fAddToBufferU8>
    default: {
      // Do nothing.
      break;
    }
  }
}
 800887e:	bd08      	pop	{r3, pc}
			fAddToBufferU8(0);
 8008880:	2000      	movs	r0, #0
 8008882:	f7ff ff2b 	bl	80086dc <fAddToBufferU8>
      break;
 8008886:	e7fa      	b.n	800887e <fCommonEnableStatusGeneratePayload+0x24>
			fAddToBufferU8(0);
 8008888:	2000      	movs	r0, #0
 800888a:	f7ff ff27 	bl	80086dc <fAddToBufferU8>
      break;
 800888e:	e7f6      	b.n	800887e <fCommonEnableStatusGeneratePayload+0x24>
      fAddToBufferU8(((sFaraabinFobjectMcu*)fobjectPtr)->Enable);
 8008890:	7880      	ldrb	r0, [r0, #2]
 8008892:	f7ff ff23 	bl	80086dc <fAddToBufferU8>
      break;
 8008896:	e7f2      	b.n	800887e <fCommonEnableStatusGeneratePayload+0x24>
      fAddToBufferU8(((sFaraabinFobjectEventGroup*)fobjectPtr)->Enable);
 8008898:	7880      	ldrb	r0, [r0, #2]
 800889a:	f7ff ff1f 	bl	80086dc <fAddToBufferU8>
      break;
 800889e:	e7ee      	b.n	800887e <fCommonEnableStatusGeneratePayload+0x24>
      fAddToBufferU8(((sFaraabinFobjectDataBus*)fobjectPtr)->Enable);
 80088a0:	7880      	ldrb	r0, [r0, #2]
 80088a2:	f7ff ff1b 	bl	80086dc <fAddToBufferU8>
      break;
 80088a6:	e7ea      	b.n	800887e <fCommonEnableStatusGeneratePayload+0x24>
			fAddToBufferU8(0);
 80088a8:	2000      	movs	r0, #0
 80088aa:	f7ff ff17 	bl	80086dc <fAddToBufferU8>
}
 80088ae:	e7e6      	b.n	800887e <fCommonEnableStatusGeneratePayload+0x24>

080088b0 <fDataBusCaptureValueGeneratePayload>:
 * @brief Generates payload for sending captured values of databus fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fDataBusCaptureValueGeneratePayload(uint32_t fobjectPtr, void *param) {
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	460c      	mov	r4, r1
  
  UNUSED_(fobjectPtr);
  sFaraabinFobjectDataBus_CaptureValue *value = param;
  
  fAddToBufferU8(value->FobjectType);
 80088b4:	7808      	ldrb	r0, [r1, #0]
 80088b6:	f7ff ff11 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU32(value->FobjectPtr);
 80088ba:	6860      	ldr	r0, [r4, #4]
 80088bc:	f7ff ffaf 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(value->CapturedTimeStamp);
 80088c0:	68a0      	ldr	r0, [r4, #8]
 80088c2:	f7ff ffac 	bl	800881e <fAddToBufferU32>
  fAddToBufferU64(value->CapturedValue);
 80088c6:	6925      	ldr	r5, [r4, #16]
 80088c8:	6964      	ldr	r4, [r4, #20]
  fAddToBufferU8(tmp.Byte[0]);
 80088ca:	b2e8      	uxtb	r0, r5
 80088cc:	f7ff ff06 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[1]);
 80088d0:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80088d4:	f7ff ff02 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[2]);
 80088d8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80088dc:	f7ff fefe 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[3]);
 80088e0:	0e28      	lsrs	r0, r5, #24
 80088e2:	f7ff fefb 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[4]);
 80088e6:	b2e0      	uxtb	r0, r4
 80088e8:	f7ff fef8 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[5]);
 80088ec:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80088f0:	f7ff fef4 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[6]);
 80088f4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80088f8:	f7ff fef0 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[7]);
 80088fc:	0e20      	lsrs	r0, r4, #24
 80088fe:	f7ff feed 	bl	80086dc <fAddToBufferU8>
}
 8008902:	bd38      	pop	{r3, r4, r5, pc}

08008904 <fDataBusValueGeneratePayload>:
static void fDataBusValueGeneratePayload(uint32_t fobjectPtr, void *param) {
  
  UNUSED_(param);
  sFaraabinFobjectDataBus *me = (sFaraabinFobjectDataBus*)fobjectPtr;
  
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8008904:	8a43      	ldrh	r3, [r0, #18]
 8008906:	b363      	cbz	r3, 8008962 <fDataBusValueGeneratePayload+0x5e>
static void fDataBusValueGeneratePayload(uint32_t fobjectPtr, void *param) {
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4605      	mov	r5, r0
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 800890c:	2400      	movs	r4, #0
 800890e:	e016      	b.n	800893e <fDataBusValueGeneratePayload+0x3a>
    switch(me->_pBufferChannels[i].ItemFobjectType) {
      
      case eFO_TYPE_VAR:
      case eFO_TYPE_ENTITY_NUMERICAL: {
        
        fAddToBufferU8(me->_pBufferChannels[i].ItemFobjectType);
 8008910:	f7ff fee4 	bl	80086dc <fAddToBufferU8>
        fAddToBufferU32(me->_pBufferChannels[i].ItemFobjectPtr);
 8008914:	696b      	ldr	r3, [r5, #20]
 8008916:	4433      	add	r3, r6
 8008918:	6858      	ldr	r0, [r3, #4]
 800891a:	f7ff ff80 	bl	800881e <fAddToBufferU32>
        
        fAddToBufferU16(me->_pBufferChannels[i].ItemFobjectParam);
 800891e:	696b      	ldr	r3, [r5, #20]
 8008920:	4433      	add	r3, r6
 8008922:	8918      	ldrh	r0, [r3, #8]
 8008924:	f7ff ff72 	bl	800880c <fAddToBufferU16>
        fAddToBuffer((uint8_t*)me->_pBufferChannels[i].ItemFobjectPtr, me->_pBufferChannels[i].ItemFobjectParam);
 8008928:	696b      	ldr	r3, [r5, #20]
 800892a:	4433      	add	r3, r6
 800892c:	8919      	ldrh	r1, [r3, #8]
 800892e:	6858      	ldr	r0, [r3, #4]
 8008930:	f7ff ff86 	bl	8008840 <fAddToBuffer>
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8008934:	3401      	adds	r4, #1
 8008936:	8a6a      	ldrh	r2, [r5, #18]
 8008938:	b2a3      	uxth	r3, r4
 800893a:	429a      	cmp	r2, r3
 800893c:	d910      	bls.n	8008960 <fDataBusValueGeneratePayload+0x5c>
    if(me->_pBufferChannels[i].ItemFobjectPtr == 0U) {
 800893e:	b2a3      	uxth	r3, r4
 8008940:	011e      	lsls	r6, r3, #4
 8008942:	696a      	ldr	r2, [r5, #20]
 8008944:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8008948:	6859      	ldr	r1, [r3, #4]
 800894a:	2900      	cmp	r1, #0
 800894c:	d0f2      	beq.n	8008934 <fDataBusValueGeneratePayload+0x30>
    if(!me->_pBufferChannels[i].Enable) {
 800894e:	7b1b      	ldrb	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0ef      	beq.n	8008934 <fDataBusValueGeneratePayload+0x30>
    switch(me->_pBufferChannels[i].ItemFobjectType) {
 8008954:	5d90      	ldrb	r0, [r2, r6]
 8008956:	2802      	cmp	r0, #2
 8008958:	d0da      	beq.n	8008910 <fDataBusValueGeneratePayload+0xc>
 800895a:	2813      	cmp	r0, #19
 800895c:	d1ea      	bne.n	8008934 <fDataBusValueGeneratePayload+0x30>
 800895e:	e7d7      	b.n	8008910 <fDataBusValueGeneratePayload+0xc>
        // Do nothing.
        break;
      }
    }
  }
}
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	4770      	bx	lr

08008964 <fMcuPingGeneratePayload>:
 * @brief Generates payload for sending ping results of MCU fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fMcuPingGeneratePayload(uint32_t fobjectPtr, void *param) {
 8008964:	b508      	push	{r3, lr}
  UNUSED_(fobjectPtr);

  uint8_t *param_ptr = (uint8_t*)param;

  for(uint16_t i = 0; i < 1U; i++) {
    fAddToBufferU8(param_ptr[i]);
 8008966:	7808      	ldrb	r0, [r1, #0]
 8008968:	f7ff feb8 	bl	80086dc <fAddToBufferU8>
  }
}
 800896c:	bd08      	pop	{r3, pc}

0800896e <fVarValueGeneratePayload>:
 * @brief Generates payload for sending values of variable fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fVarValueGeneratePayload(uint32_t fobjectPtr, void *param) {
 800896e:	b510      	push	{r4, lr}
 8008970:	460c      	mov	r4, r1
  
  UNUSED_(fobjectPtr);

  sVarSendParam *par = (sVarSendParam*)param;
  
  fAddToBufferU32(par->VarPtr);
 8008972:	6808      	ldr	r0, [r1, #0]
 8008974:	f7ff ff53 	bl	800881e <fAddToBufferU32>
  fAddToBuffer((uint8_t*)par->DataPtr, par->VarSize);
 8008978:	6861      	ldr	r1, [r4, #4]
 800897a:	68a0      	ldr	r0, [r4, #8]
 800897c:	f7ff ff60 	bl	8008840 <fAddToBuffer>
}
 8008980:	bd10      	pop	{r4, pc}
	...

08008984 <fDictGeneratePayloadIterator>:
 * @brief Generates payload for sending index and total number of faraabin dictionary.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fDictGeneratePayloadIterator(uint32_t fobjectPtr, void *param) {
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4606      	mov	r6, r0
 8008988:	460c      	mov	r4, r1

  fAddToBufferU16(_serializer.DictIterator.CurrentDictIndex);
 800898a:	4d08      	ldr	r5, [pc, #32]	@ (80089ac <fDictGeneratePayloadIterator+0x28>)
 800898c:	88a8      	ldrh	r0, [r5, #4]
 800898e:	f7ff ff3d 	bl	800880c <fAddToBufferU16>
  fAddToBufferU16(_serializer.DictIterator.TotalSubDicts);
 8008992:	8828      	ldrh	r0, [r5, #0]
 8008994:	f7ff ff3a 	bl	800880c <fAddToBufferU16>
  fAddToBufferU16(_serializer.DictIterator.CurrentSubDictIndex);
 8008998:	8868      	ldrh	r0, [r5, #2]
 800899a:	f7ff ff37 	bl	800880c <fAddToBufferU16>
  
  sGeneratePayloadDict_Param *par = (sGeneratePayloadDict_Param*)param;
  if(par->fpGenerateDictPayload != NULL) {
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	b113      	cbz	r3, 80089a8 <fDictGeneratePayloadIterator+0x24>
    par->fpGenerateDictPayload(fobjectPtr, par->pDictPayloadParam);
 80089a2:	6861      	ldr	r1, [r4, #4]
 80089a4:	4630      	mov	r0, r6
 80089a6:	4798      	blx	r3
  }
}
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	bf00      	nop
 80089ac:	20002a8c 	.word	0x20002a8c

080089b0 <fSerializePayload_Event>:
 * @brief 
 * 
 * @param fobjectPtr 
 * @param param 
 */
static void fSerializePayload_Event(uint32_t fobjectPtr, void *param) {
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4605      	mov	r5, r0
 80089b4:	460c      	mov	r4, r1
  
  sEventParam *par = (sEventParam*)param;
  
  fAddToBufferU8((uint8_t)par->Severity);
 80089b6:	7808      	ldrb	r0, [r1, #0]
 80089b8:	f7ff fe90 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU16(par->EventId);
 80089bc:	8860      	ldrh	r0, [r4, #2]
 80089be:	f7ff ff25 	bl	800880c <fAddToBufferU16>
  if(par->pParam != NULL) {
 80089c2:	6860      	ldr	r0, [r4, #4]
 80089c4:	b110      	cbz	r0, 80089cc <fSerializePayload_Event+0x1c>
    fAddToBuffer(par->pParam, par->ParamSize);
 80089c6:	8921      	ldrh	r1, [r4, #8]
 80089c8:	f7ff ff3a 	bl	8008840 <fAddToBuffer>
  }
  
  if(par->fpGeneratePayload != NULL) {
 80089cc:	68e3      	ldr	r3, [r4, #12]
 80089ce:	b113      	cbz	r3, 80089d6 <fSerializePayload_Event+0x26>
    par->fpGeneratePayload(fobjectPtr, par->pPayloadParam);
 80089d0:	6921      	ldr	r1, [r4, #16]
 80089d2:	4628      	mov	r0, r5
 80089d4:	4798      	blx	r3
  }
}
 80089d6:	bd38      	pop	{r3, r4, r5, pc}

080089d8 <fSerializeFrame>:
  void(*generatePayloadFunc)(uint32_t fobjectPtr, void *param), void *payloadParam) {
 80089d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089dc:	468a      	mov	sl, r1
 80089de:	4614      	mov	r4, r2
 80089e0:	4699      	mov	r9, r3
 80089e2:	9e08      	ldr	r6, [sp, #32]
 80089e4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80089e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
	if((frameType == eFB_LINK_FRAME_TYPE_EVENT) && (!fFaraabin_IsAllowEvent())) {
 80089ea:	4605      	mov	r5, r0
 80089ec:	b920      	cbnz	r0, 80089f8 <fSerializeFrame+0x20>
 80089ee:	f7fd f8d3 	bl	8005b98 <fFaraabin_IsAllowEvent>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f000 80ae 	beq.w	8008b54 <fSerializeFrame+0x17c>
  __ASM volatile ("cpsid i" : : : "memory");
 80089f8:	b672      	cpsid	i
  _serializer.Serializer.CheckSum = 0U;
 80089fa:	4b8c      	ldr	r3, [pc, #560]	@ (8008c2c <fSerializeFrame+0x254>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 28a2 	strb.w	r2, [r3, #2210]	@ 0x8a2
  if(fobjectPtr != 0U) {
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	f000 80a8 	beq.w	8008b58 <fSerializeFrame+0x180>
    (*fobjectSeq)++;
 8008a08:	f89a 3000 	ldrb.w	r3, [sl]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
      *fobjectSeq = 0U;
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	bf28      	it	cs
 8008a14:	4613      	movcs	r3, r2
 8008a16:	f88a 3000 	strb.w	r3, [sl]
  _serializer.Serializer.NodeSeq++;
 8008a1a:	4a84      	ldr	r2, [pc, #528]	@ (8008c2c <fSerializeFrame+0x254>)
 8008a1c:	f892 18a3 	ldrb.w	r1, [r2, #2211]	@ 0x8a3
 8008a20:	3101      	adds	r1, #1
 8008a22:	b2c9      	uxtb	r1, r1
    _serializer.Serializer.NodeSeq = 0U;
 8008a24:	2910      	cmp	r1, #16
 8008a26:	bf28      	it	cs
 8008a28:	2100      	movcs	r1, #0
 8008a2a:	f882 18a3 	strb.w	r1, [r2, #2211]	@ 0x8a3
  control |= (((uint16_t)reqSeq & 0x0FU) << 2U);
 8008a2e:	00a4      	lsls	r4, r4, #2
 8008a30:	f004 043c 	and.w	r4, r4, #60	@ 0x3c
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 8008a34:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
  uint8_t extPtr = (extendedFobjectPtr != 0U) ? 1U : 0U;
 8008a38:	1e3a      	subs	r2, r7, #0
 8008a3a:	bf18      	it	ne
 8008a3c:	2201      	movne	r2, #1
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 8008a3e:	ea44 3482 	orr.w	r4, r4, r2, lsl #14
  control |= (((uint16_t)frameType & 0x01U) << 0U);
 8008a42:	f005 0001 	and.w	r0, r5, #1
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 8008a46:	4320      	orrs	r0, r4
  control |= (((uint16_t)seq & 0x0FU) << 6U);
 8008a48:	019b      	lsls	r3, r3, #6
 8008a4a:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 8008a4e:	4318      	orrs	r0, r3
  control |= (((uint16_t)_serializer.Serializer.NodeSeq & 0x0FU) << 10U);
 8008a50:	0289      	lsls	r1, r1, #10
 8008a52:	f401 5170 	and.w	r1, r1, #15360	@ 0x3c00
  fAddToBufferU16(control);
 8008a56:	4308      	orrs	r0, r1
 8008a58:	f7ff fed8 	bl	800880c <fAddToBufferU16>
  fAddToBufferU32(fChrono_GetTick());
 8008a5c:	f7fc fe48 	bl	80056f0 <fChrono_GetTick>
 8008a60:	f7ff fedd 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(fobjectPtr);
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff feda 	bl	800881e <fAddToBufferU32>
  if(extPtr == 1U) {
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	d176      	bne.n	8008b5c <fSerializeFrame+0x184>
  uint8_t fobjectProp = (uint8_t)(clientFrameGroup << 5U) + (uint8_t)(clientFrameId);
 8008a6e:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8008a72:	f89d 002c 	ldrb.w	r0, [sp, #44]	@ 0x2c
 8008a76:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  fAddToBufferU8(fobjectProp);
 8008a7a:	b2c0      	uxtb	r0, r0
 8008a7c:	f7ff fe2e 	bl	80086dc <fAddToBufferU8>
  if(generatePayloadFunc != NULL) {
 8008a80:	f1b8 0f00 	cmp.w	r8, #0
 8008a84:	d002      	beq.n	8008a8c <fSerializeFrame+0xb4>
    generatePayloadFunc(fobjectPtr, payloadParam);
 8008a86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008a88:	4630      	mov	r0, r6
 8008a8a:	47c0      	blx	r8
  _serializer.Serializer.CheckSum ^= (uint8_t)0xFFU;   /* invert the bits in the checksum */
 8008a8c:	4967      	ldr	r1, [pc, #412]	@ (8008c2c <fSerializeFrame+0x254>)
 8008a8e:	f891 38a2 	ldrb.w	r3, [r1, #2210]	@ 0x8a2
 8008a92:	43da      	mvns	r2, r3
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	f881 28a2 	strb.w	r2, [r1, #2210]	@ 0x8a2
  if ((_serializer.Serializer.CheckSum == FB_EOF) || (_serializer.Serializer.CheckSum == FB_ESC)) { // If byte escaping is needed
 8008a9a:	f1c3 0382 	rsb	r3, r3, #130	@ 0x82
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d95f      	bls.n	8008b64 <fSerializeFrame+0x18c>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008aa4:	4b62      	ldr	r3, [pc, #392]	@ (8008c30 <fSerializeFrame+0x258>)
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	6899      	ldr	r1, [r3, #8]
 8008aaa:	5442      	strb	r2, [r0, r1]
 8008aac:	7d1b      	ldrb	r3, [r3, #20]
 8008aae:	b13b      	cbz	r3, 8008ac0 <fSerializeFrame+0xe8>
 8008ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8008c30 <fSerializeFrame+0x258>)
 8008ab2:	68d3      	ldr	r3, [r2, #12]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	60d3      	str	r3, [r2, #12]
 8008ab8:	6852      	ldr	r2, [r2, #4]
 8008aba:	4293      	cmp	r3, r2
 8008abc:	f000 80ad 	beq.w	8008c1a <fSerializeFrame+0x242>
 8008ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8008c30 <fSerializeFrame+0x258>)
 8008ac2:	6893      	ldr	r3, [r2, #8]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	6850      	ldr	r0, [r2, #4]
 8008ac8:	4283      	cmp	r3, r0
 8008aca:	bf08      	it	eq
 8008acc:	2300      	moveq	r3, #0
 8008ace:	6093      	str	r3, [r2, #8]
 8008ad0:	6911      	ldr	r1, [r2, #16]
 8008ad2:	3101      	adds	r1, #1
 8008ad4:	4281      	cmp	r1, r0
 8008ad6:	bf28      	it	cs
 8008ad8:	4601      	movcs	r1, r0
 8008ada:	6111      	str	r1, [r2, #16]
 8008adc:	68d1      	ldr	r1, [r2, #12]
 8008ade:	4299      	cmp	r1, r3
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2301      	moveq	r3, #1
 8008ae4:	2300      	movne	r3, #0
 8008ae6:	7513      	strb	r3, [r2, #20]
 8008ae8:	d104      	bne.n	8008af4 <fSerializeFrame+0x11c>
 8008aea:	4a52      	ldr	r2, [pc, #328]	@ (8008c34 <fSerializeFrame+0x25c>)
 8008aec:	7913      	ldrb	r3, [r2, #4]
 8008aee:	f043 0304 	orr.w	r3, r3, #4
 8008af2:	7113      	strb	r3, [r2, #4]
  fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008af4:	4b4e      	ldr	r3, [pc, #312]	@ (8008c30 <fSerializeFrame+0x258>)
 8008af6:	6819      	ldr	r1, [r3, #0]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	207e      	movs	r0, #126	@ 0x7e
 8008afc:	5488      	strb	r0, [r1, r2]
 8008afe:	7d1b      	ldrb	r3, [r3, #20]
 8008b00:	b13b      	cbz	r3, 8008b12 <fSerializeFrame+0x13a>
 8008b02:	4a4b      	ldr	r2, [pc, #300]	@ (8008c30 <fSerializeFrame+0x258>)
 8008b04:	68d3      	ldr	r3, [r2, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60d3      	str	r3, [r2, #12]
 8008b0a:	6852      	ldr	r2, [r2, #4]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	f000 8088 	beq.w	8008c22 <fSerializeFrame+0x24a>
 8008b12:	4a47      	ldr	r2, [pc, #284]	@ (8008c30 <fSerializeFrame+0x258>)
 8008b14:	6893      	ldr	r3, [r2, #8]
 8008b16:	3301      	adds	r3, #1
 8008b18:	6850      	ldr	r0, [r2, #4]
 8008b1a:	4283      	cmp	r3, r0
 8008b1c:	bf08      	it	eq
 8008b1e:	2300      	moveq	r3, #0
 8008b20:	6093      	str	r3, [r2, #8]
 8008b22:	6911      	ldr	r1, [r2, #16]
 8008b24:	3101      	adds	r1, #1
 8008b26:	4281      	cmp	r1, r0
 8008b28:	bf28      	it	cs
 8008b2a:	4601      	movcs	r1, r0
 8008b2c:	6111      	str	r1, [r2, #16]
 8008b2e:	68d1      	ldr	r1, [r2, #12]
 8008b30:	4299      	cmp	r1, r3
 8008b32:	bf0c      	ite	eq
 8008b34:	2301      	moveq	r3, #1
 8008b36:	2300      	movne	r3, #0
 8008b38:	7513      	strb	r3, [r2, #20]
 8008b3a:	d104      	bne.n	8008b46 <fSerializeFrame+0x16e>
 8008b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8008c34 <fSerializeFrame+0x25c>)
 8008b3e:	7913      	ldrb	r3, [r2, #4]
 8008b40:	f043 0304 	orr.w	r3, r3, #4
 8008b44:	7113      	strb	r3, [r2, #4]
  _serializer.McuHandle->StatisticsTxFramesCnt++;
 8008b46:	4b39      	ldr	r3, [pc, #228]	@ (8008c2c <fSerializeFrame+0x254>)
 8008b48:	f8d3 28a4 	ldr.w	r2, [r3, #2212]	@ 0x8a4
 8008b4c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6313      	str	r3, [r2, #48]	@ 0x30
  __ASM volatile ("cpsie i" : : : "memory");
 8008b52:	b662      	cpsie	i
}
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t seq = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	e75e      	b.n	8008a1a <fSerializeFrame+0x42>
    fAddToBufferU32(extendedFobjectPtr);
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff fe5e 	bl	800881e <fAddToBufferU32>
 8008b62:	e784      	b.n	8008a6e <fSerializeFrame+0x96>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008b64:	4b32      	ldr	r3, [pc, #200]	@ (8008c30 <fSerializeFrame+0x258>)
 8008b66:	6819      	ldr	r1, [r3, #0]
 8008b68:	689a      	ldr	r2, [r3, #8]
 8008b6a:	207d      	movs	r0, #125	@ 0x7d
 8008b6c:	5488      	strb	r0, [r1, r2]
 8008b6e:	7d1b      	ldrb	r3, [r3, #20]
 8008b70:	b133      	cbz	r3, 8008b80 <fSerializeFrame+0x1a8>
 8008b72:	4a2f      	ldr	r2, [pc, #188]	@ (8008c30 <fSerializeFrame+0x258>)
 8008b74:	68d3      	ldr	r3, [r2, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60d3      	str	r3, [r2, #12]
 8008b7a:	6852      	ldr	r2, [r2, #4]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d045      	beq.n	8008c0c <fSerializeFrame+0x234>
 8008b80:	4a2b      	ldr	r2, [pc, #172]	@ (8008c30 <fSerializeFrame+0x258>)
 8008b82:	6893      	ldr	r3, [r2, #8]
 8008b84:	3301      	adds	r3, #1
 8008b86:	6850      	ldr	r0, [r2, #4]
 8008b88:	4283      	cmp	r3, r0
 8008b8a:	bf08      	it	eq
 8008b8c:	2300      	moveq	r3, #0
 8008b8e:	6093      	str	r3, [r2, #8]
 8008b90:	6911      	ldr	r1, [r2, #16]
 8008b92:	3101      	adds	r1, #1
 8008b94:	4281      	cmp	r1, r0
 8008b96:	bf28      	it	cs
 8008b98:	4601      	movcs	r1, r0
 8008b9a:	6111      	str	r1, [r2, #16]
 8008b9c:	68d1      	ldr	r1, [r2, #12]
 8008b9e:	4299      	cmp	r1, r3
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2101      	moveq	r1, #1
 8008ba4:	2100      	movne	r1, #0
 8008ba6:	7511      	strb	r1, [r2, #20]
 8008ba8:	d104      	bne.n	8008bb4 <fSerializeFrame+0x1dc>
 8008baa:	4922      	ldr	r1, [pc, #136]	@ (8008c34 <fSerializeFrame+0x25c>)
 8008bac:	790a      	ldrb	r2, [r1, #4]
 8008bae:	f042 0204 	orr.w	r2, r2, #4
 8008bb2:	710a      	strb	r2, [r1, #4]
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008bb4:	491e      	ldr	r1, [pc, #120]	@ (8008c30 <fSerializeFrame+0x258>)
 8008bb6:	6808      	ldr	r0, [r1, #0]
    tmp = _serializer.Serializer.CheckSum ^ FB_ESC_XOR;
 8008bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8008c2c <fSerializeFrame+0x254>)
 8008bba:	f892 28a2 	ldrb.w	r2, [r2, #2210]	@ 0x8a2
 8008bbe:	f082 0220 	eor.w	r2, r2, #32
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008bc2:	54c2      	strb	r2, [r0, r3]
 8008bc4:	7d0b      	ldrb	r3, [r1, #20]
 8008bc6:	b12b      	cbz	r3, 8008bd4 <fSerializeFrame+0x1fc>
 8008bc8:	68cb      	ldr	r3, [r1, #12]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	60cb      	str	r3, [r1, #12]
 8008bce:	684a      	ldr	r2, [r1, #4]
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d01f      	beq.n	8008c14 <fSerializeFrame+0x23c>
 8008bd4:	4a16      	ldr	r2, [pc, #88]	@ (8008c30 <fSerializeFrame+0x258>)
 8008bd6:	6893      	ldr	r3, [r2, #8]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	6850      	ldr	r0, [r2, #4]
 8008bdc:	4283      	cmp	r3, r0
 8008bde:	bf08      	it	eq
 8008be0:	2300      	moveq	r3, #0
 8008be2:	6093      	str	r3, [r2, #8]
 8008be4:	6911      	ldr	r1, [r2, #16]
 8008be6:	3101      	adds	r1, #1
 8008be8:	4281      	cmp	r1, r0
 8008bea:	bf28      	it	cs
 8008bec:	4601      	movcs	r1, r0
 8008bee:	6111      	str	r1, [r2, #16]
 8008bf0:	68d1      	ldr	r1, [r2, #12]
 8008bf2:	4299      	cmp	r1, r3
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	7513      	strb	r3, [r2, #20]
 8008bfc:	f47f af7a 	bne.w	8008af4 <fSerializeFrame+0x11c>
 8008c00:	4a0c      	ldr	r2, [pc, #48]	@ (8008c34 <fSerializeFrame+0x25c>)
 8008c02:	7913      	ldrb	r3, [r2, #4]
 8008c04:	f043 0304 	orr.w	r3, r3, #4
 8008c08:	7113      	strb	r3, [r2, #4]
 8008c0a:	e773      	b.n	8008af4 <fSerializeFrame+0x11c>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008c0c:	4b08      	ldr	r3, [pc, #32]	@ (8008c30 <fSerializeFrame+0x258>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	e7b5      	b.n	8008b80 <fSerializeFrame+0x1a8>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008c14:	2200      	movs	r2, #0
 8008c16:	60ca      	str	r2, [r1, #12]
 8008c18:	e7dc      	b.n	8008bd4 <fSerializeFrame+0x1fc>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008c1a:	4b05      	ldr	r3, [pc, #20]	@ (8008c30 <fSerializeFrame+0x258>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	60da      	str	r2, [r3, #12]
 8008c20:	e74e      	b.n	8008ac0 <fSerializeFrame+0xe8>
  fFaraabinLinkBuffer_Put_(&tmp, 1);
 8008c22:	4b03      	ldr	r3, [pc, #12]	@ (8008c30 <fSerializeFrame+0x258>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	60da      	str	r2, [r3, #12]
 8008c28:	e773      	b.n	8008b12 <fSerializeFrame+0x13a>
 8008c2a:	bf00      	nop
 8008c2c:	20002a8c 	.word	0x20002a8c
 8008c30:	20002a34 	.word	0x20002a34
 8008c34:	20002638 	.word	0x20002638

08008c38 <fDictGeneratePayloadContainer>:
static void fDictGeneratePayloadContainer(uint32_t fobjectPtr, void *param) {
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8008c3c:	7800      	ldrb	r0, [r0, #0]
 8008c3e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008c42:	7863      	ldrb	r3, [r4, #1]
 8008c44:	b10b      	cbz	r3, 8008c4a <fDictGeneratePayloadContainer+0x12>
 8008c46:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008c4a:	f7ff fd47 	bl	80086dc <fAddToBufferU8>
  if(!me->_init) {
 8008c4e:	7863      	ldrb	r3, [r4, #1]
 8008c50:	b323      	cbz	r3, 8008c9c <fDictGeneratePayloadContainer+0x64>
  fAddToBufferU32(sizeof(sFaraabinFobjectContainer));
 8008c52:	2018      	movs	r0, #24
 8008c54:	f7ff fde3 	bl	800881e <fAddToBufferU32>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008c58:	6865      	ldr	r5, [r4, #4]
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7f7 fa78 	bl	8000150 <strlen>
 8008c60:	4601      	mov	r1, r0
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7ff fdec 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008c68:	203a      	movs	r0, #58	@ 0x3a
 8008c6a:	f7ff fd37 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8008c6e:	68a5      	ldr	r5, [r4, #8]
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7f7 fa6d 	bl	8000150 <strlen>
 8008c76:	4601      	mov	r1, r0
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f7ff fde1 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008c7e:	203a      	movs	r0, #58	@ 0x3a
 8008c80:	f7ff fd2c 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008c84:	68e4      	ldr	r4, [r4, #12]
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7f7 fa62 	bl	8000150 <strlen>
 8008c8c:	4601      	mov	r1, r0
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f7ff fdd6 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8008c94:	2000      	movs	r0, #0
 8008c96:	f7ff fd21 	bl	80086dc <fAddToBufferU8>
}
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008c9c:	6865      	ldr	r5, [r4, #4]
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f7f7 fa56 	bl	8000150 <strlen>
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7ff fdca 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008cac:	203a      	movs	r0, #58	@ 0x3a
 8008cae:	f7ff fd15 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8008cb2:	68a5      	ldr	r5, [r4, #8]
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f7f7 fa4b 	bl	8000150 <strlen>
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f7ff fdbf 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008cc2:	203a      	movs	r0, #58	@ 0x3a
 8008cc4:	f7ff fd0a 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008cc8:	68e4      	ldr	r4, [r4, #12]
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f7f7 fa40 	bl	8000150 <strlen>
 8008cd0:	4601      	mov	r1, r0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7ff fdb4 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8('\0');
 8008cd8:	2000      	movs	r0, #0
 8008cda:	f7ff fcff 	bl	80086dc <fAddToBufferU8>
    return;
 8008cde:	e7dc      	b.n	8008c9a <fDictGeneratePayloadContainer+0x62>

08008ce0 <fDictGeneratePayloadEventGroup>:
static void fDictGeneratePayloadEventGroup(uint32_t fobjectPtr, void *param) {
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8008ce4:	7800      	ldrb	r0, [r0, #0]
 8008ce6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008cea:	7863      	ldrb	r3, [r4, #1]
 8008cec:	b10b      	cbz	r3, 8008cf2 <fDictGeneratePayloadEventGroup+0x12>
 8008cee:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008cf2:	f7ff fcf3 	bl	80086dc <fAddToBufferU8>
  if(!me->_init) {
 8008cf6:	7863      	ldrb	r3, [r4, #1]
 8008cf8:	b33b      	cbz	r3, 8008d4a <fDictGeneratePayloadEventGroup+0x6a>
  fAddToBufferU8(me->Enable);
 8008cfa:	78a0      	ldrb	r0, [r4, #2]
 8008cfc:	f7ff fcee 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU32(sizeof(sFaraabinFobjectEventGroup));
 8008d00:	2018      	movs	r0, #24
 8008d02:	f7ff fd8c 	bl	800881e <fAddToBufferU32>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008d06:	6865      	ldr	r5, [r4, #4]
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f7f7 fa21 	bl	8000150 <strlen>
 8008d0e:	4601      	mov	r1, r0
 8008d10:	4628      	mov	r0, r5
 8008d12:	f7ff fd95 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008d16:	203a      	movs	r0, #58	@ 0x3a
 8008d18:	f7ff fce0 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8008d1c:	68a5      	ldr	r5, [r4, #8]
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f7f7 fa16 	bl	8000150 <strlen>
 8008d24:	4601      	mov	r1, r0
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7ff fd8a 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008d2c:	203a      	movs	r0, #58	@ 0x3a
 8008d2e:	f7ff fcd5 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008d32:	68e4      	ldr	r4, [r4, #12]
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7f7 fa0b 	bl	8000150 <strlen>
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f7ff fd7f 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8008d42:	2000      	movs	r0, #0
 8008d44:	f7ff fcca 	bl	80086dc <fAddToBufferU8>
}
 8008d48:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008d4a:	6865      	ldr	r5, [r4, #4]
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f7f7 f9ff 	bl	8000150 <strlen>
 8008d52:	4601      	mov	r1, r0
 8008d54:	4628      	mov	r0, r5
 8008d56:	f7ff fd73 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008d5a:	203a      	movs	r0, #58	@ 0x3a
 8008d5c:	f7ff fcbe 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8008d60:	68a5      	ldr	r5, [r4, #8]
 8008d62:	4628      	mov	r0, r5
 8008d64:	f7f7 f9f4 	bl	8000150 <strlen>
 8008d68:	4601      	mov	r1, r0
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7ff fd68 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008d70:	203a      	movs	r0, #58	@ 0x3a
 8008d72:	f7ff fcb3 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008d76:	68e4      	ldr	r4, [r4, #12]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f7f7 f9e9 	bl	8000150 <strlen>
 8008d7e:	4601      	mov	r1, r0
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7ff fd5d 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8('\0');
 8008d86:	2000      	movs	r0, #0
 8008d88:	f7ff fca8 	bl	80086dc <fAddToBufferU8>
    return;
 8008d8c:	e7dc      	b.n	8008d48 <fDictGeneratePayloadEventGroup+0x68>
	...

08008d90 <fDictGeneratePayloadFunctionGroupType>:
 * @brief Generates dictionary payload for function groups.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fDictGeneratePayloadFunctionGroupType(uint32_t fobjectPtr, void *param) {
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4604      	mov	r4, r0
  
  UNUSED_(param);

  sFaraabinFobjectFunctionGroupType *me = (sFaraabinFobjectFunctionGroupType*)fobjectPtr;
  
  ADD_CONTROL_BYTE_();
 8008d94:	7800      	ldrb	r0, [r0, #0]
 8008d96:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008d9a:	7863      	ldrb	r3, [r4, #1]
 8008d9c:	b10b      	cbz	r3, 8008da2 <fDictGeneratePayloadFunctionGroupType+0x12>
 8008d9e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008da2:	f7ff fc9b 	bl	80086dc <fAddToBufferU8>
  
  if(!me->_init) {
 8008da6:	7863      	ldrb	r3, [r4, #1]
 8008da8:	b323      	cbz	r3, 8008df4 <fDictGeneratePayloadFunctionGroupType+0x64>
  // Setting

  // Status

  // Dict
  fAddToBufferU32(sizeof(sFaraabinFobjectFunctionGroupType));
 8008daa:	2018      	movs	r0, #24
 8008dac:	f7ff fd37 	bl	800881e <fAddToBufferU32>
  
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008db0:	6865      	ldr	r5, [r4, #4]
 8008db2:	4628      	mov	r0, r5
 8008db4:	f7f7 f9cc 	bl	8000150 <strlen>
 8008db8:	4601      	mov	r1, r0
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f7ff fd40 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008dc0:	203a      	movs	r0, #58	@ 0x3a
 8008dc2:	f7ff fc8b 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008dc6:	68a5      	ldr	r5, [r4, #8]
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f7f7 f9c1 	bl	8000150 <strlen>
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7ff fd35 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008dd6:	203a      	movs	r0, #58	@ 0x3a
 8008dd8:	f7ff fc80 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Help, strlen(me->Help));
 8008ddc:	6964      	ldr	r4, [r4, #20]
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7f7 f9b6 	bl	8000150 <strlen>
 8008de4:	4601      	mov	r1, r0
 8008de6:	4620      	mov	r0, r4
 8008de8:	f7ff fd2a 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8008dec:	2000      	movs	r0, #0
 8008dee:	f7ff fc75 	bl	80086dc <fAddToBufferU8>
}
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008df4:	6865      	ldr	r5, [r4, #4]
 8008df6:	4628      	mov	r0, r5
 8008df8:	f7f7 f9aa 	bl	8000150 <strlen>
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f7ff fd1e 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008e04:	203a      	movs	r0, #58	@ 0x3a
 8008e06:	f7ff fc69 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)"type", strlen("type"));
 8008e0a:	2104      	movs	r1, #4
 8008e0c:	4808      	ldr	r0, [pc, #32]	@ (8008e30 <fDictGeneratePayloadFunctionGroupType+0xa0>)
 8008e0e:	f7ff fd17 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008e12:	203a      	movs	r0, #58	@ 0x3a
 8008e14:	f7ff fc62 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008e18:	68a4      	ldr	r4, [r4, #8]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7f7 f998 	bl	8000150 <strlen>
 8008e20:	4601      	mov	r1, r0
 8008e22:	4620      	mov	r0, r4
 8008e24:	f7ff fd0c 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8('\0');
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f7ff fc57 	bl	80086dc <fAddToBufferU8>
    return;
 8008e2e:	e7e0      	b.n	8008df2 <fDictGeneratePayloadFunctionGroupType+0x62>
 8008e30:	0800b1bc 	.word	0x0800b1bc

08008e34 <fDictGeneratePayloadVarType>:
static void fDictGeneratePayloadVarType(uint32_t fobjectPtr, void *param) {
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8008e38:	7800      	ldrb	r0, [r0, #0]
 8008e3a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008e3e:	7863      	ldrb	r3, [r4, #1]
 8008e40:	b10b      	cbz	r3, 8008e46 <fDictGeneratePayloadVarType+0x12>
 8008e42:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008e46:	f7ff fc49 	bl	80086dc <fAddToBufferU8>
  if(!me->_init) {
 8008e4a:	7863      	ldrb	r3, [r4, #1]
 8008e4c:	b353      	cbz	r3, 8008ea4 <fDictGeneratePayloadVarType+0x70>
  fAddToBufferU32(sizeof(sFaraabinFobjectVarType));
 8008e4e:	201c      	movs	r0, #28
 8008e50:	f7ff fce5 	bl	800881e <fAddToBufferU32>
  fAddToBufferU8((uint8_t)me->DataType);
 8008e54:	7ca0      	ldrb	r0, [r4, #18]
 8008e56:	f7ff fc41 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU32(me->Size);
 8008e5a:	6960      	ldr	r0, [r4, #20]
 8008e5c:	f7ff fcdf 	bl	800881e <fAddToBufferU32>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008e60:	6865      	ldr	r5, [r4, #4]
 8008e62:	4628      	mov	r0, r5
 8008e64:	f7f7 f974 	bl	8000150 <strlen>
 8008e68:	4601      	mov	r1, r0
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f7ff fce8 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008e70:	203a      	movs	r0, #58	@ 0x3a
 8008e72:	f7ff fc33 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8008e76:	68a5      	ldr	r5, [r4, #8]
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7f7 f969 	bl	8000150 <strlen>
 8008e7e:	4601      	mov	r1, r0
 8008e80:	4628      	mov	r0, r5
 8008e82:	f7ff fcdd 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008e86:	203a      	movs	r0, #58	@ 0x3a
 8008e88:	f7ff fc28 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008e8c:	68e4      	ldr	r4, [r4, #12]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7f7 f95e 	bl	8000150 <strlen>
 8008e94:	4601      	mov	r1, r0
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff fcd2 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f7ff fc1d 	bl	80086dc <fAddToBufferU8>
}
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8008ea4:	6865      	ldr	r5, [r4, #4]
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f7f7 f952 	bl	8000150 <strlen>
 8008eac:	4601      	mov	r1, r0
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f7ff fcc6 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008eb4:	203a      	movs	r0, #58	@ 0x3a
 8008eb6:	f7ff fc11 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8008eba:	68a5      	ldr	r5, [r4, #8]
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f7f7 f947 	bl	8000150 <strlen>
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f7ff fcbb 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8008eca:	203a      	movs	r0, #58	@ 0x3a
 8008ecc:	f7ff fc06 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8008ed0:	68e4      	ldr	r4, [r4, #12]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7f7 f93c 	bl	8000150 <strlen>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	4620      	mov	r0, r4
 8008edc:	f7ff fcb0 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8('\0');
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	f7ff fbfb 	bl	80086dc <fAddToBufferU8>
    return;
 8008ee6:	e7dc      	b.n	8008ea2 <fDictGeneratePayloadVarType+0x6e>

08008ee8 <fDictGeneratePayloadVarTypeEnumMember>:
static void fDictGeneratePayloadVarTypeEnumMember(uint32_t fobjectPtr, void *param) {
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	460c      	mov	r4, r1
  fAddToBufferU8(eFO_TYPE_VAR_TYPE_ENUM_MEMBER | 0x80U);
 8008eec:	2091      	movs	r0, #145	@ 0x91
 8008eee:	f7ff fbf5 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU16(par->Id);
 8008ef2:	88a0      	ldrh	r0, [r4, #4]
 8008ef4:	f7ff fc8a 	bl	800880c <fAddToBufferU16>
  fAddToBuffer((uint8_t*)par->Name, strlen(par->Name));
 8008ef8:	6824      	ldr	r4, [r4, #0]
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7f7 f928 	bl	8000150 <strlen>
 8008f00:	4601      	mov	r1, r0
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff fc9c 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8008f08:	2000      	movs	r0, #0
 8008f0a:	f7ff fbe7 	bl	80086dc <fAddToBufferU8>
}
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <fDictGeneratePayloadVar>:
static void fDictGeneratePayloadVar(uint32_t fobjectPtr, void *param) {
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	460c      	mov	r4, r1
  fAddToBufferU8(eFO_TYPE_VAR | 0x80U);
 8008f14:	2082      	movs	r0, #130	@ 0x82
 8008f16:	f7ff fbe1 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU32(par->VarPtr);
 8008f1a:	68e0      	ldr	r0, [r4, #12]
 8008f1c:	f7ff fc7f 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(par->VarTypePtr);
 8008f20:	6920      	ldr	r0, [r4, #16]
 8008f22:	f7ff fc7c 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(par->VarArrayQty);
 8008f26:	6960      	ldr	r0, [r4, #20]
 8008f28:	f7ff fc79 	bl	800881e <fAddToBufferU32>
  if(par->ExternalInterface != 0U) {
 8008f2c:	69a0      	ldr	r0, [r4, #24]
 8008f2e:	3800      	subs	r0, #0
 8008f30:	bf18      	it	ne
 8008f32:	2001      	movne	r0, #1
  if(par->AccessCallBack != 0U) {
 8008f34:	69e3      	ldr	r3, [r4, #28]
 8008f36:	b10b      	cbz	r3, 8008f3c <fDictGeneratePayloadVar+0x2c>
    control |= 0x02U;
 8008f38:	f040 0002 	orr.w	r0, r0, #2
  if(par->_isPtr) {
 8008f3c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008f40:	b10b      	cbz	r3, 8008f46 <fDictGeneratePayloadVar+0x36>
    control |= 0x04U;
 8008f42:	f040 0004 	orr.w	r0, r0, #4
  fAddToBufferU8(control);
 8008f46:	f7ff fbc9 	bl	80086dc <fAddToBufferU8>
  if(par->ExternalInterface != 0U) {
 8008f4a:	69a0      	ldr	r0, [r4, #24]
 8008f4c:	b9c0      	cbnz	r0, 8008f80 <fDictGeneratePayloadVar+0x70>
  if(par->AccessCallBack != 0U) {
 8008f4e:	69e0      	ldr	r0, [r4, #28]
 8008f50:	b9c8      	cbnz	r0, 8008f86 <fDictGeneratePayloadVar+0x76>
  fAddToBuffer((uint8_t*)par->Name, strlen(par->Name));
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7f7 f8fb 	bl	8000150 <strlen>
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7ff fc6f 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008f62:	203a      	movs	r0, #58	@ 0x3a
 8008f64:	f7ff fbba 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->Path, strlen(par->Path));
 8008f68:	6864      	ldr	r4, [r4, #4]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7f7 f8f0 	bl	8000150 <strlen>
 8008f70:	4601      	mov	r1, r0
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff fc64 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f7ff fbaf 	bl	80086dc <fAddToBufferU8>
}
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBufferU32(par->ExternalInterface);
 8008f80:	f7ff fc4d 	bl	800881e <fAddToBufferU32>
 8008f84:	e7e3      	b.n	8008f4e <fDictGeneratePayloadVar+0x3e>
    fAddToBufferU32(par->AccessCallBack);
 8008f86:	f7ff fc4a 	bl	800881e <fAddToBufferU32>
 8008f8a:	e7e2      	b.n	8008f52 <fDictGeneratePayloadVar+0x42>

08008f8c <fDictGeneratePayloadFunctionGroup>:
 * @brief Generates dictionary payload for function group.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the payload parameters.
 */
static void fDictGeneratePayloadFunctionGroup(uint32_t fobjectPtr, void *param) {
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	460c      	mov	r4, r1
  
  sDictFunctionGroupPayloadParam *par = (sDictFunctionGroupPayloadParam*)param;
  
  fAddToBufferU8(eFO_TYPE_FUNCTION_GROUP | 0x80U);
 8008f90:	2086      	movs	r0, #134	@ 0x86
 8008f92:	f7ff fba3 	bl	80086dc <fAddToBufferU8>
  
  fAddToBufferU32(par->ObjectPtr);
 8008f96:	68e0      	ldr	r0, [r4, #12]
 8008f98:	f7ff fc41 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(par->GroupTypePtr);
 8008f9c:	6920      	ldr	r0, [r4, #16]
 8008f9e:	f7ff fc3e 	bl	800881e <fAddToBufferU32>
  fAddToBuffer((uint8_t*)par->ObjectName, strlen(par->ObjectName));
 8008fa2:	6825      	ldr	r5, [r4, #0]
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f7f7 f8d3 	bl	8000150 <strlen>
 8008faa:	4601      	mov	r1, r0
 8008fac:	4628      	mov	r0, r5
 8008fae:	f7ff fc47 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008fb2:	203a      	movs	r0, #58	@ 0x3a
 8008fb4:	f7ff fb92 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->Path, strlen(par->Path));
 8008fb8:	6865      	ldr	r5, [r4, #4]
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7f7 f8c8 	bl	8000150 <strlen>
 8008fc0:	4601      	mov	r1, r0
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f7ff fc3c 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8008fc8:	203a      	movs	r0, #58	@ 0x3a
 8008fca:	f7ff fb87 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->FileName, strlen(par->FileName));
 8008fce:	68a4      	ldr	r4, [r4, #8]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f7f7 f8bd 	bl	8000150 <strlen>
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f7ff fc31 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8008fde:	2000      	movs	r0, #0
 8008fe0:	f7ff fb7c 	bl	80086dc <fAddToBufferU8>
}
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}

08008fe6 <fDictGeneratePayloadFunctionGroupTypeMember>:
static void fDictGeneratePayloadFunctionGroupTypeMember(uint32_t fobjectPtr, void *param) {
 8008fe6:	b538      	push	{r3, r4, r5, lr}
 8008fe8:	460c      	mov	r4, r1
  fAddToBufferU8(eFO_TYPE_FUNCTION_GROUP_TYPE_MEMBER | 0x80U);
 8008fea:	2095      	movs	r0, #149	@ 0x95
 8008fec:	f7ff fb76 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU32(sizeof(sFaraabinFobjectFunction));
 8008ff0:	202c      	movs	r0, #44	@ 0x2c
 8008ff2:	f7ff fc14 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32((uint32_t)par);
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7ff fc11 	bl	800881e <fAddToBufferU32>
  fAddToBuffer((uint8_t*)par->Name, strlen(par->Name));
 8008ffc:	6865      	ldr	r5, [r4, #4]
 8008ffe:	4628      	mov	r0, r5
 8009000:	f7f7 f8a6 	bl	8000150 <strlen>
 8009004:	4601      	mov	r1, r0
 8009006:	4628      	mov	r0, r5
 8009008:	f7ff fc1a 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 800900c:	203a      	movs	r0, #58	@ 0x3a
 800900e:	f7ff fb65 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->Help, strlen(par->Help));
 8009012:	68a4      	ldr	r4, [r4, #8]
 8009014:	4620      	mov	r0, r4
 8009016:	f7f7 f89b 	bl	8000150 <strlen>
 800901a:	4601      	mov	r1, r0
 800901c:	4620      	mov	r0, r4
 800901e:	f7ff fc0f 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009022:	2000      	movs	r0, #0
 8009024:	f7ff fb5a 	bl	80086dc <fAddToBufferU8>
}
 8009028:	bd38      	pop	{r3, r4, r5, pc}

0800902a <fDataBusSettingGeneratePayload>:
static void fDataBusSettingGeneratePayload(uint32_t fobjectPtr, void *param) {
 800902a:	b570      	push	{r4, r5, r6, lr}
 800902c:	4604      	mov	r4, r0
  fAddToBufferU8(me->Enable);
 800902e:	7880      	ldrb	r0, [r0, #2]
 8009030:	f7ff fb54 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU16(me->AttachedItemsQty);
 8009034:	8b60      	ldrh	r0, [r4, #26]
 8009036:	f7ff fbe9 	bl	800880c <fAddToBufferU16>
  fAddToBufferU16(me->StreamDivideBy);
 800903a:	8be0      	ldrh	r0, [r4, #30]
 800903c:	f7ff fbe6 	bl	800880c <fAddToBufferU16>
  fAddToBufferU32(me->BufferCaptureSize);
 8009040:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009042:	f7ff fbec 	bl	800881e <fAddToBufferU32>
  fAddToBufferU16(me->TimerDivideBy);
 8009046:	f8b4 004c 	ldrh.w	r0, [r4, #76]	@ 0x4c
 800904a:	f7ff fbdf 	bl	800880c <fAddToBufferU16>
  fAddToBufferU32(me->TimerWindowMs);
 800904e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009050:	f7ff fbe5 	bl	800881e <fAddToBufferU32>
  fAddToBufferU16(me->TrigDivideBy);
 8009054:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009058:	f7ff fbd8 	bl	800880c <fAddToBufferU16>
  fAddToBufferU32(me->TimeAfterTrigMs);
 800905c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800905e:	f7ff fbde 	bl	800881e <fAddToBufferU32>
  fAddToBufferU8(me->ApiTrigEnable);
 8009062:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 8009066:	f7ff fb39 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU8(me->CurrentState);
 800906a:	f894 0064 	ldrb.w	r0, [r4, #100]	@ 0x64
 800906e:	f7ff fb35 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU32(me->CycleUs);
 8009072:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8009076:	f7ff fbd2 	bl	800881e <fAddToBufferU32>
  fAddToBufferU8(me->ChTrigEnable);
 800907a:	f894 0089 	ldrb.w	r0, [r4, #137]	@ 0x89
 800907e:	f7ff fb2d 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU16(me->ChTrigNo);
 8009082:	f8b4 008a 	ldrh.w	r0, [r4, #138]	@ 0x8a
 8009086:	f7ff fbc1 	bl	800880c <fAddToBufferU16>
  fAddToBufferU8(me->ChTrigType);
 800908a:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 800908e:	f7ff fb25 	bl	80086dc <fAddToBufferU8>
  for(uint8_t i = 0; i < 8; i++) {
 8009092:	f104 058f 	add.w	r5, r4, #143	@ 0x8f
 8009096:	f104 0697 	add.w	r6, r4, #151	@ 0x97
    fAddToBufferU8(me->ChTrigThreshold.Byte[i]);
 800909a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800909e:	f7ff fb1d 	bl	80086dc <fAddToBufferU8>
  for(uint8_t i = 0; i < 8; i++) {
 80090a2:	42b5      	cmp	r5, r6
 80090a4:	d1f9      	bne.n	800909a <fDataBusSettingGeneratePayload+0x70>
  fAddToBufferU16(fFaraabinFobjectDataBus_GetAttachCount(me));
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7fd fcb8 	bl	8006a1c <fFaraabinFobjectDataBus_GetAttachCount>
 80090ac:	f7ff fbae 	bl	800880c <fAddToBufferU16>
  if(me->_init) {
 80090b0:	7863      	ldrb	r3, [r4, #1]
 80090b2:	b33b      	cbz	r3, 8009104 <fDataBusSettingGeneratePayload+0xda>
    for(uint16_t i = 0; i<me->ChannelQty; i++) {
 80090b4:	8a63      	ldrh	r3, [r4, #18]
 80090b6:	b32b      	cbz	r3, 8009104 <fDataBusSettingGeneratePayload+0xda>
 80090b8:	2500      	movs	r5, #0
 80090ba:	e004      	b.n	80090c6 <fDataBusSettingGeneratePayload+0x9c>
 80090bc:	3501      	adds	r5, #1
 80090be:	8a62      	ldrh	r2, [r4, #18]
 80090c0:	b2ab      	uxth	r3, r5
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d91e      	bls.n	8009104 <fDataBusSettingGeneratePayload+0xda>
      if(me->_pBufferChannels[i].ItemFobjectPtr != 0U) {
 80090c6:	b2aa      	uxth	r2, r5
 80090c8:	0116      	lsls	r6, r2, #4
 80090ca:	6963      	ldr	r3, [r4, #20]
 80090cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0f2      	beq.n	80090bc <fDataBusSettingGeneratePayload+0x92>
        fAddToBufferU16(i);
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7ff fb98 	bl	800880c <fAddToBufferU16>
        fAddToBufferU8(me->_pBufferChannels[i].ItemFobjectType);
 80090dc:	6963      	ldr	r3, [r4, #20]
 80090de:	5d98      	ldrb	r0, [r3, r6]
 80090e0:	f7ff fafc 	bl	80086dc <fAddToBufferU8>
        fAddToBufferU32(me->_pBufferChannels[i].ItemFobjectPtr);
 80090e4:	6963      	ldr	r3, [r4, #20]
 80090e6:	4433      	add	r3, r6
 80090e8:	6858      	ldr	r0, [r3, #4]
 80090ea:	f7ff fb98 	bl	800881e <fAddToBufferU32>
        fAddToBufferU16(me->_pBufferChannels[i].ItemFobjectParam);
 80090ee:	6963      	ldr	r3, [r4, #20]
 80090f0:	4433      	add	r3, r6
 80090f2:	8918      	ldrh	r0, [r3, #8]
 80090f4:	f7ff fb8a 	bl	800880c <fAddToBufferU16>
        fAddToBufferU8((uint8_t)me->_pBufferChannels[i].Enable);
 80090f8:	6963      	ldr	r3, [r4, #20]
 80090fa:	4433      	add	r3, r6
 80090fc:	7b18      	ldrb	r0, [r3, #12]
 80090fe:	f7ff faed 	bl	80086dc <fAddToBufferU8>
 8009102:	e7db      	b.n	80090bc <fDataBusSettingGeneratePayload+0x92>
}
 8009104:	bd70      	pop	{r4, r5, r6, pc}

08009106 <fDictGeneratePayloadDataBus>:
static void fDictGeneratePayloadDataBus(uint32_t fobjectPtr, void *param) {
 8009106:	b538      	push	{r3, r4, r5, lr}
 8009108:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 800910a:	7800      	ldrb	r0, [r0, #0]
 800910c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009110:	7863      	ldrb	r3, [r4, #1]
 8009112:	b10b      	cbz	r3, 8009118 <fDictGeneratePayloadDataBus+0x12>
 8009114:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8009118:	f7ff fae0 	bl	80086dc <fAddToBufferU8>
  if(!me->_init) {
 800911c:	7863      	ldrb	r3, [r4, #1]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d03c      	beq.n	800919c <fDictGeneratePayloadDataBus+0x96>
  fDataBusSettingGeneratePayload(fobjectPtr, NULL);
 8009122:	2100      	movs	r1, #0
 8009124:	4620      	mov	r0, r4
 8009126:	f7ff ff80 	bl	800902a <fDataBusSettingGeneratePayload>
  fAddToBufferU32(sizeof(sFaraabinFobjectDataBus));
 800912a:	20b0      	movs	r0, #176	@ 0xb0
 800912c:	f7ff fb77 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(sizeof(sFaraabinFobjectDataBus_Channel) * me->ChannelQty);
 8009130:	8a60      	ldrh	r0, [r4, #18]
 8009132:	0100      	lsls	r0, r0, #4
 8009134:	f7ff fb73 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(sizeof(sFaraabinFobjectDataBus_CaptureValue) * me->BufferCaptureSize);
 8009138:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800913a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800913e:	00c0      	lsls	r0, r0, #3
 8009140:	f7ff fb6d 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32((uint32_t)&(me->CycleUs));
 8009144:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 8009148:	f7ff fb69 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(me->BufferCaptureSize);
 800914c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800914e:	f7ff fb66 	bl	800881e <fAddToBufferU32>
  fAddToBufferU16(me->ChannelQty);
 8009152:	8a60      	ldrh	r0, [r4, #18]
 8009154:	f7ff fb5a 	bl	800880c <fAddToBufferU16>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009158:	6865      	ldr	r5, [r4, #4]
 800915a:	4628      	mov	r0, r5
 800915c:	f7f6 fff8 	bl	8000150 <strlen>
 8009160:	4601      	mov	r1, r0
 8009162:	4628      	mov	r0, r5
 8009164:	f7ff fb6c 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009168:	203a      	movs	r0, #58	@ 0x3a
 800916a:	f7ff fab7 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 800916e:	68a5      	ldr	r5, [r4, #8]
 8009170:	4628      	mov	r0, r5
 8009172:	f7f6 ffed 	bl	8000150 <strlen>
 8009176:	4601      	mov	r1, r0
 8009178:	4628      	mov	r0, r5
 800917a:	f7ff fb61 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 800917e:	203a      	movs	r0, #58	@ 0x3a
 8009180:	f7ff faac 	bl	80086dc <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009184:	68e4      	ldr	r4, [r4, #12]
 8009186:	4620      	mov	r0, r4
 8009188:	f7f6 ffe2 	bl	8000150 <strlen>
 800918c:	4601      	mov	r1, r0
 800918e:	4620      	mov	r0, r4
 8009190:	f7ff fb56 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009194:	2000      	movs	r0, #0
 8009196:	f7ff faa1 	bl	80086dc <fAddToBufferU8>
}
 800919a:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 800919c:	6865      	ldr	r5, [r4, #4]
 800919e:	4628      	mov	r0, r5
 80091a0:	f7f6 ffd6 	bl	8000150 <strlen>
 80091a4:	4601      	mov	r1, r0
 80091a6:	4628      	mov	r0, r5
 80091a8:	f7ff fb4a 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 80091ac:	203a      	movs	r0, #58	@ 0x3a
 80091ae:	f7ff fa95 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 80091b2:	68a5      	ldr	r5, [r4, #8]
 80091b4:	4628      	mov	r0, r5
 80091b6:	f7f6 ffcb 	bl	8000150 <strlen>
 80091ba:	4601      	mov	r1, r0
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff fb3f 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 80091c2:	203a      	movs	r0, #58	@ 0x3a
 80091c4:	f7ff fa8a 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 80091c8:	68e4      	ldr	r4, [r4, #12]
 80091ca:	4620      	mov	r0, r4
 80091cc:	f7f6 ffc0 	bl	8000150 <strlen>
 80091d0:	4601      	mov	r1, r0
 80091d2:	4620      	mov	r0, r4
 80091d4:	f7ff fb34 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8('\0');
 80091d8:	2000      	movs	r0, #0
 80091da:	f7ff fa7f 	bl	80086dc <fAddToBufferU8>
    return;
 80091de:	e7dc      	b.n	800919a <fDictGeneratePayloadDataBus+0x94>

080091e0 <fSerializeDict>:
  void *dictPayloadParam) {
 80091e0:	b510      	push	{r4, lr}
 80091e2:	b088      	sub	sp, #32
  return _serializer.DictIterator._isInCountingMode;
 80091e4:	4c11      	ldr	r4, [pc, #68]	@ (800922c <fSerializeDict+0x4c>)
  if(!fDictIteratorIsInCountingMode()) {
 80091e6:	79a4      	ldrb	r4, [r4, #6]
 80091e8:	b12c      	cbz	r4, 80091f6 <fSerializeDict+0x16>
    _serializer.DictIterator.TotalSubDicts++;
 80091ea:	4a10      	ldr	r2, [pc, #64]	@ (800922c <fSerializeDict+0x4c>)
 80091ec:	8813      	ldrh	r3, [r2, #0]
 80091ee:	3301      	adds	r3, #1
 80091f0:	8013      	strh	r3, [r2, #0]
}
 80091f2:	b008      	add	sp, #32
 80091f4:	bd10      	pop	{r4, pc}
    param.fpGenerateDictPayload = fpGenerateDictPayload;
 80091f6:	9306      	str	r3, [sp, #24]
    param.pDictPayloadParam = dictPayloadParam;
 80091f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091fa:	9307      	str	r3, [sp, #28]
    fSerializeFrame(  
 80091fc:	ab06      	add	r3, sp, #24
 80091fe:	9305      	str	r3, [sp, #20]
 8009200:	4b0b      	ldr	r3, [pc, #44]	@ (8009230 <fSerializeDict+0x50>)
 8009202:	9304      	str	r3, [sp, #16]
 8009204:	2300      	movs	r3, #0
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	9302      	str	r3, [sp, #8]
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	9000      	str	r0, [sp, #0]
 800920e:	2001      	movs	r0, #1
 8009210:	f7ff fbe2 	bl	80089d8 <fSerializeFrame>
    fFaraabinLinkHandler_FlushBuffer();
 8009214:	f7ff fa5a 	bl	80086cc <fFaraabinLinkHandler_FlushBuffer>
  if(_serializer.DictIterator._isInCountingMode) {
 8009218:	4b04      	ldr	r3, [pc, #16]	@ (800922c <fSerializeDict+0x4c>)
 800921a:	799b      	ldrb	r3, [r3, #6]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e4      	bne.n	80091ea <fSerializeDict+0xa>
    _serializer.DictIterator.CurrentSubDictIndex++;
 8009220:	4a02      	ldr	r2, [pc, #8]	@ (800922c <fSerializeDict+0x4c>)
 8009222:	8853      	ldrh	r3, [r2, #2]
 8009224:	3301      	adds	r3, #1
 8009226:	8053      	strh	r3, [r2, #2]
}
 8009228:	e7e3      	b.n	80091f2 <fSerializeDict+0x12>
 800922a:	bf00      	nop
 800922c:	20002a8c 	.word	0x20002a8c
 8009230:	08008985 	.word	0x08008985

08009234 <fGenerateDict>:
static void fGenerateDict(uint32_t fobjectPtr, uint8_t reqSeq) {
 8009234:	b530      	push	{r4, r5, lr}
 8009236:	b083      	sub	sp, #12
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
  switch((eFaraabin_FobjectType)(*fobjectType)) {
 800923c:	7803      	ldrb	r3, [r0, #0]
 800923e:	2b0c      	cmp	r3, #12
 8009240:	d818      	bhi.n	8009274 <fGenerateDict+0x40>
 8009242:	e8df f003 	tbb	[pc, r3]
 8009246:	1707      	.short	0x1707
 8009248:	17571d17 	.word	0x17571d17
 800924c:	177a4817 	.word	0x177a4817
 8009250:	1717      	.short	0x1717
 8009252:	6c          	.byte	0x6c
 8009253:	00          	.byte	0x00
      CorrectPath_(me->Path);
 8009254:	6883      	ldr	r3, [r0, #8]
 8009256:	b17b      	cbz	r3, 8009278 <fGenerateDict+0x44>
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	b913      	cbnz	r3, 8009262 <fGenerateDict+0x2e>
 800925c:	4b41      	ldr	r3, [pc, #260]	@ (8009364 <fGenerateDict+0x130>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6083      	str	r3, [r0, #8]
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadMcu, NULL);
 8009262:	2300      	movs	r3, #0
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	4b40      	ldr	r3, [pc, #256]	@ (8009368 <fGenerateDict+0x134>)
 8009268:	462a      	mov	r2, r5
 800926a:	f104 0110 	add.w	r1, r4, #16
 800926e:	4620      	mov	r0, r4
 8009270:	f7ff ffb6 	bl	80091e0 <fSerializeDict>
}
 8009274:	b003      	add	sp, #12
 8009276:	bd30      	pop	{r4, r5, pc}
      CorrectPath_(me->Path);
 8009278:	4b3a      	ldr	r3, [pc, #232]	@ (8009364 <fGenerateDict+0x130>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6083      	str	r3, [r0, #8]
 800927e:	e7f0      	b.n	8009262 <fGenerateDict+0x2e>
      CorrectPath_(me->Path);
 8009280:	6883      	ldr	r3, [r0, #8]
 8009282:	b1d3      	cbz	r3, 80092ba <fGenerateDict+0x86>
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	b913      	cbnz	r3, 800928e <fGenerateDict+0x5a>
 8009288:	4b36      	ldr	r3, [pc, #216]	@ (8009364 <fGenerateDict+0x130>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6083      	str	r3, [r0, #8]
      switch(me->DataType) {
 800928e:	7ca3      	ldrb	r3, [r4, #18]
 8009290:	b1bb      	cbz	r3, 80092c2 <fGenerateDict+0x8e>
 8009292:	3b01      	subs	r3, #1
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d8ec      	bhi.n	8009274 <fGenerateDict+0x40>
          fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadVarType, NULL);
 800929a:	2300      	movs	r3, #0
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	4b33      	ldr	r3, [pc, #204]	@ (800936c <fGenerateDict+0x138>)
 80092a0:	462a      	mov	r2, r5
 80092a2:	f104 0110 	add.w	r1, r4, #16
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff ff9a 	bl	80091e0 <fSerializeDict>
          if(me->fpSendMember != 0U) {
 80092ac:	69a3      	ldr	r3, [r4, #24]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0e0      	beq.n	8009274 <fGenerateDict+0x40>
            me->fpSendMember(fobjectPtr, reqSeq);
 80092b2:	4629      	mov	r1, r5
 80092b4:	4620      	mov	r0, r4
 80092b6:	4798      	blx	r3
 80092b8:	e7dc      	b.n	8009274 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 80092ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009364 <fGenerateDict+0x130>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6083      	str	r3, [r0, #8]
 80092c0:	e7e5      	b.n	800928e <fGenerateDict+0x5a>
          fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadVarType, NULL);
 80092c2:	2300      	movs	r3, #0
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	4b29      	ldr	r3, [pc, #164]	@ (800936c <fGenerateDict+0x138>)
 80092c8:	462a      	mov	r2, r5
 80092ca:	f104 0110 	add.w	r1, r4, #16
 80092ce:	4620      	mov	r0, r4
 80092d0:	f7ff ff86 	bl	80091e0 <fSerializeDict>
          break;
 80092d4:	e7ce      	b.n	8009274 <fGenerateDict+0x40>
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadFunctionGroupType, NULL);
 80092d6:	2300      	movs	r3, #0
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	4b25      	ldr	r3, [pc, #148]	@ (8009370 <fGenerateDict+0x13c>)
 80092dc:	460a      	mov	r2, r1
 80092de:	f100 010c 	add.w	r1, r0, #12
 80092e2:	f7ff ff7d 	bl	80091e0 <fSerializeDict>
      if(me->fpSendMember != 0U) {
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0c3      	beq.n	8009274 <fGenerateDict+0x40>
        me->fpSendMember(fobjectPtr, reqSeq);
 80092ec:	4629      	mov	r1, r5
 80092ee:	4620      	mov	r0, r4
 80092f0:	4798      	blx	r3
 80092f2:	e7bf      	b.n	8009274 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 80092f4:	6883      	ldr	r3, [r0, #8]
 80092f6:	b173      	cbz	r3, 8009316 <fGenerateDict+0xe2>
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b913      	cbnz	r3, 8009302 <fGenerateDict+0xce>
 80092fc:	4b19      	ldr	r3, [pc, #100]	@ (8009364 <fGenerateDict+0x130>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6083      	str	r3, [r0, #8]
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadEventGroup, NULL);
 8009302:	2300      	movs	r3, #0
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	4b1b      	ldr	r3, [pc, #108]	@ (8009374 <fGenerateDict+0x140>)
 8009308:	462a      	mov	r2, r5
 800930a:	f104 0110 	add.w	r1, r4, #16
 800930e:	4620      	mov	r0, r4
 8009310:	f7ff ff66 	bl	80091e0 <fSerializeDict>
      break;
 8009314:	e7ae      	b.n	8009274 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 8009316:	4b13      	ldr	r3, [pc, #76]	@ (8009364 <fGenerateDict+0x130>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6083      	str	r3, [r0, #8]
 800931c:	e7f1      	b.n	8009302 <fGenerateDict+0xce>
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadContainer, NULL);
 800931e:	2300      	movs	r3, #0
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	4b15      	ldr	r3, [pc, #84]	@ (8009378 <fGenerateDict+0x144>)
 8009324:	460a      	mov	r2, r1
 8009326:	f100 0110 	add.w	r1, r0, #16
 800932a:	f7ff ff59 	bl	80091e0 <fSerializeDict>
      if(me->fpContainerFunc != NULL) {
 800932e:	6963      	ldr	r3, [r4, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d09f      	beq.n	8009274 <fGenerateDict+0x40>
        me->fpContainerFunc(reqSeq);
 8009334:	4628      	mov	r0, r5
 8009336:	4798      	blx	r3
 8009338:	e79c      	b.n	8009274 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 800933a:	6883      	ldr	r3, [r0, #8]
 800933c:	b173      	cbz	r3, 800935c <fGenerateDict+0x128>
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	b913      	cbnz	r3, 8009348 <fGenerateDict+0x114>
 8009342:	4b08      	ldr	r3, [pc, #32]	@ (8009364 <fGenerateDict+0x130>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6083      	str	r3, [r0, #8]
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadDataBus, NULL);
 8009348:	2300      	movs	r3, #0
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	4b0b      	ldr	r3, [pc, #44]	@ (800937c <fGenerateDict+0x148>)
 800934e:	462a      	mov	r2, r5
 8009350:	f104 0110 	add.w	r1, r4, #16
 8009354:	4620      	mov	r0, r4
 8009356:	f7ff ff43 	bl	80091e0 <fSerializeDict>
}
 800935a:	e78b      	b.n	8009274 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 800935c:	4b01      	ldr	r3, [pc, #4]	@ (8009364 <fGenerateDict+0x130>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6083      	str	r3, [r0, #8]
 8009362:	e7f1      	b.n	8009348 <fGenerateDict+0x114>
 8009364:	20000390 	.word	0x20000390
 8009368:	0800948d 	.word	0x0800948d
 800936c:	08008e35 	.word	0x08008e35
 8009370:	08008d91 	.word	0x08008d91
 8009374:	08008ce1 	.word	0x08008ce1
 8009378:	08008c39 	.word	0x08008c39
 800937c:	08009107 	.word	0x08009107

08009380 <fMcuLiveGeneratePayload>:
static void fMcuLiveGeneratePayload(uint32_t fobjectPtr, void *param) {
 8009380:	b510      	push	{r4, lr}
  sFaraabinFobjectMcu* mcuFobject = fFaraabinFobjectMcu_GetFobject();
 8009382:	f7fd fe95 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 8009386:	4604      	mov	r4, r0
  fAddToBufferU32(fFaraabinDatabase_GetAllStatusFlags());
 8009388:	f7fc fce2 	bl	8005d50 <fFaraabinDatabase_GetAllStatusFlags>
 800938c:	f7ff fa47 	bl	800881e <fAddToBufferU32>
	fAddToBufferU16(mcuFobject->SessionId);
 8009390:	f8b4 004e 	ldrh.w	r0, [r4, #78]	@ 0x4e
 8009394:	f7ff fa3a 	bl	800880c <fAddToBufferU16>
	fAddToBufferU32(0); //Cpu usage
 8009398:	2000      	movs	r0, #0
 800939a:	f7ff fa40 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32((uint32_t)(fChrono_GetContinuousTickMs() / 1000U)); //Up time
 800939e:	f7fc fa71 	bl	8005884 <fChrono_GetContinuousTickMs>
 80093a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093a6:	2300      	movs	r3, #0
 80093a8:	f7f7 feb0 	bl	800110c <__aeabi_uldivmod>
 80093ac:	f7ff fa37 	bl	800881e <fAddToBufferU32>
}
 80093b0:	bd10      	pop	{r4, pc}
	...

080093b4 <fMcuWhoAmIGeneratePayload>:
static void fMcuWhoAmIGeneratePayload(uint32_t fobjectPtr, void *param) {
 80093b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sFaraabinFobjectMcu* mcuFobject = fFaraabinFobjectMcu_GetFobject();
 80093b8:	f7fd fe7a 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 80093bc:	4681      	mov	r9, r0
  fAddToBufferU8((uint8_t)isBigEndian);
 80093be:	2000      	movs	r0, #0
 80093c0:	f7ff f98c 	bl	80086dc <fAddToBufferU8>
	fAddToBufferU8(0/*Version Major*/);
 80093c4:	2000      	movs	r0, #0
 80093c6:	f7ff f989 	bl	80086dc <fAddToBufferU8>
	fAddToBufferU8(0/*Version Minor*/);
 80093ca:	2000      	movs	r0, #0
 80093cc:	f7ff f986 	bl	80086dc <fAddToBufferU8>
  fAddToBufferU32(fFaraabinDatabase_GetAllFeatureFlags());
 80093d0:	f7fc fcb8 	bl	8005d44 <fFaraabinDatabase_GetAllFeatureFlags>
 80093d4:	f7ff fa23 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(fFaraabinDatabase_GetNumberOfAddedDicts());
 80093d8:	f7fc fc3c 	bl	8005c54 <fFaraabinDatabase_GetNumberOfAddedDicts>
 80093dc:	f7ff fa1f 	bl	800881e <fAddToBufferU32>
  uint16_t dicts = fFaraabinDatabase_GetNumberOfAddedDicts();
 80093e0:	f7fc fc38 	bl	8005c54 <fFaraabinDatabase_GetNumberOfAddedDicts>
  _serializer.DictIterator.CurrentDictIndex = dictIndex;
 80093e4:	4b28      	ldr	r3, [pc, #160]	@ (8009488 <fMcuWhoAmIGeneratePayload+0xd4>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	809a      	strh	r2, [r3, #4]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 80093ea:	805a      	strh	r2, [r3, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 80093ec:	801a      	strh	r2, [r3, #0]
  for(uint16_t i = 0; i < dicts; i++) {
 80093ee:	b180      	cbz	r0, 8009412 <fMcuWhoAmIGeneratePayload+0x5e>
 80093f0:	4605      	mov	r5, r0
 80093f2:	4614      	mov	r4, r2
  _serializer.DictIterator._isInCountingMode = true;
 80093f4:	4698      	mov	r8, r3
 80093f6:	f04f 0701 	mov.w	r7, #1
    fGenerateDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), 0);
 80093fa:	4616      	mov	r6, r2
  _serializer.DictIterator._isInCountingMode = true;
 80093fc:	f888 7006 	strb.w	r7, [r8, #6]
    fGenerateDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), 0);
 8009400:	b2a0      	uxth	r0, r4
 8009402:	f7fc fc93 	bl	8005d2c <fFaraabinDatabase_GetFobjectPointerFromDict>
 8009406:	4631      	mov	r1, r6
 8009408:	f7ff ff14 	bl	8009234 <fGenerateDict>
  for(uint16_t i = 0; i < dicts; i++) {
 800940c:	3401      	adds	r4, #1
 800940e:	42ac      	cmp	r4, r5
 8009410:	d1f4      	bne.n	80093fc <fMcuWhoAmIGeneratePayload+0x48>
  _serializer.DictIterator._isInCountingMode = false;
 8009412:	4b1d      	ldr	r3, [pc, #116]	@ (8009488 <fMcuWhoAmIGeneratePayload+0xd4>)
 8009414:	2500      	movs	r5, #0
 8009416:	719d      	strb	r5, [r3, #6]
  fAddToBufferU32(fCountAllDictsFrames());
 8009418:	8818      	ldrh	r0, [r3, #0]
 800941a:	f7ff fa00 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(fFaraabin_GetRxBufferSize());
 800941e:	f7f7 ffff 	bl	8001420 <fFaraabin_GetRxBufferSize>
 8009422:	f7ff f9fc 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(fChrono_GetTickToNsCoef());
 8009426:	f7fc f983 	bl	8005730 <fChrono_GetTickToNsCoef>
 800942a:	f7ff f9f8 	bl	800881e <fAddToBufferU32>
  fAddToBufferU32(fChrono_GetTickTopValue());
 800942e:	f7fc f96b 	bl	8005708 <fChrono_GetTickTopValue>
 8009432:	f7ff f9f4 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(mcuFobject->BootTimeMs);
 8009436:	f8d9 0054 	ldr.w	r0, [r9, #84]	@ 0x54
 800943a:	f7ff f9f0 	bl	800881e <fAddToBufferU32>
  fAddToBufferU16(strlen(fFaraabin_GetFirmwareName()));
 800943e:	f7f7 ffdb 	bl	80013f8 <fFaraabin_GetFirmwareName>
 8009442:	f7f6 fe85 	bl	8000150 <strlen>
 8009446:	b280      	uxth	r0, r0
 8009448:	f7ff f9e0 	bl	800880c <fAddToBufferU16>
  fAddToBufferString(fFaraabin_GetFirmwareName());
 800944c:	f7f7 ffd4 	bl	80013f8 <fFaraabin_GetFirmwareName>
 8009450:	4604      	mov	r4, r0
  fAddToBuffer((uint8_t*)string, strlen(string));
 8009452:	f7f6 fe7d 	bl	8000150 <strlen>
 8009456:	4601      	mov	r1, r0
 8009458:	4620      	mov	r0, r4
 800945a:	f7ff f9f1 	bl	8008840 <fAddToBuffer>
  fAddToBufferU16(strlen(fFaraabin_GetFirmwareInfo()));
 800945e:	f7f7 ffcf 	bl	8001400 <fFaraabin_GetFirmwareInfo>
 8009462:	f7f6 fe75 	bl	8000150 <strlen>
 8009466:	b280      	uxth	r0, r0
 8009468:	f7ff f9d0 	bl	800880c <fAddToBufferU16>
  fAddToBufferString(fFaraabin_GetFirmwareInfo());
 800946c:	f7f7 ffc8 	bl	8001400 <fFaraabin_GetFirmwareInfo>
 8009470:	4604      	mov	r4, r0
  fAddToBuffer((uint8_t*)string, strlen(string));
 8009472:	f7f6 fe6d 	bl	8000150 <strlen>
 8009476:	4601      	mov	r1, r0
 8009478:	4620      	mov	r0, r4
 800947a:	f7ff f9e1 	bl	8008840 <fAddToBuffer>
  fAddToBufferU8('\0');
 800947e:	4628      	mov	r0, r5
 8009480:	f7ff f92c 	bl	80086dc <fAddToBufferU8>
}
 8009484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009488:	20002a8c 	.word	0x20002a8c

0800948c <fDictGeneratePayloadMcu>:
static void fDictGeneratePayloadMcu(uint32_t fobjectPtr, void *param) {
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8009492:	7800      	ldrb	r0, [r0, #0]
 8009494:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009498:	7863      	ldrb	r3, [r4, #1]
 800949a:	b10b      	cbz	r3, 80094a0 <fDictGeneratePayloadMcu+0x14>
 800949c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80094a0:	f7ff f91c 	bl	80086dc <fAddToBufferU8>
  if(!me->_init) {
 80094a4:	7863      	ldrb	r3, [r4, #1]
 80094a6:	b39b      	cbz	r3, 8009510 <fDictGeneratePayloadMcu+0x84>
  fAddToBufferU8(me->Enable);
 80094a8:	78a0      	ldrb	r0, [r4, #2]
 80094aa:	f7ff f917 	bl	80086dc <fAddToBufferU8>
  uint16_t runningFunctions = fFaraabinFunctionEngine_GetQtyOfRunningFunctions();
 80094ae:	f7fd ff5f 	bl	8007370 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions>
 80094b2:	4606      	mov	r6, r0
  fAddToBufferU16(runningFunctions);
 80094b4:	f7ff f9aa 	bl	800880c <fAddToBufferU16>
  for(uint16_t i = 0; i < runningFunctions; i++) {
 80094b8:	b18e      	cbz	r6, 80094de <fDictGeneratePayloadMcu+0x52>
 80094ba:	2400      	movs	r4, #0
    uint32_t ptr = 0U;
 80094bc:	4625      	mov	r5, r4
 80094be:	9500      	str	r5, [sp, #0]
    uint32_t objectPtr = 0U;
 80094c0:	9501      	str	r5, [sp, #4]
    if(fFaraabinFunctionEngine_GetPtrsOfRunningFunction(i, &ptr, &objectPtr) != 0) {
 80094c2:	aa01      	add	r2, sp, #4
 80094c4:	4669      	mov	r1, sp
 80094c6:	b2a0      	uxth	r0, r4
 80094c8:	f7fd ff5c 	bl	8007384 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction>
    fAddToBufferU32(ptr);
 80094cc:	9800      	ldr	r0, [sp, #0]
 80094ce:	f7ff f9a6 	bl	800881e <fAddToBufferU32>
    fAddToBufferU32(objectPtr);
 80094d2:	9801      	ldr	r0, [sp, #4]
 80094d4:	f7ff f9a3 	bl	800881e <fAddToBufferU32>
  for(uint16_t i = 0; i < runningFunctions; i++) {
 80094d8:	3401      	adds	r4, #1
 80094da:	42b4      	cmp	r4, r6
 80094dc:	d1ef      	bne.n	80094be <fDictGeneratePayloadMcu+0x32>
  fAddToBufferU32(sizeof(sFaraabinFobjectMcu));
 80094de:	205c      	movs	r0, #92	@ 0x5c
 80094e0:	f7ff f99d 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(fFaraabinFunctionEngine_GetRamUsage());
 80094e4:	f7fd ff7e 	bl	80073e4 <fFaraabinFunctionEngine_GetRamUsage>
 80094e8:	f7ff f999 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(fFaraabinLinkBuffer_GetRamUsage());
 80094ec:	f7fd ff7e 	bl	80073ec <fFaraabinLinkBuffer_GetRamUsage>
 80094f0:	f7ff f995 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(fFaraabinLinkHandler_GetRamUsage());
 80094f4:	f7ff f8ef 	bl	80086d6 <fFaraabinLinkHandler_GetRamUsage>
 80094f8:	f7ff f991 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(fFaraabinLinkSerializer_GetRamUsage());
 80094fc:	f640 00a8 	movw	r0, #2216	@ 0x8a8
 8009500:	f7ff f98d 	bl	800881e <fAddToBufferU32>
	fAddToBufferU32(fFaraabinDatabase_GetRamUsage());
 8009504:	f7fc fc2a 	bl	8005d5c <fFaraabinDatabase_GetRamUsage>
 8009508:	f7ff f989 	bl	800881e <fAddToBufferU32>
}
 800950c:	b002      	add	sp, #8
 800950e:	bd70      	pop	{r4, r5, r6, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009510:	6865      	ldr	r5, [r4, #4]
 8009512:	4628      	mov	r0, r5
 8009514:	f7f6 fe1c 	bl	8000150 <strlen>
 8009518:	4601      	mov	r1, r0
 800951a:	4628      	mov	r0, r5
 800951c:	f7ff f990 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009520:	203a      	movs	r0, #58	@ 0x3a
 8009522:	f7ff f8db 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009526:	68a5      	ldr	r5, [r4, #8]
 8009528:	4628      	mov	r0, r5
 800952a:	f7f6 fe11 	bl	8000150 <strlen>
 800952e:	4601      	mov	r1, r0
 8009530:	4628      	mov	r0, r5
 8009532:	f7ff f985 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009536:	203a      	movs	r0, #58	@ 0x3a
 8009538:	f7ff f8d0 	bl	80086dc <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 800953c:	68e4      	ldr	r4, [r4, #12]
 800953e:	4620      	mov	r0, r4
 8009540:	f7f6 fe06 	bl	8000150 <strlen>
 8009544:	4601      	mov	r1, r0
 8009546:	4620      	mov	r0, r4
 8009548:	f7ff f97a 	bl	8008840 <fAddToBuffer>
    fAddToBufferU8('\0');
 800954c:	2000      	movs	r0, #0
 800954e:	f7ff f8c5 	bl	80086dc <fAddToBufferU8>
    return;
 8009552:	e7db      	b.n	800950c <fDictGeneratePayloadMcu+0x80>

08009554 <fFaraabinLinkSerializer_Init>:
uint8_t fFaraabinLinkSerializer_Init(uint8_t *txBuffer, uint32_t txBufferSize) {
 8009554:	b538      	push	{r3, r4, r5, lr}
  if(fFaraabinLinkBuffer_Init(txBuffer, txBufferSize) != 0U) {
 8009556:	f7fd ff63 	bl	8007420 <fFaraabinLinkBuffer_Init>
 800955a:	b9e0      	cbnz	r0, 8009596 <fFaraabinLinkSerializer_Init+0x42>
 800955c:	4605      	mov	r5, r0
 800955e:	480f      	ldr	r0, [pc, #60]	@ (800959c <fFaraabinLinkSerializer_Init+0x48>)
 8009560:	f100 02d1 	add.w	r2, r0, #209	@ 0xd1
 8009564:	f600 00a1 	addw	r0, r0, #2209	@ 0x8a1
      _serializer.Serializer.TextEventBuffer[i][j] = 0x00U;
 8009568:	2100      	movs	r1, #0
    for(uint16_t j = 0; j < TEXT_EVENT_BUFFER_SIZE; j++) {
 800956a:	f1a2 03c8 	sub.w	r3, r2, #200	@ 0xc8
      _serializer.Serializer.TextEventBuffer[i][j] = 0x00U;
 800956e:	f803 1f01 	strb.w	r1, [r3, #1]!
    for(uint16_t j = 0; j < TEXT_EVENT_BUFFER_SIZE; j++) {
 8009572:	4293      	cmp	r3, r2
 8009574:	d1fb      	bne.n	800956e <fFaraabinLinkSerializer_Init+0x1a>
  for(uint16_t i = 0; i < TEXT_EVENT_MAX_REENTRANCE; i++) {
 8009576:	32c8      	adds	r2, #200	@ 0xc8
 8009578:	4282      	cmp	r2, r0
 800957a:	d1f6      	bne.n	800956a <fFaraabinLinkSerializer_Init+0x16>
  _serializer.Serializer.DepthCounter = 0U;
 800957c:	4c07      	ldr	r4, [pc, #28]	@ (800959c <fFaraabinLinkSerializer_Init+0x48>)
 800957e:	2300      	movs	r3, #0
 8009580:	8123      	strh	r3, [r4, #8]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 8009582:	8063      	strh	r3, [r4, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 8009584:	8023      	strh	r3, [r4, #0]
  _serializer.DictIterator.CurrentDictIndex = 0U;
 8009586:	80a3      	strh	r3, [r4, #4]
  _serializer.DictIterator._isInCountingMode = false;
 8009588:	71a3      	strb	r3, [r4, #6]
  _serializer.McuHandle = fFaraabinFobjectMcu_GetFobject();
 800958a:	f7fd fd91 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
 800958e:	f8c4 08a4 	str.w	r0, [r4, #2212]	@ 0x8a4
}
 8009592:	4628      	mov	r0, r5
 8009594:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 8009596:	2501      	movs	r5, #1
 8009598:	e7fb      	b.n	8009592 <fFaraabinLinkSerializer_Init+0x3e>
 800959a:	bf00      	nop
 800959c:	20002a8c 	.word	0x20002a8c

080095a0 <fFaraabinLinkSerializer_SerializeEvent>:
  bool isEnd) {
 80095a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a4:	b08c      	sub	sp, #48	@ 0x30
 80095a6:	4680      	mov	r8, r0
 80095a8:	460f      	mov	r7, r1
 80095aa:	4616      	mov	r6, r2
 80095ac:	461c      	mov	r4, r3
 80095ae:	f89d 5060 	ldrb.w	r5, [sp, #96]	@ 0x60
	if((!isResponse) && !fFaraabin_IsAllowEvent()) {
 80095b2:	b11d      	cbz	r5, 80095bc <fFaraabinLinkSerializer_SerializeEvent+0x1c>
  if(fobjectEnableState == false) {
 80095b4:	b93c      	cbnz	r4, 80095c6 <fFaraabinLinkSerializer_SerializeEvent+0x26>
}
 80095b6:	b00c      	add	sp, #48	@ 0x30
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((!isResponse) && !fFaraabin_IsAllowEvent()) {
 80095bc:	f7fc faec 	bl	8005b98 <fFaraabin_IsAllowEvent>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1f7      	bne.n	80095b4 <fFaraabinLinkSerializer_SerializeEvent+0x14>
 80095c4:	e7f7      	b.n	80095b6 <fFaraabinLinkSerializer_SerializeEvent+0x16>
  eventParam.Severity = eventSeverity;
 80095c6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80095ca:	f88d 301c 	strb.w	r3, [sp, #28]
  eventParam.EventId = eventId;
 80095ce:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80095d2:	f8ad 301e 	strh.w	r3, [sp, #30]
  eventParam.pParam = param;
 80095d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80095d8:	9308      	str	r3, [sp, #32]
  eventParam.ParamSize = paramSize;
 80095da:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 80095de:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  eventParam.fpGeneratePayload = generatePayloadFunc;
 80095e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095e4:	930a      	str	r3, [sp, #40]	@ 0x28
  eventParam.pPayloadParam = payloadParam;
 80095e6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80095e8:	930b      	str	r3, [sp, #44]	@ 0x2c
  fSerializeFrame(
 80095ea:	ab07      	add	r3, sp, #28
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	4b09      	ldr	r3, [pc, #36]	@ (8009614 <fFaraabinLinkSerializer_SerializeEvent+0x74>)
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 80095f6:	9303      	str	r3, [sp, #12]
 80095f8:	2304      	movs	r3, #4
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	9701      	str	r7, [sp, #4]
 80095fe:	f8cd 8000 	str.w	r8, [sp]
 8009602:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8009606:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	f7ff f9e3 	bl	80089d8 <fSerializeFrame>
 8009612:	e7d0      	b.n	80095b6 <fFaraabinLinkSerializer_SerializeEvent+0x16>
 8009614:	080089b1 	.word	0x080089b1

08009618 <fFaraabinLinkSerializer_SerializeEventPrintf>:
  const char *format, ...) {
 8009618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961c:	b08c      	sub	sp, #48	@ 0x30
 800961e:	4605      	mov	r5, r0
 8009620:	460e      	mov	r6, r1
 8009622:	4617      	mov	r7, r2
 8009624:	461c      	mov	r4, r3
	if(!fFaraabin_IsAllowEvent()) {
 8009626:	f7fc fab7 	bl	8005b98 <fFaraabin_IsAllowEvent>
 800962a:	2800      	cmp	r0, #0
 800962c:	d034      	beq.n	8009698 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
  if(fobjectEnableState == false) {
 800962e:	2c00      	cmp	r4, #0
 8009630:	d032      	beq.n	8009698 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
  if(format == NULL) {
 8009632:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009634:	2b00      	cmp	r3, #0
 8009636:	d02f      	beq.n	8009698 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
  if(_serializer.Serializer.DepthCounter >= (TEXT_EVENT_MAX_REENTRANCE + 1U)) {
 8009638:	4b1b      	ldr	r3, [pc, #108]	@ (80096a8 <fFaraabinLinkSerializer_SerializeEventPrintf+0x90>)
 800963a:	891b      	ldrh	r3, [r3, #8]
 800963c:	2b0a      	cmp	r3, #10
 800963e:	d82e      	bhi.n	800969e <fFaraabinLinkSerializer_SerializeEventPrintf+0x86>
  _serializer.Serializer.DepthCounter++;
 8009640:	3301      	adds	r3, #1
 8009642:	b29c      	uxth	r4, r3
 8009644:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 80096a8 <fFaraabinLinkSerializer_SerializeEventPrintf+0x90>
 8009648:	f8a8 4008 	strh.w	r4, [r8, #8]
  va_start(args, format);
 800964c:	ab15      	add	r3, sp, #84	@ 0x54
 800964e:	930b      	str	r3, [sp, #44]	@ 0x2c
  int stringLen = vsnprintf((char*)_serializer.Serializer.TextEventBuffer[reentranceCounter - 1U], TEXT_EVENT_BUFFER_SIZE, format, args);
 8009650:	3c01      	subs	r4, #1
 8009652:	21c8      	movs	r1, #200	@ 0xc8
 8009654:	fb01 8404 	mla	r4, r1, r4, r8
 8009658:	340a      	adds	r4, #10
 800965a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fa93 	bl	8009b88 <vsniprintf>
  fFaraabinLinkSerializer_SerializeEvent(fobjectPtr,
 8009662:	2301      	movs	r3, #1
 8009664:	9309      	str	r3, [sp, #36]	@ 0x24
 8009666:	2200      	movs	r2, #0
 8009668:	9208      	str	r2, [sp, #32]
 800966a:	9207      	str	r2, [sp, #28]
 800966c:	9206      	str	r2, [sp, #24]
 800966e:	9205      	str	r2, [sp, #20]
 8009670:	b280      	uxth	r0, r0
 8009672:	9004      	str	r0, [sp, #16]
 8009674:	9403      	str	r4, [sp, #12]
 8009676:	9202      	str	r2, [sp, #8]
 8009678:	f89d 204c 	ldrb.w	r2, [sp, #76]	@ 0x4c
 800967c:	9201      	str	r2, [sp, #4]
 800967e:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 8009682:	9200      	str	r2, [sp, #0]
 8009684:	463a      	mov	r2, r7
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	f7ff ff89 	bl	80095a0 <fFaraabinLinkSerializer_SerializeEvent>
  _serializer.Serializer.DepthCounter--;
 800968e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009692:	3b01      	subs	r3, #1
 8009694:	f8a8 3008 	strh.w	r3, [r8, #8]
}
 8009698:	b00c      	add	sp, #48	@ 0x30
 800969a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fFaraabinFobjectMcu_SendEventSystem(eMCU_EVENT_ERROR_MAX_PRINTF_REENTRANT);
 800969e:	200b      	movs	r0, #11
 80096a0:	f7fd fc9a 	bl	8006fd8 <fFaraabinFobjectMcu_SendEventSystem>
    return;
 80096a4:	e7f8      	b.n	8009698 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
 80096a6:	bf00      	nop
 80096a8:	20002a8c 	.word	0x20002a8c

080096ac <fFaraabinLinkSerializer_SerializeDict>:
  uint8_t reqSeq) {
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	4606      	mov	r6, r0
 80096b0:	4615      	mov	r5, r2
  _serializer.DictIterator.CurrentDictIndex = dictIndex;
 80096b2:	4c08      	ldr	r4, [pc, #32]	@ (80096d4 <fFaraabinLinkSerializer_SerializeDict+0x28>)
 80096b4:	80a1      	strh	r1, [r4, #4]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 80096b6:	2700      	movs	r7, #0
 80096b8:	8067      	strh	r7, [r4, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 80096ba:	8027      	strh	r7, [r4, #0]
  _serializer.DictIterator._isInCountingMode = true;
 80096bc:	2301      	movs	r3, #1
 80096be:	71a3      	strb	r3, [r4, #6]
  fGenerateDict(fobjectPtr, reqSeq);
 80096c0:	4611      	mov	r1, r2
 80096c2:	f7ff fdb7 	bl	8009234 <fGenerateDict>
  _serializer.DictIterator._isInCountingMode = false;
 80096c6:	71a7      	strb	r7, [r4, #6]
  fGenerateDict(fobjectPtr, reqSeq);
 80096c8:	4629      	mov	r1, r5
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7ff fdb2 	bl	8009234 <fGenerateDict>
}
 80096d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20002a8c 	.word	0x20002a8c

080096d8 <fFaraabinLinkSerializer_FlushBuffer>:
  fFaraabinLinkBuffer_FlushByPointer_(ptrToBuffer, &allowableSize);
 80096d8:	4b18      	ldr	r3, [pc, #96]	@ (800973c <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 80096da:	7d1b      	ldrb	r3, [r3, #20]
 80096dc:	b923      	cbnz	r3, 80096e8 <fFaraabinLinkSerializer_FlushBuffer+0x10>
 80096de:	4b17      	ldr	r3, [pc, #92]	@ (800973c <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d010      	beq.n	800970a <fFaraabinLinkSerializer_FlushBuffer+0x32>
 80096e8:	4b14      	ldr	r3, [pc, #80]	@ (800973c <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	68d9      	ldr	r1, [r3, #12]
 80096ee:	440a      	add	r2, r1
 80096f0:	6002      	str	r2, [r0, #0]
 80096f2:	7d1b      	ldrb	r3, [r3, #20]
 80096f4:	b96b      	cbnz	r3, 8009712 <fFaraabinLinkSerializer_FlushBuffer+0x3a>
 80096f6:	4b11      	ldr	r3, [pc, #68]	@ (800973c <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 80096f8:	6898      	ldr	r0, [r3, #8]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	4298      	cmp	r0, r3
 80096fe:	bf9c      	itt	ls
 8009700:	4a0e      	ldrls	r2, [pc, #56]	@ (800973c <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 8009702:	6850      	ldrls	r0, [r2, #4]
 8009704:	1ac0      	subs	r0, r0, r3
 8009706:	b280      	uxth	r0, r0
 8009708:	e008      	b.n	800971c <fFaraabinLinkSerializer_FlushBuffer+0x44>
 800970a:	2300      	movs	r3, #0
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	4770      	bx	lr
 8009712:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 8009714:	6858      	ldr	r0, [r3, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	1ac0      	subs	r0, r0, r3
 800971a:	b280      	uxth	r0, r0
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	4402      	add	r2, r0
 8009722:	6859      	ldr	r1, [r3, #4]
 8009724:	fbb2 fcf1 	udiv	ip, r2, r1
 8009728:	fb01 221c 	mls	r2, r1, ip, r2
 800972c:	60da      	str	r2, [r3, #12]
 800972e:	691a      	ldr	r2, [r3, #16]
 8009730:	1a12      	subs	r2, r2, r0
 8009732:	611a      	str	r2, [r3, #16]
 8009734:	2200      	movs	r2, #0
 8009736:	751a      	strb	r2, [r3, #20]
}
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	20002a34 	.word	0x20002a34

08009740 <fFaraabinLinkSerializer_CommonSendEnable>:
void fFaraabinLinkSerializer_CommonSendEnable(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, bool isResponse) {
 8009740:	b530      	push	{r4, r5, lr}
 8009742:	b087      	sub	sp, #28
 8009744:	4605      	mov	r5, r0
 8009746:	4618      	mov	r0, r3
  fSerializeFrame(
 8009748:	2400      	movs	r4, #0
 800974a:	9405      	str	r4, [sp, #20]
 800974c:	4b05      	ldr	r3, [pc, #20]	@ (8009764 <fFaraabinLinkSerializer_CommonSendEnable+0x24>)
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	9403      	str	r4, [sp, #12]
 8009752:	2301      	movs	r3, #1
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	9401      	str	r4, [sp, #4]
 8009758:	9500      	str	r5, [sp, #0]
 800975a:	f7ff f93d 	bl	80089d8 <fSerializeFrame>
}
 800975e:	b007      	add	sp, #28
 8009760:	bd30      	pop	{r4, r5, pc}
 8009762:	bf00      	nop
 8009764:	0800885b 	.word	0x0800885b

08009768 <fFaraabinLinkSerializer_DataBusSendSetting>:
void fFaraabinLinkSerializer_DataBusSendSetting(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq) {
 8009768:	b510      	push	{r4, lr}
 800976a:	b086      	sub	sp, #24
  fSerializeFrame(
 800976c:	2400      	movs	r4, #0
 800976e:	9405      	str	r4, [sp, #20]
 8009770:	4b05      	ldr	r3, [pc, #20]	@ (8009788 <fFaraabinLinkSerializer_DataBusSendSetting+0x20>)
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	2301      	movs	r3, #1
 8009776:	9303      	str	r3, [sp, #12]
 8009778:	9302      	str	r3, [sp, #8]
 800977a:	9401      	str	r4, [sp, #4]
 800977c:	9000      	str	r0, [sp, #0]
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff f92a 	bl	80089d8 <fSerializeFrame>
}
 8009784:	b006      	add	sp, #24
 8009786:	bd10      	pop	{r4, pc}
 8009788:	0800902b 	.word	0x0800902b

0800978c <fFaraabinLinkSerializer_DataBusSendCaptureValue>:
void fFaraabinLinkSerializer_DataBusSendCaptureValue(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, bool isEnd, void* captureValue) {
 800978c:	b530      	push	{r4, r5, lr}
 800978e:	b087      	sub	sp, #28
  fSerializeFrame(
 8009790:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009792:	9405      	str	r4, [sp, #20]
 8009794:	4c06      	ldr	r4, [pc, #24]	@ (80097b0 <fFaraabinLinkSerializer_DataBusSendCaptureValue+0x24>)
 8009796:	9404      	str	r4, [sp, #16]
 8009798:	2400      	movs	r4, #0
 800979a:	9403      	str	r4, [sp, #12]
 800979c:	2502      	movs	r5, #2
 800979e:	9502      	str	r5, [sp, #8]
 80097a0:	9401      	str	r4, [sp, #4]
 80097a2:	9000      	str	r0, [sp, #0]
 80097a4:	2001      	movs	r0, #1
 80097a6:	f7ff f917 	bl	80089d8 <fSerializeFrame>
}
 80097aa:	b007      	add	sp, #28
 80097ac:	bd30      	pop	{r4, r5, pc}
 80097ae:	bf00      	nop
 80097b0:	080088b1 	.word	0x080088b1

080097b4 <fFaraabinLinkSerializer_DataBusSendValue>:
void fFaraabinLinkSerializer_DataBusSendValue(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, bool isResponse) {
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	4605      	mov	r5, r0
 80097ba:	4618      	mov	r0, r3
  fSerializeFrame(
 80097bc:	2400      	movs	r4, #0
 80097be:	9405      	str	r4, [sp, #20]
 80097c0:	4b05      	ldr	r3, [pc, #20]	@ (80097d8 <fFaraabinLinkSerializer_DataBusSendValue+0x24>)
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	2301      	movs	r3, #1
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	2602      	movs	r6, #2
 80097ca:	9602      	str	r6, [sp, #8]
 80097cc:	9401      	str	r4, [sp, #4]
 80097ce:	9500      	str	r5, [sp, #0]
 80097d0:	f7ff f902 	bl	80089d8 <fSerializeFrame>
}
 80097d4:	b006      	add	sp, #24
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	08008905 	.word	0x08008905

080097dc <fFaraabinLinkSerializer_VarSendValue>:
void fFaraabinLinkSerializer_VarSendValue(uint32_t fobjectPtr, uint32_t dataPtr, uint32_t size, uint8_t *fobjectSeq, uint8_t reqSeq, bool isResponse) {
 80097dc:	b510      	push	{r4, lr}
 80097de:	b08a      	sub	sp, #40	@ 0x28
 80097e0:	461c      	mov	r4, r3
  param.VarPtr = fobjectPtr;
 80097e2:	9007      	str	r0, [sp, #28]
  param.VarSize = size;
 80097e4:	9208      	str	r2, [sp, #32]
  param.DataPtr = dataPtr;
 80097e6:	9109      	str	r1, [sp, #36]	@ 0x24
    (uint32_t)fFaraabinFobjectMcu_GetFobject(),
 80097e8:	f7fd fc62 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
  fSerializeFrame(
 80097ec:	ab07      	add	r3, sp, #28
 80097ee:	9305      	str	r3, [sp, #20]
 80097f0:	4b08      	ldr	r3, [pc, #32]	@ (8009814 <fFaraabinLinkSerializer_VarSendValue+0x38>)
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	2300      	movs	r3, #0
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	2202      	movs	r2, #2
 80097fa:	9202      	str	r2, [sp, #8]
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	9000      	str	r0, [sp, #0]
 8009800:	2301      	movs	r3, #1
 8009802:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 8009806:	4621      	mov	r1, r4
 8009808:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800980c:	f7ff f8e4 	bl	80089d8 <fSerializeFrame>
}
 8009810:	b00a      	add	sp, #40	@ 0x28
 8009812:	bd10      	pop	{r4, pc}
 8009814:	0800896f 	.word	0x0800896f

08009818 <fFaraabinLinkSerializer_McuSendPing>:
void fFaraabinLinkSerializer_McuSendPing(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, void* param) {
 8009818:	b500      	push	{lr}
 800981a:	b087      	sub	sp, #28
  fSerializeFrame(
 800981c:	9305      	str	r3, [sp, #20]
 800981e:	4b07      	ldr	r3, [pc, #28]	@ (800983c <fFaraabinLinkSerializer_McuSendPing+0x24>)
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	2302      	movs	r3, #2
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	9302      	str	r3, [sp, #8]
 8009828:	2300      	movs	r3, #0
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	9000      	str	r0, [sp, #0]
 800982e:	2301      	movs	r3, #1
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff f8d1 	bl	80089d8 <fSerializeFrame>
}
 8009836:	b007      	add	sp, #28
 8009838:	f85d fb04 	ldr.w	pc, [sp], #4
 800983c:	08008965 	.word	0x08008965

08009840 <fFaraabinLinkSerializer_McuSendLive>:
void fFaraabinLinkSerializer_McuSendLive(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq) {
 8009840:	b530      	push	{r4, r5, lr}
 8009842:	b087      	sub	sp, #28
  fSerializeFrame(
 8009844:	2400      	movs	r4, #0
 8009846:	9405      	str	r4, [sp, #20]
 8009848:	4b06      	ldr	r3, [pc, #24]	@ (8009864 <fFaraabinLinkSerializer_McuSendLive+0x24>)
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	2301      	movs	r3, #1
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	2502      	movs	r5, #2
 8009852:	9502      	str	r5, [sp, #8]
 8009854:	9401      	str	r4, [sp, #4]
 8009856:	9000      	str	r0, [sp, #0]
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff f8bd 	bl	80089d8 <fSerializeFrame>
}
 800985e:	b007      	add	sp, #28
 8009860:	bd30      	pop	{r4, r5, pc}
 8009862:	bf00      	nop
 8009864:	08009381 	.word	0x08009381

08009868 <fFaraabinLinkSerializer_McuSendWhoAmI>:
void fFaraabinLinkSerializer_McuSendWhoAmI(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq) {
 8009868:	b510      	push	{r4, lr}
 800986a:	b086      	sub	sp, #24
  fSerializeFrame(
 800986c:	2300      	movs	r3, #0
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	4c06      	ldr	r4, [pc, #24]	@ (800988c <fFaraabinLinkSerializer_McuSendWhoAmI+0x24>)
 8009872:	9404      	str	r4, [sp, #16]
 8009874:	2403      	movs	r4, #3
 8009876:	9403      	str	r4, [sp, #12]
 8009878:	2402      	movs	r4, #2
 800987a:	9402      	str	r4, [sp, #8]
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	9000      	str	r0, [sp, #0]
 8009880:	2301      	movs	r3, #1
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff f8a8 	bl	80089d8 <fSerializeFrame>
}
 8009888:	b006      	add	sp, #24
 800988a:	bd10      	pop	{r4, pc}
 800988c:	080093b5 	.word	0x080093b5

08009890 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>:
  uint8_t reqSeq) {
 8009890:	b510      	push	{r4, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	4614      	mov	r4, r2
 8009896:	461a      	mov	r2, r3
  payLoad.Name = enumMemberName;
 8009898:	9402      	str	r4, [sp, #8]
  payLoad.Id = enumMemberId;
 800989a:	f8ad 100c 	strh.w	r1, [sp, #12]
  fSerializeDict(enumPtr, &me->Seq, reqSeq, fDictGeneratePayloadVarTypeEnumMember, &payLoad);
 800989e:	ab02      	add	r3, sp, #8
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	4b03      	ldr	r3, [pc, #12]	@ (80098b0 <fFaraabinLinkSerializer_VarTypeEnumMemberDict+0x20>)
 80098a4:	f100 0110 	add.w	r1, r0, #16
 80098a8:	f7ff fc9a 	bl	80091e0 <fSerializeDict>
}
 80098ac:	b004      	add	sp, #16
 80098ae:	bd10      	pop	{r4, pc}
 80098b0:	08008ee9 	.word	0x08008ee9

080098b4 <fFaraabinLinkSerializer_VarDict>:
  uint8_t reqSeq) {
 80098b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b8:	b08c      	sub	sp, #48	@ 0x30
 80098ba:	4607      	mov	r7, r0
 80098bc:	460c      	mov	r4, r1
 80098be:	4616      	mov	r6, r2
 80098c0:	461d      	mov	r5, r3
 80098c2:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
  sFaraabinFobjectMcu *me = (sFaraabinFobjectMcu*)fFaraabinFobjectMcu_GetFobject();
 80098c6:	f7fd fbf3 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
  payLoad.VarPtr = varPtr;
 80098ca:	9406      	str	r4, [sp, #24]
  payLoad.VarTypePtr = varTypePtr;
 80098cc:	9707      	str	r7, [sp, #28]
  payLoad.VarArrayQty = varArrayQty;
 80098ce:	9608      	str	r6, [sp, #32]
  payLoad.ExternalInterface = externalInterface;
 80098d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098d2:	9309      	str	r3, [sp, #36]	@ 0x24
  payLoad.AccessCallBack = accessCallback;  
 80098d4:	950a      	str	r5, [sp, #40]	@ 0x28
  payLoad._isPtr = isPtr;
 80098d6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80098da:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  payLoad.Name = name;
 80098de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80098e0:	9303      	str	r3, [sp, #12]
  payLoad.Path = path;
 80098e2:	f8cd 8010 	str.w	r8, [sp, #16]
  CorrectPath_(payLoad.Path);
 80098e6:	f1b8 0f00 	cmp.w	r8, #0
 80098ea:	d014      	beq.n	8009916 <fFaraabinLinkSerializer_VarDict+0x62>
 80098ec:	f898 3000 	ldrb.w	r3, [r8]
 80098f0:	b913      	cbnz	r3, 80098f8 <fFaraabinLinkSerializer_VarDict+0x44>
 80098f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009920 <fFaraabinLinkSerializer_VarDict+0x6c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	9304      	str	r3, [sp, #16]
  payLoad.FileName = fileName;
 80098f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098fa:	9305      	str	r3, [sp, #20]
  fSerializeDict(varPtr, &me->Seq, reqSeq, fDictGeneratePayloadVar, &payLoad);
 80098fc:	ab03      	add	r3, sp, #12
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	4b08      	ldr	r3, [pc, #32]	@ (8009924 <fFaraabinLinkSerializer_VarDict+0x70>)
 8009902:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8009906:	f100 0110 	add.w	r1, r0, #16
 800990a:	4620      	mov	r0, r4
 800990c:	f7ff fc68 	bl	80091e0 <fSerializeDict>
}
 8009910:	b00c      	add	sp, #48	@ 0x30
 8009912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CorrectPath_(payLoad.Path);
 8009916:	4b02      	ldr	r3, [pc, #8]	@ (8009920 <fFaraabinLinkSerializer_VarDict+0x6c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	e7ec      	b.n	80098f8 <fFaraabinLinkSerializer_VarDict+0x44>
 800991e:	bf00      	nop
 8009920:	20000390 	.word	0x20000390
 8009924:	08008f11 	.word	0x08008f11

08009928 <fFaraabinLinkSerializer_FunctionGroupDict>:
  uint8_t reqSeq) {
 8009928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992a:	b089      	sub	sp, #36	@ 0x24
 800992c:	4604      	mov	r4, r0
 800992e:	460f      	mov	r7, r1
 8009930:	4615      	mov	r5, r2
 8009932:	461e      	mov	r6, r3
  sFaraabinFobjectMcu *me = (sFaraabinFobjectMcu*)fFaraabinFobjectMcu_GetFobject();
 8009934:	f7fd fbbc 	bl	80070b0 <fFaraabinFobjectMcu_GetFobject>
  payLoad.ObjectName = objectName;
 8009938:	9503      	str	r5, [sp, #12]
  payLoad.Path = path;
 800993a:	9404      	str	r4, [sp, #16]
  CorrectPath_(payLoad.Path);
 800993c:	b19c      	cbz	r4, 8009966 <fFaraabinLinkSerializer_FunctionGroupDict+0x3e>
 800993e:	7823      	ldrb	r3, [r4, #0]
 8009940:	b913      	cbnz	r3, 8009948 <fFaraabinLinkSerializer_FunctionGroupDict+0x20>
 8009942:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <fFaraabinLinkSerializer_FunctionGroupDict+0x48>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	9304      	str	r3, [sp, #16]
  payLoad.FileName = fileName;
 8009948:	9705      	str	r7, [sp, #20]
  payLoad.ObjectPtr = objectPtr;
 800994a:	9606      	str	r6, [sp, #24]
  payLoad.GroupTypePtr = groupTypePtr;
 800994c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800994e:	9307      	str	r3, [sp, #28]
  fSerializeDict((uint32_t)me, &me->Seq, reqSeq, fDictGeneratePayloadFunctionGroup, &payLoad);
 8009950:	ab03      	add	r3, sp, #12
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4b07      	ldr	r3, [pc, #28]	@ (8009974 <fFaraabinLinkSerializer_FunctionGroupDict+0x4c>)
 8009956:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 800995a:	f100 0110 	add.w	r1, r0, #16
 800995e:	f7ff fc3f 	bl	80091e0 <fSerializeDict>
}
 8009962:	b009      	add	sp, #36	@ 0x24
 8009964:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CorrectPath_(payLoad.Path);
 8009966:	4b02      	ldr	r3, [pc, #8]	@ (8009970 <fFaraabinLinkSerializer_FunctionGroupDict+0x48>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	9304      	str	r3, [sp, #16]
 800996c:	e7ec      	b.n	8009948 <fFaraabinLinkSerializer_FunctionGroupDict+0x20>
 800996e:	bf00      	nop
 8009970:	20000390 	.word	0x20000390
 8009974:	08008f8d 	.word	0x08008f8d

08009978 <fFaraabinLinkSerializer_FunctionGroupTypeMemberDict>:
void fFaraabinLinkSerializer_FunctionGroupTypeMemberDict(uint32_t groupTypePtr, void *fn, uint8_t reqSeq) {
 8009978:	b500      	push	{lr}
 800997a:	b083      	sub	sp, #12
  fSerializeDict(groupTypePtr, &me->Seq, reqSeq, fDictGeneratePayloadFunctionGroupTypeMember, fn);
 800997c:	9100      	str	r1, [sp, #0]
 800997e:	4b04      	ldr	r3, [pc, #16]	@ (8009990 <fFaraabinLinkSerializer_FunctionGroupTypeMemberDict+0x18>)
 8009980:	f100 010c 	add.w	r1, r0, #12
 8009984:	f7ff fc2c 	bl	80091e0 <fSerializeDict>
}
 8009988:	b003      	add	sp, #12
 800998a:	f85d fb04 	ldr.w	pc, [sp], #4
 800998e:	bf00      	nop
 8009990:	08008fe7 	.word	0x08008fe7

08009994 <fFaraabinLinkSerializer_CountDictsFrames>:
uint32_t fFaraabinLinkSerializer_CountDictsFrames(uint32_t fobjectPtr) {
 8009994:	b538      	push	{r3, r4, r5, lr}
  _serializer.DictIterator.CurrentDictIndex = dictIndex;
 8009996:	4c06      	ldr	r4, [pc, #24]	@ (80099b0 <fFaraabinLinkSerializer_CountDictsFrames+0x1c>)
 8009998:	2500      	movs	r5, #0
 800999a:	80a5      	strh	r5, [r4, #4]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 800999c:	8065      	strh	r5, [r4, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 800999e:	8025      	strh	r5, [r4, #0]
  _serializer.DictIterator._isInCountingMode = true;
 80099a0:	2301      	movs	r3, #1
 80099a2:	71a3      	strb	r3, [r4, #6]
  fGenerateDict(fobjectPtr, 0);
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7ff fc45 	bl	8009234 <fGenerateDict>
  _serializer.DictIterator._isInCountingMode = false;
 80099aa:	71a5      	strb	r5, [r4, #6]
}
 80099ac:	8820      	ldrh	r0, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20002a8c 	.word	0x20002a8c

080099b4 <malloc>:
 80099b4:	4b02      	ldr	r3, [pc, #8]	@ (80099c0 <malloc+0xc>)
 80099b6:	4601      	mov	r1, r0
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	f000 b82d 	b.w	8009a18 <_malloc_r>
 80099be:	bf00      	nop
 80099c0:	20000460 	.word	0x20000460

080099c4 <free>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	@ (80099d0 <free+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f000 b941 	b.w	8009c50 <_free_r>
 80099ce:	bf00      	nop
 80099d0:	20000460 	.word	0x20000460

080099d4 <sbrk_aligned>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009a14 <sbrk_aligned+0x40>)
 80099d8:	460c      	mov	r4, r1
 80099da:	6831      	ldr	r1, [r6, #0]
 80099dc:	4605      	mov	r5, r0
 80099de:	b911      	cbnz	r1, 80099e6 <sbrk_aligned+0x12>
 80099e0:	f000 f8fa 	bl	8009bd8 <_sbrk_r>
 80099e4:	6030      	str	r0, [r6, #0]
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f000 f8f5 	bl	8009bd8 <_sbrk_r>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d103      	bne.n	80099fa <sbrk_aligned+0x26>
 80099f2:	f04f 34ff 	mov.w	r4, #4294967295
 80099f6:	4620      	mov	r0, r4
 80099f8:	bd70      	pop	{r4, r5, r6, pc}
 80099fa:	1cc4      	adds	r4, r0, #3
 80099fc:	f024 0403 	bic.w	r4, r4, #3
 8009a00:	42a0      	cmp	r0, r4
 8009a02:	d0f8      	beq.n	80099f6 <sbrk_aligned+0x22>
 8009a04:	1a21      	subs	r1, r4, r0
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f8e6 	bl	8009bd8 <_sbrk_r>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d1f2      	bne.n	80099f6 <sbrk_aligned+0x22>
 8009a10:	e7ef      	b.n	80099f2 <sbrk_aligned+0x1e>
 8009a12:	bf00      	nop
 8009a14:	20003334 	.word	0x20003334

08009a18 <_malloc_r>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	1ccd      	adds	r5, r1, #3
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	db01      	blt.n	8009a34 <_malloc_r+0x1c>
 8009a30:	42a9      	cmp	r1, r5
 8009a32:	d904      	bls.n	8009a3e <_malloc_r+0x26>
 8009a34:	230c      	movs	r3, #12
 8009a36:	6033      	str	r3, [r6, #0]
 8009a38:	2000      	movs	r0, #0
 8009a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b14 <_malloc_r+0xfc>
 8009a42:	f000 f869 	bl	8009b18 <__malloc_lock>
 8009a46:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4a:	461c      	mov	r4, r3
 8009a4c:	bb44      	cbnz	r4, 8009aa0 <_malloc_r+0x88>
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff ffbf 	bl	80099d4 <sbrk_aligned>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	4604      	mov	r4, r0
 8009a5a:	d158      	bne.n	8009b0e <_malloc_r+0xf6>
 8009a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a60:	4627      	mov	r7, r4
 8009a62:	2f00      	cmp	r7, #0
 8009a64:	d143      	bne.n	8009aee <_malloc_r+0xd6>
 8009a66:	2c00      	cmp	r4, #0
 8009a68:	d04b      	beq.n	8009b02 <_malloc_r+0xea>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	4630      	mov	r0, r6
 8009a70:	eb04 0903 	add.w	r9, r4, r3
 8009a74:	f000 f8b0 	bl	8009bd8 <_sbrk_r>
 8009a78:	4581      	cmp	r9, r0
 8009a7a:	d142      	bne.n	8009b02 <_malloc_r+0xea>
 8009a7c:	6821      	ldr	r1, [r4, #0]
 8009a7e:	4630      	mov	r0, r6
 8009a80:	1a6d      	subs	r5, r5, r1
 8009a82:	4629      	mov	r1, r5
 8009a84:	f7ff ffa6 	bl	80099d4 <sbrk_aligned>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d03a      	beq.n	8009b02 <_malloc_r+0xea>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	442b      	add	r3, r5
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	f8d8 3000 	ldr.w	r3, [r8]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	bb62      	cbnz	r2, 8009af4 <_malloc_r+0xdc>
 8009a9a:	f8c8 7000 	str.w	r7, [r8]
 8009a9e:	e00f      	b.n	8009ac0 <_malloc_r+0xa8>
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	1b52      	subs	r2, r2, r5
 8009aa4:	d420      	bmi.n	8009ae8 <_malloc_r+0xd0>
 8009aa6:	2a0b      	cmp	r2, #11
 8009aa8:	d917      	bls.n	8009ada <_malloc_r+0xc2>
 8009aaa:	1961      	adds	r1, r4, r5
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	6025      	str	r5, [r4, #0]
 8009ab0:	bf18      	it	ne
 8009ab2:	6059      	strne	r1, [r3, #4]
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	bf08      	it	eq
 8009ab8:	f8c8 1000 	streq.w	r1, [r8]
 8009abc:	5162      	str	r2, [r4, r5]
 8009abe:	604b      	str	r3, [r1, #4]
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f82f 	bl	8009b24 <__malloc_unlock>
 8009ac6:	f104 000b 	add.w	r0, r4, #11
 8009aca:	1d23      	adds	r3, r4, #4
 8009acc:	f020 0007 	bic.w	r0, r0, #7
 8009ad0:	1ac2      	subs	r2, r0, r3
 8009ad2:	bf1c      	itt	ne
 8009ad4:	1a1b      	subne	r3, r3, r0
 8009ad6:	50a3      	strne	r3, [r4, r2]
 8009ad8:	e7af      	b.n	8009a3a <_malloc_r+0x22>
 8009ada:	6862      	ldr	r2, [r4, #4]
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	bf0c      	ite	eq
 8009ae0:	f8c8 2000 	streq.w	r2, [r8]
 8009ae4:	605a      	strne	r2, [r3, #4]
 8009ae6:	e7eb      	b.n	8009ac0 <_malloc_r+0xa8>
 8009ae8:	4623      	mov	r3, r4
 8009aea:	6864      	ldr	r4, [r4, #4]
 8009aec:	e7ae      	b.n	8009a4c <_malloc_r+0x34>
 8009aee:	463c      	mov	r4, r7
 8009af0:	687f      	ldr	r7, [r7, #4]
 8009af2:	e7b6      	b.n	8009a62 <_malloc_r+0x4a>
 8009af4:	461a      	mov	r2, r3
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d1fb      	bne.n	8009af4 <_malloc_r+0xdc>
 8009afc:	2300      	movs	r3, #0
 8009afe:	6053      	str	r3, [r2, #4]
 8009b00:	e7de      	b.n	8009ac0 <_malloc_r+0xa8>
 8009b02:	230c      	movs	r3, #12
 8009b04:	4630      	mov	r0, r6
 8009b06:	6033      	str	r3, [r6, #0]
 8009b08:	f000 f80c 	bl	8009b24 <__malloc_unlock>
 8009b0c:	e794      	b.n	8009a38 <_malloc_r+0x20>
 8009b0e:	6005      	str	r5, [r0, #0]
 8009b10:	e7d6      	b.n	8009ac0 <_malloc_r+0xa8>
 8009b12:	bf00      	nop
 8009b14:	20003338 	.word	0x20003338

08009b18 <__malloc_lock>:
 8009b18:	4801      	ldr	r0, [pc, #4]	@ (8009b20 <__malloc_lock+0x8>)
 8009b1a:	f000 b897 	b.w	8009c4c <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20003478 	.word	0x20003478

08009b24 <__malloc_unlock>:
 8009b24:	4801      	ldr	r0, [pc, #4]	@ (8009b2c <__malloc_unlock+0x8>)
 8009b26:	f000 b892 	b.w	8009c4e <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20003478 	.word	0x20003478

08009b30 <_vsniprintf_r>:
 8009b30:	b530      	push	{r4, r5, lr}
 8009b32:	4614      	mov	r4, r2
 8009b34:	2c00      	cmp	r4, #0
 8009b36:	4605      	mov	r5, r0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	b09b      	sub	sp, #108	@ 0x6c
 8009b3c:	da05      	bge.n	8009b4a <_vsniprintf_r+0x1a>
 8009b3e:	238b      	movs	r3, #139	@ 0x8b
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	f04f 30ff 	mov.w	r0, #4294967295
 8009b46:	b01b      	add	sp, #108	@ 0x6c
 8009b48:	bd30      	pop	{r4, r5, pc}
 8009b4a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009b4e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009b52:	bf0c      	ite	eq
 8009b54:	4623      	moveq	r3, r4
 8009b56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b5a:	9302      	str	r3, [sp, #8]
 8009b5c:	9305      	str	r3, [sp, #20]
 8009b5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009b62:	9100      	str	r1, [sp, #0]
 8009b64:	9104      	str	r1, [sp, #16]
 8009b66:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b6a:	4669      	mov	r1, sp
 8009b6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009b6e:	f000 f913 	bl	8009d98 <_svfiprintf_r>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	bfbc      	itt	lt
 8009b76:	238b      	movlt	r3, #139	@ 0x8b
 8009b78:	602b      	strlt	r3, [r5, #0]
 8009b7a:	2c00      	cmp	r4, #0
 8009b7c:	d0e3      	beq.n	8009b46 <_vsniprintf_r+0x16>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	701a      	strb	r2, [r3, #0]
 8009b84:	e7df      	b.n	8009b46 <_vsniprintf_r+0x16>
	...

08009b88 <vsniprintf>:
 8009b88:	b507      	push	{r0, r1, r2, lr}
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	460a      	mov	r2, r1
 8009b90:	4601      	mov	r1, r0
 8009b92:	4803      	ldr	r0, [pc, #12]	@ (8009ba0 <vsniprintf+0x18>)
 8009b94:	6800      	ldr	r0, [r0, #0]
 8009b96:	f7ff ffcb 	bl	8009b30 <_vsniprintf_r>
 8009b9a:	b003      	add	sp, #12
 8009b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ba0:	20000460 	.word	0x20000460

08009ba4 <memset>:
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	4402      	add	r2, r0
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d100      	bne.n	8009bae <memset+0xa>
 8009bac:	4770      	bx	lr
 8009bae:	f803 1b01 	strb.w	r1, [r3], #1
 8009bb2:	e7f9      	b.n	8009ba8 <memset+0x4>

08009bb4 <strncmp>:
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	b16a      	cbz	r2, 8009bd4 <strncmp+0x20>
 8009bb8:	3901      	subs	r1, #1
 8009bba:	1884      	adds	r4, r0, r2
 8009bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d103      	bne.n	8009bd0 <strncmp+0x1c>
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d001      	beq.n	8009bd0 <strncmp+0x1c>
 8009bcc:	2a00      	cmp	r2, #0
 8009bce:	d1f5      	bne.n	8009bbc <strncmp+0x8>
 8009bd0:	1ad0      	subs	r0, r2, r3
 8009bd2:	bd10      	pop	{r4, pc}
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	e7fc      	b.n	8009bd2 <strncmp+0x1e>

08009bd8 <_sbrk_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4d05      	ldr	r5, [pc, #20]	@ (8009bf4 <_sbrk_r+0x1c>)
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	602b      	str	r3, [r5, #0]
 8009be4:	f7f7 ffbe 	bl	8001b64 <_sbrk>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d102      	bne.n	8009bf2 <_sbrk_r+0x1a>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	b103      	cbz	r3, 8009bf2 <_sbrk_r+0x1a>
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
 8009bf4:	20003474 	.word	0x20003474

08009bf8 <__errno>:
 8009bf8:	4b01      	ldr	r3, [pc, #4]	@ (8009c00 <__errno+0x8>)
 8009bfa:	6818      	ldr	r0, [r3, #0]
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	20000460 	.word	0x20000460

08009c04 <__libc_init_array>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	2600      	movs	r6, #0
 8009c08:	4d0c      	ldr	r5, [pc, #48]	@ (8009c3c <__libc_init_array+0x38>)
 8009c0a:	4c0d      	ldr	r4, [pc, #52]	@ (8009c40 <__libc_init_array+0x3c>)
 8009c0c:	1b64      	subs	r4, r4, r5
 8009c0e:	10a4      	asrs	r4, r4, #2
 8009c10:	42a6      	cmp	r6, r4
 8009c12:	d109      	bne.n	8009c28 <__libc_init_array+0x24>
 8009c14:	f000 fce6 	bl	800a5e4 <_init>
 8009c18:	2600      	movs	r6, #0
 8009c1a:	4d0a      	ldr	r5, [pc, #40]	@ (8009c44 <__libc_init_array+0x40>)
 8009c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8009c48 <__libc_init_array+0x44>)
 8009c1e:	1b64      	subs	r4, r4, r5
 8009c20:	10a4      	asrs	r4, r4, #2
 8009c22:	42a6      	cmp	r6, r4
 8009c24:	d105      	bne.n	8009c32 <__libc_init_array+0x2e>
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c2c:	4798      	blx	r3
 8009c2e:	3601      	adds	r6, #1
 8009c30:	e7ee      	b.n	8009c10 <__libc_init_array+0xc>
 8009c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c36:	4798      	blx	r3
 8009c38:	3601      	adds	r6, #1
 8009c3a:	e7f2      	b.n	8009c22 <__libc_init_array+0x1e>
 8009c3c:	0800b210 	.word	0x0800b210
 8009c40:	0800b210 	.word	0x0800b210
 8009c44:	0800b210 	.word	0x0800b210
 8009c48:	0800b214 	.word	0x0800b214

08009c4c <__retarget_lock_acquire_recursive>:
 8009c4c:	4770      	bx	lr

08009c4e <__retarget_lock_release_recursive>:
 8009c4e:	4770      	bx	lr

08009c50 <_free_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4605      	mov	r5, r0
 8009c54:	2900      	cmp	r1, #0
 8009c56:	d040      	beq.n	8009cda <_free_r+0x8a>
 8009c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5c:	1f0c      	subs	r4, r1, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bfb8      	it	lt
 8009c62:	18e4      	addlt	r4, r4, r3
 8009c64:	f7ff ff58 	bl	8009b18 <__malloc_lock>
 8009c68:	4a1c      	ldr	r2, [pc, #112]	@ (8009cdc <_free_r+0x8c>)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	b933      	cbnz	r3, 8009c7c <_free_r+0x2c>
 8009c6e:	6063      	str	r3, [r4, #4]
 8009c70:	6014      	str	r4, [r2, #0]
 8009c72:	4628      	mov	r0, r5
 8009c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c78:	f7ff bf54 	b.w	8009b24 <__malloc_unlock>
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	d908      	bls.n	8009c92 <_free_r+0x42>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	1821      	adds	r1, r4, r0
 8009c84:	428b      	cmp	r3, r1
 8009c86:	bf01      	itttt	eq
 8009c88:	6819      	ldreq	r1, [r3, #0]
 8009c8a:	685b      	ldreq	r3, [r3, #4]
 8009c8c:	1809      	addeq	r1, r1, r0
 8009c8e:	6021      	streq	r1, [r4, #0]
 8009c90:	e7ed      	b.n	8009c6e <_free_r+0x1e>
 8009c92:	461a      	mov	r2, r3
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	b10b      	cbz	r3, 8009c9c <_free_r+0x4c>
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	d9fa      	bls.n	8009c92 <_free_r+0x42>
 8009c9c:	6811      	ldr	r1, [r2, #0]
 8009c9e:	1850      	adds	r0, r2, r1
 8009ca0:	42a0      	cmp	r0, r4
 8009ca2:	d10b      	bne.n	8009cbc <_free_r+0x6c>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	4401      	add	r1, r0
 8009ca8:	1850      	adds	r0, r2, r1
 8009caa:	4283      	cmp	r3, r0
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	d1e0      	bne.n	8009c72 <_free_r+0x22>
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	4408      	add	r0, r1
 8009cb6:	6010      	str	r0, [r2, #0]
 8009cb8:	6053      	str	r3, [r2, #4]
 8009cba:	e7da      	b.n	8009c72 <_free_r+0x22>
 8009cbc:	d902      	bls.n	8009cc4 <_free_r+0x74>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	e7d6      	b.n	8009c72 <_free_r+0x22>
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	1821      	adds	r1, r4, r0
 8009cc8:	428b      	cmp	r3, r1
 8009cca:	bf01      	itttt	eq
 8009ccc:	6819      	ldreq	r1, [r3, #0]
 8009cce:	685b      	ldreq	r3, [r3, #4]
 8009cd0:	1809      	addeq	r1, r1, r0
 8009cd2:	6021      	streq	r1, [r4, #0]
 8009cd4:	6063      	str	r3, [r4, #4]
 8009cd6:	6054      	str	r4, [r2, #4]
 8009cd8:	e7cb      	b.n	8009c72 <_free_r+0x22>
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20003338 	.word	0x20003338

08009ce0 <__ssputs_r>:
 8009ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce4:	461f      	mov	r7, r3
 8009ce6:	688e      	ldr	r6, [r1, #8]
 8009ce8:	4682      	mov	sl, r0
 8009cea:	42be      	cmp	r6, r7
 8009cec:	460c      	mov	r4, r1
 8009cee:	4690      	mov	r8, r2
 8009cf0:	680b      	ldr	r3, [r1, #0]
 8009cf2:	d82d      	bhi.n	8009d50 <__ssputs_r+0x70>
 8009cf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cfc:	d026      	beq.n	8009d4c <__ssputs_r+0x6c>
 8009cfe:	6965      	ldr	r5, [r4, #20]
 8009d00:	6909      	ldr	r1, [r1, #16]
 8009d02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d06:	eba3 0901 	sub.w	r9, r3, r1
 8009d0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d0e:	1c7b      	adds	r3, r7, #1
 8009d10:	444b      	add	r3, r9
 8009d12:	106d      	asrs	r5, r5, #1
 8009d14:	429d      	cmp	r5, r3
 8009d16:	bf38      	it	cc
 8009d18:	461d      	movcc	r5, r3
 8009d1a:	0553      	lsls	r3, r2, #21
 8009d1c:	d527      	bpl.n	8009d6e <__ssputs_r+0x8e>
 8009d1e:	4629      	mov	r1, r5
 8009d20:	f7ff fe7a 	bl	8009a18 <_malloc_r>
 8009d24:	4606      	mov	r6, r0
 8009d26:	b360      	cbz	r0, 8009d82 <__ssputs_r+0xa2>
 8009d28:	464a      	mov	r2, r9
 8009d2a:	6921      	ldr	r1, [r4, #16]
 8009d2c:	f000 faea 	bl	800a304 <memcpy>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d3a:	81a3      	strh	r3, [r4, #12]
 8009d3c:	6126      	str	r6, [r4, #16]
 8009d3e:	444e      	add	r6, r9
 8009d40:	6026      	str	r6, [r4, #0]
 8009d42:	463e      	mov	r6, r7
 8009d44:	6165      	str	r5, [r4, #20]
 8009d46:	eba5 0509 	sub.w	r5, r5, r9
 8009d4a:	60a5      	str	r5, [r4, #8]
 8009d4c:	42be      	cmp	r6, r7
 8009d4e:	d900      	bls.n	8009d52 <__ssputs_r+0x72>
 8009d50:	463e      	mov	r6, r7
 8009d52:	4632      	mov	r2, r6
 8009d54:	4641      	mov	r1, r8
 8009d56:	6820      	ldr	r0, [r4, #0]
 8009d58:	f000 faac 	bl	800a2b4 <memmove>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	68a3      	ldr	r3, [r4, #8]
 8009d60:	1b9b      	subs	r3, r3, r6
 8009d62:	60a3      	str	r3, [r4, #8]
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	4433      	add	r3, r6
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6e:	462a      	mov	r2, r5
 8009d70:	f000 fad6 	bl	800a320 <_realloc_r>
 8009d74:	4606      	mov	r6, r0
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d1e0      	bne.n	8009d3c <__ssputs_r+0x5c>
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	6921      	ldr	r1, [r4, #16]
 8009d7e:	f7ff ff67 	bl	8009c50 <_free_r>
 8009d82:	230c      	movs	r3, #12
 8009d84:	f8ca 3000 	str.w	r3, [sl]
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d92:	81a3      	strh	r3, [r4, #12]
 8009d94:	e7e9      	b.n	8009d6a <__ssputs_r+0x8a>
	...

08009d98 <_svfiprintf_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	4698      	mov	r8, r3
 8009d9e:	898b      	ldrh	r3, [r1, #12]
 8009da0:	4607      	mov	r7, r0
 8009da2:	061b      	lsls	r3, r3, #24
 8009da4:	460d      	mov	r5, r1
 8009da6:	4614      	mov	r4, r2
 8009da8:	b09d      	sub	sp, #116	@ 0x74
 8009daa:	d510      	bpl.n	8009dce <_svfiprintf_r+0x36>
 8009dac:	690b      	ldr	r3, [r1, #16]
 8009dae:	b973      	cbnz	r3, 8009dce <_svfiprintf_r+0x36>
 8009db0:	2140      	movs	r1, #64	@ 0x40
 8009db2:	f7ff fe31 	bl	8009a18 <_malloc_r>
 8009db6:	6028      	str	r0, [r5, #0]
 8009db8:	6128      	str	r0, [r5, #16]
 8009dba:	b930      	cbnz	r0, 8009dca <_svfiprintf_r+0x32>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	b01d      	add	sp, #116	@ 0x74
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	2340      	movs	r3, #64	@ 0x40
 8009dcc:	616b      	str	r3, [r5, #20]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd2:	2320      	movs	r3, #32
 8009dd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dd8:	2330      	movs	r3, #48	@ 0x30
 8009dda:	f04f 0901 	mov.w	r9, #1
 8009dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009de2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009f7c <_svfiprintf_r+0x1e4>
 8009de6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dea:	4623      	mov	r3, r4
 8009dec:	469a      	mov	sl, r3
 8009dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df2:	b10a      	cbz	r2, 8009df8 <_svfiprintf_r+0x60>
 8009df4:	2a25      	cmp	r2, #37	@ 0x25
 8009df6:	d1f9      	bne.n	8009dec <_svfiprintf_r+0x54>
 8009df8:	ebba 0b04 	subs.w	fp, sl, r4
 8009dfc:	d00b      	beq.n	8009e16 <_svfiprintf_r+0x7e>
 8009dfe:	465b      	mov	r3, fp
 8009e00:	4622      	mov	r2, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	4638      	mov	r0, r7
 8009e06:	f7ff ff6b 	bl	8009ce0 <__ssputs_r>
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	f000 80a7 	beq.w	8009f5e <_svfiprintf_r+0x1c6>
 8009e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e12:	445a      	add	r2, fp
 8009e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e16:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 809f 	beq.w	8009f5e <_svfiprintf_r+0x1c6>
 8009e20:	2300      	movs	r3, #0
 8009e22:	f04f 32ff 	mov.w	r2, #4294967295
 8009e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e2a:	f10a 0a01 	add.w	sl, sl, #1
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	9307      	str	r3, [sp, #28]
 8009e32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e36:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e38:	4654      	mov	r4, sl
 8009e3a:	2205      	movs	r2, #5
 8009e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e40:	484e      	ldr	r0, [pc, #312]	@ (8009f7c <_svfiprintf_r+0x1e4>)
 8009e42:	f000 fa51 	bl	800a2e8 <memchr>
 8009e46:	9a04      	ldr	r2, [sp, #16]
 8009e48:	b9d8      	cbnz	r0, 8009e82 <_svfiprintf_r+0xea>
 8009e4a:	06d0      	lsls	r0, r2, #27
 8009e4c:	bf44      	itt	mi
 8009e4e:	2320      	movmi	r3, #32
 8009e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e54:	0711      	lsls	r1, r2, #28
 8009e56:	bf44      	itt	mi
 8009e58:	232b      	movmi	r3, #43	@ 0x2b
 8009e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e64:	d015      	beq.n	8009e92 <_svfiprintf_r+0xfa>
 8009e66:	4654      	mov	r4, sl
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	9a07      	ldr	r2, [sp, #28]
 8009e70:	4621      	mov	r1, r4
 8009e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e76:	3b30      	subs	r3, #48	@ 0x30
 8009e78:	2b09      	cmp	r3, #9
 8009e7a:	d94b      	bls.n	8009f14 <_svfiprintf_r+0x17c>
 8009e7c:	b1b0      	cbz	r0, 8009eac <_svfiprintf_r+0x114>
 8009e7e:	9207      	str	r2, [sp, #28]
 8009e80:	e014      	b.n	8009eac <_svfiprintf_r+0x114>
 8009e82:	eba0 0308 	sub.w	r3, r0, r8
 8009e86:	fa09 f303 	lsl.w	r3, r9, r3
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	46a2      	mov	sl, r4
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	e7d2      	b.n	8009e38 <_svfiprintf_r+0xa0>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	1d19      	adds	r1, r3, #4
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	9103      	str	r1, [sp, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	bfbb      	ittet	lt
 8009e9e:	425b      	neglt	r3, r3
 8009ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea4:	9307      	strge	r3, [sp, #28]
 8009ea6:	9307      	strlt	r3, [sp, #28]
 8009ea8:	bfb8      	it	lt
 8009eaa:	9204      	strlt	r2, [sp, #16]
 8009eac:	7823      	ldrb	r3, [r4, #0]
 8009eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eb0:	d10a      	bne.n	8009ec8 <_svfiprintf_r+0x130>
 8009eb2:	7863      	ldrb	r3, [r4, #1]
 8009eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eb6:	d132      	bne.n	8009f1e <_svfiprintf_r+0x186>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	3402      	adds	r4, #2
 8009ebc:	1d1a      	adds	r2, r3, #4
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	9203      	str	r2, [sp, #12]
 8009ec2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ec6:	9305      	str	r3, [sp, #20]
 8009ec8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009f80 <_svfiprintf_r+0x1e8>
 8009ecc:	2203      	movs	r2, #3
 8009ece:	4650      	mov	r0, sl
 8009ed0:	7821      	ldrb	r1, [r4, #0]
 8009ed2:	f000 fa09 	bl	800a2e8 <memchr>
 8009ed6:	b138      	cbz	r0, 8009ee8 <_svfiprintf_r+0x150>
 8009ed8:	2240      	movs	r2, #64	@ 0x40
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	eba0 000a 	sub.w	r0, r0, sl
 8009ee0:	4082      	lsls	r2, r0
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eec:	2206      	movs	r2, #6
 8009eee:	4825      	ldr	r0, [pc, #148]	@ (8009f84 <_svfiprintf_r+0x1ec>)
 8009ef0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ef4:	f000 f9f8 	bl	800a2e8 <memchr>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d036      	beq.n	8009f6a <_svfiprintf_r+0x1d2>
 8009efc:	4b22      	ldr	r3, [pc, #136]	@ (8009f88 <_svfiprintf_r+0x1f0>)
 8009efe:	bb1b      	cbnz	r3, 8009f48 <_svfiprintf_r+0x1b0>
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	3307      	adds	r3, #7
 8009f04:	f023 0307 	bic.w	r3, r3, #7
 8009f08:	3308      	adds	r3, #8
 8009f0a:	9303      	str	r3, [sp, #12]
 8009f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f0e:	4433      	add	r3, r6
 8009f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f12:	e76a      	b.n	8009dea <_svfiprintf_r+0x52>
 8009f14:	460c      	mov	r4, r1
 8009f16:	2001      	movs	r0, #1
 8009f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f1c:	e7a8      	b.n	8009e70 <_svfiprintf_r+0xd8>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f04f 0c0a 	mov.w	ip, #10
 8009f24:	4619      	mov	r1, r3
 8009f26:	3401      	adds	r4, #1
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f30:	3a30      	subs	r2, #48	@ 0x30
 8009f32:	2a09      	cmp	r2, #9
 8009f34:	d903      	bls.n	8009f3e <_svfiprintf_r+0x1a6>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0c6      	beq.n	8009ec8 <_svfiprintf_r+0x130>
 8009f3a:	9105      	str	r1, [sp, #20]
 8009f3c:	e7c4      	b.n	8009ec8 <_svfiprintf_r+0x130>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	2301      	movs	r3, #1
 8009f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f46:	e7f0      	b.n	8009f2a <_svfiprintf_r+0x192>
 8009f48:	ab03      	add	r3, sp, #12
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	462a      	mov	r2, r5
 8009f4e:	4638      	mov	r0, r7
 8009f50:	4b0e      	ldr	r3, [pc, #56]	@ (8009f8c <_svfiprintf_r+0x1f4>)
 8009f52:	a904      	add	r1, sp, #16
 8009f54:	f3af 8000 	nop.w
 8009f58:	1c42      	adds	r2, r0, #1
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	d1d6      	bne.n	8009f0c <_svfiprintf_r+0x174>
 8009f5e:	89ab      	ldrh	r3, [r5, #12]
 8009f60:	065b      	lsls	r3, r3, #25
 8009f62:	f53f af2d 	bmi.w	8009dc0 <_svfiprintf_r+0x28>
 8009f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f68:	e72c      	b.n	8009dc4 <_svfiprintf_r+0x2c>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4638      	mov	r0, r7
 8009f72:	4b06      	ldr	r3, [pc, #24]	@ (8009f8c <_svfiprintf_r+0x1f4>)
 8009f74:	a904      	add	r1, sp, #16
 8009f76:	f000 f87d 	bl	800a074 <_printf_i>
 8009f7a:	e7ed      	b.n	8009f58 <_svfiprintf_r+0x1c0>
 8009f7c:	0800b1c1 	.word	0x0800b1c1
 8009f80:	0800b1c7 	.word	0x0800b1c7
 8009f84:	0800b1cb 	.word	0x0800b1cb
 8009f88:	00000000 	.word	0x00000000
 8009f8c:	08009ce1 	.word	0x08009ce1

08009f90 <_printf_common>:
 8009f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f94:	4616      	mov	r6, r2
 8009f96:	4698      	mov	r8, r3
 8009f98:	688a      	ldr	r2, [r1, #8]
 8009f9a:	690b      	ldr	r3, [r1, #16]
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	bfb8      	it	lt
 8009fa2:	4613      	movlt	r3, r2
 8009fa4:	6033      	str	r3, [r6, #0]
 8009fa6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009faa:	460c      	mov	r4, r1
 8009fac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fb0:	b10a      	cbz	r2, 8009fb6 <_printf_common+0x26>
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	6033      	str	r3, [r6, #0]
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	0699      	lsls	r1, r3, #26
 8009fba:	bf42      	ittt	mi
 8009fbc:	6833      	ldrmi	r3, [r6, #0]
 8009fbe:	3302      	addmi	r3, #2
 8009fc0:	6033      	strmi	r3, [r6, #0]
 8009fc2:	6825      	ldr	r5, [r4, #0]
 8009fc4:	f015 0506 	ands.w	r5, r5, #6
 8009fc8:	d106      	bne.n	8009fd8 <_printf_common+0x48>
 8009fca:	f104 0a19 	add.w	sl, r4, #25
 8009fce:	68e3      	ldr	r3, [r4, #12]
 8009fd0:	6832      	ldr	r2, [r6, #0]
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	42ab      	cmp	r3, r5
 8009fd6:	dc2b      	bgt.n	800a030 <_printf_common+0xa0>
 8009fd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fdc:	6822      	ldr	r2, [r4, #0]
 8009fde:	3b00      	subs	r3, #0
 8009fe0:	bf18      	it	ne
 8009fe2:	2301      	movne	r3, #1
 8009fe4:	0692      	lsls	r2, r2, #26
 8009fe6:	d430      	bmi.n	800a04a <_printf_common+0xba>
 8009fe8:	4641      	mov	r1, r8
 8009fea:	4638      	mov	r0, r7
 8009fec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ff0:	47c8      	blx	r9
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d023      	beq.n	800a03e <_printf_common+0xae>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	6922      	ldr	r2, [r4, #16]
 8009ffa:	f003 0306 	and.w	r3, r3, #6
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	bf14      	ite	ne
 800a002:	2500      	movne	r5, #0
 800a004:	6833      	ldreq	r3, [r6, #0]
 800a006:	f04f 0600 	mov.w	r6, #0
 800a00a:	bf08      	it	eq
 800a00c:	68e5      	ldreq	r5, [r4, #12]
 800a00e:	f104 041a 	add.w	r4, r4, #26
 800a012:	bf08      	it	eq
 800a014:	1aed      	subeq	r5, r5, r3
 800a016:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a01a:	bf08      	it	eq
 800a01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a020:	4293      	cmp	r3, r2
 800a022:	bfc4      	itt	gt
 800a024:	1a9b      	subgt	r3, r3, r2
 800a026:	18ed      	addgt	r5, r5, r3
 800a028:	42b5      	cmp	r5, r6
 800a02a:	d11a      	bne.n	800a062 <_printf_common+0xd2>
 800a02c:	2000      	movs	r0, #0
 800a02e:	e008      	b.n	800a042 <_printf_common+0xb2>
 800a030:	2301      	movs	r3, #1
 800a032:	4652      	mov	r2, sl
 800a034:	4641      	mov	r1, r8
 800a036:	4638      	mov	r0, r7
 800a038:	47c8      	blx	r9
 800a03a:	3001      	adds	r0, #1
 800a03c:	d103      	bne.n	800a046 <_printf_common+0xb6>
 800a03e:	f04f 30ff 	mov.w	r0, #4294967295
 800a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a046:	3501      	adds	r5, #1
 800a048:	e7c1      	b.n	8009fce <_printf_common+0x3e>
 800a04a:	2030      	movs	r0, #48	@ 0x30
 800a04c:	18e1      	adds	r1, r4, r3
 800a04e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a058:	4422      	add	r2, r4
 800a05a:	3302      	adds	r3, #2
 800a05c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a060:	e7c2      	b.n	8009fe8 <_printf_common+0x58>
 800a062:	2301      	movs	r3, #1
 800a064:	4622      	mov	r2, r4
 800a066:	4641      	mov	r1, r8
 800a068:	4638      	mov	r0, r7
 800a06a:	47c8      	blx	r9
 800a06c:	3001      	adds	r0, #1
 800a06e:	d0e6      	beq.n	800a03e <_printf_common+0xae>
 800a070:	3601      	adds	r6, #1
 800a072:	e7d9      	b.n	800a028 <_printf_common+0x98>

0800a074 <_printf_i>:
 800a074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	7e0f      	ldrb	r7, [r1, #24]
 800a07a:	4691      	mov	r9, r2
 800a07c:	2f78      	cmp	r7, #120	@ 0x78
 800a07e:	4680      	mov	r8, r0
 800a080:	460c      	mov	r4, r1
 800a082:	469a      	mov	sl, r3
 800a084:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a08a:	d807      	bhi.n	800a09c <_printf_i+0x28>
 800a08c:	2f62      	cmp	r7, #98	@ 0x62
 800a08e:	d80a      	bhi.n	800a0a6 <_printf_i+0x32>
 800a090:	2f00      	cmp	r7, #0
 800a092:	f000 80d3 	beq.w	800a23c <_printf_i+0x1c8>
 800a096:	2f58      	cmp	r7, #88	@ 0x58
 800a098:	f000 80ba 	beq.w	800a210 <_printf_i+0x19c>
 800a09c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0a4:	e03a      	b.n	800a11c <_printf_i+0xa8>
 800a0a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0aa:	2b15      	cmp	r3, #21
 800a0ac:	d8f6      	bhi.n	800a09c <_printf_i+0x28>
 800a0ae:	a101      	add	r1, pc, #4	@ (adr r1, 800a0b4 <_printf_i+0x40>)
 800a0b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a09d 	.word	0x0800a09d
 800a0c0:	0800a09d 	.word	0x0800a09d
 800a0c4:	0800a09d 	.word	0x0800a09d
 800a0c8:	0800a09d 	.word	0x0800a09d
 800a0cc:	0800a121 	.word	0x0800a121
 800a0d0:	0800a09d 	.word	0x0800a09d
 800a0d4:	0800a09d 	.word	0x0800a09d
 800a0d8:	0800a09d 	.word	0x0800a09d
 800a0dc:	0800a09d 	.word	0x0800a09d
 800a0e0:	0800a223 	.word	0x0800a223
 800a0e4:	0800a14b 	.word	0x0800a14b
 800a0e8:	0800a1dd 	.word	0x0800a1dd
 800a0ec:	0800a09d 	.word	0x0800a09d
 800a0f0:	0800a09d 	.word	0x0800a09d
 800a0f4:	0800a245 	.word	0x0800a245
 800a0f8:	0800a09d 	.word	0x0800a09d
 800a0fc:	0800a14b 	.word	0x0800a14b
 800a100:	0800a09d 	.word	0x0800a09d
 800a104:	0800a09d 	.word	0x0800a09d
 800a108:	0800a1e5 	.word	0x0800a1e5
 800a10c:	6833      	ldr	r3, [r6, #0]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6032      	str	r2, [r6, #0]
 800a114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a11c:	2301      	movs	r3, #1
 800a11e:	e09e      	b.n	800a25e <_printf_i+0x1ea>
 800a120:	6833      	ldr	r3, [r6, #0]
 800a122:	6820      	ldr	r0, [r4, #0]
 800a124:	1d19      	adds	r1, r3, #4
 800a126:	6031      	str	r1, [r6, #0]
 800a128:	0606      	lsls	r6, r0, #24
 800a12a:	d501      	bpl.n	800a130 <_printf_i+0xbc>
 800a12c:	681d      	ldr	r5, [r3, #0]
 800a12e:	e003      	b.n	800a138 <_printf_i+0xc4>
 800a130:	0645      	lsls	r5, r0, #25
 800a132:	d5fb      	bpl.n	800a12c <_printf_i+0xb8>
 800a134:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a138:	2d00      	cmp	r5, #0
 800a13a:	da03      	bge.n	800a144 <_printf_i+0xd0>
 800a13c:	232d      	movs	r3, #45	@ 0x2d
 800a13e:	426d      	negs	r5, r5
 800a140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a144:	230a      	movs	r3, #10
 800a146:	4859      	ldr	r0, [pc, #356]	@ (800a2ac <_printf_i+0x238>)
 800a148:	e011      	b.n	800a16e <_printf_i+0xfa>
 800a14a:	6821      	ldr	r1, [r4, #0]
 800a14c:	6833      	ldr	r3, [r6, #0]
 800a14e:	0608      	lsls	r0, r1, #24
 800a150:	f853 5b04 	ldr.w	r5, [r3], #4
 800a154:	d402      	bmi.n	800a15c <_printf_i+0xe8>
 800a156:	0649      	lsls	r1, r1, #25
 800a158:	bf48      	it	mi
 800a15a:	b2ad      	uxthmi	r5, r5
 800a15c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a15e:	6033      	str	r3, [r6, #0]
 800a160:	bf14      	ite	ne
 800a162:	230a      	movne	r3, #10
 800a164:	2308      	moveq	r3, #8
 800a166:	4851      	ldr	r0, [pc, #324]	@ (800a2ac <_printf_i+0x238>)
 800a168:	2100      	movs	r1, #0
 800a16a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a16e:	6866      	ldr	r6, [r4, #4]
 800a170:	2e00      	cmp	r6, #0
 800a172:	bfa8      	it	ge
 800a174:	6821      	ldrge	r1, [r4, #0]
 800a176:	60a6      	str	r6, [r4, #8]
 800a178:	bfa4      	itt	ge
 800a17a:	f021 0104 	bicge.w	r1, r1, #4
 800a17e:	6021      	strge	r1, [r4, #0]
 800a180:	b90d      	cbnz	r5, 800a186 <_printf_i+0x112>
 800a182:	2e00      	cmp	r6, #0
 800a184:	d04b      	beq.n	800a21e <_printf_i+0x1aa>
 800a186:	4616      	mov	r6, r2
 800a188:	fbb5 f1f3 	udiv	r1, r5, r3
 800a18c:	fb03 5711 	mls	r7, r3, r1, r5
 800a190:	5dc7      	ldrb	r7, [r0, r7]
 800a192:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a196:	462f      	mov	r7, r5
 800a198:	42bb      	cmp	r3, r7
 800a19a:	460d      	mov	r5, r1
 800a19c:	d9f4      	bls.n	800a188 <_printf_i+0x114>
 800a19e:	2b08      	cmp	r3, #8
 800a1a0:	d10b      	bne.n	800a1ba <_printf_i+0x146>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	07df      	lsls	r7, r3, #31
 800a1a6:	d508      	bpl.n	800a1ba <_printf_i+0x146>
 800a1a8:	6923      	ldr	r3, [r4, #16]
 800a1aa:	6861      	ldr	r1, [r4, #4]
 800a1ac:	4299      	cmp	r1, r3
 800a1ae:	bfde      	ittt	le
 800a1b0:	2330      	movle	r3, #48	@ 0x30
 800a1b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1ba:	1b92      	subs	r2, r2, r6
 800a1bc:	6122      	str	r2, [r4, #16]
 800a1be:	464b      	mov	r3, r9
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	f8cd a000 	str.w	sl, [sp]
 800a1c8:	aa03      	add	r2, sp, #12
 800a1ca:	f7ff fee1 	bl	8009f90 <_printf_common>
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d14a      	bne.n	800a268 <_printf_i+0x1f4>
 800a1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d6:	b004      	add	sp, #16
 800a1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	f043 0320 	orr.w	r3, r3, #32
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	2778      	movs	r7, #120	@ 0x78
 800a1e6:	4832      	ldr	r0, [pc, #200]	@ (800a2b0 <_printf_i+0x23c>)
 800a1e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	6831      	ldr	r1, [r6, #0]
 800a1f0:	061f      	lsls	r7, r3, #24
 800a1f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1f6:	d402      	bmi.n	800a1fe <_printf_i+0x18a>
 800a1f8:	065f      	lsls	r7, r3, #25
 800a1fa:	bf48      	it	mi
 800a1fc:	b2ad      	uxthmi	r5, r5
 800a1fe:	6031      	str	r1, [r6, #0]
 800a200:	07d9      	lsls	r1, r3, #31
 800a202:	bf44      	itt	mi
 800a204:	f043 0320 	orrmi.w	r3, r3, #32
 800a208:	6023      	strmi	r3, [r4, #0]
 800a20a:	b11d      	cbz	r5, 800a214 <_printf_i+0x1a0>
 800a20c:	2310      	movs	r3, #16
 800a20e:	e7ab      	b.n	800a168 <_printf_i+0xf4>
 800a210:	4826      	ldr	r0, [pc, #152]	@ (800a2ac <_printf_i+0x238>)
 800a212:	e7e9      	b.n	800a1e8 <_printf_i+0x174>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	f023 0320 	bic.w	r3, r3, #32
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	e7f6      	b.n	800a20c <_printf_i+0x198>
 800a21e:	4616      	mov	r6, r2
 800a220:	e7bd      	b.n	800a19e <_printf_i+0x12a>
 800a222:	6833      	ldr	r3, [r6, #0]
 800a224:	6825      	ldr	r5, [r4, #0]
 800a226:	1d18      	adds	r0, r3, #4
 800a228:	6961      	ldr	r1, [r4, #20]
 800a22a:	6030      	str	r0, [r6, #0]
 800a22c:	062e      	lsls	r6, r5, #24
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	d501      	bpl.n	800a236 <_printf_i+0x1c2>
 800a232:	6019      	str	r1, [r3, #0]
 800a234:	e002      	b.n	800a23c <_printf_i+0x1c8>
 800a236:	0668      	lsls	r0, r5, #25
 800a238:	d5fb      	bpl.n	800a232 <_printf_i+0x1be>
 800a23a:	8019      	strh	r1, [r3, #0]
 800a23c:	2300      	movs	r3, #0
 800a23e:	4616      	mov	r6, r2
 800a240:	6123      	str	r3, [r4, #16]
 800a242:	e7bc      	b.n	800a1be <_printf_i+0x14a>
 800a244:	6833      	ldr	r3, [r6, #0]
 800a246:	2100      	movs	r1, #0
 800a248:	1d1a      	adds	r2, r3, #4
 800a24a:	6032      	str	r2, [r6, #0]
 800a24c:	681e      	ldr	r6, [r3, #0]
 800a24e:	6862      	ldr	r2, [r4, #4]
 800a250:	4630      	mov	r0, r6
 800a252:	f000 f849 	bl	800a2e8 <memchr>
 800a256:	b108      	cbz	r0, 800a25c <_printf_i+0x1e8>
 800a258:	1b80      	subs	r0, r0, r6
 800a25a:	6060      	str	r0, [r4, #4]
 800a25c:	6863      	ldr	r3, [r4, #4]
 800a25e:	6123      	str	r3, [r4, #16]
 800a260:	2300      	movs	r3, #0
 800a262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a266:	e7aa      	b.n	800a1be <_printf_i+0x14a>
 800a268:	4632      	mov	r2, r6
 800a26a:	4649      	mov	r1, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	6923      	ldr	r3, [r4, #16]
 800a270:	47d0      	blx	sl
 800a272:	3001      	adds	r0, #1
 800a274:	d0ad      	beq.n	800a1d2 <_printf_i+0x15e>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	079b      	lsls	r3, r3, #30
 800a27a:	d413      	bmi.n	800a2a4 <_printf_i+0x230>
 800a27c:	68e0      	ldr	r0, [r4, #12]
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	4298      	cmp	r0, r3
 800a282:	bfb8      	it	lt
 800a284:	4618      	movlt	r0, r3
 800a286:	e7a6      	b.n	800a1d6 <_printf_i+0x162>
 800a288:	2301      	movs	r3, #1
 800a28a:	4632      	mov	r2, r6
 800a28c:	4649      	mov	r1, r9
 800a28e:	4640      	mov	r0, r8
 800a290:	47d0      	blx	sl
 800a292:	3001      	adds	r0, #1
 800a294:	d09d      	beq.n	800a1d2 <_printf_i+0x15e>
 800a296:	3501      	adds	r5, #1
 800a298:	68e3      	ldr	r3, [r4, #12]
 800a29a:	9903      	ldr	r1, [sp, #12]
 800a29c:	1a5b      	subs	r3, r3, r1
 800a29e:	42ab      	cmp	r3, r5
 800a2a0:	dcf2      	bgt.n	800a288 <_printf_i+0x214>
 800a2a2:	e7eb      	b.n	800a27c <_printf_i+0x208>
 800a2a4:	2500      	movs	r5, #0
 800a2a6:	f104 0619 	add.w	r6, r4, #25
 800a2aa:	e7f5      	b.n	800a298 <_printf_i+0x224>
 800a2ac:	0800b1d2 	.word	0x0800b1d2
 800a2b0:	0800b1e3 	.word	0x0800b1e3

0800a2b4 <memmove>:
 800a2b4:	4288      	cmp	r0, r1
 800a2b6:	b510      	push	{r4, lr}
 800a2b8:	eb01 0402 	add.w	r4, r1, r2
 800a2bc:	d902      	bls.n	800a2c4 <memmove+0x10>
 800a2be:	4284      	cmp	r4, r0
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	d807      	bhi.n	800a2d4 <memmove+0x20>
 800a2c4:	1e43      	subs	r3, r0, #1
 800a2c6:	42a1      	cmp	r1, r4
 800a2c8:	d008      	beq.n	800a2dc <memmove+0x28>
 800a2ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2d2:	e7f8      	b.n	800a2c6 <memmove+0x12>
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	4402      	add	r2, r0
 800a2d8:	428a      	cmp	r2, r1
 800a2da:	d100      	bne.n	800a2de <memmove+0x2a>
 800a2dc:	bd10      	pop	{r4, pc}
 800a2de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2e6:	e7f7      	b.n	800a2d8 <memmove+0x24>

0800a2e8 <memchr>:
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	b2c9      	uxtb	r1, r1
 800a2ee:	4402      	add	r2, r0
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	d101      	bne.n	800a2fa <memchr+0x12>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	e003      	b.n	800a302 <memchr+0x1a>
 800a2fa:	7804      	ldrb	r4, [r0, #0]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	428c      	cmp	r4, r1
 800a300:	d1f6      	bne.n	800a2f0 <memchr+0x8>
 800a302:	bd10      	pop	{r4, pc}

0800a304 <memcpy>:
 800a304:	440a      	add	r2, r1
 800a306:	4291      	cmp	r1, r2
 800a308:	f100 33ff 	add.w	r3, r0, #4294967295
 800a30c:	d100      	bne.n	800a310 <memcpy+0xc>
 800a30e:	4770      	bx	lr
 800a310:	b510      	push	{r4, lr}
 800a312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a316:	4291      	cmp	r1, r2
 800a318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a31c:	d1f9      	bne.n	800a312 <memcpy+0xe>
 800a31e:	bd10      	pop	{r4, pc}

0800a320 <_realloc_r>:
 800a320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a324:	4680      	mov	r8, r0
 800a326:	4615      	mov	r5, r2
 800a328:	460c      	mov	r4, r1
 800a32a:	b921      	cbnz	r1, 800a336 <_realloc_r+0x16>
 800a32c:	4611      	mov	r1, r2
 800a32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a332:	f7ff bb71 	b.w	8009a18 <_malloc_r>
 800a336:	b92a      	cbnz	r2, 800a344 <_realloc_r+0x24>
 800a338:	f7ff fc8a 	bl	8009c50 <_free_r>
 800a33c:	2400      	movs	r4, #0
 800a33e:	4620      	mov	r0, r4
 800a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a344:	f000 f81a 	bl	800a37c <_malloc_usable_size_r>
 800a348:	4285      	cmp	r5, r0
 800a34a:	4606      	mov	r6, r0
 800a34c:	d802      	bhi.n	800a354 <_realloc_r+0x34>
 800a34e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a352:	d8f4      	bhi.n	800a33e <_realloc_r+0x1e>
 800a354:	4629      	mov	r1, r5
 800a356:	4640      	mov	r0, r8
 800a358:	f7ff fb5e 	bl	8009a18 <_malloc_r>
 800a35c:	4607      	mov	r7, r0
 800a35e:	2800      	cmp	r0, #0
 800a360:	d0ec      	beq.n	800a33c <_realloc_r+0x1c>
 800a362:	42b5      	cmp	r5, r6
 800a364:	462a      	mov	r2, r5
 800a366:	4621      	mov	r1, r4
 800a368:	bf28      	it	cs
 800a36a:	4632      	movcs	r2, r6
 800a36c:	f7ff ffca 	bl	800a304 <memcpy>
 800a370:	4621      	mov	r1, r4
 800a372:	4640      	mov	r0, r8
 800a374:	f7ff fc6c 	bl	8009c50 <_free_r>
 800a378:	463c      	mov	r4, r7
 800a37a:	e7e0      	b.n	800a33e <_realloc_r+0x1e>

0800a37c <_malloc_usable_size_r>:
 800a37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a380:	1f18      	subs	r0, r3, #4
 800a382:	2b00      	cmp	r3, #0
 800a384:	bfbc      	itt	lt
 800a386:	580b      	ldrlt	r3, [r1, r0]
 800a388:	18c0      	addlt	r0, r0, r3
 800a38a:	4770      	bx	lr

0800a38c <fmod>:
 800a38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a390:	4680      	mov	r8, r0
 800a392:	4689      	mov	r9, r1
 800a394:	4616      	mov	r6, r2
 800a396:	461f      	mov	r7, r3
 800a398:	f000 f820 	bl	800a3dc <__ieee754_fmod>
 800a39c:	4632      	mov	r2, r6
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	4640      	mov	r0, r8
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	f7f6 fb30 	bl	8000a0c <__aeabi_dcmpun>
 800a3ac:	b990      	cbnz	r0, 800a3d4 <fmod+0x48>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f6 faf7 	bl	80009a8 <__aeabi_dcmpeq>
 800a3ba:	b158      	cbz	r0, 800a3d4 <fmod+0x48>
 800a3bc:	f7ff fc1c 	bl	8009bf8 <__errno>
 800a3c0:	2321      	movs	r3, #33	@ 0x21
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	6003      	str	r3, [r0, #0]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	f7f6 f9ae 	bl	800072c <__aeabi_ddiv>
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a3dc <__ieee754_fmod>:
 800a3dc:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800a3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	ea52 040c 	orrs.w	r4, r2, ip
 800a3e8:	461e      	mov	r6, r3
 800a3ea:	4617      	mov	r7, r2
 800a3ec:	4696      	mov	lr, r2
 800a3ee:	d00c      	beq.n	800a40a <__ieee754_fmod+0x2e>
 800a3f0:	4c76      	ldr	r4, [pc, #472]	@ (800a5cc <__ieee754_fmod+0x1f0>)
 800a3f2:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800a3f6:	45a0      	cmp	r8, r4
 800a3f8:	4689      	mov	r9, r1
 800a3fa:	d806      	bhi.n	800a40a <__ieee754_fmod+0x2e>
 800a3fc:	4254      	negs	r4, r2
 800a3fe:	4d74      	ldr	r5, [pc, #464]	@ (800a5d0 <__ieee754_fmod+0x1f4>)
 800a400:	4314      	orrs	r4, r2
 800a402:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800a406:	42ac      	cmp	r4, r5
 800a408:	d907      	bls.n	800a41a <__ieee754_fmod+0x3e>
 800a40a:	f7f6 f865 	bl	80004d8 <__aeabi_dmul>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	f7f6 f98b 	bl	800072c <__aeabi_ddiv>
 800a416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41a:	45e0      	cmp	r8, ip
 800a41c:	4682      	mov	sl, r0
 800a41e:	4604      	mov	r4, r0
 800a420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800a424:	dc09      	bgt.n	800a43a <__ieee754_fmod+0x5e>
 800a426:	dbf6      	blt.n	800a416 <__ieee754_fmod+0x3a>
 800a428:	4282      	cmp	r2, r0
 800a42a:	d8f4      	bhi.n	800a416 <__ieee754_fmod+0x3a>
 800a42c:	d105      	bne.n	800a43a <__ieee754_fmod+0x5e>
 800a42e:	4b69      	ldr	r3, [pc, #420]	@ (800a5d4 <__ieee754_fmod+0x1f8>)
 800a430:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800a434:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a438:	e7ed      	b.n	800a416 <__ieee754_fmod+0x3a>
 800a43a:	4a65      	ldr	r2, [pc, #404]	@ (800a5d0 <__ieee754_fmod+0x1f4>)
 800a43c:	ea19 0f02 	tst.w	r9, r2
 800a440:	d148      	bne.n	800a4d4 <__ieee754_fmod+0xf8>
 800a442:	f1b8 0f00 	cmp.w	r8, #0
 800a446:	d13d      	bne.n	800a4c4 <__ieee754_fmod+0xe8>
 800a448:	4653      	mov	r3, sl
 800a44a:	4963      	ldr	r1, [pc, #396]	@ (800a5d8 <__ieee754_fmod+0x1fc>)
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	dc36      	bgt.n	800a4be <__ieee754_fmod+0xe2>
 800a450:	4216      	tst	r6, r2
 800a452:	d14f      	bne.n	800a4f4 <__ieee754_fmod+0x118>
 800a454:	f1bc 0f00 	cmp.w	ip, #0
 800a458:	d144      	bne.n	800a4e4 <__ieee754_fmod+0x108>
 800a45a:	463b      	mov	r3, r7
 800a45c:	4a5e      	ldr	r2, [pc, #376]	@ (800a5d8 <__ieee754_fmod+0x1fc>)
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dc3d      	bgt.n	800a4de <__ieee754_fmod+0x102>
 800a462:	485e      	ldr	r0, [pc, #376]	@ (800a5dc <__ieee754_fmod+0x200>)
 800a464:	4281      	cmp	r1, r0
 800a466:	db4a      	blt.n	800a4fe <__ieee754_fmod+0x122>
 800a468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a46c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a470:	485a      	ldr	r0, [pc, #360]	@ (800a5dc <__ieee754_fmod+0x200>)
 800a472:	4282      	cmp	r2, r0
 800a474:	db57      	blt.n	800a526 <__ieee754_fmod+0x14a>
 800a476:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800a47a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800a47e:	1a89      	subs	r1, r1, r2
 800a480:	1b98      	subs	r0, r3, r6
 800a482:	eba4 070e 	sub.w	r7, r4, lr
 800a486:	2900      	cmp	r1, #0
 800a488:	d162      	bne.n	800a550 <__ieee754_fmod+0x174>
 800a48a:	4574      	cmp	r4, lr
 800a48c:	bf38      	it	cc
 800a48e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800a492:	2800      	cmp	r0, #0
 800a494:	bfa4      	itt	ge
 800a496:	463c      	movge	r4, r7
 800a498:	4603      	movge	r3, r0
 800a49a:	ea53 0104 	orrs.w	r1, r3, r4
 800a49e:	d0c6      	beq.n	800a42e <__ieee754_fmod+0x52>
 800a4a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4a4:	db69      	blt.n	800a57a <__ieee754_fmod+0x19e>
 800a4a6:	494d      	ldr	r1, [pc, #308]	@ (800a5dc <__ieee754_fmod+0x200>)
 800a4a8:	428a      	cmp	r2, r1
 800a4aa:	db6c      	blt.n	800a586 <__ieee754_fmod+0x1aa>
 800a4ac:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a4b0:	432b      	orrs	r3, r5
 800a4b2:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a4bc:	e7ab      	b.n	800a416 <__ieee754_fmod+0x3a>
 800a4be:	3901      	subs	r1, #1
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	e7c3      	b.n	800a44c <__ieee754_fmod+0x70>
 800a4c4:	4945      	ldr	r1, [pc, #276]	@ (800a5dc <__ieee754_fmod+0x200>)
 800a4c6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	ddc0      	ble.n	800a450 <__ieee754_fmod+0x74>
 800a4ce:	3901      	subs	r1, #1
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	e7fa      	b.n	800a4ca <__ieee754_fmod+0xee>
 800a4d4:	ea4f 5128 	mov.w	r1, r8, asr #20
 800a4d8:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a4dc:	e7b8      	b.n	800a450 <__ieee754_fmod+0x74>
 800a4de:	3a01      	subs	r2, #1
 800a4e0:	005b      	lsls	r3, r3, #1
 800a4e2:	e7bc      	b.n	800a45e <__ieee754_fmod+0x82>
 800a4e4:	4a3d      	ldr	r2, [pc, #244]	@ (800a5dc <__ieee754_fmod+0x200>)
 800a4e6:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	ddb9      	ble.n	800a462 <__ieee754_fmod+0x86>
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	005b      	lsls	r3, r3, #1
 800a4f2:	e7fa      	b.n	800a4ea <__ieee754_fmod+0x10e>
 800a4f4:	ea4f 522c 	mov.w	r2, ip, asr #20
 800a4f8:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a4fc:	e7b1      	b.n	800a462 <__ieee754_fmod+0x86>
 800a4fe:	1a40      	subs	r0, r0, r1
 800a500:	281f      	cmp	r0, #31
 800a502:	dc0a      	bgt.n	800a51a <__ieee754_fmod+0x13e>
 800a504:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800a508:	fa08 f800 	lsl.w	r8, r8, r0
 800a50c:	fa2a f303 	lsr.w	r3, sl, r3
 800a510:	ea43 0308 	orr.w	r3, r3, r8
 800a514:	fa0a f400 	lsl.w	r4, sl, r0
 800a518:	e7aa      	b.n	800a470 <__ieee754_fmod+0x94>
 800a51a:	4b31      	ldr	r3, [pc, #196]	@ (800a5e0 <__ieee754_fmod+0x204>)
 800a51c:	2400      	movs	r4, #0
 800a51e:	1a5b      	subs	r3, r3, r1
 800a520:	fa0a f303 	lsl.w	r3, sl, r3
 800a524:	e7a4      	b.n	800a470 <__ieee754_fmod+0x94>
 800a526:	1a80      	subs	r0, r0, r2
 800a528:	281f      	cmp	r0, #31
 800a52a:	dc0a      	bgt.n	800a542 <__ieee754_fmod+0x166>
 800a52c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800a530:	fa0c fc00 	lsl.w	ip, ip, r0
 800a534:	fa27 f606 	lsr.w	r6, r7, r6
 800a538:	ea46 060c 	orr.w	r6, r6, ip
 800a53c:	fa07 fe00 	lsl.w	lr, r7, r0
 800a540:	e79d      	b.n	800a47e <__ieee754_fmod+0xa2>
 800a542:	4e27      	ldr	r6, [pc, #156]	@ (800a5e0 <__ieee754_fmod+0x204>)
 800a544:	f04f 0e00 	mov.w	lr, #0
 800a548:	1ab6      	subs	r6, r6, r2
 800a54a:	fa07 f606 	lsl.w	r6, r7, r6
 800a54e:	e796      	b.n	800a47e <__ieee754_fmod+0xa2>
 800a550:	4574      	cmp	r4, lr
 800a552:	bf38      	it	cc
 800a554:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800a558:	2800      	cmp	r0, #0
 800a55a:	da05      	bge.n	800a568 <__ieee754_fmod+0x18c>
 800a55c:	0fe0      	lsrs	r0, r4, #31
 800a55e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a562:	0064      	lsls	r4, r4, #1
 800a564:	3901      	subs	r1, #1
 800a566:	e78b      	b.n	800a480 <__ieee754_fmod+0xa4>
 800a568:	ea50 0307 	orrs.w	r3, r0, r7
 800a56c:	f43f af5f 	beq.w	800a42e <__ieee754_fmod+0x52>
 800a570:	0ffb      	lsrs	r3, r7, #31
 800a572:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a576:	007c      	lsls	r4, r7, #1
 800a578:	e7f4      	b.n	800a564 <__ieee754_fmod+0x188>
 800a57a:	0fe1      	lsrs	r1, r4, #31
 800a57c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a580:	0064      	lsls	r4, r4, #1
 800a582:	3a01      	subs	r2, #1
 800a584:	e78c      	b.n	800a4a0 <__ieee754_fmod+0xc4>
 800a586:	1a89      	subs	r1, r1, r2
 800a588:	2914      	cmp	r1, #20
 800a58a:	dc0a      	bgt.n	800a5a2 <__ieee754_fmod+0x1c6>
 800a58c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800a590:	fa03 f202 	lsl.w	r2, r3, r2
 800a594:	40cc      	lsrs	r4, r1
 800a596:	4322      	orrs	r2, r4
 800a598:	410b      	asrs	r3, r1
 800a59a:	4610      	mov	r0, r2
 800a59c:	ea43 0105 	orr.w	r1, r3, r5
 800a5a0:	e739      	b.n	800a416 <__ieee754_fmod+0x3a>
 800a5a2:	291f      	cmp	r1, #31
 800a5a4:	dc07      	bgt.n	800a5b6 <__ieee754_fmod+0x1da>
 800a5a6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800a5aa:	40cc      	lsrs	r4, r1
 800a5ac:	fa03 f202 	lsl.w	r2, r3, r2
 800a5b0:	4322      	orrs	r2, r4
 800a5b2:	462b      	mov	r3, r5
 800a5b4:	e7f1      	b.n	800a59a <__ieee754_fmod+0x1be>
 800a5b6:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800a5ba:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a5be:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800a5c2:	32e2      	adds	r2, #226	@ 0xe2
 800a5c4:	fa43 f202 	asr.w	r2, r3, r2
 800a5c8:	e7f3      	b.n	800a5b2 <__ieee754_fmod+0x1d6>
 800a5ca:	bf00      	nop
 800a5cc:	7fefffff 	.word	0x7fefffff
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	0800b1f8 	.word	0x0800b1f8
 800a5d8:	fffffbed 	.word	0xfffffbed
 800a5dc:	fffffc02 	.word	0xfffffc02
 800a5e0:	fffffbe2 	.word	0xfffffbe2

0800a5e4 <_init>:
 800a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e6:	bf00      	nop
 800a5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ea:	bc08      	pop	{r3}
 800a5ec:	469e      	mov	lr, r3
 800a5ee:	4770      	bx	lr

0800a5f0 <_fini>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	bf00      	nop
 800a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f6:	bc08      	pop	{r3}
 800a5f8:	469e      	mov	lr, r3
 800a5fa:	4770      	bx	lr
