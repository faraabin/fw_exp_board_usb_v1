
fw_exp_board_usb_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  0800b400  0800b400  0000c400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfc8  0800bfc8  0000d498  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfc8  0800bfc8  0000cfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd0  0800bfd0  0000d498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd0  0800bfd0  0000cfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfd4  0800bfd4  0000cfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000498  20000000  0800bfd8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003148  20000498  0800c470  0000d498  2**3
                  ALLOC
 10 ._user_heap_stack 00001500  200035e0  0800c470  0000d5e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d498  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e49a  00000000  00000000  0000d4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069cd  00000000  00000000  0003b95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00042328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001864  00000000  00000000  00043c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f967  00000000  00000000  000454dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fce2  00000000  00000000  00064e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a54aa  00000000  00000000  00094b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139fcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  0013a014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00012df6  00000000  00000000  0013eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  001518de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000498 	.word	0x20000498
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b3e8 	.word	0x0800b3e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000049c 	.word	0x2000049c
 800014c:	0800b3e8 	.word	0x0800b3e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b968 	b.w	8001434 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9d08      	ldr	r5, [sp, #32]
 8001182:	460c      	mov	r4, r1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d14e      	bne.n	8001226 <__udivmoddi4+0xaa>
 8001188:	4694      	mov	ip, r2
 800118a:	458c      	cmp	ip, r1
 800118c:	4686      	mov	lr, r0
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	d962      	bls.n	800125a <__udivmoddi4+0xde>
 8001194:	b14a      	cbz	r2, 80011aa <__udivmoddi4+0x2e>
 8001196:	f1c2 0320 	rsb	r3, r2, #32
 800119a:	4091      	lsls	r1, r2
 800119c:	fa20 f303 	lsr.w	r3, r0, r3
 80011a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a4:	4319      	orrs	r1, r3
 80011a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80011b2:	fb07 1114 	mls	r1, r7, r4, r1
 80011b6:	fa1f f68c 	uxth.w	r6, ip
 80011ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb04 f106 	mul.w	r1, r4, r6
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d90a      	bls.n	80011e0 <__udivmoddi4+0x64>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80011d2:	f080 8110 	bcs.w	80013f6 <__udivmoddi4+0x27a>
 80011d6:	4299      	cmp	r1, r3
 80011d8:	f240 810d 	bls.w	80013f6 <__udivmoddi4+0x27a>
 80011dc:	3c02      	subs	r4, #2
 80011de:	4463      	add	r3, ip
 80011e0:	1a59      	subs	r1, r3, r1
 80011e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011e6:	fb07 1110 	mls	r1, r7, r0, r1
 80011ea:	fb00 f606 	mul.w	r6, r0, r6
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f6:	429e      	cmp	r6, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x94>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8001202:	f080 80fa 	bcs.w	80013fa <__udivmoddi4+0x27e>
 8001206:	429e      	cmp	r6, r3
 8001208:	f240 80f7 	bls.w	80013fa <__udivmoddi4+0x27e>
 800120c:	4463      	add	r3, ip
 800120e:	3802      	subs	r0, #2
 8001210:	2100      	movs	r1, #0
 8001212:	1b9b      	subs	r3, r3, r6
 8001214:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001218:	b11d      	cbz	r5, 8001222 <__udivmoddi4+0xa6>
 800121a:	40d3      	lsrs	r3, r2
 800121c:	2200      	movs	r2, #0
 800121e:	e9c5 3200 	strd	r3, r2, [r5]
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	428b      	cmp	r3, r1
 8001228:	d905      	bls.n	8001236 <__udivmoddi4+0xba>
 800122a:	b10d      	cbz	r5, 8001230 <__udivmoddi4+0xb4>
 800122c:	e9c5 0100 	strd	r0, r1, [r5]
 8001230:	2100      	movs	r1, #0
 8001232:	4608      	mov	r0, r1
 8001234:	e7f5      	b.n	8001222 <__udivmoddi4+0xa6>
 8001236:	fab3 f183 	clz	r1, r3
 800123a:	2900      	cmp	r1, #0
 800123c:	d146      	bne.n	80012cc <__udivmoddi4+0x150>
 800123e:	42a3      	cmp	r3, r4
 8001240:	d302      	bcc.n	8001248 <__udivmoddi4+0xcc>
 8001242:	4290      	cmp	r0, r2
 8001244:	f0c0 80ee 	bcc.w	8001424 <__udivmoddi4+0x2a8>
 8001248:	1a86      	subs	r6, r0, r2
 800124a:	eb64 0303 	sbc.w	r3, r4, r3
 800124e:	2001      	movs	r0, #1
 8001250:	2d00      	cmp	r5, #0
 8001252:	d0e6      	beq.n	8001222 <__udivmoddi4+0xa6>
 8001254:	e9c5 6300 	strd	r6, r3, [r5]
 8001258:	e7e3      	b.n	8001222 <__udivmoddi4+0xa6>
 800125a:	2a00      	cmp	r2, #0
 800125c:	f040 808f 	bne.w	800137e <__udivmoddi4+0x202>
 8001260:	eba1 040c 	sub.w	r4, r1, ip
 8001264:	2101      	movs	r1, #1
 8001266:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800126a:	fa1f f78c 	uxth.w	r7, ip
 800126e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001272:	fb08 4416 	mls	r4, r8, r6, r4
 8001276:	fb07 f006 	mul.w	r0, r7, r6
 800127a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800127e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001282:	4298      	cmp	r0, r3
 8001284:	d908      	bls.n	8001298 <__udivmoddi4+0x11c>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f106 34ff 	add.w	r4, r6, #4294967295
 800128e:	d202      	bcs.n	8001296 <__udivmoddi4+0x11a>
 8001290:	4298      	cmp	r0, r3
 8001292:	f200 80cb 	bhi.w	800142c <__udivmoddi4+0x2b0>
 8001296:	4626      	mov	r6, r4
 8001298:	1a1c      	subs	r4, r3, r0
 800129a:	fbb4 f0f8 	udiv	r0, r4, r8
 800129e:	fb08 4410 	mls	r4, r8, r0, r4
 80012a2:	fb00 f707 	mul.w	r7, r0, r7
 80012a6:	fa1f f38e 	uxth.w	r3, lr
 80012aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ae:	429f      	cmp	r7, r3
 80012b0:	d908      	bls.n	80012c4 <__udivmoddi4+0x148>
 80012b2:	eb1c 0303 	adds.w	r3, ip, r3
 80012b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ba:	d202      	bcs.n	80012c2 <__udivmoddi4+0x146>
 80012bc:	429f      	cmp	r7, r3
 80012be:	f200 80ae 	bhi.w	800141e <__udivmoddi4+0x2a2>
 80012c2:	4620      	mov	r0, r4
 80012c4:	1bdb      	subs	r3, r3, r7
 80012c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012ca:	e7a5      	b.n	8001218 <__udivmoddi4+0x9c>
 80012cc:	f1c1 0720 	rsb	r7, r1, #32
 80012d0:	408b      	lsls	r3, r1
 80012d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012da:	fa24 f607 	lsr.w	r6, r4, r7
 80012de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80012e6:	fa1f fe8c 	uxth.w	lr, ip
 80012ea:	fb09 6618 	mls	r6, r9, r8, r6
 80012ee:	fa20 f307 	lsr.w	r3, r0, r7
 80012f2:	408c      	lsls	r4, r1
 80012f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012f8:	fb08 f00e 	mul.w	r0, r8, lr
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0c23      	lsrs	r3, r4, #16
 8001300:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001304:	4298      	cmp	r0, r3
 8001306:	fa02 f201 	lsl.w	r2, r2, r1
 800130a:	d90a      	bls.n	8001322 <__udivmoddi4+0x1a6>
 800130c:	eb1c 0303 	adds.w	r3, ip, r3
 8001310:	f108 36ff 	add.w	r6, r8, #4294967295
 8001314:	f080 8081 	bcs.w	800141a <__udivmoddi4+0x29e>
 8001318:	4298      	cmp	r0, r3
 800131a:	d97e      	bls.n	800141a <__udivmoddi4+0x29e>
 800131c:	f1a8 0802 	sub.w	r8, r8, #2
 8001320:	4463      	add	r3, ip
 8001322:	1a1e      	subs	r6, r3, r0
 8001324:	fbb6 f3f9 	udiv	r3, r6, r9
 8001328:	fb09 6613 	mls	r6, r9, r3, r6
 800132c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001330:	b2a4      	uxth	r4, r4
 8001332:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001336:	45a6      	cmp	lr, r4
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x1d0>
 800133a:	eb1c 0404 	adds.w	r4, ip, r4
 800133e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001342:	d266      	bcs.n	8001412 <__udivmoddi4+0x296>
 8001344:	45a6      	cmp	lr, r4
 8001346:	d964      	bls.n	8001412 <__udivmoddi4+0x296>
 8001348:	3b02      	subs	r3, #2
 800134a:	4464      	add	r4, ip
 800134c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001350:	fba0 8302 	umull	r8, r3, r0, r2
 8001354:	eba4 040e 	sub.w	r4, r4, lr
 8001358:	429c      	cmp	r4, r3
 800135a:	46c6      	mov	lr, r8
 800135c:	461e      	mov	r6, r3
 800135e:	d350      	bcc.n	8001402 <__udivmoddi4+0x286>
 8001360:	d04d      	beq.n	80013fe <__udivmoddi4+0x282>
 8001362:	b155      	cbz	r5, 800137a <__udivmoddi4+0x1fe>
 8001364:	ebba 030e 	subs.w	r3, sl, lr
 8001368:	eb64 0406 	sbc.w	r4, r4, r6
 800136c:	fa04 f707 	lsl.w	r7, r4, r7
 8001370:	40cb      	lsrs	r3, r1
 8001372:	431f      	orrs	r7, r3
 8001374:	40cc      	lsrs	r4, r1
 8001376:	e9c5 7400 	strd	r7, r4, [r5]
 800137a:	2100      	movs	r1, #0
 800137c:	e751      	b.n	8001222 <__udivmoddi4+0xa6>
 800137e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001382:	f1c2 0320 	rsb	r3, r2, #32
 8001386:	40d9      	lsrs	r1, r3
 8001388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800138c:	fa20 f303 	lsr.w	r3, r0, r3
 8001390:	fa00 fe02 	lsl.w	lr, r0, r2
 8001394:	fbb1 f0f8 	udiv	r0, r1, r8
 8001398:	fb08 1110 	mls	r1, r8, r0, r1
 800139c:	4094      	lsls	r4, r2
 800139e:	431c      	orrs	r4, r3
 80013a0:	fa1f f78c 	uxth.w	r7, ip
 80013a4:	0c23      	lsrs	r3, r4, #16
 80013a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013aa:	fb00 f107 	mul.w	r1, r0, r7
 80013ae:	4299      	cmp	r1, r3
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x248>
 80013b2:	eb1c 0303 	adds.w	r3, ip, r3
 80013b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ba:	d22c      	bcs.n	8001416 <__udivmoddi4+0x29a>
 80013bc:	4299      	cmp	r1, r3
 80013be:	d92a      	bls.n	8001416 <__udivmoddi4+0x29a>
 80013c0:	3802      	subs	r0, #2
 80013c2:	4463      	add	r3, ip
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013ca:	fb08 3311 	mls	r3, r8, r1, r3
 80013ce:	b2a4      	uxth	r4, r4
 80013d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013d4:	fb01 f307 	mul.w	r3, r1, r7
 80013d8:	42a3      	cmp	r3, r4
 80013da:	d908      	bls.n	80013ee <__udivmoddi4+0x272>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013e4:	d213      	bcs.n	800140e <__udivmoddi4+0x292>
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	d911      	bls.n	800140e <__udivmoddi4+0x292>
 80013ea:	3902      	subs	r1, #2
 80013ec:	4464      	add	r4, ip
 80013ee:	1ae4      	subs	r4, r4, r3
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	e73b      	b.n	800126e <__udivmoddi4+0xf2>
 80013f6:	4604      	mov	r4, r0
 80013f8:	e6f2      	b.n	80011e0 <__udivmoddi4+0x64>
 80013fa:	4608      	mov	r0, r1
 80013fc:	e708      	b.n	8001210 <__udivmoddi4+0x94>
 80013fe:	45c2      	cmp	sl, r8
 8001400:	d2af      	bcs.n	8001362 <__udivmoddi4+0x1e6>
 8001402:	ebb8 0e02 	subs.w	lr, r8, r2
 8001406:	eb63 060c 	sbc.w	r6, r3, ip
 800140a:	3801      	subs	r0, #1
 800140c:	e7a9      	b.n	8001362 <__udivmoddi4+0x1e6>
 800140e:	4631      	mov	r1, r6
 8001410:	e7ed      	b.n	80013ee <__udivmoddi4+0x272>
 8001412:	4603      	mov	r3, r0
 8001414:	e79a      	b.n	800134c <__udivmoddi4+0x1d0>
 8001416:	4630      	mov	r0, r6
 8001418:	e7d4      	b.n	80013c4 <__udivmoddi4+0x248>
 800141a:	46b0      	mov	r8, r6
 800141c:	e781      	b.n	8001322 <__udivmoddi4+0x1a6>
 800141e:	4463      	add	r3, ip
 8001420:	3802      	subs	r0, #2
 8001422:	e74f      	b.n	80012c4 <__udivmoddi4+0x148>
 8001424:	4606      	mov	r6, r0
 8001426:	4623      	mov	r3, r4
 8001428:	4608      	mov	r0, r1
 800142a:	e711      	b.n	8001250 <__udivmoddi4+0xd4>
 800142c:	3e02      	subs	r6, #2
 800142e:	4463      	add	r3, ip
 8001430:	e732      	b.n	8001298 <__udivmoddi4+0x11c>
 8001432:	bf00      	nop

08001434 <__aeabi_idiv0>:
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b500      	push	{lr}
 800143a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_DMA_Init+0x40>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	4611      	mov	r1, r2
 8001454:	200e      	movs	r0, #14
 8001456:	f000 fe6d 	bl	8002134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800145a:	200e      	movs	r0, #14
 800145c:	f000 fea0 	bl	80021a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	4611      	mov	r1, r2
 8001464:	200f      	movs	r0, #15
 8001466:	f000 fe65 	bl	8002134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800146a:	200f      	movs	r0, #15
 800146c:	f000 fe98 	bl	80021a0 <HAL_NVIC_EnableIRQ>

}
 8001470:	b003      	add	sp, #12
 8001472:	f85d fb04 	ldr.w	pc, [sp], #4
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <groupName__func>:
*/
/**
 * @brief 
 * 
 */
FARAABIN_FUNCTION_GROUP_(ExpBoardFn, "help") {
 800147c:	b508      	push	{r3, lr}
 800147e:	460a      	mov	r2, r1
  
  FARAABIN_FUNCTION_GROUP_ADD_(ExpBoardFn, TransmitMessage);
 8001480:	4902      	ldr	r1, [pc, #8]	@ (800148c <groupName__func+0x10>)
 8001482:	4803      	ldr	r0, [pc, #12]	@ (8001490 <groupName__func+0x14>)
 8001484:	f009 f97a 	bl	800a77c <fFaraabinLinkSerializer_FunctionGroupTypeMemberDict>

}
 8001488:	bd08      	pop	{r3, pc}
 800148a:	bf00      	nop
 800148c:	20000018 	.word	0x20000018
 8001490:	20000000 	.word	0x20000000

08001494 <groupName_TransmitMessage_func>:
FARAABIN_FUNCTION_LOOP_(ExpBoardFn, TransmitMessage, "help") {
 8001494:	b530      	push	{r4, r5, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	4604      	mov	r4, r0
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <groupName_TransmitMessage_func+0x74>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
  FARAABIN_Function_LoopStartMs_(1000) {
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <groupName_TransmitMessage_func+0x78>)
 80014a2:	7e1b      	ldrb	r3, [r3, #24]
 80014a4:	b15b      	cbz	r3, 80014be <groupName_TransmitMessage_func+0x2a>
 80014a6:	481a      	ldr	r0, [pc, #104]	@ (8001510 <groupName_TransmitMessage_func+0x7c>)
 80014a8:	f005 fa08 	bl	80068bc <fChrono_IsTimeout>
 80014ac:	b968      	cbnz	r0, 80014ca <groupName_TransmitMessage_func+0x36>
  FARAABIN_FUNCTION_END_();
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <groupName_TransmitMessage_func+0x74>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf0c      	ite	eq
 80014b6:	20c8      	moveq	r0, #200	@ 0xc8
 80014b8:	20ff      	movne	r0, #255	@ 0xff
}
 80014ba:	b005      	add	sp, #20
 80014bc:	bd30      	pop	{r4, r5, pc}
  FARAABIN_Function_LoopStartMs_(1000) {
 80014be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014c2:	4813      	ldr	r0, [pc, #76]	@ (8001510 <groupName_TransmitMessage_func+0x7c>)
 80014c4:	f005 f9d6 	bl	8006874 <fChrono_StartTimeoutMs>
 80014c8:	e7ed      	b.n	80014a6 <groupName_TransmitMessage_func+0x12>
 80014ca:	4d11      	ldr	r5, [pc, #68]	@ (8001510 <groupName_TransmitMessage_func+0x7c>)
 80014cc:	4628      	mov	r0, r5
 80014ce:	f005 f979 	bl	80067c4 <fChrono_ElapsedMs>
 80014d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014d6:	4628      	mov	r0, r5
 80014d8:	f005 f9cc 	bl	8006874 <fChrono_StartTimeoutMs>
    cnt++;
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <groupName_TransmitMessage_func+0x80>)
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	6013      	str	r3, [r2, #0]
    FARAABIN_PrintfToFunction_("\r\nTestWhile: %u", cnt);
 80014e4:	9303      	str	r3, [sp, #12]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <groupName_TransmitMessage_func+0x84>)
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2300      	movs	r3, #0
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	2304      	movs	r3, #4
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	f1a5 020c 	sub.w	r2, r5, #12
 80014f8:	4621      	mov	r1, r4
 80014fa:	f1a5 0018 	sub.w	r0, r5, #24
 80014fe:	f008 ff73 	bl	800a3e8 <fFaraabinLinkSerializer_SerializeEventPrintf>
    FARAABIN_Function_LoopEnd_();
 8001502:	20ff      	movs	r0, #255	@ 0xff
 8001504:	e7d9      	b.n	80014ba <groupName_TransmitMessage_func+0x26>
 8001506:	bf00      	nop
 8001508:	200004b8 	.word	0x200004b8
 800150c:	20000018 	.word	0x20000018
 8001510:	20000030 	.word	0x20000030
 8001514:	200004b4 	.word	0x200004b4
 8001518:	0800b400 	.word	0x0800b400

0800151c <fFaraabin_GetFirmwareName>:
 * 
 * @return fwName Firmware name.
 */
char* fFaraabin_GetFirmwareName(void) {
  return fwName;
}
 800151c:	4800      	ldr	r0, [pc, #0]	@ (8001520 <fFaraabin_GetFirmwareName+0x4>)
 800151e:	4770      	bx	lr
 8001520:	20000044 	.word	0x20000044

08001524 <fFaraabin_GetFirmwareInfo>:
	
  //User can send custom text as info.
  //User can also send any information data in JSON format.
  //Faraabin setect & parse JSON and show key-value pair in pc application.
	return "{\"Clock\":\"100MHz\"}";
}
 8001524:	4800      	ldr	r0, [pc, #0]	@ (8001528 <fFaraabin_GetFirmwareInfo+0x4>)
 8001526:	4770      	bx	lr
 8001528:	0800b434 	.word	0x0800b434

0800152c <fFaraabin_GetTxBufferPointer>:
 * 
 * @return pTxBuffer Pointer to Faraabin buffer created by user.
 */
uint8_t* fFaraabin_GetTxBufferPointer(void) {
  return fbTxBuffer;
}
 800152c:	4800      	ldr	r0, [pc, #0]	@ (8001530 <fFaraabin_GetTxBufferPointer+0x4>)
 800152e:	4770      	bx	lr
 8001530:	200008a4 	.word	0x200008a4

08001534 <fFaraabin_GetTxBufferSize>:
 * 
 * @return size Size of Faraabin buffer created by user.
 */
uint32_t fFaraabin_GetTxBufferSize(void) {
  return sizeof(fbTxBuffer);
}
 8001534:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001538:	4770      	bx	lr
	...

0800153c <fFaraabin_GetRxBufferPointer>:
 * 
 * @return pRxBuffer Pointer to Faraabin buffer created by user.
 */
uint8_t* fFaraabin_GetRxBufferPointer(void) {
  return fbRxBuffer;
}
 800153c:	4800      	ldr	r0, [pc, #0]	@ (8001540 <fFaraabin_GetRxBufferPointer+0x4>)
 800153e:	4770      	bx	lr
 8001540:	200004bc 	.word	0x200004bc

08001544 <fFaraabin_GetRxBufferSize>:
 * 
 * @return size Size of Faraabin buffer created by user.
 */
uint32_t fFaraabin_GetRxBufferSize(void) {
  return sizeof(fbRxBuffer);
}
 8001544:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001548:	4770      	bx	lr

0800154a <fFaraabin_Send>:
 */
uint8_t fFaraabin_Send(uint8_t *data, uint16_t size) {

  //User should write code here to send <size> byte of data from buffer <data>
  return 1;
}
 800154a:	2001      	movs	r0, #1
 800154c:	4770      	bx	lr

0800154e <fFaraabin_IsSending>:
 */
bool fFaraabin_IsSending(void) {

  //User should return that last sending data is finished or not.
  return false;
}
 800154e:	2000      	movs	r0, #0
 8001550:	4770      	bx	lr

08001552 <fFaraabin_ResetMcu>:
 * 
 */
void fFaraabin_ResetMcu(void) {
  
  //User should write code here to reset MCU.
}
 8001552:	4770      	bx	lr

08001554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001554:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_GPIO_Init+0x40>)
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	f042 0220 	orr.w	r2, r2, #32
 800155e:	619a      	str	r2, [r3, #24]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	f002 0220 	and.w	r2, r2, #32
 8001566:	9201      	str	r2, [sp, #4]
 8001568:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	f042 0204 	orr.w	r2, r2, #4
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	699a      	ldr	r2, [r3, #24]
 8001574:	f002 0204 	and.w	r2, r2, #4
 8001578:	9202      	str	r2, [sp, #8]
 800157a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	f042 0208 	orr.w	r2, r2, #8
 8001582:	619a      	str	r2, [r3, #24]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	9303      	str	r3, [sp, #12]
 800158c:	9b03      	ldr	r3, [sp, #12]

}
 800158e:	b004      	add	sp, #16
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <GetTickValue>:
  * @brief Returns the 32-bit tick value from timer1 and timer2 count registers.
  * @retval uint32_t CurrentTick
  */
static uint32_t GetTickValue(void) {
  
  uint16_t high = htim1.Instance->CNT;
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <GetTickValue+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
  uint16_t low = htim2.Instance->CNT;
 800159e:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <GetTickValue+0x18>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  
  return (high << 16) + low;
 80015a4:	b29b      	uxth	r3, r3
}
 80015a6:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 80015aa:	4770      	bx	lr
 80015ac:	20000d70 	.word	0x20000d70
 80015b0:	20000d28 	.word	0x20000d28

080015b4 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer>:

/**
 * @brief This function is used to define all variables in the container to faraabin.
 * 
 */
FARAABIN_CONTAINER_FUNC_(ExpBoardContainer) {
 80015b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	4605      	mov	r5, r0
 80015bc:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xcc>)
 80015be:	681e      	ldr	r6, [r3, #0]

  FARAABIN_VAR_ENUM_(WaveType, eWaveType);
 80015c0:	9005      	str	r0, [sp, #20]
 80015c2:	4f30      	ldr	r7, [pc, #192]	@ (8001684 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xd0>)
 80015c4:	9704      	str	r7, [sp, #16]
 80015c6:	9603      	str	r6, [sp, #12]
 80015c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xd4>)
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2400      	movs	r4, #0
 80015ce:	9401      	str	r4, [sp, #4]
 80015d0:	9400      	str	r4, [sp, #0]
 80015d2:	4623      	mov	r3, r4
 80015d4:	2201      	movs	r2, #1
 80015d6:	492d      	ldr	r1, [pc, #180]	@ (800168c <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xd8>)
 80015d8:	482d      	ldr	r0, [pc, #180]	@ (8001690 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xdc>)
 80015da:	f009 f86d 	bl	800a6b8 <fFaraabinLinkSerializer_VarDict>

  FARAABIN_VAR_F64_(Frequency);
 80015de:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8001694 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xe0>
 80015e2:	9505      	str	r5, [sp, #20]
 80015e4:	9704      	str	r7, [sp, #16]
 80015e6:	9603      	str	r6, [sp, #12]
 80015e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xe4>)
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	9401      	str	r4, [sp, #4]
 80015ee:	9400      	str	r4, [sp, #0]
 80015f0:	4623      	mov	r3, r4
 80015f2:	2201      	movs	r2, #1
 80015f4:	4929      	ldr	r1, [pc, #164]	@ (800169c <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xe8>)
 80015f6:	4640      	mov	r0, r8
 80015f8:	f009 f85e 	bl	800a6b8 <fFaraabinLinkSerializer_VarDict>
  FARAABIN_VAR_F64_(Amplitude);
 80015fc:	9505      	str	r5, [sp, #20]
 80015fe:	9704      	str	r7, [sp, #16]
 8001600:	9603      	str	r6, [sp, #12]
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xec>)
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	9401      	str	r4, [sp, #4]
 8001608:	9400      	str	r4, [sp, #0]
 800160a:	4623      	mov	r3, r4
 800160c:	2201      	movs	r2, #1
 800160e:	4925      	ldr	r1, [pc, #148]	@ (80016a4 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xf0>)
 8001610:	4640      	mov	r0, r8
 8001612:	f009 f851 	bl	800a6b8 <fFaraabinLinkSerializer_VarDict>
  FARAABIN_VAR_F64_(Output);
 8001616:	9505      	str	r5, [sp, #20]
 8001618:	9704      	str	r7, [sp, #16]
 800161a:	9603      	str	r6, [sp, #12]
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xf4>)
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	9401      	str	r4, [sp, #4]
 8001622:	9400      	str	r4, [sp, #0]
 8001624:	4623      	mov	r3, r4
 8001626:	2201      	movs	r2, #1
 8001628:	4920      	ldr	r1, [pc, #128]	@ (80016ac <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xf8>)
 800162a:	4640      	mov	r0, r8
 800162c:	f009 f844 	bl	800a6b8 <fFaraabinLinkSerializer_VarDict>

  FARAABIN_VAR_U32_(Execution);
 8001630:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80016b0 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0xfc>
 8001634:	9505      	str	r5, [sp, #20]
 8001636:	9704      	str	r7, [sp, #16]
 8001638:	9603      	str	r6, [sp, #12]
 800163a:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0x100>)
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	9401      	str	r4, [sp, #4]
 8001640:	9400      	str	r4, [sp, #0]
 8001642:	4623      	mov	r3, r4
 8001644:	2201      	movs	r2, #1
 8001646:	491c      	ldr	r1, [pc, #112]	@ (80016b8 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0x104>)
 8001648:	4640      	mov	r0, r8
 800164a:	f009 f835 	bl	800a6b8 <fFaraabinLinkSerializer_VarDict>
  FARAABIN_VAR_U32_(Interval);
 800164e:	9505      	str	r5, [sp, #20]
 8001650:	9704      	str	r7, [sp, #16]
 8001652:	9603      	str	r6, [sp, #12]
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0x108>)
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	9401      	str	r4, [sp, #4]
 800165a:	9400      	str	r4, [sp, #0]
 800165c:	4623      	mov	r3, r4
 800165e:	2201      	movs	r2, #1
 8001660:	4917      	ldr	r1, [pc, #92]	@ (80016c0 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0x10c>)
 8001662:	4640      	mov	r0, r8
 8001664:	f009 f828 	bl	800a6b8 <fFaraabinLinkSerializer_VarDict>

  FARAABIN_FUNCTION_GROUP_DICT_(ExpBoardFn);
 8001668:	9501      	str	r5, [sp, #4]
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0x110>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4623      	mov	r3, r4
 8001670:	4a15      	ldr	r2, [pc, #84]	@ (80016c8 <__FARAABIN_CONTAINER_FUNC_ExpBoardContainer+0x114>)
 8001672:	4639      	mov	r1, r7
 8001674:	4630      	mov	r0, r6
 8001676:	f009 f859 	bl	800a72c <fFaraabinLinkSerializer_FunctionGroupDict>

  FARAABIN_CONTAINER_FUNC_END_;
}
 800167a:	b006      	add	sp, #24
 800167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001680:	20000378 	.word	0x20000378
 8001684:	0800b448 	.word	0x0800b448
 8001688:	0800b484 	.word	0x0800b484
 800168c:	20000d20 	.word	0x20000d20
 8001690:	20000ca4 	.word	0x20000ca4
 8001694:	20002668 	.word	0x20002668
 8001698:	0800b490 	.word	0x0800b490
 800169c:	20000d18 	.word	0x20000d18
 80016a0:	0800b49c 	.word	0x0800b49c
 80016a4:	20000d10 	.word	0x20000d10
 80016a8:	0800b4a8 	.word	0x0800b4a8
 80016ac:	20000d08 	.word	0x20000d08
 80016b0:	200026f4 	.word	0x200026f4
 80016b4:	0800b4b0 	.word	0x0800b4b0
 80016b8:	20000d04 	.word	0x20000d04
 80016bc:	0800b4bc 	.word	0x0800b4bc
 80016c0:	20000d00 	.word	0x20000d00
 80016c4:	20000000 	.word	0x20000000
 80016c8:	0800b4c8 	.word	0x0800b4c8

080016cc <__faraabin_vartype_member_func_eWaveType>:
FARAABIN_VAR_TYPE_ENUM_FUNC_(eWaveType) {
 80016cc:	b538      	push	{r3, r4, r5, lr}
 80016ce:	4605      	mov	r5, r0
 80016d0:	460c      	mov	r4, r1
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_NONE);
 80016d2:	460b      	mov	r3, r1
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <__faraabin_vartype_member_func_eWaveType+0x38>)
 80016d6:	2100      	movs	r1, #0
 80016d8:	f008 ffdc 	bl	800a694 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_PULSE_TRAIN);
 80016dc:	4623      	mov	r3, r4
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <__faraabin_vartype_member_func_eWaveType+0x3c>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	4628      	mov	r0, r5
 80016e4:	f008 ffd6 	bl	800a694 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_SAW_TOOTH);
 80016e8:	4623      	mov	r3, r4
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <__faraabin_vartype_member_func_eWaveType+0x40>)
 80016ec:	2102      	movs	r1, #2
 80016ee:	4628      	mov	r0, r5
 80016f0:	f008 ffd0 	bl	800a694 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
  FARAABIN_VAR_TYPE_ENUM_MEMBER_(eWAVE_TYPE_SIN);
 80016f4:	4623      	mov	r3, r4
 80016f6:	4a06      	ldr	r2, [pc, #24]	@ (8001710 <__faraabin_vartype_member_func_eWaveType+0x44>)
 80016f8:	2103      	movs	r1, #3
 80016fa:	4628      	mov	r0, r5
 80016fc:	f008 ffca 	bl	800a694 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>
}
 8001700:	bd38      	pop	{r3, r4, r5, pc}
 8001702:	bf00      	nop
 8001704:	0800b4d0 	.word	0x0800b4d0
 8001708:	0800b4e0 	.word	0x0800b4e0
 800170c:	0800b4f8 	.word	0x0800b4f8
 8001710:	0800b510 	.word	0x0800b510

08001714 <SystemClock_Config>:
{
 8001714:	b500      	push	{lr}
 8001716:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001718:	2300      	movs	r3, #0
 800171a:	930c      	str	r3, [sp, #48]	@ 0x30
 800171c:	930d      	str	r3, [sp, #52]	@ 0x34
 800171e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001720:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001722:	9305      	str	r3, [sp, #20]
 8001724:	9306      	str	r3, [sp, #24]
 8001726:	9307      	str	r3, [sp, #28]
 8001728:	9308      	str	r3, [sp, #32]
 800172a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	9303      	str	r3, [sp, #12]
 8001732:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001734:	2301      	movs	r3, #1
 8001736:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001738:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800173c:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001740:	2302      	movs	r3, #2
 8001742:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800174a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800174e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	a80a      	add	r0, sp, #40	@ 0x28
 8001752:	f002 f825 	bl	80037a0 <HAL_RCC_OscConfig>
 8001756:	b9d0      	cbnz	r0, 800178e <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001758:	230f      	movs	r3, #15
 800175a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175c:	2302      	movs	r3, #2
 800175e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001764:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001768:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800176c:	2101      	movs	r1, #1
 800176e:	a805      	add	r0, sp, #20
 8001770:	f002 fa56 	bl	8003c20 <HAL_RCC_ClockConfig>
 8001774:	b968      	cbnz	r0, 8001792 <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001776:	2310      	movs	r3, #16
 8001778:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800177a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177e:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001780:	a801      	add	r0, sp, #4
 8001782:	f002 fb25 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	b930      	cbnz	r0, 8001796 <SystemClock_Config+0x82>
}
 8001788:	b015      	add	sp, #84	@ 0x54
 800178a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <SystemClock_Config+0x7c>
 8001792:	b672      	cpsid	i
 8001794:	e7fe      	b.n	8001794 <SystemClock_Config+0x80>
 8001796:	b672      	cpsid	i
 8001798:	e7fe      	b.n	8001798 <SystemClock_Config+0x84>
 800179a:	0000      	movs	r0, r0
 800179c:	0000      	movs	r0, r0
	...

080017a0 <main>:
{
 80017a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a4:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80017a6:	f000 fc8f 	bl	80020c8 <HAL_Init>
  SystemClock_Config();
 80017aa:	f7ff ffb3 	bl	8001714 <SystemClock_Config>
  MX_GPIO_Init();
 80017ae:	f7ff fed1 	bl	8001554 <MX_GPIO_Init>
  MX_DMA_Init();
 80017b2:	f7ff fe41 	bl	8001438 <MX_DMA_Init>
  MX_TIM1_Init();
 80017b6:	f000 fab7 	bl	8001d28 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017ba:	f000 faef 	bl	8001d9c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017be:	f000 fb4b 	bl	8001e58 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80017c2:	f004 fd75 	bl	80062b0 <MX_USB_DEVICE_Init>
  htim2.Instance->SMCR &= ~(1 << 4);
 80017c6:	48a0      	ldr	r0, [pc, #640]	@ (8001a48 <main+0x2a8>)
 80017c8:	6802      	ldr	r2, [r0, #0]
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f023 0310 	bic.w	r3, r3, #16
 80017d0:	6093      	str	r3, [r2, #8]
  HAL_TIM_Base_Start(&htim2);
 80017d2:	f002 fb8b 	bl	8003eec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 80017d6:	489d      	ldr	r0, [pc, #628]	@ (8001a4c <main+0x2ac>)
 80017d8:	f002 fb88 	bl	8003eec <HAL_TIM_Base_Start>
  if(fChrono_Init(GetTickValue) != CHRONO_OK) {
 80017dc:	489c      	ldr	r0, [pc, #624]	@ (8001a50 <main+0x2b0>)
 80017de:	f004 ffad 	bl	800673c <fChrono_Init>
 80017e2:	b108      	cbz	r0, 80017e8 <main+0x48>
 80017e4:	b672      	cpsid	i
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <main+0x46>
  if(fFaraabin_Init() != FARAABIN_OK) {
 80017e8:	f005 f8ae 	bl	8006948 <fFaraabin_Init>
 80017ec:	b108      	cbz	r0, 80017f2 <main+0x52>
 80017ee:	b672      	cpsid	i
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <main+0x50>
  FARAABIN_Container_Init_(&ExpBoardContainer);
 80017f2:	4898      	ldr	r0, [pc, #608]	@ (8001a54 <main+0x2b4>)
 80017f4:	4e98      	ldr	r6, [pc, #608]	@ (8001a58 <main+0x2b8>)
 80017f6:	6833      	ldr	r3, [r6, #0]
 80017f8:	6083      	str	r3, [r0, #8]
 80017fa:	4d98      	ldr	r5, [pc, #608]	@ (8001a5c <main+0x2bc>)
 80017fc:	60c5      	str	r5, [r0, #12]
 80017fe:	f005 fa9d 	bl	8006d3c <fFaraabinFobjectContainer_Init>
  FARAABIN_VAR_TYPE_ENUM_INIT_(eWaveType);
 8001802:	4897      	ldr	r0, [pc, #604]	@ (8001a60 <main+0x2c0>)
 8001804:	4b97      	ldr	r3, [pc, #604]	@ (8001a64 <main+0x2c4>)
 8001806:	6043      	str	r3, [r0, #4]
 8001808:	60c5      	str	r5, [r0, #12]
 800180a:	6833      	ldr	r3, [r6, #0]
 800180c:	6083      	str	r3, [r0, #8]
 800180e:	2701      	movs	r7, #1
 8001810:	6147      	str	r7, [r0, #20]
 8001812:	f04f 0802 	mov.w	r8, #2
 8001816:	f880 8012 	strb.w	r8, [r0, #18]
 800181a:	4b93      	ldr	r3, [pc, #588]	@ (8001a68 <main+0x2c8>)
 800181c:	6183      	str	r3, [r0, #24]
 800181e:	f006 fbfd 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_DATABUS_SET_VALUE_(ExpBoardDatabus.ChannelQty, 5);
 8001822:	4c92      	ldr	r4, [pc, #584]	@ (8001a6c <main+0x2cc>)
 8001824:	2305      	movs	r3, #5
 8001826:	8263      	strh	r3, [r4, #18]
  FARAABIN_DATABUS_SET_VALUE_(ExpBoardDatabus.BufferCaptureSize, 100);
 8001828:	2364      	movs	r3, #100	@ 0x64
 800182a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  FARAABIN_DATABUS_SET_VALUE_(ExpBoardDatabus.StreamDivideBy, 10);
 800182c:	230a      	movs	r3, #10
 800182e:	83e3      	strh	r3, [r4, #30]
  FARAABIN_DataBus_Init_(&ExpBoardDatabus);
 8001830:	6833      	ldr	r3, [r6, #0]
 8001832:	60a3      	str	r3, [r4, #8]
 8001834:	60e5      	str	r5, [r4, #12]
 8001836:	4620      	mov	r0, r4
 8001838:	f005 fb44 	bl	8006ec4 <fFaraabinFobjectDataBus_Init>
  FARAABIN_DataBus_StartStreamMode_(&ExpBoardDatabus);
 800183c:	4620      	mov	r0, r4
 800183e:	f006 f97d 	bl	8007b3c <fFaraabinFobjectDataBus_StartStream>
  FARAABIN_DataBus_AttachVariable_F64_(&ExpBoardDatabus, &Output);
 8001842:	f8cd 8004 	str.w	r8, [sp, #4]
 8001846:	230b      	movs	r3, #11
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2300      	movs	r3, #0
 800184c:	2208      	movs	r2, #8
 800184e:	4988      	ldr	r1, [pc, #544]	@ (8001a70 <main+0x2d0>)
 8001850:	4620      	mov	r0, r4
 8001852:	f006 fa3d 	bl	8007cd0 <fFaraabinFobjectDataBus_AttachVariable>
  FARAABIN_DataBus_Enable_(&ExpBoardDatabus);
 8001856:	70a7      	strb	r7, [r4, #2]
  FARAABIN_EventGroup_Init_(&ExpBoardEvType);
 8001858:	4886      	ldr	r0, [pc, #536]	@ (8001a74 <main+0x2d4>)
 800185a:	6833      	ldr	r3, [r6, #0]
 800185c:	6083      	str	r3, [r0, #8]
 800185e:	60c5      	str	r5, [r0, #12]
 8001860:	f006 fad2 	bl	8007e08 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_EventGroup_Init_(&ExpBoardEvAmp);
 8001864:	4884      	ldr	r0, [pc, #528]	@ (8001a78 <main+0x2d8>)
 8001866:	6833      	ldr	r3, [r6, #0]
 8001868:	6083      	str	r3, [r0, #8]
 800186a:	60c5      	str	r5, [r0, #12]
 800186c:	f006 facc 	bl	8007e08 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_EventGroup_Init_(&ExpBoardEvFreq);
 8001870:	4882      	ldr	r0, [pc, #520]	@ (8001a7c <main+0x2dc>)
 8001872:	6833      	ldr	r3, [r6, #0]
 8001874:	6083      	str	r3, [r0, #8]
 8001876:	60c5      	str	r5, [r0, #12]
 8001878:	f006 fac6 	bl	8007e08 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_EventGroup_Init_(&ExpBoardEvDuty);
 800187c:	4880      	ldr	r0, [pc, #512]	@ (8001a80 <main+0x2e0>)
 800187e:	6833      	ldr	r3, [r6, #0]
 8001880:	6083      	str	r3, [r0, #8]
 8001882:	60c5      	str	r5, [r0, #12]
 8001884:	f006 fac0 	bl	8007e08 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_FunctionGroupType_Init_(&ExpBoardFn);
 8001888:	487e      	ldr	r0, [pc, #504]	@ (8001a84 <main+0x2e4>)
 800188a:	6085      	str	r5, [r0, #8]
 800188c:	f006 fad8 	bl	8007e40 <fFaraabinFobjectFunctionGroupType_Init>
  WaveType = eWAVE_TYPE_NONE;
 8001890:	4b7d      	ldr	r3, [pc, #500]	@ (8001a88 <main+0x2e8>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
  Frequency = 0.0;
 8001896:	2200      	movs	r2, #0
 8001898:	2300      	movs	r3, #0
 800189a:	497c      	ldr	r1, [pc, #496]	@ (8001a8c <main+0x2ec>)
 800189c:	e9c1 2300 	strd	r2, r3, [r1]
  Amplitude = 0.0;
 80018a0:	497b      	ldr	r1, [pc, #492]	@ (8001a90 <main+0x2f0>)
 80018a2:	e9c1 2300 	strd	r2, r3, [r1]
  t = 0.0;
 80018a6:	497b      	ldr	r1, [pc, #492]	@ (8001a94 <main+0x2f4>)
 80018a8:	e9c1 2300 	strd	r2, r3, [r1]
  fChrono_StartTimeoutUs(&RuntimeChrono, RUNTIME_PERIOD_US);
 80018ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018b0:	4879      	ldr	r0, [pc, #484]	@ (8001a98 <main+0x2f8>)
 80018b2:	f004 fff1 	bl	8006898 <fChrono_StartTimeoutUs>
    if(fChrono_IsTimeout(&RuntimeChrono)) {
 80018b6:	4c78      	ldr	r4, [pc, #480]	@ (8001a98 <main+0x2f8>)
      t = t + ((double)RUNTIME_PERIOD_US / 1000000.0);
 80018b8:	f20f 1b7c 	addw	fp, pc, #380	@ 0x17c
 80018bc:	e9db ab00 	ldrd	sl, fp, [fp]
 80018c0:	e042      	b.n	8001948 <main+0x1a8>
        Output = 0;
 80018c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a70 <main+0x2d0>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	2200      	movs	r2, #0
 80018c8:	e9c3 1200 	strd	r1, r2, [r3]
      if(OldType != WaveType) {
 80018cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001a88 <main+0x2e8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4a72      	ldr	r2, [pc, #456]	@ (8001a9c <main+0x2fc>)
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8130 	bne.w	8001b3a <main+0x39a>
      if(OldAmp != Amplitude) {
 80018da:	4b71      	ldr	r3, [pc, #452]	@ (8001aa0 <main+0x300>)
 80018dc:	e9d3 6700 	ldrd	r6, r7, [r3]
 80018e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <main+0x2f0>)
 80018e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80018e6:	4642      	mov	r2, r8
 80018e8:	464b      	mov	r3, r9
 80018ea:	4630      	mov	r0, r6
 80018ec:	4639      	mov	r1, r7
 80018ee:	f7ff f85b 	bl	80009a8 <__aeabi_dcmpeq>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	f000 8131 	beq.w	8001b5a <main+0x3ba>
      if(OldFreq != Frequency) {
 80018f8:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <main+0x304>)
 80018fa:	e9d3 6700 	ldrd	r6, r7, [r3]
 80018fe:	4b63      	ldr	r3, [pc, #396]	@ (8001a8c <main+0x2ec>)
 8001900:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001904:	4642      	mov	r2, r8
 8001906:	464b      	mov	r3, r9
 8001908:	4630      	mov	r0, r6
 800190a:	4639      	mov	r1, r7
 800190c:	f7ff f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8001910:	2800      	cmp	r0, #0
 8001912:	f000 813a 	beq.w	8001b8a <main+0x3ea>
      FARAABIN_DataBus_Run_(&ExpBoardDatabus);
 8001916:	4855      	ldr	r0, [pc, #340]	@ (8001a6c <main+0x2cc>)
 8001918:	f005 fb50 	bl	8006fbc <fFaraabinFobjectDataBus_Run>
      TickEnd = fChrono_GetTick();
 800191c:	f004 feaa 	bl	8006674 <fChrono_GetTick>
 8001920:	4f61      	ldr	r7, [pc, #388]	@ (8001aa8 <main+0x308>)
 8001922:	6038      	str	r0, [r7, #0]
      Interval = fChrono_TimeSpanUs(lastTickBegin, TickBegin);
 8001924:	4d61      	ldr	r5, [pc, #388]	@ (8001aac <main+0x30c>)
 8001926:	4e62      	ldr	r6, [pc, #392]	@ (8001ab0 <main+0x310>)
 8001928:	6829      	ldr	r1, [r5, #0]
 800192a:	6830      	ldr	r0, [r6, #0]
 800192c:	f004 fee0 	bl	80066f0 <fChrono_TimeSpanUs>
 8001930:	4b60      	ldr	r3, [pc, #384]	@ (8001ab4 <main+0x314>)
 8001932:	6018      	str	r0, [r3, #0]
      Execution = fChrono_TimeSpanUs(TickBegin, TickEnd);
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	6828      	ldr	r0, [r5, #0]
 8001938:	f004 feda 	bl	80066f0 <fChrono_TimeSpanUs>
 800193c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <main+0x318>)
 800193e:	6018      	str	r0, [r3, #0]
      lastTickBegin= TickBegin;
 8001940:	682b      	ldr	r3, [r5, #0]
 8001942:	6033      	str	r3, [r6, #0]
    fFaraabin_Run();
 8001944:	f005 f8f8 	bl	8006b38 <fFaraabin_Run>
    if(fChrono_IsTimeout(&RuntimeChrono)) {
 8001948:	4620      	mov	r0, r4
 800194a:	f004 ffb7 	bl	80068bc <fChrono_IsTimeout>
 800194e:	2800      	cmp	r0, #0
 8001950:	d0f8      	beq.n	8001944 <main+0x1a4>
      TickBegin = fChrono_GetTick();
 8001952:	f004 fe8f 	bl	8006674 <fChrono_GetTick>
 8001956:	4b55      	ldr	r3, [pc, #340]	@ (8001aac <main+0x30c>)
 8001958:	6018      	str	r0, [r3, #0]
      fChrono_StartTimeoutUs(&RuntimeChrono, RUNTIME_PERIOD_US);
 800195a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800195e:	4620      	mov	r0, r4
 8001960:	f004 ff9a 	bl	8006898 <fChrono_StartTimeoutUs>
      t = t + ((double)RUNTIME_PERIOD_US / 1000000.0);
 8001964:	4d4b      	ldr	r5, [pc, #300]	@ (8001a94 <main+0x2f4>)
 8001966:	4652      	mov	r2, sl
 8001968:	465b      	mov	r3, fp
 800196a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800196e:	f7fe fbfd 	bl	800016c <__adddf3>
 8001972:	4606      	mov	r6, r0
 8001974:	460f      	mov	r7, r1
 8001976:	e9c5 6700 	strd	r6, r7, [r5]
      switch (WaveType) {
 800197a:	4b43      	ldr	r3, [pc, #268]	@ (8001a88 <main+0x2e8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b03      	cmp	r3, #3
 8001980:	f200 80d5 	bhi.w	8001b2e <main+0x38e>
 8001984:	a201      	add	r2, pc, #4	@ (adr r2, 800198c <main+0x1ec>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080018c3 	.word	0x080018c3
 8001990:	0800199d 	.word	0x0800199d
 8001994:	08001a05 	.word	0x08001a05
 8001998:	08001ac9 	.word	0x08001ac9
        if(fChrono_IsTimeout(&FreqChrono)) {
 800199c:	4847      	ldr	r0, [pc, #284]	@ (8001abc <main+0x31c>)
 800199e:	f004 ff8d 	bl	80068bc <fChrono_IsTimeout>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d092      	beq.n	80018cc <main+0x12c>
          timeUs_t interval = (timeUs_t)((1.0 / Frequency) * 1000000) / 2;
 80019a6:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <main+0x2ec>)
 80019a8:	e9d3 6700 	ldrd	r6, r7, [r3]
          if(Frequency == 0.0) {
 80019ac:	2200      	movs	r2, #0
 80019ae:	2300      	movs	r3, #0
 80019b0:	4630      	mov	r0, r6
 80019b2:	4639      	mov	r1, r7
 80019b4:	f7fe fff8 	bl	80009a8 <__aeabi_dcmpeq>
 80019b8:	bb10      	cbnz	r0, 8001a00 <main+0x260>
          timeUs_t interval = (timeUs_t)((1.0 / Frequency) * 1000000) / 2;
 80019ba:	4632      	mov	r2, r6
 80019bc:	463b      	mov	r3, r7
 80019be:	2000      	movs	r0, #0
 80019c0:	493f      	ldr	r1, [pc, #252]	@ (8001ac0 <main+0x320>)
 80019c2:	f7fe feb3 	bl	800072c <__aeabi_ddiv>
 80019c6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001a40 <main+0x2a0>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fd84 	bl	80004d8 <__aeabi_dmul>
 80019d0:	f7ff f832 	bl	8000a38 <__aeabi_d2uiz>
 80019d4:	0841      	lsrs	r1, r0, #1
          fChrono_StartTimeoutUs(&FreqChrono, interval);
 80019d6:	4839      	ldr	r0, [pc, #228]	@ (8001abc <main+0x31c>)
 80019d8:	f004 ff5e 	bl	8006898 <fChrono_StartTimeoutUs>
          pulseState = !pulseState;
 80019dc:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <main+0x324>)
 80019de:	7818      	ldrb	r0, [r3, #0]
 80019e0:	f080 0001 	eor.w	r0, r0, #1
 80019e4:	7018      	strb	r0, [r3, #0]
          Output = Amplitude * (double)pulseState;
 80019e6:	f7fe fcfd 	bl	80003e4 <__aeabi_ui2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4928      	ldr	r1, [pc, #160]	@ (8001a90 <main+0x2f0>)
 80019f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019f4:	f7fe fd70 	bl	80004d8 <__aeabi_dmul>
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <main+0x2d0>)
 80019fa:	e9c3 0100 	strd	r0, r1, [r3]
 80019fe:	e765      	b.n	80018cc <main+0x12c>
            interval = 0;
 8001a00:	2100      	movs	r1, #0
 8001a02:	e7e8      	b.n	80019d6 <main+0x236>
        Output = Amplitude * fmod(t, (1.0 / Frequency));
 8001a04:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <main+0x2ec>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	492c      	ldr	r1, [pc, #176]	@ (8001ac0 <main+0x320>)
 8001a0e:	f7fe fe8d 	bl	800072c <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4630      	mov	r0, r6
 8001a18:	4639      	mov	r1, r7
 8001a1a:	f009 fbb9 	bl	800b190 <fmod>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	491b      	ldr	r1, [pc, #108]	@ (8001a90 <main+0x2f0>)
 8001a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a28:	f7fe fd56 	bl	80004d8 <__aeabi_dmul>
 8001a2c:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <main+0x2d0>)
 8001a2e:	e9c3 0100 	strd	r0, r1, [r3]
        break;
 8001a32:	e74b      	b.n	80018cc <main+0x12c>
 8001a34:	f3af 8000 	nop.w
 8001a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a3c:	3f50624d 	.word	0x3f50624d
 8001a40:	00000000 	.word	0x00000000
 8001a44:	412e8480 	.word	0x412e8480
 8001a48:	20000d28 	.word	0x20000d28
 8001a4c:	20000d70 	.word	0x20000d70
 8001a50:	08001599 	.word	0x08001599
 8001a54:	20000168 	.word	0x20000168
 8001a58:	20000378 	.word	0x20000378
 8001a5c:	0800b448 	.word	0x0800b448
 8001a60:	20000ca4 	.word	0x20000ca4
 8001a64:	0800b520 	.word	0x0800b520
 8001a68:	080016cd 	.word	0x080016cd
 8001a6c:	200000b8 	.word	0x200000b8
 8001a70:	20000d08 	.word	0x20000d08
 8001a74:	200000a0 	.word	0x200000a0
 8001a78:	20000070 	.word	0x20000070
 8001a7c:	20000088 	.word	0x20000088
 8001a80:	20000058 	.word	0x20000058
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000d20 	.word	0x20000d20
 8001a8c:	20000d18 	.word	0x20000d18
 8001a90:	20000d10 	.word	0x20000d10
 8001a94:	20000cf8 	.word	0x20000cf8
 8001a98:	20000cdc 	.word	0x20000cdc
 8001a9c:	20000ca0 	.word	0x20000ca0
 8001aa0:	20000c98 	.word	0x20000c98
 8001aa4:	20000c90 	.word	0x20000c90
 8001aa8:	20000cc0 	.word	0x20000cc0
 8001aac:	20000cc4 	.word	0x20000cc4
 8001ab0:	20000c8c 	.word	0x20000c8c
 8001ab4:	20000d00 	.word	0x20000d00
 8001ab8:	20000d04 	.word	0x20000d04
 8001abc:	20000cc8 	.word	0x20000cc8
 8001ac0:	3ff00000 	.word	0x3ff00000
 8001ac4:	20000ca1 	.word	0x20000ca1
        OmegaT = OMEGA * t;
 8001ac8:	a349      	add	r3, pc, #292	@ (adr r3, 8001bf0 <main+0x450>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	494c      	ldr	r1, [pc, #304]	@ (8001c00 <main+0x460>)
 8001ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad4:	f7fe fd00 	bl	80004d8 <__aeabi_dmul>
 8001ad8:	4632      	mov	r2, r6
 8001ada:	463b      	mov	r3, r7
 8001adc:	f7fe fcfc 	bl	80004d8 <__aeabi_dmul>
 8001ae0:	4606      	mov	r6, r0
 8001ae2:	460f      	mov	r7, r1
        if(OmegaT > (2.0 * (double)PI)) {
 8001ae4:	a342      	add	r3, pc, #264	@ (adr r3, 8001bf0 <main+0x450>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe ff85 	bl	80009f8 <__aeabi_dcmpgt>
 8001aee:	b140      	cbz	r0, 8001b02 <main+0x362>
          OmegaT = OmegaT - (2.0 * (double)PI);
 8001af0:	a33f      	add	r3, pc, #252	@ (adr r3, 8001bf0 <main+0x450>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	4630      	mov	r0, r6
 8001af8:	4639      	mov	r1, r7
 8001afa:	f7fe fb35 	bl	8000168 <__aeabi_dsub>
 8001afe:	4606      	mov	r6, r0
 8001b00:	460f      	mov	r7, r1
        OmegaT = OMEGA * t;
 8001b02:	4b40      	ldr	r3, [pc, #256]	@ (8001c04 <main+0x464>)
 8001b04:	e9c3 6700 	strd	r6, r7, [r3]
        Output = Amplitude * arm_sin_f32(OmegaT);
 8001b08:	4630      	mov	r0, r6
 8001b0a:	4639      	mov	r1, r7
 8001b0c:	f7fe ffb4 	bl	8000a78 <__aeabi_d2f>
 8001b10:	f000 fa5a 	bl	8001fc8 <arm_sin_f32>
 8001b14:	f7fe fc88 	bl	8000428 <__aeabi_f2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	493a      	ldr	r1, [pc, #232]	@ (8001c08 <main+0x468>)
 8001b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b22:	f7fe fcd9 	bl	80004d8 <__aeabi_dmul>
 8001b26:	4b39      	ldr	r3, [pc, #228]	@ (8001c0c <main+0x46c>)
 8001b28:	e9c3 0100 	strd	r0, r1, [r3]
        break;
 8001b2c:	e6ce      	b.n	80018cc <main+0x12c>
        Output = 0.0;
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <main+0x46c>)
 8001b30:	2000      	movs	r0, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	e9c3 0100 	strd	r0, r1, [r3]
        break;
 8001b38:	e6c8      	b.n	80018cc <main+0x12c>
        FARAABIN_SendEventTo_(&ExpBoardEvType, eWaveType, WaveType);
 8001b3a:	4835      	ldr	r0, [pc, #212]	@ (8001c10 <main+0x470>)
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	4b35      	ldr	r3, [pc, #212]	@ (8001c14 <main+0x474>)
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2100      	movs	r1, #0
 8001b44:	9100      	str	r1, [sp, #0]
 8001b46:	7883      	ldrb	r3, [r0, #2]
 8001b48:	f100 0210 	add.w	r2, r0, #16
 8001b4c:	f008 fc96 	bl	800a47c <fFaraabinLinkSerializer_SerializeEventEnumId>
        OldType = WaveType;
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <main+0x478>)
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <main+0x47c>)
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e6bf      	b.n	80018da <main+0x13a>
        FARAABIN_PrintfWarningTo_(&ExpBoardEvAmp, "Amplitude changed from %lf to %lf", OldAmp, Amplitude);
 8001b5a:	4831      	ldr	r0, [pc, #196]	@ (8001c20 <main+0x480>)
 8001b5c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001b60:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001b64:	4b2f      	ldr	r3, [pc, #188]	@ (8001c24 <main+0x484>)
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	7883      	ldrb	r3, [r0, #2]
 8001b72:	f100 0210 	add.w	r2, r0, #16
 8001b76:	2100      	movs	r1, #0
 8001b78:	f008 fc36 	bl	800a3e8 <fFaraabinLinkSerializer_SerializeEventPrintf>
        OldAmp = Amplitude;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <main+0x468>)
 8001b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <main+0x488>)
 8001b84:	e9c3 0100 	strd	r0, r1, [r3]
 8001b88:	e6b6      	b.n	80018f8 <main+0x158>
        FARAABIN_PrintfWarningTo_(&ExpBoardEvFreq, "Frequency changed from %lf to %lf", OldFreq, Frequency);
 8001b8a:	4828      	ldr	r0, [pc, #160]	@ (8001c2c <main+0x48c>)
 8001b8c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001b90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001b94:	4b26      	ldr	r3, [pc, #152]	@ (8001c30 <main+0x490>)
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	7883      	ldrb	r3, [r0, #2]
 8001ba2:	f100 0210 	add.w	r2, r0, #16
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f008 fc1e 	bl	800a3e8 <fFaraabinLinkSerializer_SerializeEventPrintf>
        OldFreq = Frequency;
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <main+0x460>)
 8001bae:	e9d3 6700 	ldrd	r6, r7, [r3]
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <main+0x494>)
 8001bb4:	e9c3 6700 	strd	r6, r7, [r3]
        if(Frequency == 0.0) {
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	4639      	mov	r1, r7
 8001bc0:	f7fe fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8001bc4:	b988      	cbnz	r0, 8001bea <main+0x44a>
        timeUs_t interval = (timeUs_t)((1.0 / Frequency) * 1000000) / 2;
 8001bc6:	4632      	mov	r2, r6
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2000      	movs	r0, #0
 8001bcc:	491a      	ldr	r1, [pc, #104]	@ (8001c38 <main+0x498>)
 8001bce:	f7fe fdad 	bl	800072c <__aeabi_ddiv>
 8001bd2:	a309      	add	r3, pc, #36	@ (adr r3, 8001bf8 <main+0x458>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fc7e 	bl	80004d8 <__aeabi_dmul>
 8001bdc:	f7fe ff2c 	bl	8000a38 <__aeabi_d2uiz>
 8001be0:	0841      	lsrs	r1, r0, #1
        fChrono_StartTimeoutUs(&FreqChrono, interval);
 8001be2:	4816      	ldr	r0, [pc, #88]	@ (8001c3c <main+0x49c>)
 8001be4:	f004 fe58 	bl	8006898 <fChrono_StartTimeoutUs>
 8001be8:	e695      	b.n	8001916 <main+0x176>
          interval = 0;
 8001bea:	2100      	movs	r1, #0
 8001bec:	e7f9      	b.n	8001be2 <main+0x442>
 8001bee:	bf00      	nop
 8001bf0:	60000000 	.word	0x60000000
 8001bf4:	401921fb 	.word	0x401921fb
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	412e8480 	.word	0x412e8480
 8001c00:	20000d18 	.word	0x20000d18
 8001c04:	20000cf0 	.word	0x20000cf0
 8001c08:	20000d10 	.word	0x20000d10
 8001c0c:	20000d08 	.word	0x20000d08
 8001c10:	200000a0 	.word	0x200000a0
 8001c14:	20000ca4 	.word	0x20000ca4
 8001c18:	20000d20 	.word	0x20000d20
 8001c1c:	20000ca0 	.word	0x20000ca0
 8001c20:	20000070 	.word	0x20000070
 8001c24:	0800b52c 	.word	0x0800b52c
 8001c28:	20000c98 	.word	0x20000c98
 8001c2c:	20000088 	.word	0x20000088
 8001c30:	0800b550 	.word	0x0800b550
 8001c34:	20000c90 	.word	0x20000c90
 8001c38:	3ff00000 	.word	0x3ff00000
 8001c3c:	20000cc8 	.word	0x20000cc8

08001c40 <Error_Handler>:
 8001c40:	b672      	cpsid	i
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <Error_Handler+0x2>

08001c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c46:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <HAL_MspInit+0x38>)
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	619a      	str	r2, [r3, #24]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	f002 0201 	and.w	r2, r2, #1
 8001c56:	9200      	str	r2, [sp, #0]
 8001c58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c60:	61da      	str	r2, [r3, #28]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_MspInit+0x3c>)
 8001c6e:	6853      	ldr	r3, [r2, #4]
 8001c70:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c76:	b002      	add	sp, #8
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010000 	.word	0x40010000

08001c84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	e7fe      	b.n	8001c84 <NMI_Handler>

08001c86 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler>

08001c88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler>

08001c8a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <BusFault_Handler>

08001c8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler>

08001c8e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	4770      	bx	lr

08001c92 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f000 fa29 	bl	80020ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bd08      	pop	{r3, pc}

08001c9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c9e:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <DMA1_Channel4_IRQHandler+0xc>)
 8001ca0:	f000 fb44 	bl	800232c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ca4:	bd08      	pop	{r3, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000db8 	.word	0x20000db8

08001cac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001cac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cae:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <DMA1_Channel5_IRQHandler+0xc>)
 8001cb0:	f000 fb3c 	bl	800232c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cb4:	bd08      	pop	{r3, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000dfc 	.word	0x20000dfc

08001cbc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001cbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cbe:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001cc0:	f000 fdc6 	bl	8002850 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001cc4:	bd08      	pop	{r3, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20002374 	.word	0x20002374

08001ccc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ccc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cce:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <USART1_IRQHandler+0xc>)
 8001cd0:	f002 fc66 	bl	80045a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cd4:	bd08      	pop	{r3, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000e40 	.word	0x20000e40

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b508      	push	{r3, lr}
 8001cde:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <_sbrk+0x38>)
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	b152      	cbz	r2, 8001cfc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8001d14 <_sbrk+0x38>)
 8001ce8:	6810      	ldr	r0, [r2, #0]
 8001cea:	4403      	add	r3, r0
 8001cec:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <_sbrk+0x3c>)
 8001cee:	490b      	ldr	r1, [pc, #44]	@ (8001d1c <_sbrk+0x40>)
 8001cf0:	1a52      	subs	r2, r2, r1
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d806      	bhi.n	8001d04 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001cf6:	4a07      	ldr	r2, [pc, #28]	@ (8001d14 <_sbrk+0x38>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001cfa:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001cfc:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <_sbrk+0x38>)
 8001cfe:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <_sbrk+0x44>)
 8001d00:	6011      	str	r1, [r2, #0]
 8001d02:	e7f0      	b.n	8001ce6 <_sbrk+0xa>
    errno = ENOMEM;
 8001d04:	f008 fe7a 	bl	800a9fc <__errno>
 8001d08:	230c      	movs	r3, #12
 8001d0a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	e7f3      	b.n	8001cfa <_sbrk+0x1e>
 8001d12:	bf00      	nop
 8001d14:	20000d24 	.word	0x20000d24
 8001d18:	20005000 	.word	0x20005000
 8001d1c:	00000500 	.word	0x00000500
 8001d20:	200035e0 	.word	0x200035e0

08001d24 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	4770      	bx	lr
	...

08001d28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d28:	b500      	push	{lr}
 8001d2a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	9303      	str	r3, [sp, #12]
 8001d32:	9304      	str	r3, [sp, #16]
 8001d34:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d3a:	4816      	ldr	r0, [pc, #88]	@ (8001d94 <MX_TIM1_Init+0x6c>)
 8001d3c:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <MX_TIM1_Init+0x70>)
 8001d3e:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 47;
 8001d40:	222f      	movs	r2, #47	@ 0x2f
 8001d42:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8001d46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d4e:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d52:	f002 f947 	bl	8003fe4 <HAL_TIM_Base_Init>
 8001d56:	b998      	cbnz	r0, 8001d80 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d5c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d5e:	a902      	add	r1, sp, #8
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_TIM1_Init+0x6c>)
 8001d62:	f002 f977 	bl	8004054 <HAL_TIM_ConfigClockSource>
 8001d66:	b970      	cbnz	r0, 8001d86 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d70:	4669      	mov	r1, sp
 8001d72:	4808      	ldr	r0, [pc, #32]	@ (8001d94 <MX_TIM1_Init+0x6c>)
 8001d74:	f002 fac0 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	b940      	cbnz	r0, 8001d8c <MX_TIM1_Init+0x64>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d7a:	b007      	add	sp, #28
 8001d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d80:	f7ff ff5e 	bl	8001c40 <Error_Handler>
 8001d84:	e7e8      	b.n	8001d58 <MX_TIM1_Init+0x30>
    Error_Handler();
 8001d86:	f7ff ff5b 	bl	8001c40 <Error_Handler>
 8001d8a:	e7ed      	b.n	8001d68 <MX_TIM1_Init+0x40>
    Error_Handler();
 8001d8c:	f7ff ff58 	bl	8001c40 <Error_Handler>
}
 8001d90:	e7f3      	b.n	8001d7a <MX_TIM1_Init+0x52>
 8001d92:	bf00      	nop
 8001d94:	20000d70 	.word	0x20000d70
 8001d98:	40012c00 	.word	0x40012c00

08001d9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d9c:	b500      	push	{lr}
 8001d9e:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001da0:	2300      	movs	r3, #0
 8001da2:	9303      	str	r3, [sp, #12]
 8001da4:	9304      	str	r3, [sp, #16]
 8001da6:	9305      	str	r3, [sp, #20]
 8001da8:	9306      	str	r3, [sp, #24]
 8001daa:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db0:	4815      	ldr	r0, [pc, #84]	@ (8001e08 <MX_TIM2_Init+0x6c>)
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001db8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8001dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc6:	f002 f90d 	bl	8003fe4 <HAL_TIM_Base_Init>
 8001dca:	b998      	cbnz	r0, 8001df4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001dd4:	a903      	add	r1, sp, #12
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <MX_TIM2_Init+0x6c>)
 8001dd8:	f002 fa64 	bl	80042a4 <HAL_TIM_SlaveConfigSynchro>
 8001ddc:	b968      	cbnz	r0, 8001dfa <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de4:	a901      	add	r1, sp, #4
 8001de6:	4808      	ldr	r0, [pc, #32]	@ (8001e08 <MX_TIM2_Init+0x6c>)
 8001de8:	f002 fa86 	bl	80042f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dec:	b940      	cbnz	r0, 8001e00 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dee:	b009      	add	sp, #36	@ 0x24
 8001df0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001df4:	f7ff ff24 	bl	8001c40 <Error_Handler>
 8001df8:	e7e8      	b.n	8001dcc <MX_TIM2_Init+0x30>
    Error_Handler();
 8001dfa:	f7ff ff21 	bl	8001c40 <Error_Handler>
 8001dfe:	e7ee      	b.n	8001dde <MX_TIM2_Init+0x42>
    Error_Handler();
 8001e00:	f7ff ff1e 	bl	8001c40 <Error_Handler>
}
 8001e04:	e7f3      	b.n	8001dee <MX_TIM2_Init+0x52>
 8001e06:	bf00      	nop
 8001e08:	20000d28 	.word	0x20000d28

08001e0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e0c:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM1)
 8001e0e:	6803      	ldr	r3, [r0, #0]
 8001e10:	4a0f      	ldr	r2, [pc, #60]	@ (8001e50 <HAL_TIM_Base_MspInit+0x44>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8001e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1a:	d00c      	beq.n	8001e36 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e1c:	b002      	add	sp, #8
 8001e1e:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_TIM_Base_MspInit+0x48>)
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	9b00      	ldr	r3, [sp, #0]
 8001e34:	e7f2      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e36:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	61da      	str	r2, [r3, #28]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	9b01      	ldr	r3, [sp, #4]
}
 8001e4c:	e7e6      	b.n	8001e1c <HAL_TIM_Base_MspInit+0x10>
 8001e4e:	bf00      	nop
 8001e50:	40012c00 	.word	0x40012c00
 8001e54:	40021000 	.word	0x40021000

08001e58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e58:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5a:	480a      	ldr	r0, [pc, #40]	@ (8001e84 <MX_USART1_UART_Init+0x2c>)
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <MX_USART1_UART_Init+0x30>)
 8001e5e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001e60:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001e64:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	2300      	movs	r3, #0
 8001e68:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e6a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e6e:	220c      	movs	r2, #12
 8001e70:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e76:	f002 fae7 	bl	8004448 <HAL_UART_Init>
 8001e7a:	b900      	cbnz	r0, 8001e7e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e7e:	f7ff fedf 	bl	8001c40 <Error_Handler>
}
 8001e82:	e7fb      	b.n	8001e7c <MX_USART1_UART_Init+0x24>
 8001e84:	20000e40 	.word	0x20000e40
 8001e88:	40013800 	.word	0x40013800

08001e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	2300      	movs	r3, #0
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	9303      	str	r3, [sp, #12]
 8001e96:	9304      	str	r3, [sp, #16]
 8001e98:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8001e9a:	6802      	ldr	r2, [r0, #0]
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_UART_MspInit+0xd8>)
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ea2:	b006      	add	sp, #24
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
 8001ea6:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea8:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001eb2:	619a      	str	r2, [r3, #24]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001eba:	9200      	str	r2, [sp, #0]
 8001ebc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	f042 0204 	orr.w	r2, r2, #4
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	4e22      	ldr	r6, [pc, #136]	@ (8001f68 <HAL_UART_MspInit+0xdc>)
 8001ee0:	a902      	add	r1, sp, #8
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f000 fac2 	bl	800246c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ee8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eee:	2500      	movs	r5, #0
 8001ef0:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	a902      	add	r1, sp, #8
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f000 fab8 	bl	800246c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001efc:	481b      	ldr	r0, [pc, #108]	@ (8001f6c <HAL_UART_MspInit+0xe0>)
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <HAL_UART_MspInit+0xe4>)
 8001f00:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f02:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f0a:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0c:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f0e:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f10:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f12:	f000 f967 	bl	80021e4 <HAL_DMA_Init>
 8001f16:	b9f0      	cbnz	r0, 8001f56 <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_UART_MspInit+0xe0>)
 8001f1a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001f1c:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001f1e:	4815      	ldr	r0, [pc, #84]	@ (8001f74 <HAL_UART_MspInit+0xe8>)
 8001f20:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_UART_MspInit+0xec>)
 8001f22:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f24:	2310      	movs	r3, #16
 8001f26:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f30:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f32:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f34:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f36:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f38:	f000 f954 	bl	80021e4 <HAL_DMA_Init>
 8001f3c:	b970      	cbnz	r0, 8001f5c <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_UART_MspInit+0xe8>)
 8001f40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001f42:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	4611      	mov	r1, r2
 8001f48:	2025      	movs	r0, #37	@ 0x25
 8001f4a:	f000 f8f3 	bl	8002134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f4e:	2025      	movs	r0, #37	@ 0x25
 8001f50:	f000 f926 	bl	80021a0 <HAL_NVIC_EnableIRQ>
}
 8001f54:	e7a5      	b.n	8001ea2 <HAL_UART_MspInit+0x16>
      Error_Handler();
 8001f56:	f7ff fe73 	bl	8001c40 <Error_Handler>
 8001f5a:	e7dd      	b.n	8001f18 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8001f5c:	f7ff fe70 	bl	8001c40 <Error_Handler>
 8001f60:	e7ed      	b.n	8001f3e <HAL_UART_MspInit+0xb2>
 8001f62:	bf00      	nop
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	20000dfc 	.word	0x20000dfc
 8001f70:	40020058 	.word	0x40020058
 8001f74:	20000db8 	.word	0x20000db8
 8001f78:	40020044 	.word	0x40020044

08001f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f7c:	f7ff fed2 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480b      	ldr	r0, [pc, #44]	@ (8001fb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f82:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f84:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f98:	4c09      	ldr	r4, [pc, #36]	@ (8001fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f008 fd2f 	bl	800aa08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001faa:	f7ff fbf9 	bl	80017a0 <main>
  bx lr
 8001fae:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	20000498 	.word	0x20000498
  ldr r2, =_sidata
 8001fb8:	0800bfd8 	.word	0x0800bfd8
  ldr r2, =_sbss
 8001fbc:	20000498 	.word	0x20000498
  ldr r4, =_ebss
 8001fc0:	200035e0 	.word	0x200035e0

08001fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC1_2_IRQHandler>
	...

08001fc8 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	4604      	mov	r4, r0
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f7ff f84f 	bl	8001070 <__aeabi_fcmplt>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d13b      	bne.n	800204e <arm_sin_f32+0x86>
     return x;
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8001fd6:	4926      	ldr	r1, [pc, #152]	@ (8002070 <arm_sin_f32+0xa8>)
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7fe feab 	bl	8000d34 <__aeabi_fmul>
 8001fde:	4606      	mov	r6, r0

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8001fe0:	f7ff f86e 	bl	80010c0 <__aeabi_f2iz>
 8001fe4:	4605      	mov	r5, r0

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff f841 	bl	8001070 <__aeabi_fcmplt>
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d13a      	bne.n	8002068 <arm_sin_f32+0xa0>
  {
    n--;
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f7fe fe4a 	bl	8000c8c <__aeabi_i2f>
 8001ff8:	4601      	mov	r1, r0
 8001ffa:	4630      	mov	r0, r6
 8001ffc:	f7fe fd90 	bl	8000b20 <__aeabi_fsub>

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8002000:	f04f 4188 	mov.w	r1, #1140850688	@ 0x44000000
 8002004:	f7fe fe96 	bl	8000d34 <__aeabi_fmul>
 8002008:	4605      	mov	r5, r0

  index = ((uint16_t)findex) & 0x1ff;
 800200a:	f7ff f87f 	bl	800110c <__aeabi_f2uiz>
 800200e:	f3c0 0408 	ubfx	r4, r0, #0, #9

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8002012:	4620      	mov	r0, r4
 8002014:	f7fe fe36 	bl	8000c84 <__aeabi_ui2f>
 8002018:	4601      	mov	r1, r0
 800201a:	4628      	mov	r0, r5
 800201c:	f7fe fd80 	bl	8000b20 <__aeabi_fsub>
 8002020:	4605      	mov	r5, r0
  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 8002022:	4601      	mov	r1, r0
 8002024:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002028:	f7fe fd7a 	bl	8000b20 <__aeabi_fsub>
  a = sinTable_f32[index];
 800202c:	4f11      	ldr	r7, [pc, #68]	@ (8002074 <arm_sin_f32+0xac>)
  sinVal = (1.0f-fract)*a + fract*b;
 800202e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8002032:	f7fe fe7f 	bl	8000d34 <__aeabi_fmul>
 8002036:	4606      	mov	r6, r0
  b = sinTable_f32[index+1];
 8002038:	3401      	adds	r4, #1
  sinVal = (1.0f-fract)*a + fract*b;
 800203a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800203e:	4628      	mov	r0, r5
 8002040:	f7fe fe78 	bl	8000d34 <__aeabi_fmul>
 8002044:	4601      	mov	r1, r0
 8002046:	4630      	mov	r0, r6
 8002048:	f7fe fd6c 	bl	8000b24 <__addsf3>

  /* Return the output value */
  return (sinVal);
}
 800204c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 800204e:	490a      	ldr	r1, [pc, #40]	@ (8002078 <arm_sin_f32+0xb0>)
 8002050:	4620      	mov	r0, r4
 8002052:	f7ff f821 	bl	8001098 <__aeabi_fcmpge>
 8002056:	b948      	cbnz	r0, 800206c <arm_sin_f32+0xa4>
  in = x * 0.159154943092f;
 8002058:	4905      	ldr	r1, [pc, #20]	@ (8002070 <arm_sin_f32+0xa8>)
 800205a:	4620      	mov	r0, r4
 800205c:	f7fe fe6a 	bl	8000d34 <__aeabi_fmul>
 8002060:	4606      	mov	r6, r0
  n = (int32_t) in;
 8002062:	f7ff f82d 	bl	80010c0 <__aeabi_f2iz>
 8002066:	4605      	mov	r5, r0
    n--;
 8002068:	3d01      	subs	r5, #1
 800206a:	e7c2      	b.n	8001ff2 <arm_sin_f32+0x2a>
     return x;
 800206c:	4620      	mov	r0, r4
 800206e:	e7ed      	b.n	800204c <arm_sin_f32+0x84>
 8002070:	3e22f983 	.word	0x3e22f983
 8002074:	0800b5f0 	.word	0x0800b5f0
 8002078:	b44c02cd 	.word	0xb44c02cd

0800207c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800207c:	b510      	push	{r4, lr}
 800207e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_InitTick+0x40>)
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002088:	fbb3 f3f2 	udiv	r3, r3, r2
 800208c:	4a0c      	ldr	r2, [pc, #48]	@ (80020c0 <HAL_InitTick+0x44>)
 800208e:	6810      	ldr	r0, [r2, #0]
 8002090:	fbb0 f0f3 	udiv	r0, r0, r3
 8002094:	f000 f892 	bl	80021bc <HAL_SYSTICK_Config>
 8002098:	b968      	cbnz	r0, 80020b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	2c0f      	cmp	r4, #15
 800209c:	d901      	bls.n	80020a2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800209e:	2001      	movs	r0, #1
 80020a0:	e00a      	b.n	80020b8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a2:	2200      	movs	r2, #0
 80020a4:	4621      	mov	r1, r4
 80020a6:	f04f 30ff 	mov.w	r0, #4294967295
 80020aa:	f000 f843 	bl	8002134 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_InitTick+0x48>)
 80020b0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2000      	movs	r0, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80020b6:	2001      	movs	r0, #1
}
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	bf00      	nop
 80020bc:	20000184 	.word	0x20000184
 80020c0:	20000180 	.word	0x20000180
 80020c4:	20000188 	.word	0x20000188

080020c8 <HAL_Init>:
{
 80020c8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ca:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <HAL_Init+0x20>)
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f043 0310 	orr.w	r3, r3, #16
 80020d2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 f81b 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	200f      	movs	r0, #15
 80020dc:	f7ff ffce 	bl	800207c <HAL_InitTick>
  HAL_MspInit();
 80020e0:	f7ff fdb0 	bl	8001c44 <HAL_MspInit>
}
 80020e4:	2000      	movs	r0, #0
 80020e6:	bd08      	pop	{r3, pc}
 80020e8:	40022000 	.word	0x40022000

080020ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020ec:	4a03      	ldr	r2, [pc, #12]	@ (80020fc <HAL_IncTick+0x10>)
 80020ee:	6811      	ldr	r1, [r2, #0]
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_IncTick+0x14>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	440b      	add	r3, r1
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000e88 	.word	0x20000e88
 8002100:	20000184 	.word	0x20000184

08002104 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002104:	4b01      	ldr	r3, [pc, #4]	@ (800210c <HAL_GetTick+0x8>)
 8002106:	6818      	ldr	r0, [r3, #0]
}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000e88 	.word	0x20000e88

08002110 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4907      	ldr	r1, [pc, #28]	@ (8002130 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002112:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002114:	0203      	lsls	r3, r0, #8
 8002116:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800211e:	0412      	lsls	r2, r2, #16
 8002120:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800212c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002134:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002136:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <HAL_NVIC_SetPriority+0x64>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213e:	f1c3 0c07 	rsb	ip, r3, #7
 8002142:	f1bc 0f04 	cmp.w	ip, #4
 8002146:	bf28      	it	cs
 8002148:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214c:	f103 0e04 	add.w	lr, r3, #4
 8002150:	f1be 0f06 	cmp.w	lr, #6
 8002154:	bf8c      	ite	hi
 8002156:	3b03      	subhi	r3, #3
 8002158:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215a:	f04f 3eff 	mov.w	lr, #4294967295
 800215e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002162:	ea21 010c 	bic.w	r1, r1, ip
 8002166:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	fa0e fe03 	lsl.w	lr, lr, r3
 800216c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002172:	2800      	cmp	r0, #0
 8002174:	db09      	blt.n	800218a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	0109      	lsls	r1, r1, #4
 8002178:	b2c9      	uxtb	r1, r1
 800217a:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800217e:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002182:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002186:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	f000 000f 	and.w	r0, r0, #15
 800218e:	0109      	lsls	r1, r1, #4
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	4b02      	ldr	r3, [pc, #8]	@ (800219c <HAL_NVIC_SetPriority+0x68>)
 8002194:	5419      	strb	r1, [r3, r0]
 8002196:	e7f6      	b.n	8002186 <HAL_NVIC_SetPriority+0x52>
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	e000ed14 	.word	0xe000ed14

080021a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021a0:	2800      	cmp	r0, #0
 80021a2:	db07      	blt.n	80021b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a4:	0941      	lsrs	r1, r0, #5
 80021a6:	f000 001f 	and.w	r0, r0, #31
 80021aa:	2301      	movs	r3, #1
 80021ac:	4083      	lsls	r3, r0
 80021ae:	4a02      	ldr	r2, [pc, #8]	@ (80021b8 <HAL_NVIC_EnableIRQ+0x18>)
 80021b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021bc:	3801      	subs	r0, #1
 80021be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80021c2:	d20b      	bcs.n	80021dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80021c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <HAL_SYSTICK_Config+0x24>)
 80021cc:	21f0      	movs	r1, #240	@ 0xf0
 80021ce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d2:	2000      	movs	r0, #0
 80021d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	2207      	movs	r2, #7
 80021d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021e4:	b360      	cbz	r0, 8002240 <HAL_DMA_Init+0x5c>
{
 80021e6:	b410      	push	{r4}
 80021e8:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021ea:	6801      	ldr	r1, [r0, #0]
 80021ec:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_DMA_Init+0x60>)
 80021ee:	440b      	add	r3, r1
 80021f0:	4815      	ldr	r0, [pc, #84]	@ (8002248 <HAL_DMA_Init+0x64>)
 80021f2:	fba0 0303 	umull	r0, r3, r0, r3
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80021fc:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_DMA_Init+0x68>)
 80021fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002206:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002208:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 800220c:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002210:	6853      	ldr	r3, [r2, #4]
 8002212:	6894      	ldr	r4, [r2, #8]
 8002214:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	68d4      	ldr	r4, [r2, #12]
 8002218:	4323      	orrs	r3, r4
 800221a:	6914      	ldr	r4, [r2, #16]
 800221c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221e:	6954      	ldr	r4, [r2, #20]
 8002220:	4323      	orrs	r3, r4
 8002222:	6994      	ldr	r4, [r2, #24]
 8002224:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002226:	69d4      	ldr	r4, [r2, #28]
 8002228:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800222a:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800222c:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222e:	2000      	movs	r0, #0
 8002230:	6390      	str	r0, [r2, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002232:	2301      	movs	r3, #1
 8002234:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002238:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 800223c:	bc10      	pop	{r4}
 800223e:	4770      	bx	lr
    return HAL_ERROR;
 8002240:	2001      	movs	r0, #1
}
 8002242:	4770      	bx	lr
 8002244:	bffdfff8 	.word	0xbffdfff8
 8002248:	cccccccd 	.word	0xcccccccd
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002250:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002252:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	2a02      	cmp	r2, #2
 800225a:	d006      	beq.n	800226a <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	2204      	movs	r2, #4
 800225e:	6382      	str	r2, [r0, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8002260:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8002268:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226a:	6801      	ldr	r1, [r0, #0]
 800226c:	680a      	ldr	r2, [r1, #0]
 800226e:	f022 020e 	bic.w	r2, r2, #14
 8002272:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002274:	6801      	ldr	r1, [r0, #0]
 8002276:	680a      	ldr	r2, [r1, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800227e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8002280:	2101      	movs	r1, #1
 8002282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800228a:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 800228e:	2000      	movs	r0, #0
 8002290:	e7e7      	b.n	8002262 <HAL_DMA_Abort+0x12>
	...

08002294 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002294:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002296:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a0:	2304      	movs	r3, #4
 80022a2:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 80022a4:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80022a6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a8:	6802      	ldr	r2, [r0, #0]
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	f023 030e 	bic.w	r3, r3, #14
 80022b0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80022b2:	6802      	ldr	r2, [r0, #0]
 80022b4:	6813      	ldr	r3, [r2, #0]
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022bc:	6803      	ldr	r3, [r0, #0]
 80022be:	4a19      	ldr	r2, [pc, #100]	@ (8002324 <HAL_DMA_Abort_IT+0x90>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_DMA_Abort_IT+0x58>
 80022c4:	3214      	adds	r2, #20
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01e      	beq.n	8002308 <HAL_DMA_Abort_IT+0x74>
 80022ca:	3214      	adds	r2, #20
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_Abort_IT+0x78>
 80022d0:	3214      	adds	r2, #20
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01d      	beq.n	8002312 <HAL_DMA_Abort_IT+0x7e>
 80022d6:	3214      	adds	r2, #20
 80022d8:	4293      	cmp	r3, r2
 80022da:	d01d      	beq.n	8002318 <HAL_DMA_Abort_IT+0x84>
 80022dc:	3214      	adds	r2, #20
 80022de:	4293      	cmp	r3, r2
 80022e0:	bf14      	ite	ne
 80022e2:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 80022e6:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 80022ea:	e000      	b.n	80022ee <HAL_DMA_Abort_IT+0x5a>
 80022ec:	2301      	movs	r3, #1
 80022ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002328 <HAL_DMA_Abort_IT+0x94>)
 80022f0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80022f8:	2300      	movs	r3, #0
 80022fa:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80022fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002300:	b16b      	cbz	r3, 800231e <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002302:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002304:	2000      	movs	r0, #0
 8002306:	e7ce      	b.n	80022a6 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002308:	2310      	movs	r3, #16
 800230a:	e7f0      	b.n	80022ee <HAL_DMA_Abort_IT+0x5a>
 800230c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002310:	e7ed      	b.n	80022ee <HAL_DMA_Abort_IT+0x5a>
 8002312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002316:	e7ea      	b.n	80022ee <HAL_DMA_Abort_IT+0x5a>
 8002318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800231c:	e7e7      	b.n	80022ee <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2000      	movs	r0, #0
 8002320:	e7c1      	b.n	80022a6 <HAL_DMA_Abort_IT+0x12>
 8002322:	bf00      	nop
 8002324:	40020008 	.word	0x40020008
 8002328:	40020000 	.word	0x40020000

0800232c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800232c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800232e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002330:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002332:	6804      	ldr	r4, [r0, #0]
 8002334:	6825      	ldr	r5, [r4, #0]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002336:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002338:	2304      	movs	r3, #4
 800233a:	408b      	lsls	r3, r1
 800233c:	4213      	tst	r3, r2
 800233e:	d034      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7e>
 8002340:	f015 0f04 	tst.w	r5, #4
 8002344:	d031      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7e>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f013 0f20 	tst.w	r3, #32
 800234c:	d103      	bne.n	8002356 <HAL_DMA_IRQHandler+0x2a>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6023      	str	r3, [r4, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	4a42      	ldr	r2, [pc, #264]	@ (8002464 <HAL_DMA_IRQHandler+0x138>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_DMA_IRQHandler+0x5a>
 800235e:	3214      	adds	r2, #20
 8002360:	4293      	cmp	r3, r2
 8002362:	d017      	beq.n	8002394 <HAL_DMA_IRQHandler+0x68>
 8002364:	3214      	adds	r2, #20
 8002366:	4293      	cmp	r3, r2
 8002368:	d016      	beq.n	8002398 <HAL_DMA_IRQHandler+0x6c>
 800236a:	3214      	adds	r2, #20
 800236c:	4293      	cmp	r3, r2
 800236e:	d016      	beq.n	800239e <HAL_DMA_IRQHandler+0x72>
 8002370:	3214      	adds	r2, #20
 8002372:	4293      	cmp	r3, r2
 8002374:	d016      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x78>
 8002376:	3214      	adds	r2, #20
 8002378:	4293      	cmp	r3, r2
 800237a:	bf14      	ite	ne
 800237c:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8002380:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8002384:	e000      	b.n	8002388 <HAL_DMA_IRQHandler+0x5c>
 8002386:	2304      	movs	r3, #4
 8002388:	4a37      	ldr	r2, [pc, #220]	@ (8002468 <HAL_DMA_IRQHandler+0x13c>)
 800238a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800238c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800238e:	b103      	cbz	r3, 8002392 <HAL_DMA_IRQHandler+0x66>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002390:	4798      	blx	r3
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8002392:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002394:	2340      	movs	r3, #64	@ 0x40
 8002396:	e7f7      	b.n	8002388 <HAL_DMA_IRQHandler+0x5c>
 8002398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800239c:	e7f4      	b.n	8002388 <HAL_DMA_IRQHandler+0x5c>
 800239e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023a2:	e7f1      	b.n	8002388 <HAL_DMA_IRQHandler+0x5c>
 80023a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80023a8:	e7ee      	b.n	8002388 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023aa:	2302      	movs	r3, #2
 80023ac:	408b      	lsls	r3, r1
 80023ae:	4213      	tst	r3, r2
 80023b0:	d03b      	beq.n	800242a <HAL_DMA_IRQHandler+0xfe>
 80023b2:	f015 0f02 	tst.w	r5, #2
 80023b6:	d038      	beq.n	800242a <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	f013 0f20 	tst.w	r3, #32
 80023be:	d106      	bne.n	80023ce <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f023 030a 	bic.w	r3, r3, #10
 80023c6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023ce:	6803      	ldr	r3, [r0, #0]
 80023d0:	4a24      	ldr	r2, [pc, #144]	@ (8002464 <HAL_DMA_IRQHandler+0x138>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_DMA_IRQHandler+0xd2>
 80023d6:	3214      	adds	r2, #20
 80023d8:	4293      	cmp	r3, r2
 80023da:	d01b      	beq.n	8002414 <HAL_DMA_IRQHandler+0xe8>
 80023dc:	3214      	adds	r2, #20
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01a      	beq.n	8002418 <HAL_DMA_IRQHandler+0xec>
 80023e2:	3214      	adds	r2, #20
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01a      	beq.n	800241e <HAL_DMA_IRQHandler+0xf2>
 80023e8:	3214      	adds	r2, #20
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01a      	beq.n	8002424 <HAL_DMA_IRQHandler+0xf8>
 80023ee:	3214      	adds	r2, #20
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf14      	ite	ne
 80023f4:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 80023f8:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 80023fc:	e000      	b.n	8002400 <HAL_DMA_IRQHandler+0xd4>
 80023fe:	2302      	movs	r3, #2
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_DMA_IRQHandler+0x13c>)
 8002402:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002404:	2300      	movs	r3, #0
 8002406:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800240a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0c0      	beq.n	8002392 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 8002410:	4798      	blx	r3
 8002412:	e7be      	b.n	8002392 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002414:	2320      	movs	r3, #32
 8002416:	e7f3      	b.n	8002400 <HAL_DMA_IRQHandler+0xd4>
 8002418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800241c:	e7f0      	b.n	8002400 <HAL_DMA_IRQHandler+0xd4>
 800241e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002422:	e7ed      	b.n	8002400 <HAL_DMA_IRQHandler+0xd4>
 8002424:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002428:	e7ea      	b.n	8002400 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800242a:	2308      	movs	r3, #8
 800242c:	408b      	lsls	r3, r1
 800242e:	4213      	tst	r3, r2
 8002430:	d0af      	beq.n	8002392 <HAL_DMA_IRQHandler+0x66>
 8002432:	f015 0f08 	tst.w	r5, #8
 8002436:	d0ac      	beq.n	8002392 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	f023 030e 	bic.w	r3, r3, #14
 800243e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002440:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002442:	2301      	movs	r3, #1
 8002444:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002446:	fa03 f202 	lsl.w	r2, r3, r2
 800244a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800244c:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800244e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002452:	2300      	movs	r3, #0
 8002454:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002458:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800245a:	2b00      	cmp	r3, #0
 800245c:	d099      	beq.n	8002392 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800245e:	4798      	blx	r3
  return;
 8002460:	e797      	b.n	8002392 <HAL_DMA_IRQHandler+0x66>
 8002462:	bf00      	nop
 8002464:	40020008 	.word	0x40020008
 8002468:	40020000 	.word	0x40020000

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002470:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002472:	f8d1 9000 	ldr.w	r9, [r1]
 8002476:	f1b9 0f00 	cmp.w	r9, #0
 800247a:	f000 8126 	beq.w	80026ca <HAL_GPIO_Init+0x25e>
 800247e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002480:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002482:	4d93      	ldr	r5, [pc, #588]	@ (80026d0 <HAL_GPIO_Init+0x264>)
      switch (GPIO_Init->Mode)
 8002484:	4c93      	ldr	r4, [pc, #588]	@ (80026d4 <HAL_GPIO_Init+0x268>)
 8002486:	4e94      	ldr	r6, [pc, #592]	@ (80026d8 <HAL_GPIO_Init+0x26c>)
 8002488:	f8df e250 	ldr.w	lr, [pc, #592]	@ 80026dc <HAL_GPIO_Init+0x270>
 800248c:	4694      	mov	ip, r2
 800248e:	e0be      	b.n	800260e <HAL_GPIO_Init+0x1a2>
 8002490:	45a1      	cmp	r9, r4
 8002492:	d00d      	beq.n	80024b0 <HAL_GPIO_Init+0x44>
 8002494:	d904      	bls.n	80024a0 <HAL_GPIO_Init+0x34>
 8002496:	45b1      	cmp	r9, r6
 8002498:	d00a      	beq.n	80024b0 <HAL_GPIO_Init+0x44>
 800249a:	45f1      	cmp	r9, lr
 800249c:	d008      	beq.n	80024b0 <HAL_GPIO_Init+0x44>
 800249e:	e01b      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
 80024a0:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 80026e0 <HAL_GPIO_Init+0x274>
 80024a4:	45d1      	cmp	r9, sl
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x44>
 80024a8:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 80024ac:	45d1      	cmp	r9, sl
 80024ae:	d10f      	bne.n	80024d0 <HAL_GPIO_Init+0x64>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024b0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80024b4:	f1bc 0f00 	cmp.w	ip, #0
 80024b8:	f000 80fb 	beq.w	80026b2 <HAL_GPIO_Init+0x246>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024bc:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 80024c0:	bf0c      	ite	eq
 80024c2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80024c6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ca:	f04f 0c08 	mov.w	ip, #8
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 80024d0:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 80024d4:	45d1      	cmp	r9, sl
 80024d6:	d0eb      	beq.n	80024b0 <HAL_GPIO_Init+0x44>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d8:	2fff      	cmp	r7, #255	@ 0xff
 80024da:	bf99      	ittee	ls
 80024dc:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024de:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024e0:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e4:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024e8:	f8d9 8000 	ldr.w	r8, [r9]
 80024ec:	f04f 0b0f 	mov.w	fp, #15
 80024f0:	fa0b fb0a 	lsl.w	fp, fp, sl
 80024f4:	ea28 080b 	bic.w	r8, r8, fp
 80024f8:	fa0c fa0a 	lsl.w	sl, ip, sl
 80024fc:	ea48 080a 	orr.w	r8, r8, sl
 8002500:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002504:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002508:	f018 5f80 	tst.w	r8, #268435456	@ 0x10000000
 800250c:	d078      	beq.n	8002600 <HAL_GPIO_Init+0x194>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800250e:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8002512:	f048 0801 	orr.w	r8, r8, #1
 8002516:	f8c5 8018 	str.w	r8, [r5, #24]
 800251a:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800251e:	f008 0801 	and.w	r8, r8, #1
 8002522:	f8cd 8004 	str.w	r8, [sp, #4]
 8002526:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800252a:	f023 0803 	bic.w	r8, r3, #3
 800252e:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 8002532:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 8002536:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800253a:	f003 0b03 	and.w	fp, r3, #3
 800253e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002542:	f04f 090f 	mov.w	r9, #15
 8002546:	fa09 f90b 	lsl.w	r9, r9, fp
 800254a:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800254e:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 80026e4 <HAL_GPIO_Init+0x278>
 8002552:	4548      	cmp	r0, r9
 8002554:	f000 80b0 	beq.w	80026b8 <HAL_GPIO_Init+0x24c>
 8002558:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 800255c:	4548      	cmp	r0, r9
 800255e:	f000 80ae 	beq.w	80026be <HAL_GPIO_Init+0x252>
 8002562:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8002566:	4548      	cmp	r0, r9
 8002568:	f000 80ac 	beq.w	80026c4 <HAL_GPIO_Init+0x258>
 800256c:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8002570:	4548      	cmp	r0, r9
 8002572:	bf14      	ite	ne
 8002574:	f04f 0904 	movne.w	r9, #4
 8002578:	f04f 0903 	moveq.w	r9, #3
 800257c:	fa09 f90b 	lsl.w	r9, r9, fp
 8002580:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002584:	f8c8 9008 	str.w	r9, [r8, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002588:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800258c:	f418 1f80 	tst.w	r8, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002590:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 80026e8 <HAL_GPIO_Init+0x27c>
 8002594:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002598:	bf14      	ite	ne
 800259a:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800259e:	ea28 0807 	biceq.w	r8, r8, r7
 80025a2:	f8c9 8008 	str.w	r8, [r9, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80025aa:	f418 1f00 	tst.w	r8, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ae:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80026e8 <HAL_GPIO_Init+0x27c>
 80025b2:	f8d9 800c 	ldr.w	r8, [r9, #12]
 80025b6:	bf14      	ite	ne
 80025b8:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025bc:	ea28 0807 	biceq.w	r8, r8, r7
 80025c0:	f8c9 800c 	str.w	r8, [r9, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80025c8:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025cc:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 80026e8 <HAL_GPIO_Init+0x27c>
 80025d0:	f8d9 8004 	ldr.w	r8, [r9, #4]
 80025d4:	bf14      	ite	ne
 80025d6:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025da:	ea28 0807 	biceq.w	r8, r8, r7
 80025de:	f8c9 8004 	str.w	r8, [r9, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80025e6:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025ea:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80026e8 <HAL_GPIO_Init+0x27c>
 80025ee:	f8d9 8000 	ldr.w	r8, [r9]
 80025f2:	bf14      	ite	ne
 80025f4:	ea48 0707 	orrne.w	r7, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025f8:	ea28 0707 	biceq.w	r7, r8, r7
 80025fc:	f8c9 7000 	str.w	r7, [r9]
        }
      }
    }

	position++;
 8002600:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	f8d1 9000 	ldr.w	r9, [r1]
 8002606:	3204      	adds	r2, #4
 8002608:	fa39 f703 	lsrs.w	r7, r9, r3
 800260c:	d05d      	beq.n	80026ca <HAL_GPIO_Init+0x25e>
    ioposition = (0x01uL << position);
 800260e:	f04f 0801 	mov.w	r8, #1
 8002612:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 800261a:	ea38 0909 	bics.w	r9, r8, r9
 800261e:	d1ef      	bne.n	8002600 <HAL_GPIO_Init+0x194>
      switch (GPIO_Init->Mode)
 8002620:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002624:	f1b9 0f12 	cmp.w	r9, #18
 8002628:	f63f af32 	bhi.w	8002490 <HAL_GPIO_Init+0x24>
 800262c:	f1b9 0f12 	cmp.w	r9, #18
 8002630:	f63f af52 	bhi.w	80024d8 <HAL_GPIO_Init+0x6c>
 8002634:	f20f 0a04 	addw	sl, pc, #4
 8002638:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 800263c:	080024b1 	.word	0x080024b1
 8002640:	08002689 	.word	0x08002689
 8002644:	08002699 	.word	0x08002699
 8002648:	080026ad 	.word	0x080026ad
 800264c:	080024d9 	.word	0x080024d9
 8002650:	080024d9 	.word	0x080024d9
 8002654:	080024d9 	.word	0x080024d9
 8002658:	080024d9 	.word	0x080024d9
 800265c:	080024d9 	.word	0x080024d9
 8002660:	080024d9 	.word	0x080024d9
 8002664:	080024d9 	.word	0x080024d9
 8002668:	080024d9 	.word	0x080024d9
 800266c:	080024d9 	.word	0x080024d9
 8002670:	080024d9 	.word	0x080024d9
 8002674:	080024d9 	.word	0x080024d9
 8002678:	080024d9 	.word	0x080024d9
 800267c:	080024d9 	.word	0x080024d9
 8002680:	0800268f 	.word	0x0800268f
 8002684:	080026a3 	.word	0x080026a3
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002688:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 800268c:	e724      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800268e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002692:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002696:	e71f      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002698:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800269c:	f10c 0c08 	add.w	ip, ip, #8
          break;
 80026a0:	e71a      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80026a6:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 80026aa:	e715      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 80026ac:	f04f 0c00 	mov.w	ip, #0
 80026b0:	e712      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026b2:	f04f 0c04 	mov.w	ip, #4
 80026b6:	e70f      	b.n	80024d8 <HAL_GPIO_Init+0x6c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b8:	f04f 0900 	mov.w	r9, #0
 80026bc:	e75e      	b.n	800257c <HAL_GPIO_Init+0x110>
 80026be:	f04f 0901 	mov.w	r9, #1
 80026c2:	e75b      	b.n	800257c <HAL_GPIO_Init+0x110>
 80026c4:	f04f 0902 	mov.w	r9, #2
 80026c8:	e758      	b.n	800257c <HAL_GPIO_Init+0x110>
  }
}
 80026ca:	b003      	add	sp, #12
 80026cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	10220000 	.word	0x10220000
 80026d8:	10310000 	.word	0x10310000
 80026dc:	10320000 	.word	0x10320000
 80026e0:	10120000 	.word	0x10120000
 80026e4:	40010800 	.word	0x40010800
 80026e8:	40010400 	.word	0x40010400

080026ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d07e      	beq.n	80027f2 <HAL_PCD_Init+0x106>
 80026f4:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026f6:	f890 32a9 	ldrb.w	r3, [r0, #681]	@ 0x2a9
 80026fa:	b1eb      	cbz	r3, 8002738 <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002702:	6828      	ldr	r0, [r5, #0]
 8002704:	f002 f8d6 	bl	80048b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002708:	462c      	mov	r4, r5
 800270a:	f854 6b10 	ldr.w	r6, [r4], #16
 800270e:	46ec      	mov	ip, sp
 8002710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002712:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	f8cc 3000 	str.w	r3, [ip]
 800271c:	1d2b      	adds	r3, r5, #4
 800271e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002720:	4630      	mov	r0, r6
 8002722:	f002 f8b7 	bl	8004894 <USB_CoreInit>
 8002726:	4604      	mov	r4, r0
 8002728:	b158      	cbz	r0, 8002742 <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800272a:	2302      	movs	r3, #2
 800272c:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
    return HAL_ERROR;
 8002730:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002732:	4620      	mov	r0, r4
 8002734:	b006      	add	sp, #24
 8002736:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002738:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
    HAL_PCD_MspInit(hpcd);
 800273c:	f003 fe84 	bl	8006448 <HAL_PCD_MspInit>
 8002740:	e7dc      	b.n	80026fc <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002742:	2100      	movs	r1, #0
 8002744:	6828      	ldr	r0, [r5, #0]
 8002746:	f002 f8bf 	bl	80048c8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	6868      	ldr	r0, [r5, #4]
 800274c:	b388      	cbz	r0, 80027b2 <HAL_PCD_Init+0xc6>
 800274e:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8002750:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002754:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8002756:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800275a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800275e:	f882 c029 	strb.w	ip, [r2, #41]	@ 0x29
    hpcd->IN_ep[i].num = i;
 8002762:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002766:	f882 102b 	strb.w	r1, [r2, #43]	@ 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 800276a:	6391      	str	r1, [r2, #56]	@ 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800276c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800276e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002772:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002776:	6411      	str	r1, [r2, #64]	@ 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002778:	3301      	adds	r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4283      	cmp	r3, r0
 800277e:	d3ea      	bcc.n	8002756 <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 8002780:	2200      	movs	r2, #0
 8002782:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002786:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800278a:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    hpcd->OUT_ep[i].num = i;
 800278e:	f883 4168 	strb.w	r4, [r3, #360]	@ 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002792:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002796:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800279a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800279e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80027a2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80027a6:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027aa:	3401      	adds	r4, #1
 80027ac:	b2e4      	uxtb	r4, r4
 80027ae:	4284      	cmp	r4, r0
 80027b0:	d3e7      	bcc.n	8002782 <HAL_PCD_Init+0x96>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b2:	462c      	mov	r4, r5
 80027b4:	f854 6b10 	ldr.w	r6, [r4], #16
 80027b8:	46ec      	mov	ip, sp
 80027ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	f8cc 3000 	str.w	r3, [ip]
 80027c6:	1d2b      	adds	r3, r5, #4
 80027c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ca:	4630      	mov	r0, r6
 80027cc:	f002 f87e 	bl	80048cc <USB_DevInit>
 80027d0:	4604      	mov	r4, r0
 80027d2:	b120      	cbz	r0, 80027de <HAL_PCD_Init+0xf2>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d4:	2302      	movs	r3, #2
 80027d6:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
    return HAL_ERROR;
 80027da:	2401      	movs	r4, #1
 80027dc:	e7a9      	b.n	8002732 <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f885 32a9 	strb.w	r3, [r5, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80027ea:	6828      	ldr	r0, [r5, #0]
 80027ec:	f002 fbad 	bl	8004f4a <USB_DevDisconnect>
  return HAL_OK;
 80027f0:	e79f      	b.n	8002732 <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 80027f2:	2401      	movs	r4, #1
 80027f4:	e79d      	b.n	8002732 <HAL_PCD_Init+0x46>

080027f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027f6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80027f8:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d011      	beq.n	8002824 <HAL_PCD_Start+0x2e>
 8002800:	4604      	mov	r4, r0
 8002802:	2501      	movs	r5, #1
 8002804:	f880 52a8 	strb.w	r5, [r0, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002808:	6800      	ldr	r0, [r0, #0]
 800280a:	f002 f84a 	bl	80048a2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800280e:	4629      	mov	r1, r5
 8002810:	4620      	mov	r0, r4
 8002812:	f003 ff2e 	bl	8006672 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	f002 fb95 	bl	8004f46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800281c:	2000      	movs	r0, #0
 800281e:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8

  return HAL_OK;
}
 8002822:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002824:	2002      	movs	r0, #2
 8002826:	e7fc      	b.n	8002822 <HAL_PCD_Start+0x2c>

08002828 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002828:	f890 32a8 	ldrb.w	r3, [r0, #680]	@ 0x2a8
 800282c:	2b01      	cmp	r3, #1
 800282e:	d00d      	beq.n	800284c <HAL_PCD_SetAddress+0x24>
{
 8002830:	b510      	push	{r4, lr}
 8002832:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002834:	2301      	movs	r3, #1
 8002836:	f880 32a8 	strb.w	r3, [r0, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800283a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800283e:	6800      	ldr	r0, [r0, #0]
 8002840:	f002 fb7b 	bl	8004f3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002844:	2000      	movs	r0, #0
 8002846:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8

  return HAL_OK;
}
 800284a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800284c:	2002      	movs	r0, #2
}
 800284e:	4770      	bx	lr

08002850 <HAL_PCD_IRQHandler>:
{
 8002850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002858:	6800      	ldr	r0, [r0, #0]
 800285a:	f002 fb78 	bl	8004f4e <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800285e:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8002862:	d126      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x62>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002864:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8002868:	f040 84da 	bne.w	8003220 <HAL_PCD_IRQHandler+0x9d0>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800286c:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8002870:	f040 84e7 	bne.w	8003242 <HAL_PCD_IRQHandler+0x9f2>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002874:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8002878:	f040 84ef 	bne.w	800325a <HAL_PCD_IRQHandler+0xa0a>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800287c:	f410 5380 	ands.w	r3, r0, #4096	@ 0x1000
 8002880:	f040 84f5 	bne.w	800326e <HAL_PCD_IRQHandler+0xa1e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002884:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8002888:	f040 8510 	bne.w	80032ac <HAL_PCD_IRQHandler+0xa5c>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800288c:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8002890:	f040 855b 	bne.w	800334a <HAL_PCD_IRQHandler+0xafa>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002894:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002898:	f000 84dc 	beq.w	8003254 <HAL_PCD_IRQHandler+0xa04>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800289c:	682a      	ldr	r2, [r5, #0]
 800289e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80028a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80028ae:	f000 bcd1 	b.w	8003254 <HAL_PCD_IRQHandler+0xa04>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028b2:	6828      	ldr	r0, [r5, #0]
 80028b4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80028b8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80028bc:	f000 84ca 	beq.w	8003254 <HAL_PCD_IRQHandler+0xa04>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028c0:	f640 768f 	movw	r6, #3983	@ 0xf8f
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028c4:	f505 782c 	add.w	r8, r5, #688	@ 0x2b0
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028c8:	2700      	movs	r7, #0
 80028ca:	e055      	b.n	8002978 <HAL_PCD_IRQHandler+0x128>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028cc:	8803      	ldrh	r3, [r0, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80028d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e4:	682a      	ldr	r2, [r5, #0]
 80028e6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 80028f0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80028f4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80028f8:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	@ 0x404
 80028fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002900:	646b      	str	r3, [r5, #68]	@ 0x44
        ep->xfer_buff += ep->xfer_count;
 8002902:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002904:	441a      	add	r2, r3
 8002906:	63ea      	str	r2, [r5, #60]	@ 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002908:	4639      	mov	r1, r7
 800290a:	4628      	mov	r0, r5
 800290c:	f003 fdd0 	bl	80064b0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002910:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8002914:	b34b      	cbz	r3, 800296a <HAL_PCD_IRQHandler+0x11a>
 8002916:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8002918:	bb3b      	cbnz	r3, 800296a <HAL_PCD_IRQHandler+0x11a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800291a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800291e:	682a      	ldr	r2, [r5, #0]
 8002920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002924:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
 800292e:	e01c      	b.n	800296a <HAL_PCD_IRQHandler+0x11a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002930:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 800293a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800293e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002942:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8002946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294a:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800294e:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 8002952:	4641      	mov	r1, r8
 8002954:	f002 fe73 	bl	800563e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002958:	682a      	ldr	r2, [r5, #0]
 800295a:	8813      	ldrh	r3, [r2, #0]
 800295c:	4033      	ands	r3, r6
 800295e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002962:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002964:	4628      	mov	r0, r5
 8002966:	f003 fd8f 	bl	8006488 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800296a:	6828      	ldr	r0, [r5, #0]
 800296c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8002970:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002974:	f000 846e 	beq.w	8003254 <HAL_PCD_IRQHandler+0xa04>
    wIstr = hpcd->Instance->ISTR;
 8002978:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 800297c:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800297e:	f014 040f 	ands.w	r4, r4, #15
 8002982:	f040 8082 	bne.w	8002a8a <HAL_PCD_IRQHandler+0x23a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002986:	f013 0f10 	tst.w	r3, #16
 800298a:	d09f      	beq.n	80028cc <HAL_PCD_IRQHandler+0x7c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800298c:	8803      	ldrh	r3, [r0, #0]
 800298e:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002990:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002994:	d1cc      	bne.n	8002930 <HAL_PCD_IRQHandler+0xe0>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002996:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800299a:	d0e6      	beq.n	800296a <HAL_PCD_IRQHandler+0x11a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800299c:	8803      	ldrh	r3, [r0, #0]
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	051b      	lsls	r3, r3, #20
 80029a4:	0d1b      	lsrs	r3, r3, #20
 80029a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029aa:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029ac:	6828      	ldr	r0, [r5, #0]
 80029ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f895 2168 	ldrb.w	r2, [r5, #360]	@ 0x168
 80029b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029c0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 80029c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c8:	f8c5 3184 	str.w	r3, [r5, #388]	@ 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80029cc:	b18b      	cbz	r3, 80029f2 <HAL_PCD_IRQHandler+0x1a2>
 80029ce:	f8d5 117c 	ldr.w	r1, [r5, #380]	@ 0x17c
 80029d2:	b171      	cbz	r1, 80029f2 <HAL_PCD_IRQHandler+0x1a2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029d4:	f8b5 216e 	ldrh.w	r2, [r5, #366]	@ 0x16e
 80029d8:	f002 fe31 	bl	800563e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80029dc:	f8d5 317c 	ldr.w	r3, [r5, #380]	@ 0x17c
 80029e0:	f8d5 2184 	ldr.w	r2, [r5, #388]	@ 0x184
 80029e4:	4413      	add	r3, r2
 80029e6:	f8c5 317c 	str.w	r3, [r5, #380]	@ 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029ea:	2100      	movs	r1, #0
 80029ec:	4628      	mov	r0, r5
 80029ee:	f003 fd53 	bl	8006498 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029f2:	682a      	ldr	r2, [r5, #0]
 80029f4:	8813      	ldrh	r3, [r2, #0]
 80029f6:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80029f8:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80029fc:	d1b5      	bne.n	800296a <HAL_PCD_IRQHandler+0x11a>
 80029fe:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 8002a02:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8002a06:	d0b0      	beq.n	800296a <HAL_PCD_IRQHandler+0x11a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a08:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 8002a12:	5ad1      	ldrh	r1, [r2, r3]
 8002a14:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002a18:	52d1      	strh	r1, [r2, r3]
 8002a1a:	f8d5 1178 	ldr.w	r1, [r5, #376]	@ 0x178
 8002a1e:	293e      	cmp	r1, #62	@ 0x3e
 8002a20:	d91e      	bls.n	8002a60 <HAL_PCD_IRQHandler+0x210>
 8002a22:	0948      	lsrs	r0, r1, #5
 8002a24:	f011 0f1f 	tst.w	r1, #31
 8002a28:	bf08      	it	eq
 8002a2a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002a2e:	5ad1      	ldrh	r1, [r2, r3]
 8002a30:	b289      	uxth	r1, r1
 8002a32:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8002a36:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002a3a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002a3e:	b289      	uxth	r1, r1
 8002a40:	52d1      	strh	r1, [r2, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a42:	682a      	ldr	r2, [r5, #0]
 8002a44:	8813      	ldrh	r3, [r2, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a50:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a5c:	8013      	strh	r3, [r2, #0]
 8002a5e:	e784      	b.n	800296a <HAL_PCD_IRQHandler+0x11a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a60:	b939      	cbnz	r1, 8002a72 <HAL_PCD_IRQHandler+0x222>
 8002a62:	5ad1      	ldrh	r1, [r2, r3]
 8002a64:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002a68:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002a6c:	b289      	uxth	r1, r1
 8002a6e:	52d1      	strh	r1, [r2, r3]
 8002a70:	e7e7      	b.n	8002a42 <HAL_PCD_IRQHandler+0x1f2>
 8002a72:	0848      	lsrs	r0, r1, #1
 8002a74:	f011 0f01 	tst.w	r1, #1
 8002a78:	bf18      	it	ne
 8002a7a:	3001      	addne	r0, #1
 8002a7c:	5ad1      	ldrh	r1, [r2, r3]
 8002a7e:	b289      	uxth	r1, r1
 8002a80:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8002a84:	b289      	uxth	r1, r1
 8002a86:	52d1      	strh	r1, [r2, r3]
 8002a88:	e7db      	b.n	8002a42 <HAL_PCD_IRQHandler+0x1f2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a8a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002a8e:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a92:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002a96:	d152      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x2ee>
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a98:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8002a9c:	f43f af65 	beq.w	800296a <HAL_PCD_IRQHandler+0x11a>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002aa0:	682a      	ldr	r2, [r5, #0]
 8002aa2:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]

        if (ep->type == EP_TYPE_ISOC)
 8002abe:	eb04 0a84 	add.w	sl, r4, r4, lsl #2
 8002ac2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8002ac6:	f89a 302b 	ldrb.w	r3, [sl, #43]	@ 0x2b
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	f000 818b 	beq.w	8002de6 <HAL_PCD_IRQHandler+0x596>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ad0:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8002ad4:	f040 81e4 	bne.w	8002ea0 <HAL_PCD_IRQHandler+0x650>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ad8:	6828      	ldr	r0, [r5, #0]
 8002ada:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28

            if (ep->xfer_len > TxPctSize)
 8002ae4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002ae8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002aec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aee:	3302      	adds	r3, #2
 8002af0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002af4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002af8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
            if (ep->xfer_len > TxPctSize)
 8002afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b00:	429a      	cmp	r2, r3
 8002b02:	f240 842f 	bls.w	8003364 <HAL_PCD_IRQHandler+0xb14>
            {
              ep->xfer_len -= TxPctSize;
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8002b0c:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8002b10:	f8cc 2040 	str.w	r2, [ip, #64]	@ 0x40
            {
              ep->xfer_len = 0U;
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	f000 842b 	beq.w	8003370 <HAL_PCD_IRQHandler+0xb20>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b1a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002b1e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002b22:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b24:	4419      	add	r1, r3
 8002b26:	63d1      	str	r1, [r2, #60]	@ 0x3c
              ep->xfer_count += TxPctSize;
 8002b28:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b2a:	440b      	add	r3, r1
 8002b2c:	6453      	str	r3, [r2, #68]	@ 0x44
        ep = &hpcd->IN_ep[epindex];
 8002b2e:	3401      	adds	r4, #1
 8002b30:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8002b38:	f002 fa26 	bl	8004f88 <USB_EPStartXfer>
 8002b3c:	e715      	b.n	800296a <HAL_PCD_IRQHandler+0x11a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b3e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002b42:	4033      	ands	r3, r6
 8002b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b48:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b4c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002b50:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002b54:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d145      	bne.n	8002be8 <HAL_PCD_IRQHandler+0x398>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b5c:	6828      	ldr	r0, [r5, #0]
 8002b5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002b68:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002b6c:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 8002b70:	3306      	adds	r3, #6
 8002b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b7a:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 8002b7e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8002b82:	f1ba 0f00 	cmp.w	sl, #0
 8002b86:	d123      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x380>
        ep->xfer_count += count;
 8002b88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002b8c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002b90:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 8002b94:	4452      	add	r2, sl
 8002b96:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ep->xfer_buff += count;
 8002b9a:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8002b9e:	4452      	add	r2, sl
 8002ba0:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ba4:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8002ba8:	b143      	cbz	r3, 8002bbc <HAL_PCD_IRQHandler+0x36c>
 8002baa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002bae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002bb2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002bb6:	459a      	cmp	sl, r3
 8002bb8:	f080 810b 	bcs.w	8002dd2 <HAL_PCD_IRQHandler+0x582>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bbc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002bc0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002bc4:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f003 fc65 	bl	8006498 <HAL_PCD_DataOutStageCallback>
 8002bce:	e763      	b.n	8002a98 <HAL_PCD_IRQHandler+0x248>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002bd0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002bd4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002bd8:	4653      	mov	r3, sl
 8002bda:	f8b1 216e 	ldrh.w	r2, [r1, #366]	@ 0x16e
 8002bde:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002be2:	f002 fd2c 	bl	800563e <USB_ReadPMA>
 8002be6:	e7cf      	b.n	8002b88 <HAL_PCD_IRQHandler+0x338>
          if (ep->type == EP_TYPE_BULK)
 8002be8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002bec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002bf0:	f893 316b 	ldrb.w	r3, [r3, #363]	@ 0x16b
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d037      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x418>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bf8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002bfc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002c00:	f892 0168 	ldrb.w	r0, [r2, #360]	@ 0x168
 8002c04:	6829      	ldr	r1, [r5, #0]
 8002c06:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c1c:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c20:	6828      	ldr	r0, [r5, #0]
 8002c22:	f892 2168 	ldrb.w	r2, [r2, #360]	@ 0x168
 8002c26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c2a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002c2e:	f000 80b4 	beq.w	8002d9a <HAL_PCD_IRQHandler+0x54a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c32:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3302      	adds	r3, #2
 8002c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c42:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 8002c46:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002c4a:	f1ba 0f00 	cmp.w	sl, #0
 8002c4e:	d09b      	beq.n	8002b88 <HAL_PCD_IRQHandler+0x338>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c50:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002c54:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002c58:	4653      	mov	r3, sl
 8002c5a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 8002c5e:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002c62:	f002 fcec 	bl	800563e <USB_ReadPMA>
 8002c66:	e78f      	b.n	8002b88 <HAL_PCD_IRQHandler+0x338>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c68:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 8002c6c:	d04a      	beq.n	8002d04 <HAL_PCD_IRQHandler+0x4b4>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c6e:	682a      	ldr	r2, [r5, #0]
 8002c70:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002c7a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002c7e:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 8002c82:	3302      	adds	r3, #2
 8002c84:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002c88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002c8c:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 8002c90:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8002c94:	f8d0 3180 	ldr.w	r3, [r0, #384]	@ 0x180
 8002c98:	4553      	cmp	r3, sl
 8002c9a:	f0c0 8410 	bcc.w	80034be <HAL_PCD_IRQHandler+0xc6e>
    {
      ep->xfer_len -= count;
 8002c9e:	eba3 030a 	sub.w	r3, r3, sl
 8002ca2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002ca6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002caa:	f8c0 3180 	str.w	r3, [r0, #384]	@ 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 840c 	beq.w	80034cc <HAL_PCD_IRQHandler+0xc7c>
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cb4:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8002cb8:	d013      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x492>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002cbe:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002cc2:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 8002cc6:	682a      	ldr	r2, [r5, #0]
 8002cc8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002cde:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }

    if (count != 0U)
 8002ce2:	f1ba 0f00 	cmp.w	sl, #0
 8002ce6:	f43f af4f 	beq.w	8002b88 <HAL_PCD_IRQHandler+0x338>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cea:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002cee:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002cf2:	4653      	mov	r3, sl
 8002cf4:	f8b1 2170 	ldrh.w	r2, [r1, #368]	@ 0x170
 8002cf8:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002cfc:	6828      	ldr	r0, [r5, #0]
 8002cfe:	f002 fc9e 	bl	800563e <USB_ReadPMA>
 8002d02:	e741      	b.n	8002b88 <HAL_PCD_IRQHandler+0x338>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d04:	682a      	ldr	r2, [r5, #0]
 8002d06:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002d10:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002d14:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 8002d18:	3306      	adds	r3, #6
 8002d1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002d1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d22:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 8002d26:	f3ca 0a09 	ubfx	sl, sl, #0, #10

    if (ep->xfer_len >= count)
 8002d2a:	f8d0 3180 	ldr.w	r3, [r0, #384]	@ 0x180
 8002d2e:	4553      	cmp	r3, sl
 8002d30:	f0c0 83dd 	bcc.w	80034ee <HAL_PCD_IRQHandler+0xc9e>
    {
      ep->xfer_len -= count;
 8002d34:	eba3 030a 	sub.w	r3, r3, sl
 8002d38:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002d3c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002d40:	f8c0 3180 	str.w	r3, [r0, #384]	@ 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 83d9 	beq.w	80034fc <HAL_PCD_IRQHandler+0xcac>
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d4a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8002d4e:	d113      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x528>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d50:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002d54:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002d58:	f893 1168 	ldrb.w	r1, [r3, #360]	@ 0x168
 8002d5c:	682a      	ldr	r2, [r5, #0]
 8002d5e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d74:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }

    if (count != 0U)
 8002d78:	f1ba 0f00 	cmp.w	sl, #0
 8002d7c:	f43f af04 	beq.w	8002b88 <HAL_PCD_IRQHandler+0x338>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d80:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002d84:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002d88:	4653      	mov	r3, sl
 8002d8a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 8002d8e:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002d92:	6828      	ldr	r0, [r5, #0]
 8002d94:	f002 fc53 	bl	800563e <USB_ReadPMA>
 8002d98:	e6f6      	b.n	8002b88 <HAL_PCD_IRQHandler+0x338>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3306      	adds	r3, #6
 8002da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002da6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002daa:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	@ 0x400
 8002dae:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8002db2:	f1ba 0f00 	cmp.w	sl, #0
 8002db6:	f43f aee7 	beq.w	8002b88 <HAL_PCD_IRQHandler+0x338>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dba:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002dbe:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002dc2:	4653      	mov	r3, sl
 8002dc4:	f8b1 2172 	ldrh.w	r2, [r1, #370]	@ 0x172
 8002dc8:	f8d1 117c 	ldr.w	r1, [r1, #380]	@ 0x17c
 8002dcc:	f002 fc37 	bl	800563e <USB_ReadPMA>
 8002dd0:	e6da      	b.n	8002b88 <HAL_PCD_IRQHandler+0x338>
        ep = &hpcd->OUT_ep[epindex];
 8002dd2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002dd6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dda:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 8002dde:	6828      	ldr	r0, [r5, #0]
 8002de0:	f002 f8d2 	bl	8004f88 <USB_EPStartXfer>
 8002de4:	e658      	b.n	8002a98 <HAL_PCD_IRQHandler+0x248>
          ep->xfer_len = 0U;
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8ca 2040 	str.w	r2, [sl, #64]	@ 0x40
          if (ep->doublebuffer != 0U)
 8002dec:	f89a 3034 	ldrb.w	r3, [sl, #52]	@ 0x34
 8002df0:	b1d3      	cbz	r3, 8002e28 <HAL_PCD_IRQHandler+0x5d8>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002df2:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8002df6:	d02c      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x602>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df8:	f89a 3029 	ldrb.w	r3, [sl, #41]	@ 0x29
 8002dfc:	b9d3      	cbnz	r3, 8002e34 <HAL_PCD_IRQHandler+0x5e4>
 8002dfe:	682b      	ldr	r3, [r5, #0]
 8002e00:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002e04:	b292      	uxth	r2, r2
 8002e06:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002e0a:	0109      	lsls	r1, r1, #4
 8002e0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e10:	4413      	add	r3, r2
 8002e12:	5aca      	ldrh	r2, [r1, r3]
 8002e14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002e18:	52ca      	strh	r2, [r1, r3]
 8002e1a:	5aca      	ldrh	r2, [r1, r3]
 8002e1c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002e20:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e24:	b292      	uxth	r2, r2
 8002e26:	52ca      	strh	r2, [r1, r3]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e28:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f003 fb3f 	bl	80064b0 <HAL_PCD_DataInStageCallback>
 8002e32:	e59a      	b.n	800296a <HAL_PCD_IRQHandler+0x11a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d1f7      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x5d8>
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002e3e:	b289      	uxth	r1, r1
 8002e40:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e4a:	440b      	add	r3, r1
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	52d1      	strh	r1, [r2, r3]
 8002e50:	e7ea      	b.n	8002e28 <HAL_PCD_IRQHandler+0x5d8>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 8002e58:	b9a2      	cbnz	r2, 8002e84 <HAL_PCD_IRQHandler+0x634>
 8002e5a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002e64:	0109      	lsls	r1, r1, #4
 8002e66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e6a:	441a      	add	r2, r3
 8002e6c:	5a8b      	ldrh	r3, [r1, r2]
 8002e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e72:	528b      	strh	r3, [r1, r2]
 8002e74:	5a8b      	ldrh	r3, [r1, r2]
 8002e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	528b      	strh	r3, [r1, r2]
 8002e82:	e7d1      	b.n	8002e28 <HAL_PCD_IRQHandler+0x5d8>
 8002e84:	2a01      	cmp	r2, #1
 8002e86:	d1cf      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x5d8>
 8002e88:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002e8c:	b289      	uxth	r1, r1
 8002e8e:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e98:	440b      	add	r3, r1
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	52d1      	strh	r1, [r2, r3]
 8002e9e:	e7c3      	b.n	8002e28 <HAL_PCD_IRQHandler+0x5d8>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ea0:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8002ea4:	f000 80e7 	beq.w	8003076 <HAL_PCD_IRQHandler+0x826>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ea8:	682a      	ldr	r2, [r5, #0]
 8002eaa:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28

    if (ep->xfer_len > TxPctSize)
 8002eb4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002eb8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002ebc:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002ec4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002ec8:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	@ 0x400
    if (ep->xfer_len > TxPctSize)
 8002ecc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002ed0:	4560      	cmp	r0, ip
 8002ed2:	f240 8252 	bls.w	800337a <HAL_PCD_IRQHandler+0xb2a>
    {
      ep->xfer_len -= TxPctSize;
 8002ed6:	eba0 000c 	sub.w	r0, r0, ip
 8002eda:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ede:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ee2:	6418      	str	r0, [r3, #64]	@ 0x40
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	f000 824e 	beq.w	8003386 <HAL_PCD_IRQHandler+0xb36>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eea:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 8002eee:	d00c      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x6ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ef0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f06:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f0a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f0e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f12:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d02e      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x728>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f1a:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002f1e:	682a      	ldr	r2, [r5, #0]
 8002f20:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f2e:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f3a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002f3e:	e514      	b.n	800296a <HAL_PCD_IRQHandler+0x11a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 8251 	bne.w	80033e8 <HAL_PCD_IRQHandler+0xb98>
 8002f46:	f8b2 0050 	ldrh.w	r0, [r2, #80]	@ 0x50
 8002f4a:	b280      	uxth	r0, r0
 8002f4c:	f202 4304 	addw	r3, r2, #1028	@ 0x404
 8002f50:	4403      	add	r3, r0
 8002f52:	0109      	lsls	r1, r1, #4
 8002f54:	2200      	movs	r2, #0
 8002f56:	525a      	strh	r2, [r3, r1]
 8002f58:	e22c      	b.n	80033b4 <HAL_PCD_IRQHandler+0xb64>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f5a:	2a01      	cmp	r2, #1
 8002f5c:	f040 8244 	bne.w	80033e8 <HAL_PCD_IRQHandler+0xb98>
 8002f60:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002f64:	b292      	uxth	r2, r2
 8002f66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	2100      	movs	r1, #0
 8002f74:	5299      	strh	r1, [r3, r2]
 8002f76:	e237      	b.n	80033e8 <HAL_PCD_IRQHandler+0xb98>
        ep->xfer_buff += TxPctSize;
 8002f78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f7c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f82:	4462      	add	r2, ip
 8002f84:	63da      	str	r2, [r3, #60]	@ 0x3c
        ep->xfer_count += TxPctSize;
 8002f86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f88:	4462      	add	r2, ip
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d32b      	bcc.n	8002fec <HAL_PCD_IRQHandler+0x79c>
          ep->xfer_len_db -= len;
 8002f94:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f98:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002f9c:	1ad2      	subs	r2, r2, r3
 8002f9e:	648a      	str	r2, [r1, #72]	@ 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa0:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d14b      	bne.n	8003040 <HAL_PCD_IRQHandler+0x7f0>
 8002fa8:	682a      	ldr	r2, [r5, #0]
 8002faa:	f8b2 0050 	ldrh.w	r0, [r2, #80]	@ 0x50
 8002fae:	b280      	uxth	r0, r0
 8002fb0:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8002fb4:	0109      	lsls	r1, r1, #4
 8002fb6:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8002fba:	4402      	add	r2, r0
 8002fbc:	5a88      	ldrh	r0, [r1, r2]
 8002fbe:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002fc2:	5288      	strh	r0, [r1, r2]
 8002fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fc6:	d924      	bls.n	8003012 <HAL_PCD_IRQHandler+0x7c2>
 8002fc8:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8002fcc:	f013 0f1f 	tst.w	r3, #31
 8002fd0:	bf08      	it	eq
 8002fd2:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002fd6:	5a88      	ldrh	r0, [r1, r2]
 8002fd8:	b280      	uxth	r0, r0
 8002fda:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8002fde:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002fe2:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002fe6:	b280      	uxth	r0, r0
 8002fe8:	5288      	strh	r0, [r1, r2]
 8002fea:	e02b      	b.n	8003044 <HAL_PCD_IRQHandler+0x7f4>
        else if (ep->xfer_len_db == 0U)
 8002fec:	b93a      	cbnz	r2, 8002ffe <HAL_PCD_IRQHandler+0x7ae>
          ep->xfer_fill_db = 0U;
 8002fee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ff2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ff6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          len = TxPctSize;
 8002ffa:	4663      	mov	r3, ip
 8002ffc:	e7d0      	b.n	8002fa0 <HAL_PCD_IRQHandler+0x750>
          ep->xfer_fill_db = 0U;
 8002ffe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003002:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8003006:	2100      	movs	r1, #0
 8003008:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
          ep->xfer_len_db = 0U;
 800300c:	6499      	str	r1, [r3, #72]	@ 0x48
          len = ep->xfer_len_db;
 800300e:	4613      	mov	r3, r2
 8003010:	e7c6      	b.n	8002fa0 <HAL_PCD_IRQHandler+0x750>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003012:	b93b      	cbnz	r3, 8003024 <HAL_PCD_IRQHandler+0x7d4>
 8003014:	5a88      	ldrh	r0, [r1, r2]
 8003016:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800301a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800301e:	b280      	uxth	r0, r0
 8003020:	5288      	strh	r0, [r1, r2]
 8003022:	e00f      	b.n	8003044 <HAL_PCD_IRQHandler+0x7f4>
 8003024:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8003028:	f013 0f01 	tst.w	r3, #1
 800302c:	bf18      	it	ne
 800302e:	f10c 0c01 	addne.w	ip, ip, #1
 8003032:	5a88      	ldrh	r0, [r1, r2]
 8003034:	b280      	uxth	r0, r0
 8003036:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 800303a:	b280      	uxth	r0, r0
 800303c:	5288      	strh	r0, [r1, r2]
 800303e:	e001      	b.n	8003044 <HAL_PCD_IRQHandler+0x7f4>
 8003040:	2a01      	cmp	r2, #1
 8003042:	d00b      	beq.n	800305c <HAL_PCD_IRQHandler+0x80c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003044:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003048:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800304c:	4611      	mov	r1, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8003052:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8003054:	6828      	ldr	r0, [r5, #0]
 8003056:	f001 ff80 	bl	8004f5a <USB_WritePMA>
 800305a:	e75e      	b.n	8002f1a <HAL_PCD_IRQHandler+0x6ca>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800305c:	682a      	ldr	r2, [r5, #0]
 800305e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8003062:	b289      	uxth	r1, r1
 8003064:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8003068:	440a      	add	r2, r1
 800306a:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 800306e:	0109      	lsls	r1, r1, #4
 8003070:	b298      	uxth	r0, r3
 8003072:	5250      	strh	r0, [r2, r1]
 8003074:	e7e6      	b.n	8003044 <HAL_PCD_IRQHandler+0x7f4>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003076:	682a      	ldr	r2, [r5, #0]
 8003078:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 800307c:	b29b      	uxth	r3, r3
 800307e:	f89a 0028 	ldrb.w	r0, [sl, #40]	@ 0x28
    if (ep->xfer_len >= TxPctSize)
 8003082:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003086:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800308a:	f8d1 c040 	ldr.w	ip, [r1, #64]	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800308e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8003092:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003096:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
    if (ep->xfer_len >= TxPctSize)
 800309a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800309e:	458c      	cmp	ip, r1
 80030a0:	f0c0 81bc 	bcc.w	800341c <HAL_PCD_IRQHandler+0xbcc>
      ep->xfer_len -= TxPctSize;
 80030a4:	ebac 0301 	sub.w	r3, ip, r1
 80030a8:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80030ac:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80030b0:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
    if (ep->xfer_len == 0U)
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 81b7 	beq.w	8003428 <HAL_PCD_IRQHandler+0xbd8>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030ba:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 80030be:	d10c      	bne.n	80030da <HAL_PCD_IRQHandler+0x88a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030c0:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d6:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80030da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80030de:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80030e2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	f47f af17 	bne.w	8002f1a <HAL_PCD_IRQHandler+0x6ca>
        ep->xfer_buff += TxPctSize;
 80030ec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80030f0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80030f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030f6:	440a      	add	r2, r1
 80030f8:	63da      	str	r2, [r3, #60]	@ 0x3c
        ep->xfer_count += TxPctSize;
 80030fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030fc:	440a      	add	r2, r1
 80030fe:	645a      	str	r2, [r3, #68]	@ 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	429a      	cmp	r2, r3
 8003106:	d347      	bcc.n	8003198 <HAL_PCD_IRQHandler+0x948>
          ep->xfer_len_db -= len;
 8003108:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800310c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8003110:	1ad2      	subs	r2, r2, r3
 8003112:	648a      	str	r2, [r1, #72]	@ 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003114:	682a      	ldr	r2, [r5, #0]
 8003116:	f89a 1029 	ldrb.w	r1, [sl, #41]	@ 0x29
 800311a:	2900      	cmp	r1, #0
 800311c:	d166      	bne.n	80031ec <HAL_PCD_IRQHandler+0x99c>
 800311e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8003122:	b289      	uxth	r1, r1
 8003124:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 8003128:	440a      	add	r2, r1
 800312a:	f89a 0028 	ldrb.w	r0, [sl, #40]	@ 0x28
 800312e:	0100      	lsls	r0, r0, #4
 8003130:	5a11      	ldrh	r1, [r2, r0]
 8003132:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003136:	5211      	strh	r1, [r2, r0]
 8003138:	2b3e      	cmp	r3, #62	@ 0x3e
 800313a:	d940      	bls.n	80031be <HAL_PCD_IRQHandler+0x96e>
 800313c:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8003140:	f013 0f1f 	tst.w	r3, #31
 8003144:	bf08      	it	eq
 8003146:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800314a:	5a11      	ldrh	r1, [r2, r0]
 800314c:	b289      	uxth	r1, r1
 800314e:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 8003152:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003156:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800315a:	b289      	uxth	r1, r1
 800315c:	5211      	strh	r1, [r2, r0]
 800315e:	e047      	b.n	80031f0 <HAL_PCD_IRQHandler+0x9a0>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003160:	2b01      	cmp	r3, #1
 8003162:	f040 8192 	bne.w	800348a <HAL_PCD_IRQHandler+0xc3a>
 8003166:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 800316a:	b289      	uxth	r1, r1
 800316c:	f202 4304 	addw	r3, r2, #1028	@ 0x404
 8003170:	440b      	add	r3, r1
 8003172:	0100      	lsls	r0, r0, #4
 8003174:	2200      	movs	r2, #0
 8003176:	521a      	strh	r2, [r3, r0]
 8003178:	e16d      	b.n	8003456 <HAL_PCD_IRQHandler+0xc06>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800317a:	2a01      	cmp	r2, #1
 800317c:	f040 8185 	bne.w	800348a <HAL_PCD_IRQHandler+0xc3a>
 8003180:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8003184:	b289      	uxth	r1, r1
 8003186:	f89a 2028 	ldrb.w	r2, [sl, #40]	@ 0x28
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003190:	440b      	add	r3, r1
 8003192:	2100      	movs	r1, #0
 8003194:	52d1      	strh	r1, [r2, r3]
 8003196:	e178      	b.n	800348a <HAL_PCD_IRQHandler+0xc3a>
        else if (ep->xfer_len_db == 0U)
 8003198:	b93a      	cbnz	r2, 80031aa <HAL_PCD_IRQHandler+0x95a>
          ep->xfer_fill_db = 0U;
 800319a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800319e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80031a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          len = TxPctSize;
 80031a6:	460b      	mov	r3, r1
 80031a8:	e7b4      	b.n	8003114 <HAL_PCD_IRQHandler+0x8c4>
          ep->xfer_len_db = 0U;
 80031aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80031ae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80031b2:	2100      	movs	r1, #0
 80031b4:	6499      	str	r1, [r3, #72]	@ 0x48
          ep->xfer_fill_db = 0;
 80031b6:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
          len = ep->xfer_len_db;
 80031ba:	4613      	mov	r3, r2
 80031bc:	e7aa      	b.n	8003114 <HAL_PCD_IRQHandler+0x8c4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031be:	b93b      	cbnz	r3, 80031d0 <HAL_PCD_IRQHandler+0x980>
 80031c0:	5a11      	ldrh	r1, [r2, r0]
 80031c2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80031c6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80031ca:	b289      	uxth	r1, r1
 80031cc:	5211      	strh	r1, [r2, r0]
 80031ce:	e00f      	b.n	80031f0 <HAL_PCD_IRQHandler+0x9a0>
 80031d0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80031d4:	f013 0f01 	tst.w	r3, #1
 80031d8:	bf18      	it	ne
 80031da:	f10c 0c01 	addne.w	ip, ip, #1
 80031de:	5a11      	ldrh	r1, [r2, r0]
 80031e0:	b289      	uxth	r1, r1
 80031e2:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 80031e6:	b289      	uxth	r1, r1
 80031e8:	5211      	strh	r1, [r2, r0]
 80031ea:	e001      	b.n	80031f0 <HAL_PCD_IRQHandler+0x9a0>
 80031ec:	2901      	cmp	r1, #1
 80031ee:	d00b      	beq.n	8003208 <HAL_PCD_IRQHandler+0x9b8>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031f0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80031f4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80031f8:	4611      	mov	r1, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80031fe:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8003200:	6828      	ldr	r0, [r5, #0]
 8003202:	f001 feaa 	bl	8004f5a <USB_WritePMA>
 8003206:	e688      	b.n	8002f1a <HAL_PCD_IRQHandler+0x6ca>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003208:	f8b2 0050 	ldrh.w	r0, [r2, #80]	@ 0x50
 800320c:	b280      	uxth	r0, r0
 800320e:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 8003212:	0109      	lsls	r1, r1, #4
 8003214:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 8003218:	4402      	add	r2, r0
 800321a:	b298      	uxth	r0, r3
 800321c:	5288      	strh	r0, [r1, r2]
 800321e:	e7e7      	b.n	80031f0 <HAL_PCD_IRQHandler+0x9a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003220:	682a      	ldr	r2, [r5, #0]
 8003222:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003226:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003232:	4628      	mov	r0, r5
 8003234:	f003 f94d 	bl	80064d2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003238:	2100      	movs	r1, #0
 800323a:	4628      	mov	r0, r5
 800323c:	f7ff faf4 	bl	8002828 <HAL_PCD_SetAddress>
    return;
 8003240:	e008      	b.n	8003254 <HAL_PCD_IRQHandler+0xa04>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003242:	682a      	ldr	r2, [r5, #0]
 8003244:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003248:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8003254:	b004      	add	sp, #16
 8003256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800325a:	682a      	ldr	r2, [r5, #0]
 800325c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003260:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 800326c:	e7f2      	b.n	8003254 <HAL_PCD_IRQHandler+0xa04>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800326e:	682a      	ldr	r2, [r5, #0]
 8003270:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003280:	682a      	ldr	r2, [r5, #0]
 8003282:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003286:	f023 0308 	bic.w	r3, r3, #8
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003292:	4628      	mov	r0, r5
 8003294:	f003 f940 	bl	8006518 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003298:	682a      	ldr	r2, [r5, #0]
 800329a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800329e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80032aa:	e7d3      	b.n	8003254 <HAL_PCD_IRQHandler+0xa04>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80032ac:	682f      	ldr	r7, [r5, #0]
 80032ae:	4638      	mov	r0, r7
 80032b0:	f1ad 0102 	sub.w	r1, sp, #2
 80032b4:	f10d 060e 	add.w	r6, sp, #14
 80032b8:	460a      	mov	r2, r1
 80032ba:	f830 4b04 	ldrh.w	r4, [r0], #4
 80032be:	f822 4f02 	strh.w	r4, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 80032c2:	42b2      	cmp	r2, r6
 80032c4:	d1f9      	bne.n	80032ba <HAL_PCD_IRQHandler+0xa6a>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80032c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80032ca:	b292      	uxth	r2, r2
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	f8a7 2040 	strh.w	r2, [r7, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032d4:	6828      	ldr	r0, [r5, #0]
 80032d6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	0412      	lsls	r2, r2, #16
 80032e0:	0c12      	lsrs	r2, r2, #16
 80032e2:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032e6:	6828      	ldr	r0, [r5, #0]
 80032e8:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
 80032ec:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80032f0:	d0fa      	beq.n	80032e8 <HAL_PCD_IRQHandler+0xa98>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032f2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fa:	0412      	lsls	r2, r2, #16
 80032fc:	0c12      	lsrs	r2, r2, #16
 80032fe:	f8a0 2044 	strh.w	r2, [r0, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003302:	682a      	ldr	r2, [r5, #0]
 8003304:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8003308:	52d0      	strh	r0, [r2, r3]
    for (i = 0U; i < 8U; i++)
 800330a:	3304      	adds	r3, #4
 800330c:	2b20      	cmp	r3, #32
 800330e:	d1f8      	bne.n	8003302 <HAL_PCD_IRQHandler+0xab2>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003310:	682a      	ldr	r2, [r5, #0]
 8003312:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003316:	b29b      	uxth	r3, r3
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003320:	682a      	ldr	r2, [r5, #0]
 8003322:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003326:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003332:	682a      	ldr	r2, [r5, #0]
 8003334:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003338:	b29b      	uxth	r3, r3
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003342:	4628      	mov	r0, r5
 8003344:	f003 f8d8 	bl	80064f8 <HAL_PCD_SuspendCallback>
    return;
 8003348:	e784      	b.n	8003254 <HAL_PCD_IRQHandler+0xa04>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800334a:	682a      	ldr	r2, [r5, #0]
 800334c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 800335c:	4628      	mov	r0, r5
 800335e:	f003 f8b2 	bl	80064c6 <HAL_PCD_SOFCallback>
    return;
 8003362:	e777      	b.n	8003254 <HAL_PCD_IRQHandler+0xa04>
 8003364:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003368:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800336c:	2300      	movs	r3, #0
 800336e:	6423      	str	r3, [r4, #64]	@ 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003370:	4628      	mov	r0, r5
 8003372:	f003 f89d 	bl	80064b0 <HAL_PCD_DataInStageCallback>
 8003376:	f7ff baf8 	b.w	800296a <HAL_PCD_IRQHandler+0x11a>
 800337a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800337e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8003382:	2000      	movs	r0, #0
 8003384:	6418      	str	r0, [r3, #64]	@ 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003386:	f89a 3029 	ldrb.w	r3, [sl, #41]	@ 0x29
 800338a:	2b00      	cmp	r3, #0
 800338c:	f47f add8 	bne.w	8002f40 <HAL_PCD_IRQHandler+0x6f0>
 8003390:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 800339a:	441a      	add	r2, r3
 800339c:	0109      	lsls	r1, r1, #4
 800339e:	5a53      	ldrh	r3, [r2, r1]
 80033a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a4:	5253      	strh	r3, [r2, r1]
 80033a6:	5a53      	ldrh	r3, [r2, r1]
 80033a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	f47f adcd 	bne.w	8002f5a <HAL_PCD_IRQHandler+0x70a>
 80033c0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80033c4:	b292      	uxth	r2, r2
 80033c6:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 80033ca:	0109      	lsls	r1, r1, #4
 80033cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033d0:	4413      	add	r3, r2
 80033d2:	5aca      	ldrh	r2, [r1, r3]
 80033d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80033d8:	52ca      	strh	r2, [r1, r3]
 80033da:	5aca      	ldrh	r2, [r1, r3]
 80033dc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80033e0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80033e4:	b292      	uxth	r2, r2
 80033e6:	52ca      	strh	r2, [r1, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033e8:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 80033ec:	4628      	mov	r0, r5
 80033ee:	f003 f85f 	bl	80064b0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033f2:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 80033f6:	f43f ad90 	beq.w	8002f1a <HAL_PCD_IRQHandler+0x6ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033fa:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 80033fe:	682a      	ldr	r2, [r5, #0]
 8003400:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800340a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003416:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800341a:	e57e      	b.n	8002f1a <HAL_PCD_IRQHandler+0x6ca>
 800341c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003420:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8003424:	2100      	movs	r1, #0
 8003426:	6419      	str	r1, [r3, #64]	@ 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003428:	f89a 3029 	ldrb.w	r3, [sl, #41]	@ 0x29
 800342c:	2b00      	cmp	r3, #0
 800342e:	f47f ae97 	bne.w	8003160 <HAL_PCD_IRQHandler+0x910>
 8003432:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8003436:	b29b      	uxth	r3, r3
 8003438:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 800343c:	441a      	add	r2, r3
 800343e:	0100      	lsls	r0, r0, #4
 8003440:	5a13      	ldrh	r3, [r2, r0]
 8003442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003446:	5213      	strh	r3, [r2, r0]
 8003448:	5a13      	ldrh	r3, [r2, r0]
 800344a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003452:	b29b      	uxth	r3, r3
 8003454:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003456:	682b      	ldr	r3, [r5, #0]
 8003458:	f89a 2029 	ldrb.w	r2, [sl, #41]	@ 0x29
 800345c:	2a00      	cmp	r2, #0
 800345e:	f47f ae8c 	bne.w	800317a <HAL_PCD_IRQHandler+0x92a>
 8003462:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003466:	b292      	uxth	r2, r2
 8003468:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 800346c:	0109      	lsls	r1, r1, #4
 800346e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003472:	441a      	add	r2, r3
 8003474:	5a8b      	ldrh	r3, [r1, r2]
 8003476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347a:	528b      	strh	r3, [r1, r2]
 800347c:	5a8b      	ldrh	r3, [r1, r2]
 800347e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003486:	b29b      	uxth	r3, r3
 8003488:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800348a:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 800348e:	4628      	mov	r0, r5
 8003490:	f003 f80e 	bl	80064b0 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003494:	f419 4f80 	tst.w	r9, #16384	@ 0x4000
 8003498:	f47f ad3f 	bne.w	8002f1a <HAL_PCD_IRQHandler+0x6ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800349c:	f89a 1028 	ldrb.w	r1, [sl, #40]	@ 0x28
 80034a0:	682a      	ldr	r2, [r5, #0]
 80034a2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034b8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80034bc:	e52d      	b.n	8002f1a <HAL_PCD_IRQHandler+0x6ca>
 80034be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80034c2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80034c6:	2000      	movs	r0, #0
 80034c8:	f8c3 0180 	str.w	r0, [r3, #384]	@ 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80034ea:	f7ff bbe3 	b.w	8002cb4 <HAL_PCD_IRQHandler+0x464>
 80034ee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80034f2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80034f6:	2000      	movs	r0, #0
 80034f8:	f8c3 0180 	str.w	r0, [r3, #384]	@ 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034fc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800350e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003516:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800351a:	e416      	b.n	8002d4a <HAL_PCD_IRQHandler+0x4fa>

0800351c <HAL_PCD_EP_Open>:
{
 800351c:	b510      	push	{r4, lr}
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003522:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003526:	d123      	bne.n	8003570 <HAL_PCD_EP_Open+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003528:	f001 0c07 	and.w	ip, r1, #7
 800352c:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8003530:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8003534:	f50e 71b4 	add.w	r1, lr, #360	@ 0x168
    ep->is_in = 0U;
 8003538:	46f4      	mov	ip, lr
 800353a:	f04f 0e00 	mov.w	lr, #0
 800353e:	f88c e169 	strb.w	lr, [ip, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003542:	f000 0007 	and.w	r0, r0, #7
 8003546:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8003548:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800354a:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 800354c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800354e:	bf04      	itt	eq
 8003550:	2300      	moveq	r3, #0
 8003552:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003554:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8003558:	2b01      	cmp	r3, #1
 800355a:	d016      	beq.n	800358a <HAL_PCD_EP_Open+0x6e>
 800355c:	2301      	movs	r3, #1
 800355e:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	f001 f9c3 	bl	80048ee <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003568:	2000      	movs	r0, #0
 800356a:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 800356e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003570:	f001 0c07 	and.w	ip, r1, #7
 8003574:	f10c 0c01 	add.w	ip, ip, #1
 8003578:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800357c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8003580:	f04f 0e01 	mov.w	lr, #1
 8003584:	f881 e001 	strb.w	lr, [r1, #1]
 8003588:	e7db      	b.n	8003542 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800358a:	2002      	movs	r0, #2
 800358c:	e7ef      	b.n	800356e <HAL_PCD_EP_Open+0x52>

0800358e <HAL_PCD_EP_Close>:
{
 800358e:	b510      	push	{r4, lr}
 8003590:	4604      	mov	r4, r0
 8003592:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003594:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003598:	d11f      	bne.n	80035da <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800359a:	f001 0207 	and.w	r2, r1, #7
 800359e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80035a2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80035a6:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
    ep->is_in = 0U;
 80035aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035ae:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80035b2:	2000      	movs	r0, #0
 80035b4:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80035be:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d013      	beq.n	80035ee <HAL_PCD_EP_Close+0x60>
 80035c6:	2301      	movs	r3, #1
 80035c8:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	f001 fb55 	bl	8004c7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 80035d8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035da:	f001 0207 	and.w	r2, r1, #7
 80035de:	3201      	adds	r2, #1
 80035e0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80035e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80035e8:	2001      	movs	r0, #1
 80035ea:	7048      	strb	r0, [r1, #1]
 80035ec:	e7e4      	b.n	80035b8 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80035ee:	2002      	movs	r0, #2
 80035f0:	e7f2      	b.n	80035d8 <HAL_PCD_EP_Close+0x4a>

080035f2 <HAL_PCD_EP_Receive>:
{
 80035f2:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f4:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80035f8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80035fc:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8003600:	f8cc 217c 	str.w	r2, [ip, #380]	@ 0x17c
  ep->xfer_len = len;
 8003604:	f8cc 3180 	str.w	r3, [ip, #384]	@ 0x180
  ep->xfer_count = 0U;
 8003608:	2400      	movs	r4, #0
 800360a:	f8cc 4184 	str.w	r4, [ip, #388]	@ 0x184
  ep->is_in = 0U;
 800360e:	f88c 4169 	strb.w	r4, [ip, #361]	@ 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8003612:	f88c 1168 	strb.w	r1, [ip, #360]	@ 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003616:	f50c 71b4 	add.w	r1, ip, #360	@ 0x168
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	f001 fcb4 	bl	8004f88 <USB_EPStartXfer>
}
 8003620:	4620      	mov	r0, r4
 8003622:	bd10      	pop	{r4, pc}

08003624 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003624:	f001 0107 	and.w	r1, r1, #7
 8003628:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800362c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8003630:	f8d0 0184 	ldr.w	r0, [r0, #388]	@ 0x184
 8003634:	4770      	bx	lr

08003636 <HAL_PCD_EP_Transmit>:
{
 8003636:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003638:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800363c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8003640:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8003644:	f8cc 203c 	str.w	r2, [ip, #60]	@ 0x3c
  ep->xfer_len = len;
 8003648:	f8cc 3040 	str.w	r3, [ip, #64]	@ 0x40
  ep->xfer_fill_db = 1U;
 800364c:	2201      	movs	r2, #1
 800364e:	f88c 204c 	strb.w	r2, [ip, #76]	@ 0x4c
  ep->xfer_len_db = len;
 8003652:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
  ep->xfer_count = 0U;
 8003656:	2400      	movs	r4, #0
 8003658:	f8cc 4044 	str.w	r4, [ip, #68]	@ 0x44
  ep->is_in = 1U;
 800365c:	f88c 2029 	strb.w	r2, [ip, #41]	@ 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8003660:	f88c 1028 	strb.w	r1, [ip, #40]	@ 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	4411      	add	r1, r2
 8003666:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800366a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800366e:	6800      	ldr	r0, [r0, #0]
 8003670:	f001 fc8a 	bl	8004f88 <USB_EPStartXfer>
}
 8003674:	4620      	mov	r0, r4
 8003676:	bd10      	pop	{r4, pc}

08003678 <HAL_PCD_EP_SetStall>:
{
 8003678:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800367a:	f001 0507 	and.w	r5, r1, #7
 800367e:	6842      	ldr	r2, [r0, #4]
 8003680:	4295      	cmp	r5, r2
 8003682:	d831      	bhi.n	80036e8 <HAL_PCD_EP_SetStall+0x70>
 8003684:	4604      	mov	r4, r0
 8003686:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003688:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800368c:	d11e      	bne.n	80036cc <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800368e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003692:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003696:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
    ep->is_in = 0U;
 800369a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800369e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
  ep->is_stall = 1U;
 80036a8:	2301      	movs	r3, #1
 80036aa:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ac:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80036ae:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d01a      	beq.n	80036ec <HAL_PCD_EP_SetStall+0x74>
 80036b6:	2301      	movs	r3, #1
 80036b8:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	f001 fbc6 	bl	8004e4e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036c2:	b15d      	cbz	r5, 80036dc <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036cc:	1c6b      	adds	r3, r5, #1
 80036ce:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80036d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80036d6:	2201      	movs	r2, #1
 80036d8:	704a      	strb	r2, [r1, #1]
 80036da:	e7e5      	b.n	80036a8 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036dc:	f504 712c 	add.w	r1, r4, #688	@ 0x2b0
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	f001 fc38 	bl	8004f56 <USB_EP0_OutStart>
 80036e6:	e7ed      	b.n	80036c4 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80036e8:	2001      	movs	r0, #1
 80036ea:	e7ee      	b.n	80036ca <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80036ec:	2002      	movs	r0, #2
 80036ee:	e7ec      	b.n	80036ca <HAL_PCD_EP_SetStall+0x52>

080036f0 <HAL_PCD_EP_ClrStall>:
{
 80036f0:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036f2:	f001 010f 	and.w	r1, r1, #15
 80036f6:	6842      	ldr	r2, [r0, #4]
 80036f8:	4291      	cmp	r1, r2
 80036fa:	d830      	bhi.n	800375e <HAL_PCD_EP_ClrStall+0x6e>
{
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8003700:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003704:	d121      	bne.n	800374a <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003706:	f003 0207 	and.w	r2, r3, #7
 800370a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800370e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003712:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
    ep->is_in = 0U;
 8003716:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800371a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800371e:	2000      	movs	r0, #0
 8003720:	f882 0169 	strb.w	r0, [r2, #361]	@ 0x169
  ep->is_stall = 0U;
 8003724:	2200      	movs	r2, #0
 8003726:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800372e:	f894 32a8 	ldrb.w	r3, [r4, #680]	@ 0x2a8
 8003732:	2b01      	cmp	r3, #1
 8003734:	d015      	beq.n	8003762 <HAL_PCD_EP_ClrStall+0x72>
 8003736:	2301      	movs	r3, #1
 8003738:	f884 32a8 	strb.w	r3, [r4, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f001 fbab 	bl	8004e98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003742:	2000      	movs	r0, #0
 8003744:	f884 02a8 	strb.w	r0, [r4, #680]	@ 0x2a8
}
 8003748:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374a:	f003 0207 	and.w	r2, r3, #7
 800374e:	3201      	adds	r2, #1
 8003750:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003754:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003758:	2001      	movs	r0, #1
 800375a:	7048      	strb	r0, [r1, #1]
 800375c:	e7e2      	b.n	8003724 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800375e:	2001      	movs	r0, #1
}
 8003760:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003762:	2002      	movs	r0, #2
 8003764:	e7f0      	b.n	8003748 <HAL_PCD_EP_ClrStall+0x58>

08003766 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003766:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800376a:	d00b      	beq.n	8003784 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800376c:	f001 0107 	and.w	r1, r1, #7
 8003770:	3101      	adds	r1, #1
 8003772:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003776:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800377a:	b952      	cbnz	r2, 8003792 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800377c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800377e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003784:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003788:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800378c:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8003790:	e7f3      	b.n	800377a <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8003792:	2201      	movs	r2, #1
 8003794:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003796:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	8143      	strh	r3, [r0, #10]
 800379c:	e7f0      	b.n	8003780 <HAL_PCDEx_PMAConfig+0x1a>
	...

080037a0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a0:	2800      	cmp	r0, #0
 80037a2:	f000 8201 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x408>
{
 80037a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ae:	6803      	ldr	r3, [r0, #0]
 80037b0:	f013 0f01 	tst.w	r3, #1
 80037b4:	d02c      	beq.n	8003810 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b6:	4b9f      	ldr	r3, [pc, #636]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d01d      	beq.n	80037fe <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d012      	beq.n	80037f4 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ce:	6863      	ldr	r3, [r4, #4]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d041      	beq.n	800385a <HAL_RCC_OscConfig+0xba>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d155      	bne.n	8003886 <HAL_RCC_OscConfig+0xe6>
 80037da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037de:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e037      	b.n	8003864 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80037fc:	d0e7      	beq.n	80037ce <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003806:	d003      	beq.n	8003810 <HAL_RCC_OscConfig+0x70>
 8003808:	6863      	ldr	r3, [r4, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 81ce 	beq.w	8003bac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	f013 0f02 	tst.w	r3, #2
 8003816:	d075      	beq.n	8003904 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003818:	4b86      	ldr	r3, [pc, #536]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f013 0f0c 	tst.w	r3, #12
 8003820:	d05f      	beq.n	80038e2 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003822:	4b84      	ldr	r3, [pc, #528]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b08      	cmp	r3, #8
 800382c:	d054      	beq.n	80038d8 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 808a 	beq.w	800394a <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003836:	4b80      	ldr	r3, [pc, #512]	@ (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe fc62 	bl	8002104 <HAL_GetTick>
 8003840:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4e7c      	ldr	r6, [pc, #496]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 8003844:	6833      	ldr	r3, [r6, #0]
 8003846:	f013 0f02 	tst.w	r3, #2
 800384a:	d175      	bne.n	8003938 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe fc5a 	bl	8002104 <HAL_GetTick>
 8003850:	1b40      	subs	r0, r0, r5
 8003852:	2802      	cmp	r0, #2
 8003854:	d9f6      	bls.n	8003844 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003856:	2003      	movs	r0, #3
 8003858:	e1ad      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385a:	4a76      	ldr	r2, [pc, #472]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 800385c:	6813      	ldr	r3, [r2, #0]
 800385e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003862:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	b343      	cbz	r3, 80038ba <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003868:	f7fe fc4c 	bl	8002104 <HAL_GetTick>
 800386c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4e71      	ldr	r6, [pc, #452]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003876:	d1cb      	bne.n	8003810 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fc44 	bl	8002104 <HAL_GetTick>
 800387c:	1b40      	subs	r0, r0, r5
 800387e:	2864      	cmp	r0, #100	@ 0x64
 8003880:	d9f6      	bls.n	8003870 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8003882:	2003      	movs	r0, #3
 8003884:	e197      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003886:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800388a:	d009      	beq.n	80038a0 <HAL_RCC_OscConfig+0x100>
 800388c:	4b69      	ldr	r3, [pc, #420]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e7e1      	b.n	8003864 <HAL_RCC_OscConfig+0xc4>
 80038a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038a4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e7d4      	b.n	8003864 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80038ba:	f7fe fc23 	bl	8002104 <HAL_GetTick>
 80038be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c0:	4e5c      	ldr	r6, [pc, #368]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80038c2:	6833      	ldr	r3, [r6, #0]
 80038c4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80038c8:	d0a2      	beq.n	8003810 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ca:	f7fe fc1b 	bl	8002104 <HAL_GetTick>
 80038ce:	1b40      	subs	r0, r0, r5
 80038d0:	2864      	cmp	r0, #100	@ 0x64
 80038d2:	d9f6      	bls.n	80038c2 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80038d4:	2003      	movs	r0, #3
 80038d6:	e16e      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038d8:	4b56      	ldr	r3, [pc, #344]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80038e0:	d1a5      	bne.n	800382e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b54      	ldr	r3, [pc, #336]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f013 0f02 	tst.w	r3, #2
 80038ea:	d003      	beq.n	80038f4 <HAL_RCC_OscConfig+0x154>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	f040 815e 	bne.w	8003bb0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	6961      	ldr	r1, [r4, #20]
 80038fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80038fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003902:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	f013 0f08 	tst.w	r3, #8
 800390a:	d03d      	beq.n	8003988 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800390c:	69a3      	ldr	r3, [r4, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d066      	beq.n	80039e0 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003912:	4b49      	ldr	r3, [pc, #292]	@ (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003914:	2201      	movs	r2, #1
 8003916:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391a:	f7fe fbf3 	bl	8002104 <HAL_GetTick>
 800391e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003920:	4e44      	ldr	r6, [pc, #272]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 8003922:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003924:	f013 0f02 	tst.w	r3, #2
 8003928:	d121      	bne.n	800396e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392a:	f7fe fbeb 	bl	8002104 <HAL_GetTick>
 800392e:	1b40      	subs	r0, r0, r5
 8003930:	2802      	cmp	r0, #2
 8003932:	d9f6      	bls.n	8003922 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003934:	2003      	movs	r0, #3
 8003936:	e13e      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003938:	4a3e      	ldr	r2, [pc, #248]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	6961      	ldr	r1, [r4, #20]
 800393e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003942:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e7dc      	b.n	8003904 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800394a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <HAL_RCC_OscConfig+0x298>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003950:	f7fe fbd8 	bl	8002104 <HAL_GetTick>
 8003954:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003956:	4e37      	ldr	r6, [pc, #220]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 8003958:	6833      	ldr	r3, [r6, #0]
 800395a:	f013 0f02 	tst.w	r3, #2
 800395e:	d0d1      	beq.n	8003904 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fe fbd0 	bl	8002104 <HAL_GetTick>
 8003964:	1b40      	subs	r0, r0, r5
 8003966:	2802      	cmp	r0, #2
 8003968:	d9f6      	bls.n	8003958 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 800396a:	2003      	movs	r0, #3
 800396c:	e123      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800396e:	4b33      	ldr	r3, [pc, #204]	@ (8003a3c <HAL_RCC_OscConfig+0x29c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a33      	ldr	r2, [pc, #204]	@ (8003a40 <HAL_RCC_OscConfig+0x2a0>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800397c:	bf00      	nop
  }
  while (Delay --);
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	9201      	str	r2, [sp, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	f013 0f04 	tst.w	r3, #4
 800398e:	f000 809b 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b28      	ldr	r3, [pc, #160]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800399a:	d134      	bne.n	8003a06 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b25      	ldr	r3, [pc, #148]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80039a4:	61da      	str	r2, [r3, #28]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80039b0:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <HAL_RCC_OscConfig+0x2a4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80039ba:	d026      	beq.n	8003a0a <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d042      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2a8>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d158      	bne.n	8003a78 <HAL_RCC_OscConfig+0x2d8>
 80039c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039ca:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	621a      	str	r2, [r3, #32]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	f022 0204 	bic.w	r2, r2, #4
 80039dc:	621a      	str	r2, [r3, #32]
 80039de:	e038      	b.n	8003a52 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80039e0:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <HAL_RCC_OscConfig+0x298>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80039e8:	f7fe fb8c 	bl	8002104 <HAL_GetTick>
 80039ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ee:	4e11      	ldr	r6, [pc, #68]	@ (8003a34 <HAL_RCC_OscConfig+0x294>)
 80039f0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80039f2:	f013 0f02 	tst.w	r3, #2
 80039f6:	d0c7      	beq.n	8003988 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fe fb84 	bl	8002104 <HAL_GetTick>
 80039fc:	1b40      	subs	r0, r0, r5
 80039fe:	2802      	cmp	r0, #2
 8003a00:	d9f6      	bls.n	80039f0 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8003a02:	2003      	movs	r0, #3
 8003a04:	e0d7      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003a06:	2500      	movs	r5, #0
 8003a08:	e7d3      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a44 <HAL_RCC_OscConfig+0x2a4>)
 8003a0c:	6813      	ldr	r3, [r2, #0]
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a12:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a14:	f7fe fb76 	bl	8002104 <HAL_GetTick>
 8003a18:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4f0a      	ldr	r7, [pc, #40]	@ (8003a44 <HAL_RCC_OscConfig+0x2a4>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003a22:	d1cb      	bne.n	80039bc <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7fe fb6e 	bl	8002104 <HAL_GetTick>
 8003a28:	1b80      	subs	r0, r0, r6
 8003a2a:	2864      	cmp	r0, #100	@ 0x64
 8003a2c:	d9f6      	bls.n	8003a1c <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8003a2e:	2003      	movs	r0, #3
 8003a30:	e0c1      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	42420000 	.word	0x42420000
 8003a3c:	20000180 	.word	0x20000180
 8003a40:	10624dd3 	.word	0x10624dd3
 8003a44:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a48:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003a4a:	6a13      	ldr	r3, [r2, #32]
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a52:	68e3      	ldr	r3, [r4, #12]
 8003a54:	b333      	cbz	r3, 8003aa4 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003a56:	f7fe fb55 	bl	8002104 <HAL_GetTick>
 8003a5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	4f59      	ldr	r7, [pc, #356]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f013 0f02 	tst.w	r3, #2
 8003a68:	d12d      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe fb4b 	bl	8002104 <HAL_GetTick>
 8003a6e:	1b80      	subs	r0, r0, r6
 8003a70:	4540      	cmp	r0, r8
 8003a72:	d9f6      	bls.n	8003a62 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
 8003a76:	e09e      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d009      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
 8003a7c:	4b51      	ldr	r3, [pc, #324]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	621a      	str	r2, [r3, #32]
 8003a86:	6a1a      	ldr	r2, [r3, #32]
 8003a88:	f022 0204 	bic.w	r2, r2, #4
 8003a8c:	621a      	str	r2, [r3, #32]
 8003a8e:	e7e0      	b.n	8003a52 <HAL_RCC_OscConfig+0x2b2>
 8003a90:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	f042 0204 	orr.w	r2, r2, #4
 8003a98:	621a      	str	r2, [r3, #32]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	621a      	str	r2, [r3, #32]
 8003aa2:	e7d6      	b.n	8003a52 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003aa4:	f7fe fb2e 	bl	8002104 <HAL_GetTick>
 8003aa8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aaa:	4f46      	ldr	r7, [pc, #280]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f013 0f02 	tst.w	r3, #2
 8003ab6:	d006      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fe fb24 	bl	8002104 <HAL_GetTick>
 8003abc:	1b80      	subs	r0, r0, r6
 8003abe:	4540      	cmp	r0, r8
 8003ac0:	d9f6      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8003ac2:	2003      	movs	r0, #3
 8003ac4:	e077      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8003ac6:	b9e5      	cbnz	r5, 8003b02 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac8:	69e3      	ldr	r3, [r4, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d072      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ace:	4a3d      	ldr	r2, [pc, #244]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003ad0:	6852      	ldr	r2, [r2, #4]
 8003ad2:	f002 020c 	and.w	r2, r2, #12
 8003ad6:	2a08      	cmp	r2, #8
 8003ad8:	d056      	beq.n	8003b88 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d017      	beq.n	8003b0e <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc8 <HAL_RCC_OscConfig+0x428>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fb0e 	bl	8002104 <HAL_GetTick>
 8003ae8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aea:	4d36      	ldr	r5, [pc, #216]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003af2:	d047      	beq.n	8003b84 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fe fb06 	bl	8002104 <HAL_GetTick>
 8003af8:	1b00      	subs	r0, r0, r4
 8003afa:	2802      	cmp	r0, #2
 8003afc:	d9f6      	bls.n	8003aec <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8003afe:	2003      	movs	r0, #3
 8003b00:	e059      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4a30      	ldr	r2, [pc, #192]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003b04:	69d3      	ldr	r3, [r2, #28]
 8003b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	61d3      	str	r3, [r2, #28]
 8003b0c:	e7dc      	b.n	8003ac8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc8 <HAL_RCC_OscConfig+0x428>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003b14:	f7fe faf6 	bl	8002104 <HAL_GetTick>
 8003b18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	4e2a      	ldr	r6, [pc, #168]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003b1c:	6833      	ldr	r3, [r6, #0]
 8003b1e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003b22:	d006      	beq.n	8003b32 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe faee 	bl	8002104 <HAL_GetTick>
 8003b28:	1b40      	subs	r0, r0, r5
 8003b2a:	2802      	cmp	r0, #2
 8003b2c:	d9f6      	bls.n	8003b1c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8003b2e:	2003      	movs	r0, #3
 8003b30:	e041      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b32:	6a23      	ldr	r3, [r4, #32]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b38:	d01a      	beq.n	8003b70 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3a:	4922      	ldr	r1, [pc, #136]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003b3c:	684a      	ldr	r2, [r1, #4]
 8003b3e:	6a23      	ldr	r3, [r4, #32]
 8003b40:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003b42:	4303      	orrs	r3, r0
 8003b44:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_RCC_OscConfig+0x428>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003b52:	f7fe fad7 	bl	8002104 <HAL_GetTick>
 8003b56:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b58:	4d1a      	ldr	r5, [pc, #104]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003b5a:	682b      	ldr	r3, [r5, #0]
 8003b5c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003b60:	d10e      	bne.n	8003b80 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fe facf 	bl	8002104 <HAL_GetTick>
 8003b66:	1b00      	subs	r0, r0, r4
 8003b68:	2802      	cmp	r0, #2
 8003b6a:	d9f6      	bls.n	8003b5a <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	e022      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b70:	4a14      	ldr	r2, [pc, #80]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003b72:	6853      	ldr	r3, [r2, #4]
 8003b74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b78:	68a1      	ldr	r1, [r4, #8]
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	6053      	str	r3, [r2, #4]
 8003b7e:	e7dc      	b.n	8003b3a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003b80:	2000      	movs	r0, #0
 8003b82:	e018      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
 8003b84:	2000      	movs	r0, #0
 8003b86:	e016      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d017      	beq.n	8003bbc <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <HAL_RCC_OscConfig+0x424>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b90:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8003b94:	6a22      	ldr	r2, [r4, #32]
 8003b96:	4291      	cmp	r1, r2
 8003b98:	d112      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b9a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003ba0:	1a18      	subs	r0, r3, r0
 8003ba2:	bf18      	it	ne
 8003ba4:	2001      	movne	r0, #1
 8003ba6:	e006      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003ba8:	2001      	movs	r0, #1
}
 8003baa:	4770      	bx	lr
        return HAL_ERROR;
 8003bac:	2001      	movs	r0, #1
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003bb4:	2000      	movs	r0, #0
}
 8003bb6:	b002      	add	sp, #8
 8003bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	e7fa      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	e7f8      	b.n	8003bb6 <HAL_RCC_OscConfig+0x416>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	42420000 	.word	0x42420000

08003bcc <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x40>)
 8003bce:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bd0:	f003 020c 	and.w	r2, r3, #12
 8003bd4:	2a08      	cmp	r2, #8
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003bd8:	480d      	ldr	r0, [pc, #52]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003bda:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bdc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003be0:	490c      	ldr	r1, [pc, #48]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x48>)
 8003be2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003be8:	d00b      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bea:	4b08      	ldr	r3, [pc, #32]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x40>)
 8003bec:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bee:	4a08      	ldr	r2, [pc, #32]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x44>)
 8003bf0:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003bf8:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bfc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c00:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c02:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x50>)
 8003c04:	fb03 f000 	mul.w	r0, r3, r0
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	007a1200 	.word	0x007a1200
 8003c14:	0800bdf8 	.word	0x0800bdf8
 8003c18:	0800bdf4 	.word	0x0800bdf4
 8003c1c:	003d0900 	.word	0x003d0900

08003c20 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f000 80a2 	beq.w	8003d6a <HAL_RCC_ClockConfig+0x14a>
{
 8003c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2a:	460d      	mov	r5, r1
 8003c2c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c2e:	4b53      	ldr	r3, [pc, #332]	@ (8003d7c <HAL_RCC_ClockConfig+0x15c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	428b      	cmp	r3, r1
 8003c38:	d20b      	bcs.n	8003c52 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4a50      	ldr	r2, [pc, #320]	@ (8003d7c <HAL_RCC_ClockConfig+0x15c>)
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	f040 808e 	bne.w	8003d6e <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	f013 0f02 	tst.w	r3, #2
 8003c58:	d017      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5a:	f013 0f04 	tst.w	r3, #4
 8003c5e:	d004      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c60:	4a47      	ldr	r2, [pc, #284]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003c62:	6853      	ldr	r3, [r2, #4]
 8003c64:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c68:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	f013 0f08 	tst.w	r3, #8
 8003c70:	d004      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c72:	4a43      	ldr	r2, [pc, #268]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003c74:	6853      	ldr	r3, [r2, #4]
 8003c76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c7a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4a40      	ldr	r2, [pc, #256]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003c7e:	6853      	ldr	r3, [r2, #4]
 8003c80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c84:	68a1      	ldr	r1, [r4, #8]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	f013 0f01 	tst.w	r3, #1
 8003c90:	d031      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	6862      	ldr	r2, [r4, #4]
 8003c94:	2a01      	cmp	r2, #1
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c98:	2a02      	cmp	r2, #2
 8003c9a:	d025      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	4b38      	ldr	r3, [pc, #224]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f013 0f02 	tst.w	r3, #2
 8003ca4:	d065      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4936      	ldr	r1, [pc, #216]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003ca8:	684b      	ldr	r3, [r1, #4]
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003cb2:	f7fe fa27 	bl	8002104 <HAL_GetTick>
 8003cb6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb8:	4f31      	ldr	r7, [pc, #196]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cba:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	6862      	ldr	r2, [r4, #4]
 8003cc6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003cca:	d014      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fe fa1a 	bl	8002104 <HAL_GetTick>
 8003cd0:	1b80      	subs	r0, r0, r6
 8003cd2:	4540      	cmp	r0, r8
 8003cd4:	d9f3      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	e045      	b.n	8003d66 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003ce2:	d1e0      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e03e      	b.n	8003d66 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce8:	4b25      	ldr	r3, [pc, #148]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003cf0:	d1d9      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	e037      	b.n	8003d66 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf6:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <HAL_RCC_ClockConfig+0x15c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	42ab      	cmp	r3, r5
 8003d00:	d90a      	bls.n	8003d18 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4a1e      	ldr	r2, [pc, #120]	@ (8003d7c <HAL_RCC_ClockConfig+0x15c>)
 8003d04:	6813      	ldr	r3, [r2, #0]
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	432b      	orrs	r3, r5
 8003d0c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	42ab      	cmp	r3, r5
 8003d16:	d12e      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	f013 0f04 	tst.w	r3, #4
 8003d1e:	d006      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d20:	4a17      	ldr	r2, [pc, #92]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003d22:	6853      	ldr	r3, [r2, #4]
 8003d24:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003d28:	68e1      	ldr	r1, [r4, #12]
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f013 0f08 	tst.w	r3, #8
 8003d34:	d007      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d36:	4a12      	ldr	r2, [pc, #72]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003d38:	6853      	ldr	r3, [r2, #4]
 8003d3a:	6921      	ldr	r1, [r4, #16]
 8003d3c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003d40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d44:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d46:	f7ff ff41 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <HAL_RCC_ClockConfig+0x160>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d52:	4a0c      	ldr	r2, [pc, #48]	@ (8003d84 <HAL_RCC_ClockConfig+0x164>)
 8003d54:	5cd3      	ldrb	r3, [r2, r3]
 8003d56:	40d8      	lsrs	r0, r3
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_ClockConfig+0x168>)
 8003d5a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_RCC_ClockConfig+0x16c>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	f7fe f98c 	bl	800207c <HAL_InitTick>
  return HAL_OK;
 8003d64:	2000      	movs	r0, #0
}
 8003d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003d6a:	2001      	movs	r0, #1
}
 8003d6c:	4770      	bx	lr
    return HAL_ERROR;
 8003d6e:	2001      	movs	r0, #1
 8003d70:	e7f9      	b.n	8003d66 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003d72:	2001      	movs	r0, #1
 8003d74:	e7f7      	b.n	8003d66 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
 8003d78:	e7f5      	b.n	8003d66 <HAL_RCC_ClockConfig+0x146>
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	0800b5e0 	.word	0x0800b5e0
 8003d88:	20000180 	.word	0x20000180
 8003d8c:	20000188 	.word	0x20000188

08003d90 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003d98:	4a03      	ldr	r2, [pc, #12]	@ (8003da8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	4a03      	ldr	r2, [pc, #12]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d9e:	6810      	ldr	r0, [r2, #0]
}
 8003da0:	40d8      	lsrs	r0, r3
 8003da2:	4770      	bx	lr
 8003da4:	40021000 	.word	0x40021000
 8003da8:	0800b5d8 	.word	0x0800b5d8
 8003dac:	20000180 	.word	0x20000180

08003db0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db0:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003db8:	4a03      	ldr	r2, [pc, #12]	@ (8003dc8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	4a03      	ldr	r2, [pc, #12]	@ (8003dcc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003dbe:	6810      	ldr	r0, [r2, #0]
}
 8003dc0:	40d8      	lsrs	r0, r3
 8003dc2:	4770      	bx	lr
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	0800b5d8 	.word	0x0800b5d8
 8003dcc:	20000180 	.word	0x20000180

08003dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003dd8:	6803      	ldr	r3, [r0, #0]
 8003dda:	f013 0f01 	tst.w	r3, #1
 8003dde:	d036      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003de8:	d149      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003df2:	61da      	str	r2, [r3, #28]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003dfe:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	4b38      	ldr	r3, [pc, #224]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003e08:	d03b      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e0a:	4b35      	ldr	r3, [pc, #212]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e0e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003e12:	d013      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003e14:	6862      	ldr	r2, [r4, #4]
 8003e16:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d00e      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e1e:	4a30      	ldr	r2, [pc, #192]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e20:	6a13      	ldr	r3, [r2, #32]
 8003e22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e26:	4930      	ldr	r1, [pc, #192]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003e28:	2601      	movs	r6, #1
 8003e2a:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e2e:	2600      	movs	r6, #0
 8003e30:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e34:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e36:	f013 0f01 	tst.w	r3, #1
 8003e3a:	d136      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3c:	4a28      	ldr	r2, [pc, #160]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e3e:	6a13      	ldr	r3, [r2, #32]
 8003e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e44:	6861      	ldr	r1, [r4, #4]
 8003e46:	430b      	orrs	r3, r1
 8003e48:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	d13e      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f013 0f02 	tst.w	r3, #2
 8003e54:	d006      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e56:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e58:	6853      	ldr	r3, [r2, #4]
 8003e5a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003e5e:	68a1      	ldr	r1, [r4, #8]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	f013 0f10 	tst.w	r3, #16
 8003e6a:	d034      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e6e:	6853      	ldr	r3, [r2, #4]
 8003e70:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003e74:	68e1      	ldr	r1, [r4, #12]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e02c      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003e7e:	2500      	movs	r5, #0
 8003e80:	e7be      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003e8c:	f7fe f93a 	bl	8002104 <HAL_GetTick>
 8003e90:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e92:	4f14      	ldr	r7, [pc, #80]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003e9a:	d1b6      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fe f932 	bl	8002104 <HAL_GetTick>
 8003ea0:	1b80      	subs	r0, r0, r6
 8003ea2:	2864      	cmp	r0, #100	@ 0x64
 8003ea4:	d9f6      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003ea6:	2003      	movs	r0, #3
 8003ea8:	e016      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003eaa:	f7fe f92b 	bl	8002104 <HAL_GetTick>
 8003eae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	4f0b      	ldr	r7, [pc, #44]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f013 0f02 	tst.w	r3, #2
 8003ebc:	d1be      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fe f921 	bl	8002104 <HAL_GetTick>
 8003ec2:	1b80      	subs	r0, r0, r6
 8003ec4:	4540      	cmp	r0, r8
 8003ec6:	d9f6      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003ec8:	2003      	movs	r0, #3
 8003eca:	e005      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ecc:	69d3      	ldr	r3, [r2, #28]
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed2:	61d3      	str	r3, [r2, #28]
 8003ed4:	e7bb      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003ed6:	2000      	movs	r0, #0
}
 8003ed8:	b002      	add	sp, #8
 8003eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	42420000 	.word	0x42420000

08003eec <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_Base_Start+0x50>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efc:	6803      	ldr	r3, [r0, #0]
 8003efe:	4a11      	ldr	r2, [pc, #68]	@ (8003f44 <HAL_TIM_Base_Start+0x58>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d010      	beq.n	8003f26 <HAL_TIM_Base_Start+0x3a>
 8003f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f08:	d00d      	beq.n	8003f26 <HAL_TIM_Base_Start+0x3a>
 8003f0a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_TIM_Base_Start+0x3a>
 8003f12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d005      	beq.n	8003f26 <HAL_TIM_Base_Start+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f22:	2000      	movs	r0, #0
 8003f24:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	2a06      	cmp	r2, #6
 8003f2e:	d007      	beq.n	8003f40 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f38:	2000      	movs	r0, #0
 8003f3a:	4770      	bx	lr
    return HAL_ERROR;
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	4770      	bx	lr
  return HAL_OK;
 8003f40:	2000      	movs	r0, #0
}
 8003f42:	4770      	bx	lr
 8003f44:	40012c00 	.word	0x40012c00

08003f48 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f48:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f4a:	4a25      	ldr	r2, [pc, #148]	@ (8003fe0 <TIM_Base_SetConfig+0x98>)
 8003f4c:	4290      	cmp	r0, r2
 8003f4e:	d014      	beq.n	8003f7a <TIM_Base_SetConfig+0x32>
 8003f50:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003f54:	d026      	beq.n	8003fa4 <TIM_Base_SetConfig+0x5c>
 8003f56:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003f5a:	4290      	cmp	r0, r2
 8003f5c:	d036      	beq.n	8003fcc <TIM_Base_SetConfig+0x84>
 8003f5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f62:	4290      	cmp	r0, r2
 8003f64:	d037      	beq.n	8003fd6 <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f6a:	694a      	ldr	r2, [r1, #20]
 8003f6c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003f6e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f70:	688b      	ldr	r3, [r1, #8]
 8003f72:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f74:	680b      	ldr	r3, [r1, #0]
 8003f76:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	e025      	b.n	8003fc6 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f7e:	684a      	ldr	r2, [r1, #4]
 8003f80:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f86:	68ca      	ldr	r2, [r1, #12]
 8003f88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f8e:	694a      	ldr	r2, [r1, #20]
 8003f90:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f92:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f94:	688b      	ldr	r3, [r1, #8]
 8003f96:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f98:	680b      	ldr	r3, [r1, #0]
 8003f9a:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f9c:	690a      	ldr	r2, [r1, #16]
 8003f9e:	4b10      	ldr	r3, [pc, #64]	@ (8003fe0 <TIM_Base_SetConfig+0x98>)
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fa2:	e010      	b.n	8003fc6 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fa8:	684a      	ldr	r2, [r1, #4]
 8003faa:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb0:	68ca      	ldr	r2, [r1, #12]
 8003fb2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb8:	694a      	ldr	r2, [r1, #20]
 8003fba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003fbc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fbe:	688b      	ldr	r3, [r1, #8]
 8003fc0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fc2:	680b      	ldr	r3, [r1, #0]
 8003fc4:	6283      	str	r3, [r0, #40]	@ 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	6143      	str	r3, [r0, #20]
}
 8003fca:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	684a      	ldr	r2, [r1, #4]
 8003fd2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd4:	e7ea      	b.n	8003fac <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fda:	684a      	ldr	r2, [r1, #4]
 8003fdc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fde:	e7e5      	b.n	8003fac <TIM_Base_SetConfig+0x64>
 8003fe0:	40012c00 	.word	0x40012c00

08003fe4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003fe4:	b340      	cbz	r0, 8004038 <HAL_TIM_Base_Init+0x54>
{
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003fee:	b1f3      	cbz	r3, 800402e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ffc:	f7ff ffa4 	bl	8003f48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004000:	2301      	movs	r3, #1
 8004002:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800400a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800400e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004012:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800401a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800401e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004022:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004026:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800402a:	2000      	movs	r0, #0
}
 800402c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800402e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004032:	f7fd feeb 	bl	8001e0c <HAL_TIM_Base_MspInit>
 8004036:	e7db      	b.n	8003ff0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004038:	2001      	movs	r0, #1
}
 800403a:	4770      	bx	lr

0800403c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800403c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004044:	430a      	orrs	r2, r1
 8004046:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800404a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404e:	6082      	str	r2, [r0, #8]
}
 8004050:	bc10      	pop	{r4}
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_ConfigClockSource>:
{
 8004054:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004056:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	f000 80ad 	beq.w	80041ba <HAL_TIM_ConfigClockSource+0x166>
 8004060:	4604      	mov	r4, r0
 8004062:	2301      	movs	r3, #1
 8004064:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	2302      	movs	r3, #2
 800406a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800406e:	6802      	ldr	r2, [r0, #0]
 8004070:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004076:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800407a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800407c:	680b      	ldr	r3, [r1, #0]
 800407e:	2b60      	cmp	r3, #96	@ 0x60
 8004080:	d060      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0xf0>
 8004082:	d83d      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0xac>
 8004084:	2b40      	cmp	r3, #64	@ 0x40
 8004086:	d079      	beq.n	800417c <HAL_TIM_ConfigClockSource+0x128>
 8004088:	d91c      	bls.n	80040c4 <HAL_TIM_ConfigClockSource+0x70>
 800408a:	2b50      	cmp	r3, #80	@ 0x50
 800408c:	d136      	bne.n	80040fc <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004090:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004092:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004094:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80040ac:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80040ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80040b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ba:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80040be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2000      	movs	r0, #0
}
 80040c2:	e012      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d002      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x7a>
 80040c8:	d90b      	bls.n	80040e2 <HAL_TIM_ConfigClockSource+0x8e>
 80040ca:	2b30      	cmp	r3, #48	@ 0x30
 80040cc:	d114      	bne.n	80040f8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ce:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80040d0:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80040dc:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2000      	movs	r0, #0
}
 80040e0:	e003      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80040e2:	f033 0210 	bics.w	r2, r3, #16
 80040e6:	d0f2      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x7a>
 80040e8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80040f0:	2300      	movs	r3, #0
 80040f2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80040f8:	2001      	movs	r0, #1
 80040fa:	e7f6      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
 80040fc:	2001      	movs	r0, #1
 80040fe:	e7f4      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004104:	d055      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x15e>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	d10c      	bne.n	8004126 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 800410c:	68cb      	ldr	r3, [r1, #12]
 800410e:	684a      	ldr	r2, [r1, #4]
 8004110:	6889      	ldr	r1, [r1, #8]
 8004112:	6800      	ldr	r0, [r0, #0]
 8004114:	f7ff ff92 	bl	800403c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004118:	6822      	ldr	r2, [r4, #0]
 800411a:	6893      	ldr	r3, [r2, #8]
 800411c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004120:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2000      	movs	r0, #0
      break;
 8004124:	e7e1      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004126:	2b70      	cmp	r3, #112	@ 0x70
 8004128:	d145      	bne.n	80041b6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	68cb      	ldr	r3, [r1, #12]
 800412c:	684a      	ldr	r2, [r1, #4]
 800412e:	6889      	ldr	r1, [r1, #8]
 8004130:	6800      	ldr	r0, [r0, #0]
 8004132:	f7ff ff83 	bl	800403c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800413a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800413e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2000      	movs	r0, #0
      break;
 8004142:	e7d2      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004144:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004146:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004148:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800414a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414c:	6a19      	ldr	r1, [r3, #32]
 800414e:	f021 0110 	bic.w	r1, r1, #16
 8004152:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004154:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004156:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800415a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004162:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004166:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800416a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800416c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004172:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004176:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2000      	movs	r0, #0
}
 800417a:	e7b6      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800417e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004180:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004182:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004192:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004196:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800419a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800419c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041a0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80041a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a8:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80041ac:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2000      	movs	r0, #0
}
 80041b0:	e79b      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2000      	movs	r0, #0
 80041b4:	e799      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80041b6:	2001      	movs	r0, #1
 80041b8:	e797      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80041ba:	2002      	movs	r0, #2
 80041bc:	e79b      	b.n	80040f6 <HAL_TIM_ConfigClockSource+0xa2>

080041be <TIM_SlaveTimer_SetConfig>:
{
 80041be:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 80041c0:	6802      	ldr	r2, [r0, #0]
 80041c2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041c8:	684c      	ldr	r4, [r1, #4]
 80041ca:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 80041cc:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80041d0:	680c      	ldr	r4, [r1, #0]
 80041d2:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 80041d4:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 80041d6:	684b      	ldr	r3, [r1, #4]
 80041d8:	2b50      	cmp	r3, #80	@ 0x50
 80041da:	d034      	beq.n	8004246 <TIM_SlaveTimer_SetConfig+0x88>
 80041dc:	d90b      	bls.n	80041f6 <TIM_SlaveTimer_SetConfig+0x38>
 80041de:	2b60      	cmp	r3, #96	@ 0x60
 80041e0:	d045      	beq.n	800426e <TIM_SlaveTimer_SetConfig+0xb0>
 80041e2:	2b70      	cmp	r3, #112	@ 0x70
 80041e4:	d15a      	bne.n	800429c <TIM_SlaveTimer_SetConfig+0xde>
      TIM_ETR_SetConfig(htim->Instance,
 80041e6:	690b      	ldr	r3, [r1, #16]
 80041e8:	688a      	ldr	r2, [r1, #8]
 80041ea:	68c9      	ldr	r1, [r1, #12]
 80041ec:	6800      	ldr	r0, [r0, #0]
 80041ee:	f7ff ff25 	bl	800403c <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2000      	movs	r0, #0
      break;
 80041f4:	e011      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d010      	beq.n	800421c <TIM_SlaveTimer_SetConfig+0x5e>
 80041fa:	d901      	bls.n	8004200 <TIM_SlaveTimer_SetConfig+0x42>
 80041fc:	2001      	movs	r0, #1
 80041fe:	e00c      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
 8004200:	2b20      	cmp	r3, #32
 8004202:	d049      	beq.n	8004298 <TIM_SlaveTimer_SetConfig+0xda>
 8004204:	d904      	bls.n	8004210 <TIM_SlaveTimer_SetConfig+0x52>
 8004206:	f1b3 0030 	subs.w	r0, r3, #48	@ 0x30
 800420a:	bf18      	it	ne
 800420c:	2001      	movne	r0, #1
 800420e:	e004      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
 8004210:	f033 0310 	bics.w	r3, r3, #16
 8004214:	bf14      	ite	ne
 8004216:	2001      	movne	r0, #1
 8004218:	2000      	moveq	r0, #0
}
 800421a:	bd10      	pop	{r4, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800421c:	680b      	ldr	r3, [r1, #0]
 800421e:	2b05      	cmp	r3, #5
 8004220:	d03e      	beq.n	80042a0 <TIM_SlaveTimer_SetConfig+0xe2>
      tmpccer = htim->Instance->CCER;
 8004222:	6803      	ldr	r3, [r0, #0]
 8004224:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800422e:	6802      	ldr	r2, [r0, #0]
 8004230:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004236:	6909      	ldr	r1, [r1, #16]
 8004238:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800423c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800423e:	6803      	ldr	r3, [r0, #0]
 8004240:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2000      	movs	r0, #0
      break;
 8004244:	e7e9      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	6803      	ldr	r3, [r0, #0]
                               sSlaveConfig->TriggerPolarity,
 8004248:	6888      	ldr	r0, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800424a:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 800424c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004256:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004258:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800425c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004260:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004264:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004268:	6219      	str	r1, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2000      	movs	r0, #0
}
 800426c:	e7d5      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800426e:	6803      	ldr	r3, [r0, #0]
                               sSlaveConfig->TriggerPolarity,
 8004270:	6888      	ldr	r0, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8004272:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 8004274:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004276:	6a19      	ldr	r1, [r3, #32]
 8004278:	f021 0110 	bic.w	r1, r1, #16
 800427c:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004280:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004284:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004288:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800428c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004290:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004292:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2000      	movs	r0, #0
}
 8004296:	e7c0      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8004298:	2000      	movs	r0, #0
 800429a:	e7be      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 800429c:	2001      	movs	r0, #1
 800429e:	e7bc      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>
        return HAL_ERROR;
 80042a0:	2001      	movs	r0, #1
 80042a2:	e7ba      	b.n	800421a <TIM_SlaveTimer_SetConfig+0x5c>

080042a4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80042a4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d022      	beq.n	80042f2 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 80042ac:	b510      	push	{r4, lr}
 80042ae:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80042b0:	2301      	movs	r3, #1
 80042b2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80042bc:	f7ff ff7f 	bl	80041be <TIM_SlaveTimer_SetConfig>
 80042c0:	b980      	cbnz	r0, 80042e4 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80042c2:	6822      	ldr	r2, [r4, #0]
 80042c4:	68d3      	ldr	r3, [r2, #12]
 80042c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ca:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	68d3      	ldr	r3, [r2, #12]
 80042d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042d4:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80042dc:	2300      	movs	r3, #0
 80042de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80042e2:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80042e4:	2001      	movs	r0, #1
 80042e6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80042ea:	2300      	movs	r3, #0
 80042ec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80042f0:	e7f7      	b.n	80042e2 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 80042f2:	2002      	movs	r0, #2
}
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042f8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80042fc:	2a01      	cmp	r2, #1
 80042fe:	d02b      	beq.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8004300:	b430      	push	{r4, r5}
 8004302:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004304:	2201      	movs	r2, #1
 8004306:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430a:	2202      	movs	r2, #2
 800430c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004310:	6804      	ldr	r4, [r0, #0]
 8004312:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004316:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800431a:	680d      	ldr	r5, [r1, #0]
 800431c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431e:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4c0e      	ldr	r4, [pc, #56]	@ (800435c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004324:	42a2      	cmp	r2, r4
 8004326:	d00a      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004328:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800432c:	d007      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800432e:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8004332:	42a2      	cmp	r2, r4
 8004334:	d003      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004336:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800433a:	42a2      	cmp	r2, r4
 800433c:	d104      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004342:	6849      	ldr	r1, [r1, #4]
 8004344:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004346:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800434e:	2000      	movs	r0, #0
 8004350:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004354:	bc30      	pop	{r4, r5}
 8004356:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004358:	2002      	movs	r0, #2
}
 800435a:	4770      	bx	lr
 800435c:	40012c00 	.word	0x40012c00

08004360 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004360:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	f102 030c 	add.w	r3, r2, #12
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	320c      	adds	r2, #12
 8004370:	e842 3100 	strex	r1, r3, [r2]
 8004374:	2900      	cmp	r1, #0
 8004376:	d1f3      	bne.n	8004360 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	f102 0314 	add.w	r3, r2, #20
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	3214      	adds	r2, #20
 8004388:	e842 3100 	strex	r1, r3, [r2]
 800438c:	2900      	cmp	r1, #0
 800438e:	d1f3      	bne.n	8004378 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004390:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004392:	2b01      	cmp	r3, #1
 8004394:	d005      	beq.n	80043a2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004396:	2320      	movs	r3, #32
 8004398:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439c:	2300      	movs	r3, #0
 800439e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80043a0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	f102 030c 	add.w	r3, r2, #12
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	320c      	adds	r2, #12
 80043b2:	e842 3100 	strex	r1, r3, [r2]
 80043b6:	2900      	cmp	r1, #0
 80043b8:	d1f3      	bne.n	80043a2 <UART_EndRxTransfer+0x42>
 80043ba:	e7ec      	b.n	8004396 <UART_EndRxTransfer+0x36>

080043bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043bc:	b510      	push	{r4, lr}
 80043be:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c0:	6802      	ldr	r2, [r0, #0]
 80043c2:	6913      	ldr	r3, [r2, #16]
 80043c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043c8:	68c1      	ldr	r1, [r0, #12]
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 80043ce:	6801      	ldr	r1, [r0, #0]
 80043d0:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043d2:	6883      	ldr	r3, [r0, #8]
 80043d4:	6900      	ldr	r0, [r0, #16]
 80043d6:	4303      	orrs	r3, r0
 80043d8:	6960      	ldr	r0, [r4, #20]
 80043da:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80043dc:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
 80043e0:	f022 020c 	bic.w	r2, r2, #12
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	6953      	ldr	r3, [r2, #20]
 80043ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f0:	69a1      	ldr	r1, [r4, #24]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <UART_SetConfig+0x84>)
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d01b      	beq.n	8004436 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043fe:	f7ff fcc7 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8004402:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004404:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004408:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800440c:	6862      	ldr	r2, [r4, #4]
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	fbb3 f3f2 	udiv	r3, r3, r2
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	490b      	ldr	r1, [pc, #44]	@ (8004444 <UART_SetConfig+0x88>)
 8004418:	fba1 4203 	umull	r4, r2, r1, r3
 800441c:	0952      	lsrs	r2, r2, #5
 800441e:	2464      	movs	r4, #100	@ 0x64
 8004420:	fb04 3312 	mls	r3, r4, r2, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	@ 0x32
 8004428:	fba1 1303 	umull	r1, r3, r1, r3
 800442c:	0112      	lsls	r2, r2, #4
 800442e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8004432:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004434:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004436:	f7ff fcbb 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 800443a:	4603      	mov	r3, r0
 800443c:	e7e2      	b.n	8004404 <UART_SetConfig+0x48>
 800443e:	bf00      	nop
 8004440:	40013800 	.word	0x40013800
 8004444:	51eb851f 	.word	0x51eb851f

08004448 <HAL_UART_Init>:
  if (huart == NULL)
 8004448:	b360      	cbz	r0, 80044a4 <HAL_UART_Init+0x5c>
{
 800444a:	b510      	push	{r4, lr}
 800444c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800444e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004452:	b313      	cbz	r3, 800449a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	2324      	movs	r3, #36	@ 0x24
 8004456:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	68d3      	ldr	r3, [r2, #12]
 800445e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004462:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff ffa9 	bl	80043bc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	6913      	ldr	r3, [r2, #16]
 800446e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004472:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	6953      	ldr	r3, [r2, #20]
 8004478:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800447c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	68d3      	ldr	r3, [r2, #12]
 8004482:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004486:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004488:	2000      	movs	r0, #0
 800448a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800448c:	2320      	movs	r3, #32
 800448e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004492:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004496:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004498:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800449a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800449e:	f7fd fcf5 	bl	8001e8c <HAL_UART_MspInit>
 80044a2:	e7d7      	b.n	8004454 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80044a4:	2001      	movs	r0, #1
}
 80044a6:	4770      	bx	lr

080044a8 <HAL_UART_TxCpltCallback>:
}
 80044a8:	4770      	bx	lr

080044aa <HAL_UART_RxCpltCallback>:
}
 80044aa:	4770      	bx	lr

080044ac <HAL_UART_ErrorCallback>:
}
 80044ac:	4770      	bx	lr

080044ae <UART_DMAAbortOnError>:
{
 80044ae:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044b6:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80044b8:	f7ff fff8 	bl	80044ac <HAL_UART_ErrorCallback>
}
 80044bc:	bd08      	pop	{r3, pc}

080044be <HAL_UARTEx_RxEventCallback>:
}
 80044be:	4770      	bx	lr

080044c0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044c0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b22      	cmp	r3, #34	@ 0x22
 80044c8:	d11d      	bne.n	8004506 <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ca:	6883      	ldr	r3, [r0, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d0:	d006      	beq.n	80044e0 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044d2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044d4:	b17b      	cbz	r3, 80044f6 <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044d6:	6803      	ldr	r3, [r0, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044de:	e01a      	b.n	8004516 <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	6903      	ldr	r3, [r0, #16]
 80044e2:	b9a3      	cbnz	r3, 800450e <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044e4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044e6:	6803      	ldr	r3, [r0, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80044f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80044f2:	3302      	adds	r3, #2
 80044f4:	e012      	b.n	800451c <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044f6:	6903      	ldr	r3, [r0, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ec      	bne.n	80044d6 <UART_Receive_IT+0x16>
 80044fc:	e008      	b.n	8004510 <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 80044fe:	f7ff ffd4 	bl	80044aa <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8004502:	2000      	movs	r0, #0
 8004504:	e048      	b.n	8004598 <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 8004506:	2002      	movs	r0, #2
 8004508:	4770      	bx	lr
    return HAL_OK;
 800450a:	2000      	movs	r0, #0
}
 800450c:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800450e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004510:	6803      	ldr	r3, [r0, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004518:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800451a:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 800451c:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800451e:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004520:	3b01      	subs	r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ef      	bne.n	800450a <UART_Receive_IT+0x4a>
{
 800452a:	b500      	push	{lr}
 800452c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800452e:	6802      	ldr	r2, [r0, #0]
 8004530:	68d3      	ldr	r3, [r2, #12]
 8004532:	f023 0320 	bic.w	r3, r3, #32
 8004536:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004538:	6802      	ldr	r2, [r0, #0]
 800453a:	68d3      	ldr	r3, [r2, #12]
 800453c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004540:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004542:	6802      	ldr	r2, [r0, #0]
 8004544:	6953      	ldr	r3, [r2, #20]
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800454c:	2320      	movs	r3, #32
 800454e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004552:	2300      	movs	r3, #0
 8004554:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004556:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004558:	2b01      	cmp	r3, #1
 800455a:	d1d0      	bne.n	80044fe <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455c:	2300      	movs	r3, #0
 800455e:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	f102 030c 	add.w	r3, r2, #12
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	320c      	adds	r2, #12
 8004570:	e842 3100 	strex	r1, r3, [r2]
 8004574:	2900      	cmp	r1, #0
 8004576:	d1f3      	bne.n	8004560 <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004578:	6803      	ldr	r3, [r0, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f012 0f10 	tst.w	r2, #16
 8004580:	d006      	beq.n	8004590 <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004582:	2200      	movs	r2, #0
 8004584:	9201      	str	r2, [sp, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	9201      	str	r2, [sp, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004590:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004592:	f7ff ff94 	bl	80044be <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004596:	2000      	movs	r0, #0
}
 8004598:	b003      	add	sp, #12
 800459a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080045a0 <HAL_UART_IRQHandler>:
{
 80045a0:	b510      	push	{r4, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045a6:	6802      	ldr	r2, [r0, #0]
 80045a8:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045aa:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ac:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80045ae:	f013 0f0f 	tst.w	r3, #15
 80045b2:	d109      	bne.n	80045c8 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b4:	f013 0f20 	tst.w	r3, #32
 80045b8:	d00d      	beq.n	80045d6 <HAL_UART_IRQHandler+0x36>
 80045ba:	f010 0f20 	tst.w	r0, #32
 80045be:	d00a      	beq.n	80045d6 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff ff7d 	bl	80044c0 <UART_Receive_IT>
      return;
 80045c6:	e018      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045c8:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045cc:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 80045d0:	ea5c 0c01 	orrs.w	ip, ip, r1
 80045d4:	d113      	bne.n	80045fe <HAL_UART_IRQHandler+0x5e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80045d8:	2901      	cmp	r1, #1
 80045da:	f000 8081 	beq.w	80046e0 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045e2:	d003      	beq.n	80045ec <HAL_UART_IRQHandler+0x4c>
 80045e4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80045e8:	f040 811a 	bne.w	8004820 <HAL_UART_IRQHandler+0x280>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ec:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80045f0:	d003      	beq.n	80045fa <HAL_UART_IRQHandler+0x5a>
 80045f2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80045f6:	f040 8140 	bne.w	800487a <HAL_UART_IRQHandler+0x2da>
}
 80045fa:	b002      	add	sp, #8
 80045fc:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045fe:	f013 0f01 	tst.w	r3, #1
 8004602:	d006      	beq.n	8004612 <HAL_UART_IRQHandler+0x72>
 8004604:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8004608:	d003      	beq.n	8004612 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800460a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004612:	f013 0f04 	tst.w	r3, #4
 8004616:	d00b      	beq.n	8004630 <HAL_UART_IRQHandler+0x90>
 8004618:	b191      	cbz	r1, 8004640 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800461a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800461c:	f042 0202 	orr.w	r2, r2, #2
 8004620:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004622:	f013 0f02 	tst.w	r3, #2
 8004626:	d107      	bne.n	8004638 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004628:	f013 0f08 	tst.w	r3, #8
 800462c:	d10f      	bne.n	800464e <HAL_UART_IRQHandler+0xae>
 800462e:	e012      	b.n	8004656 <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004630:	f013 0f02 	tst.w	r3, #2
 8004634:	d004      	beq.n	8004640 <HAL_UART_IRQHandler+0xa0>
 8004636:	b119      	cbz	r1, 8004640 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004638:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800463a:	f042 0204 	orr.w	r2, r2, #4
 800463e:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004640:	f013 0f08 	tst.w	r3, #8
 8004644:	d007      	beq.n	8004656 <HAL_UART_IRQHandler+0xb6>
 8004646:	f000 0220 	and.w	r2, r0, #32
 800464a:	430a      	orrs	r2, r1
 800464c:	d003      	beq.n	8004656 <HAL_UART_IRQHandler+0xb6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800464e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004650:	f042 0208 	orr.w	r2, r2, #8
 8004654:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004656:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004658:	2a00      	cmp	r2, #0
 800465a:	d0ce      	beq.n	80045fa <HAL_UART_IRQHandler+0x5a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800465c:	f013 0f20 	tst.w	r3, #32
 8004660:	d002      	beq.n	8004668 <HAL_UART_IRQHandler+0xc8>
 8004662:	f010 0f20 	tst.w	r0, #32
 8004666:	d10e      	bne.n	8004686 <HAL_UART_IRQHandler+0xe6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800466c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004672:	f002 0208 	and.w	r2, r2, #8
 8004676:	4313      	orrs	r3, r2
 8004678:	d109      	bne.n	800468e <HAL_UART_IRQHandler+0xee>
        HAL_UART_ErrorCallback(huart);
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff ff16 	bl	80044ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	2300      	movs	r3, #0
 8004682:	6463      	str	r3, [r4, #68]	@ 0x44
 8004684:	e7b9      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
        UART_Receive_IT(huart);
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff ff1a 	bl	80044c0 <UART_Receive_IT>
 800468c:	e7ec      	b.n	8004668 <HAL_UART_IRQHandler+0xc8>
        UART_EndRxTransfer(huart);
 800468e:	4620      	mov	r0, r4
 8004690:	f7ff fe66 	bl	8004360 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800469c:	d01c      	beq.n	80046d8 <HAL_UART_IRQHandler+0x138>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	f102 0314 	add.w	r3, r2, #20
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	3214      	adds	r2, #20
 80046ae:	e842 3100 	strex	r1, r3, [r2]
 80046b2:	2900      	cmp	r1, #0
 80046b4:	d1f3      	bne.n	800469e <HAL_UART_IRQHandler+0xfe>
          if (huart->hdmarx != NULL)
 80046b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80046b8:	b153      	cbz	r3, 80046d0 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ba:	4a75      	ldr	r2, [pc, #468]	@ (8004890 <HAL_UART_IRQHandler+0x2f0>)
 80046bc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046be:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80046c0:	f7fd fde8 	bl	8002294 <HAL_DMA_Abort_IT>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d098      	beq.n	80045fa <HAL_UART_IRQHandler+0x5a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046c8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80046ca:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80046cc:	4798      	blx	r3
 80046ce:	e794      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
            HAL_UART_ErrorCallback(huart);
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff feeb 	bl	80044ac <HAL_UART_ErrorCallback>
 80046d6:	e790      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
          HAL_UART_ErrorCallback(huart);
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff fee7 	bl	80044ac <HAL_UART_ErrorCallback>
 80046de:	e78c      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046e0:	f013 0f10 	tst.w	r3, #16
 80046e4:	f43f af7b 	beq.w	80045de <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046e8:	f010 0f10 	tst.w	r0, #16
 80046ec:	f43f af77 	beq.w	80045de <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046f0:	2300      	movs	r3, #0
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	6853      	ldr	r3, [r2, #4]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fe:	6953      	ldr	r3, [r2, #20]
 8004700:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004704:	d050      	beq.n	80047a8 <HAL_UART_IRQHandler+0x208>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004706:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004708:	6813      	ldr	r3, [r2, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800470e:	2b00      	cmp	r3, #0
 8004710:	f43f af73 	beq.w	80045fa <HAL_UART_IRQHandler+0x5a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004714:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004716:	4299      	cmp	r1, r3
 8004718:	f67f af6f 	bls.w	80045fa <HAL_UART_IRQHandler+0x5a>
        huart->RxXferCount = nb_remaining_rx_data;
 800471c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800471e:	6993      	ldr	r3, [r2, #24]
 8004720:	2b20      	cmp	r3, #32
 8004722:	d037      	beq.n	8004794 <HAL_UART_IRQHandler+0x1f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004724:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	f102 030c 	add.w	r3, r2, #12
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	320c      	adds	r2, #12
 8004734:	e842 3100 	strex	r1, r3, [r2]
 8004738:	2900      	cmp	r1, #0
 800473a:	d1f3      	bne.n	8004724 <HAL_UART_IRQHandler+0x184>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	f102 0314 	add.w	r3, r2, #20
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	3214      	adds	r2, #20
 800474c:	e842 3100 	strex	r1, r3, [r2]
 8004750:	2900      	cmp	r1, #0
 8004752:	d1f3      	bne.n	800473c <HAL_UART_IRQHandler+0x19c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004754:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	f102 0314 	add.w	r3, r2, #20
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	3214      	adds	r2, #20
 8004764:	e842 3100 	strex	r1, r3, [r2]
 8004768:	2900      	cmp	r1, #0
 800476a:	d1f3      	bne.n	8004754 <HAL_UART_IRQHandler+0x1b4>
          huart->RxState = HAL_UART_STATE_READY;
 800476c:	2320      	movs	r3, #32
 800476e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004772:	2300      	movs	r3, #0
 8004774:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004776:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	f102 030c 	add.w	r3, r2, #12
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	320c      	adds	r2, #12
 8004786:	e842 3100 	strex	r1, r3, [r2]
 800478a:	2900      	cmp	r1, #0
 800478c:	d1f3      	bne.n	8004776 <HAL_UART_IRQHandler+0x1d6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800478e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004790:	f7fd fd5e 	bl	8002250 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004794:	2302      	movs	r3, #2
 8004796:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004798:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800479a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800479c:	1ac9      	subs	r1, r1, r3
 800479e:	b289      	uxth	r1, r1
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff fe8c 	bl	80044be <HAL_UARTEx_RxEventCallback>
 80047a6:	e728      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047a8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80047aa:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 80047ac:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f43f af22 	beq.w	80045fa <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047b6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80047b8:	1a89      	subs	r1, r1, r2
 80047ba:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80047bc:	2900      	cmp	r1, #0
 80047be:	f43f af1c 	beq.w	80045fa <HAL_UART_IRQHandler+0x5a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	f102 030c 	add.w	r3, r2, #12
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	320c      	adds	r2, #12
 80047d2:	e842 3000 	strex	r0, r3, [r2]
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d1f3      	bne.n	80047c2 <HAL_UART_IRQHandler+0x222>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f102 0314 	add.w	r3, r2, #20
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	3214      	adds	r2, #20
 80047ea:	e842 3000 	strex	r0, r3, [r2]
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1f3      	bne.n	80047da <HAL_UART_IRQHandler+0x23a>
        huart->RxState = HAL_UART_STATE_READY;
 80047f2:	2320      	movs	r3, #32
 80047f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f8:	2300      	movs	r3, #0
 80047fa:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	f102 030c 	add.w	r3, r2, #12
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	320c      	adds	r2, #12
 800480c:	e842 3000 	strex	r0, r3, [r2]
 8004810:	2800      	cmp	r0, #0
 8004812:	d1f3      	bne.n	80047fc <HAL_UART_IRQHandler+0x25c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004814:	2302      	movs	r3, #2
 8004816:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff fe50 	bl	80044be <HAL_UARTEx_RxEventCallback>
 800481e:	e6ec      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004820:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b21      	cmp	r3, #33	@ 0x21
 8004828:	f47f aee7 	bne.w	80045fa <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004832:	d016      	beq.n	8004862 <HAL_UART_IRQHandler+0x2c2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004834:	6a23      	ldr	r3, [r4, #32]
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	6221      	str	r1, [r4, #32]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800483e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004840:	3b01      	subs	r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8004846:	2b00      	cmp	r3, #0
 8004848:	f47f aed7 	bne.w	80045fa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	68d3      	ldr	r3, [r2, #12]
 8004850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004854:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	68d3      	ldr	r3, [r2, #12]
 800485a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800485e:	60d3      	str	r3, [r2, #12]
 8004860:	e6cb      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <HAL_UART_IRQHandler+0x294>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004868:	6a23      	ldr	r3, [r4, #32]
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004870:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004872:	6a23      	ldr	r3, [r4, #32]
 8004874:	3302      	adds	r3, #2
 8004876:	6223      	str	r3, [r4, #32]
 8004878:	e7e1      	b.n	800483e <HAL_UART_IRQHandler+0x29e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800487a:	68d3      	ldr	r3, [r2, #12]
 800487c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004880:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004882:	2320      	movs	r3, #32
 8004884:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff fe0d 	bl	80044a8 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800488e:	e6b4      	b.n	80045fa <HAL_UART_IRQHandler+0x5a>
 8004890:	080044af 	.word	0x080044af

08004894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004894:	b084      	sub	sp, #16
 8004896:	a801      	add	r0, sp, #4
 8004898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800489c:	2000      	movs	r0, #0
 800489e:	b004      	add	sp, #16
 80048a0:	4770      	bx	lr

080048a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048a2:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048a4:	2000      	movs	r0, #0
 80048a6:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048aa:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
 80048ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80048b2:	4770      	bx	lr

080048b4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80048b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048bc:	045b      	lsls	r3, r3, #17
 80048be:	0c5b      	lsrs	r3, r3, #17
 80048c0:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80048c4:	2000      	movs	r0, #0
 80048c6:	4770      	bx	lr

080048c8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80048c8:	2000      	movs	r0, #0
 80048ca:	4770      	bx	lr

080048cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048cc:	b084      	sub	sp, #16
 80048ce:	4684      	mov	ip, r0
 80048d0:	a801      	add	r0, sp, #4
 80048d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048dc:	2000      	movs	r0, #0
 80048de:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048e2:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048e6:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 80048ea:	b004      	add	sp, #16
 80048ec:	4770      	bx	lr

080048ee <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048ee:	b530      	push	{r4, r5, lr}
 80048f0:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80048f2:	f891 e000 	ldrb.w	lr, [r1]
 80048f6:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 80048fa:	b292      	uxth	r2, r2
 80048fc:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 8004900:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004904:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8004906:	78c8      	ldrb	r0, [r1, #3]
 8004908:	2803      	cmp	r0, #3
 800490a:	d803      	bhi.n	8004914 <USB_ActivateEndpoint+0x26>
 800490c:	e8df f000 	tbb	[pc, r0]
 8004910:	070f0b04 	.word	0x070f0b04
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004914:	2001      	movs	r0, #1
 8004916:	e00b      	b.n	8004930 <USB_ActivateEndpoint+0x42>
      wEpRegVal |= USB_EP_CONTROL;
 8004918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 800491c:	e008      	b.n	8004930 <USB_ActivateEndpoint+0x42>
      wEpRegVal |= USB_EP_INTERRUPT;
 800491e:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004922:	2000      	movs	r0, #0
      break;
 8004924:	e004      	b.n	8004930 <USB_ActivateEndpoint+0x42>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004926:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800492a:	2000      	movs	r0, #0
      break;
 800492c:	e000      	b.n	8004930 <USB_ActivateEndpoint+0x42>
  switch (ep->type)
 800492e:	2000      	movs	r0, #0
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004930:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8004934:	ea42 020c 	orr.w	r2, r2, ip
 8004938:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800493c:	f891 e000 	ldrb.w	lr, [r1]
 8004940:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8004944:	b292      	uxth	r2, r2
 8004946:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800494a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800494e:	ea4e 0202 	orr.w	r2, lr, r2
 8004952:	ea4c 0c02 	orr.w	ip, ip, r2
 8004956:	f823 c02e 	strh.w	ip, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 800495a:	7b0a      	ldrb	r2, [r1, #12]
 800495c:	2a00      	cmp	r2, #0
 800495e:	f040 80bd 	bne.w	8004adc <USB_ActivateEndpoint+0x1ee>
  {
    if (ep->is_in != 0U)
 8004962:	784a      	ldrb	r2, [r1, #1]
 8004964:	b3ba      	cbz	r2, 80049d6 <USB_ActivateEndpoint+0xe8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004966:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 800496a:	fa1f fe8e 	uxth.w	lr, lr
 800496e:	780a      	ldrb	r2, [r1, #0]
 8004970:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004974:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004978:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800497c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004980:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004984:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004988:	780c      	ldrb	r4, [r1, #0]
 800498a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800498e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004992:	d00c      	beq.n	80049ae <USB_ActivateEndpoint+0xc0>
 8004994:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004998:	b292      	uxth	r2, r2
 800499a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800499e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80049a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049a6:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80049aa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80049ae:	78ca      	ldrb	r2, [r1, #3]
 80049b0:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049b2:	7809      	ldrb	r1, [r1, #0]
 80049b4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80049b8:	b292      	uxth	r2, r2
 80049ba:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80049be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049c2:	bf18      	it	ne
 80049c4:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049d0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80049d4:	bd30      	pop	{r4, r5, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049d6:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 80049da:	fa1f fe8e 	uxth.w	lr, lr
 80049de:	780a      	ldrb	r2, [r1, #0]
 80049e0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80049e4:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 80049e8:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80049ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80049f0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80049f4:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049f8:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 80049fc:	fa1f fe8e 	uxth.w	lr, lr
 8004a00:	780a      	ldrb	r2, [r1, #0]
 8004a02:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004a06:	f202 420c 	addw	r2, r2, #1036	@ 0x40c
 8004a0a:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004a0e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004a12:	f822 c00e 	strh.w	ip, [r2, lr]
 8004a16:	690c      	ldr	r4, [r1, #16]
 8004a18:	2c3e      	cmp	r4, #62	@ 0x3e
 8004a1a:	d936      	bls.n	8004a8a <USB_ActivateEndpoint+0x19c>
 8004a1c:	0965      	lsrs	r5, r4, #5
 8004a1e:	f014 0f1f 	tst.w	r4, #31
 8004a22:	bf08      	it	eq
 8004a24:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8004a28:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8004a2c:	fa1f fc8c 	uxth.w	ip, ip
 8004a30:	ea4c 2c85 	orr.w	ip, ip, r5, lsl #10
 8004a34:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8004a38:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8004a3c:	fa1f fc8c 	uxth.w	ip, ip
 8004a40:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a44:	780c      	ldrb	r4, [r1, #0]
 8004a46:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004a4a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004a4e:	d00c      	beq.n	8004a6a <USB_ActivateEndpoint+0x17c>
 8004a50:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004a54:	b292      	uxth	r2, r2
 8004a56:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004a5a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004a5e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004a62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a66:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->num == 0U)
 8004a6a:	7809      	ldrb	r1, [r1, #0]
 8004a6c:	bb31      	cbnz	r1, 8004abc <USB_ActivateEndpoint+0x1ce>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a6e:	881a      	ldrh	r2, [r3, #0]
 8004a70:	b292      	uxth	r2, r2
 8004a72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004a7a:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8004a7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e7a4      	b.n	80049d4 <USB_ActivateEndpoint+0xe6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a8a:	b94c      	cbnz	r4, 8004aa0 <USB_ActivateEndpoint+0x1b2>
 8004a8c:	f832 400e 	ldrh.w	r4, [r2, lr]
 8004a90:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004a94:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004a98:	b2a4      	uxth	r4, r4
 8004a9a:	f822 400e 	strh.w	r4, [r2, lr]
 8004a9e:	e7d1      	b.n	8004a44 <USB_ActivateEndpoint+0x156>
 8004aa0:	0865      	lsrs	r5, r4, #1
 8004aa2:	f014 0f01 	tst.w	r4, #1
 8004aa6:	bf18      	it	ne
 8004aa8:	3501      	addne	r5, #1
 8004aaa:	f832 400e 	ldrh.w	r4, [r2, lr]
 8004aae:	b2a4      	uxth	r4, r4
 8004ab0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004ab4:	b2a4      	uxth	r4, r4
 8004ab6:	f822 400e 	strh.w	r4, [r2, lr]
 8004aba:	e7c3      	b.n	8004a44 <USB_ActivateEndpoint+0x156>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004abc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ac6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004aca:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8004ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ad2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ad6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004ada:	e77b      	b.n	80049d4 <USB_ActivateEndpoint+0xe6>
    if (ep->type == EP_TYPE_BULK)
 8004adc:	78ca      	ldrb	r2, [r1, #3]
 8004ade:	2a02      	cmp	r2, #2
 8004ae0:	d075      	beq.n	8004bce <USB_ActivateEndpoint+0x2e0>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004ae2:	780c      	ldrb	r4, [r1, #0]
 8004ae4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004ae8:	b292      	uxth	r2, r2
 8004aea:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8004aee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004af6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004afa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004afe:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 8004b02:	fa1f fe8e 	uxth.w	lr, lr
 8004b06:	780a      	ldrb	r2, [r1, #0]
 8004b08:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004b0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b10:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004b14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004b18:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004b1c:	f822 c00e 	strh.w	ip, [r2, lr]
 8004b20:	f8b3 e050 	ldrh.w	lr, [r3, #80]	@ 0x50
 8004b24:	fa1f fe8e 	uxth.w	lr, lr
 8004b28:	780a      	ldrb	r2, [r1, #0]
 8004b2a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004b2e:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 8004b32:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8004b36:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004b3a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004b3e:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 8004b42:	784a      	ldrb	r2, [r1, #1]
 8004b44:	2a00      	cmp	r2, #0
 8004b46:	d151      	bne.n	8004bec <USB_ActivateEndpoint+0x2fe>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b48:	780c      	ldrb	r4, [r1, #0]
 8004b4a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b4e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004b52:	d00c      	beq.n	8004b6e <USB_ActivateEndpoint+0x280>
 8004b54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004b5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004b62:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004b66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b6e:	780c      	ldrb	r4, [r1, #0]
 8004b70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b74:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004b78:	d00c      	beq.n	8004b94 <USB_ActivateEndpoint+0x2a6>
 8004b7a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b7e:	b292      	uxth	r2, r2
 8004b80:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004b84:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004b88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b8c:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004b90:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b94:	780c      	ldrb	r4, [r1, #0]
 8004b96:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ba0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ba4:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8004ba8:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8004bac:	ea4c 0202 	orr.w	r2, ip, r2
 8004bb0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bb4:	7809      	ldrb	r1, [r1, #0]
 8004bb6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc4:	ea4c 0c02 	orr.w	ip, ip, r2
 8004bc8:	f823 c021 	strh.w	ip, [r3, r1, lsl #2]
 8004bcc:	e702      	b.n	80049d4 <USB_ActivateEndpoint+0xe6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004bce:	780c      	ldrb	r4, [r1, #0]
 8004bd0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004bda:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004bde:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8004be2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004be6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8004bea:	e788      	b.n	8004afe <USB_ActivateEndpoint+0x210>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bec:	780c      	ldrb	r4, [r1, #0]
 8004bee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004bf2:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004bf6:	d00c      	beq.n	8004c12 <USB_ActivateEndpoint+0x324>
 8004bf8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c02:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c06:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004c0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c0e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c12:	780c      	ldrb	r4, [r1, #0]
 8004c14:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c18:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004c1c:	d00c      	beq.n	8004c38 <USB_ActivateEndpoint+0x34a>
 8004c1e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c22:	b292      	uxth	r2, r2
 8004c24:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c28:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c30:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004c34:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004c38:	78ca      	ldrb	r2, [r1, #3]
 8004c3a:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c3c:	780c      	ldrb	r4, [r1, #0]
 8004c3e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c42:	b292      	uxth	r2, r2
 8004c44:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c4c:	bf18      	it	ne
 8004c4e:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c5e:	7809      	ldrb	r1, [r1, #0]
 8004c60:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004c64:	b292      	uxth	r2, r2
 8004c66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c76:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004c7a:	e6ab      	b.n	80049d4 <USB_ActivateEndpoint+0xe6>

08004c7c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004c7c:	7b0b      	ldrb	r3, [r1, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d146      	bne.n	8004d10 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8004c82:	784b      	ldrb	r3, [r1, #1]
 8004c84:	b313      	cbz	r3, 8004ccc <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c86:	780a      	ldrb	r2, [r1, #0]
 8004c88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c8c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004c90:	d00c      	beq.n	8004cac <USB_DeactivateEndpoint+0x30>
 8004c92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ca8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cac:	780a      	ldrb	r2, [r1, #0]
 8004cae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004cc8:	2000      	movs	r0, #0
 8004cca:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ccc:	780a      	ldrb	r2, [r1, #0]
 8004cce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cd2:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004cd6:	d00c      	beq.n	8004cf2 <USB_DeactivateEndpoint+0x76>
 8004cd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cf2:	780a      	ldrb	r2, [r1, #0]
 8004cf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004d0e:	e7db      	b.n	8004cc8 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8004d10:	784b      	ldrb	r3, [r1, #1]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d14d      	bne.n	8004db2 <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d16:	780a      	ldrb	r2, [r1, #0]
 8004d18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d1c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004d20:	d00c      	beq.n	8004d3c <USB_DeactivateEndpoint+0xc0>
 8004d22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d3c:	780a      	ldrb	r2, [r1, #0]
 8004d3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d42:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004d46:	d00c      	beq.n	8004d62 <USB_DeactivateEndpoint+0xe6>
 8004d48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004d62:	780a      	ldrb	r2, [r1, #0]
 8004d64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7e:	f891 c000 	ldrb.w	ip, [r1]
 8004d82:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d90:	f248 0280 	movw	r2, #32896	@ 0x8080
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d9a:	7809      	ldrb	r1, [r1, #0]
 8004d9c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004daa:	431a      	orrs	r2, r3
 8004dac:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8004db0:	e78a      	b.n	8004cc8 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004db2:	780a      	ldrb	r2, [r1, #0]
 8004db4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004db8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004dbc:	d00c      	beq.n	8004dd8 <USB_DeactivateEndpoint+0x15c>
 8004dbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd8:	780a      	ldrb	r2, [r1, #0]
 8004dda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dde:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004de2:	d00c      	beq.n	8004dfe <USB_DeactivateEndpoint+0x182>
 8004de4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dfa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004dfe:	780a      	ldrb	r2, [r1, #0]
 8004e00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e1a:	f891 c000 	ldrb.w	ip, [r1]
 8004e1e:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e2c:	f248 0280 	movw	r2, #32896	@ 0x8080
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e36:	7809      	ldrb	r1, [r1, #0]
 8004e38:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e46:	431a      	orrs	r2, r3
 8004e48:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8004e4c:	e73c      	b.n	8004cc8 <USB_DeactivateEndpoint+0x4c>

08004e4e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004e4e:	784b      	ldrb	r3, [r1, #1]
 8004e50:	b18b      	cbz	r3, 8004e76 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e52:	780a      	ldrb	r2, [r1, #0]
 8004e54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e62:	f083 0310 	eor.w	r3, r3, #16
 8004e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e76:	780a      	ldrb	r2, [r1, #0]
 8004e78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004e96:	e7ec      	b.n	8004e72 <USB_EPSetStall+0x24>

08004e98 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004e98:	7b0b      	ldrb	r3, [r1, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d14b      	bne.n	8004f36 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8004e9e:	784b      	ldrb	r3, [r1, #1]
 8004ea0:	b333      	cbz	r3, 8004ef0 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea2:	780a      	ldrb	r2, [r1, #0]
 8004ea4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ea8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004eac:	d00c      	beq.n	8004ec8 <USB_EPClearStall+0x30>
 8004eae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ec0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ec4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004ec8:	78cb      	ldrb	r3, [r1, #3]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d033      	beq.n	8004f36 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ece:	780a      	ldrb	r2, [r1, #0]
 8004ed0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ede:	f083 0320 	eor.w	r3, r3, #32
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004eee:	e022      	b.n	8004f36 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ef0:	780a      	ldrb	r2, [r1, #0]
 8004ef2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ef6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004efa:	d00c      	beq.n	8004f16 <USB_EPClearStall+0x7e>
 8004efc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f12:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f16:	780a      	ldrb	r2, [r1, #0]
 8004f18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f26:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004f36:	2000      	movs	r0, #0
 8004f38:	4770      	bx	lr

08004f3a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004f3a:	b911      	cbnz	r1, 8004f42 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8004f42:	2000      	movs	r0, #0
 8004f44:	4770      	bx	lr

08004f46 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004f46:	2000      	movs	r0, #0
 8004f48:	4770      	bx	lr

08004f4a <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	4770      	bx	lr

08004f4e <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004f4e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8004f52:	b280      	uxth	r0, r0
 8004f54:	4770      	bx	lr

08004f56 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004f56:	2000      	movs	r0, #0
 8004f58:	4770      	bx	lr

08004f5a <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f5a:	3301      	adds	r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f5c:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 8004f60:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004f64:	4662      	mov	r2, ip

  for (count = n; count != 0U; count--)
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	d00d      	beq.n	8004f86 <USB_WritePMA+0x2c>
 8004f6a:	3102      	adds	r1, #2
 8004f6c:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004f70:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8004f74:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8004f78:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8004f7c:	f822 3b04 	strh.w	r3, [r2], #4
  for (count = n; count != 0U; count--)
 8004f80:	3102      	adds	r1, #2
 8004f82:	4562      	cmp	r2, ip
 8004f84:	d1f4      	bne.n	8004f70 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004f86:	4770      	bx	lr

08004f88 <USB_EPStartXfer>:
{
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8004f8e:	784b      	ldrb	r3, [r1, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d03c      	beq.n	800500e <USB_EPStartXfer+0x86>
    if (ep->doublebuffer == 0U)
 8004f94:	7b0a      	ldrb	r2, [r1, #12]
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	f040 8215 	bne.w	80053c6 <USB_EPStartXfer+0x43e>
      if (ep->xfer_len > ep->maxpacket)
 8004f9c:	698b      	ldr	r3, [r1, #24]
 8004f9e:	690a      	ldr	r2, [r1, #16]
 8004fa0:	4293      	cmp	r3, r2
        ep->xfer_len -= len;
 8004fa2:	bf86      	itte	hi
 8004fa4:	1a99      	subhi	r1, r3, r2
        len = ep->maxpacket;
 8004fa6:	4613      	movhi	r3, r2
        ep->xfer_len = 0U;
 8004fa8:	2100      	movls	r1, #0
 8004faa:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004fac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004fb0:	b292      	uxth	r2, r2
 8004fb2:	7820      	ldrb	r0, [r4, #0]
 8004fb4:	0100      	lsls	r0, r0, #4
 8004fb6:	f205 410c 	addw	r1, r5, #1036	@ 0x40c
 8004fba:	4411      	add	r1, r2
 8004fbc:	5a42      	ldrh	r2, [r0, r1]
 8004fbe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fc2:	5242      	strh	r2, [r0, r1]
 8004fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fc6:	f240 81e9 	bls.w	800539c <USB_EPStartXfer+0x414>
 8004fca:	095a      	lsrs	r2, r3, #5
 8004fcc:	f013 0f1f 	tst.w	r3, #31
 8004fd0:	bf08      	it	eq
 8004fd2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004fd6:	5a43      	ldrh	r3, [r0, r1]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8004fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	5243      	strh	r3, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fea:	7822      	ldrb	r2, [r4, #0]
 8004fec:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffa:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005006:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800500a:	2000      	movs	r0, #0
}
 800500c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 800500e:	690a      	ldr	r2, [r1, #16]
 8005010:	698e      	ldr	r6, [r1, #24]
 8005012:	4296      	cmp	r6, r2
 8005014:	bf28      	it	cs
 8005016:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8005018:	7b0b      	ldrb	r3, [r1, #12]
 800501a:	b1d3      	cbz	r3, 8005052 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 800501c:	78cb      	ldrb	r3, [r1, #3]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d038      	beq.n	8005094 <USB_EPStartXfer+0x10c>
        ep->xfer_len_db -= len;
 8005022:	6a0b      	ldr	r3, [r1, #32]
 8005024:	1b9b      	subs	r3, r3, r6
 8005026:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005028:	780b      	ldrb	r3, [r1, #0]
 800502a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800502e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005032:	f000 81a5 	beq.w	8005380 <USB_EPStartXfer+0x3f8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005036:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800503a:	b292      	uxth	r2, r2
 800503c:	f200 410c 	addw	r1, r0, #1036	@ 0x40c
 8005040:	4411      	add	r1, r2
 8005042:	011a      	lsls	r2, r3, #4
 8005044:	b2b3      	uxth	r3, r6
 8005046:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005048:	8962      	ldrh	r2, [r4, #10]
 800504a:	6961      	ldr	r1, [r4, #20]
 800504c:	f7ff ff85 	bl	8004f5a <USB_WritePMA>
 8005050:	e00e      	b.n	8005070 <USB_EPStartXfer+0xe8>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005052:	b2b6      	uxth	r6, r6
 8005054:	4633      	mov	r3, r6
 8005056:	88ca      	ldrh	r2, [r1, #6]
 8005058:	6949      	ldr	r1, [r1, #20]
 800505a:	f7ff ff7e 	bl	8004f5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800505e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 8005062:	b289      	uxth	r1, r1
 8005064:	7822      	ldrb	r2, [r4, #0]
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	f205 4304 	addw	r3, r5, #1028	@ 0x404
 800506c:	440b      	add	r3, r1
 800506e:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005070:	7822      	ldrb	r2, [r4, #0]
 8005072:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800507c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005080:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8005084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8005090:	2000      	movs	r0, #0
 8005092:	e7bb      	b.n	800500c <USB_EPStartXfer+0x84>
        if (ep->xfer_len_db > ep->maxpacket)
 8005094:	6a0b      	ldr	r3, [r1, #32]
 8005096:	429a      	cmp	r2, r3
 8005098:	f080 8154 	bcs.w	8005344 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800509c:	780a      	ldrb	r2, [r1, #0]
 800509e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80050b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 80050b8:	6a0b      	ldr	r3, [r1, #32]
 80050ba:	1b9b      	subs	r3, r3, r6
 80050bc:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050be:	780b      	ldrb	r3, [r1, #0]
 80050c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80050c4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80050c8:	f000 809e 	beq.w	8005208 <USB_EPStartXfer+0x280>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050cc:	784a      	ldrb	r2, [r1, #1]
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	d132      	bne.n	8005138 <USB_EPStartXfer+0x1b0>
 80050d2:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 80050d6:	b289      	uxth	r1, r1
 80050d8:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80050dc:	440a      	add	r2, r1
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	5ad1      	ldrh	r1, [r2, r3]
 80050e2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80050e6:	52d1      	strh	r1, [r2, r3]
 80050e8:	2e3e      	cmp	r6, #62	@ 0x3e
 80050ea:	d910      	bls.n	800510e <USB_EPStartXfer+0x186>
 80050ec:	0970      	lsrs	r0, r6, #5
 80050ee:	f016 0f1f 	tst.w	r6, #31
 80050f2:	bf08      	it	eq
 80050f4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80050f8:	5ad1      	ldrh	r1, [r2, r3]
 80050fa:	b289      	uxth	r1, r1
 80050fc:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8005100:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005104:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005108:	b289      	uxth	r1, r1
 800510a:	52d1      	strh	r1, [r2, r3]
 800510c:	e016      	b.n	800513c <USB_EPStartXfer+0x1b4>
 800510e:	b93e      	cbnz	r6, 8005120 <USB_EPStartXfer+0x198>
 8005110:	5ad1      	ldrh	r1, [r2, r3]
 8005112:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005116:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800511a:	b289      	uxth	r1, r1
 800511c:	52d1      	strh	r1, [r2, r3]
 800511e:	e00d      	b.n	800513c <USB_EPStartXfer+0x1b4>
 8005120:	0870      	lsrs	r0, r6, #1
 8005122:	f016 0f01 	tst.w	r6, #1
 8005126:	bf18      	it	ne
 8005128:	3001      	addne	r0, #1
 800512a:	5ad1      	ldrh	r1, [r2, r3]
 800512c:	b289      	uxth	r1, r1
 800512e:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8005132:	b289      	uxth	r1, r1
 8005134:	52d1      	strh	r1, [r2, r3]
 8005136:	e001      	b.n	800513c <USB_EPStartXfer+0x1b4>
 8005138:	2a01      	cmp	r2, #1
 800513a:	d032      	beq.n	80051a2 <USB_EPStartXfer+0x21a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800513c:	b2b3      	uxth	r3, r6
 800513e:	8962      	ldrh	r2, [r4, #10]
 8005140:	6961      	ldr	r1, [r4, #20]
 8005142:	4628      	mov	r0, r5
 8005144:	f7ff ff09 	bl	8004f5a <USB_WritePMA>
            ep->xfer_buff += len;
 8005148:	6963      	ldr	r3, [r4, #20]
 800514a:	4433      	add	r3, r6
 800514c:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800514e:	6a23      	ldr	r3, [r4, #32]
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8005154:	bf86      	itte	hi
 8005156:	1b9a      	subhi	r2, r3, r6
 8005158:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800515a:	2200      	movls	r2, #0
 800515c:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800515e:	7862      	ldrb	r2, [r4, #1]
 8005160:	2a00      	cmp	r2, #0
 8005162:	d13d      	bne.n	80051e0 <USB_EPStartXfer+0x258>
 8005164:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 8005168:	b289      	uxth	r1, r1
 800516a:	7820      	ldrb	r0, [r4, #0]
 800516c:	0100      	lsls	r0, r0, #4
 800516e:	f205 4204 	addw	r2, r5, #1028	@ 0x404
 8005172:	440a      	add	r2, r1
 8005174:	5a81      	ldrh	r1, [r0, r2]
 8005176:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800517a:	5281      	strh	r1, [r0, r2]
 800517c:	2b3e      	cmp	r3, #62	@ 0x3e
 800517e:	d91a      	bls.n	80051b6 <USB_EPStartXfer+0x22e>
 8005180:	095e      	lsrs	r6, r3, #5
 8005182:	f013 0f1f 	tst.w	r3, #31
 8005186:	bf08      	it	eq
 8005188:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800518c:	5a81      	ldrh	r1, [r0, r2]
 800518e:	b289      	uxth	r1, r1
 8005190:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005194:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005198:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800519c:	b289      	uxth	r1, r1
 800519e:	5281      	strh	r1, [r0, r2]
 80051a0:	e020      	b.n	80051e4 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051a2:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 80051a6:	b289      	uxth	r1, r1
 80051a8:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80051ac:	440a      	add	r2, r1
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	b2b1      	uxth	r1, r6
 80051b2:	52d1      	strh	r1, [r2, r3]
 80051b4:	e7c2      	b.n	800513c <USB_EPStartXfer+0x1b4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051b6:	b93b      	cbnz	r3, 80051c8 <USB_EPStartXfer+0x240>
 80051b8:	5a81      	ldrh	r1, [r0, r2]
 80051ba:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80051be:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80051c2:	b289      	uxth	r1, r1
 80051c4:	5281      	strh	r1, [r0, r2]
 80051c6:	e00d      	b.n	80051e4 <USB_EPStartXfer+0x25c>
 80051c8:	085e      	lsrs	r6, r3, #1
 80051ca:	f013 0f01 	tst.w	r3, #1
 80051ce:	bf18      	it	ne
 80051d0:	3601      	addne	r6, #1
 80051d2:	5a81      	ldrh	r1, [r0, r2]
 80051d4:	b289      	uxth	r1, r1
 80051d6:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80051da:	b289      	uxth	r1, r1
 80051dc:	5281      	strh	r1, [r0, r2]
 80051de:	e001      	b.n	80051e4 <USB_EPStartXfer+0x25c>
 80051e0:	2a01      	cmp	r2, #1
 80051e2:	d006      	beq.n	80051f2 <USB_EPStartXfer+0x26a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8922      	ldrh	r2, [r4, #8]
 80051e8:	6961      	ldr	r1, [r4, #20]
 80051ea:	4628      	mov	r0, r5
 80051ec:	f7ff feb5 	bl	8004f5a <USB_WritePMA>
 80051f0:	e73e      	b.n	8005070 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051f2:	f8b5 0050 	ldrh.w	r0, [r5, #80]	@ 0x50
 80051f6:	b280      	uxth	r0, r0
 80051f8:	7821      	ldrb	r1, [r4, #0]
 80051fa:	0109      	lsls	r1, r1, #4
 80051fc:	f205 4204 	addw	r2, r5, #1028	@ 0x404
 8005200:	4402      	add	r2, r0
 8005202:	b298      	uxth	r0, r3
 8005204:	5288      	strh	r0, [r1, r2]
 8005206:	e7ed      	b.n	80051e4 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005208:	784a      	ldrb	r2, [r1, #1]
 800520a:	2a00      	cmp	r2, #0
 800520c:	d132      	bne.n	8005274 <USB_EPStartXfer+0x2ec>
 800520e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 8005212:	b289      	uxth	r1, r1
 8005214:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8005218:	440a      	add	r2, r1
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	5ad1      	ldrh	r1, [r2, r3]
 800521e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005222:	52d1      	strh	r1, [r2, r3]
 8005224:	2e3e      	cmp	r6, #62	@ 0x3e
 8005226:	d910      	bls.n	800524a <USB_EPStartXfer+0x2c2>
 8005228:	0970      	lsrs	r0, r6, #5
 800522a:	f016 0f1f 	tst.w	r6, #31
 800522e:	bf08      	it	eq
 8005230:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005234:	5ad1      	ldrh	r1, [r2, r3]
 8005236:	b289      	uxth	r1, r1
 8005238:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800523c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005240:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005244:	b289      	uxth	r1, r1
 8005246:	52d1      	strh	r1, [r2, r3]
 8005248:	e016      	b.n	8005278 <USB_EPStartXfer+0x2f0>
 800524a:	b93e      	cbnz	r6, 800525c <USB_EPStartXfer+0x2d4>
 800524c:	5ad1      	ldrh	r1, [r2, r3]
 800524e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005252:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005256:	b289      	uxth	r1, r1
 8005258:	52d1      	strh	r1, [r2, r3]
 800525a:	e00d      	b.n	8005278 <USB_EPStartXfer+0x2f0>
 800525c:	0870      	lsrs	r0, r6, #1
 800525e:	f016 0f01 	tst.w	r6, #1
 8005262:	bf18      	it	ne
 8005264:	3001      	addne	r0, #1
 8005266:	5ad1      	ldrh	r1, [r2, r3]
 8005268:	b289      	uxth	r1, r1
 800526a:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800526e:	b289      	uxth	r1, r1
 8005270:	52d1      	strh	r1, [r2, r3]
 8005272:	e001      	b.n	8005278 <USB_EPStartXfer+0x2f0>
 8005274:	2a01      	cmp	r2, #1
 8005276:	d032      	beq.n	80052de <USB_EPStartXfer+0x356>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005278:	b2b3      	uxth	r3, r6
 800527a:	8922      	ldrh	r2, [r4, #8]
 800527c:	6961      	ldr	r1, [r4, #20]
 800527e:	4628      	mov	r0, r5
 8005280:	f7ff fe6b 	bl	8004f5a <USB_WritePMA>
            ep->xfer_buff += len;
 8005284:	6963      	ldr	r3, [r4, #20]
 8005286:	4433      	add	r3, r6
 8005288:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800528a:	6a23      	ldr	r3, [r4, #32]
 800528c:	6922      	ldr	r2, [r4, #16]
 800528e:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8005290:	bf86      	itte	hi
 8005292:	1b9a      	subhi	r2, r3, r6
 8005294:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8005296:	2200      	movls	r2, #0
 8005298:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800529a:	7862      	ldrb	r2, [r4, #1]
 800529c:	2a00      	cmp	r2, #0
 800529e:	d13d      	bne.n	800531c <USB_EPStartXfer+0x394>
 80052a0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 80052a4:	b289      	uxth	r1, r1
 80052a6:	7820      	ldrb	r0, [r4, #0]
 80052a8:	0100      	lsls	r0, r0, #4
 80052aa:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 80052ae:	440a      	add	r2, r1
 80052b0:	5a81      	ldrh	r1, [r0, r2]
 80052b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80052b6:	5281      	strh	r1, [r0, r2]
 80052b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ba:	d91a      	bls.n	80052f2 <USB_EPStartXfer+0x36a>
 80052bc:	095e      	lsrs	r6, r3, #5
 80052be:	f013 0f1f 	tst.w	r3, #31
 80052c2:	bf08      	it	eq
 80052c4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80052c8:	5a81      	ldrh	r1, [r0, r2]
 80052ca:	b289      	uxth	r1, r1
 80052cc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80052d0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80052d4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80052d8:	b289      	uxth	r1, r1
 80052da:	5281      	strh	r1, [r0, r2]
 80052dc:	e020      	b.n	8005320 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052de:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 80052e2:	b289      	uxth	r1, r1
 80052e4:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80052e8:	440a      	add	r2, r1
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	b2b1      	uxth	r1, r6
 80052ee:	52d1      	strh	r1, [r2, r3]
 80052f0:	e7c2      	b.n	8005278 <USB_EPStartXfer+0x2f0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052f2:	b93b      	cbnz	r3, 8005304 <USB_EPStartXfer+0x37c>
 80052f4:	5a81      	ldrh	r1, [r0, r2]
 80052f6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80052fa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80052fe:	b289      	uxth	r1, r1
 8005300:	5281      	strh	r1, [r0, r2]
 8005302:	e00d      	b.n	8005320 <USB_EPStartXfer+0x398>
 8005304:	085e      	lsrs	r6, r3, #1
 8005306:	f013 0f01 	tst.w	r3, #1
 800530a:	bf18      	it	ne
 800530c:	3601      	addne	r6, #1
 800530e:	5a81      	ldrh	r1, [r0, r2]
 8005310:	b289      	uxth	r1, r1
 8005312:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005316:	b289      	uxth	r1, r1
 8005318:	5281      	strh	r1, [r0, r2]
 800531a:	e001      	b.n	8005320 <USB_EPStartXfer+0x398>
 800531c:	2a01      	cmp	r2, #1
 800531e:	d006      	beq.n	800532e <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005320:	b29b      	uxth	r3, r3
 8005322:	8962      	ldrh	r2, [r4, #10]
 8005324:	6961      	ldr	r1, [r4, #20]
 8005326:	4628      	mov	r0, r5
 8005328:	f7ff fe17 	bl	8004f5a <USB_WritePMA>
 800532c:	e6a0      	b.n	8005070 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800532e:	f8b5 0050 	ldrh.w	r0, [r5, #80]	@ 0x50
 8005332:	b280      	uxth	r0, r0
 8005334:	7821      	ldrb	r1, [r4, #0]
 8005336:	0109      	lsls	r1, r1, #4
 8005338:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 800533c:	4402      	add	r2, r0
 800533e:	b298      	uxth	r0, r3
 8005340:	5288      	strh	r0, [r1, r2]
 8005342:	e7ed      	b.n	8005320 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005344:	7809      	ldrb	r1, [r1, #0]
 8005346:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800534a:	b292      	uxth	r2, r2
 800534c:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8005350:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005354:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005358:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800535c:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005360:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
 8005364:	b280      	uxth	r0, r0
 8005366:	7821      	ldrb	r1, [r4, #0]
 8005368:	0109      	lsls	r1, r1, #4
 800536a:	f205 4204 	addw	r2, r5, #1028	@ 0x404
 800536e:	4402      	add	r2, r0
 8005370:	b29b      	uxth	r3, r3
 8005372:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005374:	8922      	ldrh	r2, [r4, #8]
 8005376:	6961      	ldr	r1, [r4, #20]
 8005378:	4628      	mov	r0, r5
 800537a:	f7ff fdee 	bl	8004f5a <USB_WritePMA>
 800537e:	e677      	b.n	8005070 <USB_EPStartXfer+0xe8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005380:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005384:	b292      	uxth	r2, r2
 8005386:	f200 4104 	addw	r1, r0, #1028	@ 0x404
 800538a:	4411      	add	r1, r2
 800538c:	011a      	lsls	r2, r3, #4
 800538e:	b2b3      	uxth	r3, r6
 8005390:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005392:	8922      	ldrh	r2, [r4, #8]
 8005394:	6961      	ldr	r1, [r4, #20]
 8005396:	f7ff fde0 	bl	8004f5a <USB_WritePMA>
 800539a:	e669      	b.n	8005070 <USB_EPStartXfer+0xe8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800539c:	b93b      	cbnz	r3, 80053ae <USB_EPStartXfer+0x426>
 800539e:	5a43      	ldrh	r3, [r0, r1]
 80053a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	5243      	strh	r3, [r0, r1]
 80053ac:	e61d      	b.n	8004fea <USB_EPStartXfer+0x62>
 80053ae:	085a      	lsrs	r2, r3, #1
 80053b0:	f013 0f01 	tst.w	r3, #1
 80053b4:	bf18      	it	ne
 80053b6:	3201      	addne	r2, #1
 80053b8:	5a43      	ldrh	r3, [r0, r1]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	5243      	strh	r3, [r0, r1]
 80053c4:	e611      	b.n	8004fea <USB_EPStartXfer+0x62>
      if (ep->type == EP_TYPE_BULK)
 80053c6:	78ca      	ldrb	r2, [r1, #3]
 80053c8:	2a02      	cmp	r2, #2
 80053ca:	d04b      	beq.n	8005464 <USB_EPStartXfer+0x4dc>
      else if (ep->type == EP_TYPE_ISOC)
 80053cc:	2a01      	cmp	r2, #1
 80053ce:	f040 8134 	bne.w	800563a <USB_EPStartXfer+0x6b2>
        if (ep->xfer_len > ep->maxpacket)
 80053d2:	698a      	ldr	r2, [r1, #24]
 80053d4:	6909      	ldr	r1, [r1, #16]
 80053d6:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 80053d8:	bf86      	itte	hi
 80053da:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 80053dc:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 80053de:	2000      	movls	r0, #0
 80053e0:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f47f ae01 	bne.w	8004fea <USB_EPStartXfer+0x62>
 80053e8:	f8b5 0050 	ldrh.w	r0, [r5, #80]	@ 0x50
 80053ec:	b280      	uxth	r0, r0
 80053ee:	7821      	ldrb	r1, [r4, #0]
 80053f0:	0109      	lsls	r1, r1, #4
 80053f2:	f205 4304 	addw	r3, r5, #1028	@ 0x404
 80053f6:	4403      	add	r3, r0
 80053f8:	5ac8      	ldrh	r0, [r1, r3]
 80053fa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80053fe:	52c8      	strh	r0, [r1, r3]
 8005400:	2a3e      	cmp	r2, #62	@ 0x3e
 8005402:	f240 80c7 	bls.w	8005594 <USB_EPStartXfer+0x60c>
 8005406:	0956      	lsrs	r6, r2, #5
 8005408:	f012 071f 	ands.w	r7, r2, #31
 800540c:	bf0c      	ite	eq
 800540e:	f106 3cff 	addeq.w	ip, r6, #4294967295
 8005412:	46b4      	movne	ip, r6
 8005414:	5ac8      	ldrh	r0, [r1, r3]
 8005416:	b280      	uxth	r0, r0
 8005418:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 800541c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005420:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8005424:	b280      	uxth	r0, r0
 8005426:	52c8      	strh	r0, [r1, r3]
 8005428:	7863      	ldrb	r3, [r4, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f040 80f7 	bne.w	800561e <USB_EPStartXfer+0x696>
 8005430:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8005434:	b29b      	uxth	r3, r3
 8005436:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 800543a:	441a      	add	r2, r3
 800543c:	7821      	ldrb	r1, [r4, #0]
 800543e:	0109      	lsls	r1, r1, #4
 8005440:	5a53      	ldrh	r3, [r2, r1]
 8005442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005446:	5253      	strh	r3, [r2, r1]
 8005448:	2f00      	cmp	r7, #0
 800544a:	f000 80e6 	beq.w	800561a <USB_EPStartXfer+0x692>
 800544e:	5a53      	ldrh	r3, [r2, r1]
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8005456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545e:	b29b      	uxth	r3, r3
 8005460:	5253      	strh	r3, [r2, r1]
 8005462:	e5c2      	b.n	8004fea <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005464:	2b00      	cmp	r3, #0
 8005466:	d140      	bne.n	80054ea <USB_EPStartXfer+0x562>
 8005468:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 800546c:	b289      	uxth	r1, r1
 800546e:	7822      	ldrb	r2, [r4, #0]
 8005470:	0112      	lsls	r2, r2, #4
 8005472:	f200 4304 	addw	r3, r0, #1028	@ 0x404
 8005476:	440b      	add	r3, r1
 8005478:	5ad1      	ldrh	r1, [r2, r3]
 800547a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800547e:	52d1      	strh	r1, [r2, r3]
 8005480:	6921      	ldr	r1, [r4, #16]
 8005482:	293e      	cmp	r1, #62	@ 0x3e
 8005484:	d94f      	bls.n	8005526 <USB_EPStartXfer+0x59e>
 8005486:	0948      	lsrs	r0, r1, #5
 8005488:	f011 0f1f 	tst.w	r1, #31
 800548c:	bf08      	it	eq
 800548e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005492:	5ad1      	ldrh	r1, [r2, r3]
 8005494:	b289      	uxth	r1, r1
 8005496:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800549a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800549e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80054a2:	b289      	uxth	r1, r1
 80054a4:	52d1      	strh	r1, [r2, r3]
 80054a6:	7863      	ldrb	r3, [r4, #1]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d166      	bne.n	800557a <USB_EPStartXfer+0x5f2>
 80054ac:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 80054b0:	b289      	uxth	r1, r1
 80054b2:	7822      	ldrb	r2, [r4, #0]
 80054b4:	0112      	lsls	r2, r2, #4
 80054b6:	f205 430c 	addw	r3, r5, #1036	@ 0x40c
 80054ba:	440b      	add	r3, r1
 80054bc:	5ad1      	ldrh	r1, [r2, r3]
 80054be:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80054c2:	52d1      	strh	r1, [r2, r3]
 80054c4:	6921      	ldr	r1, [r4, #16]
 80054c6:	293e      	cmp	r1, #62	@ 0x3e
 80054c8:	d942      	bls.n	8005550 <USB_EPStartXfer+0x5c8>
 80054ca:	0948      	lsrs	r0, r1, #5
 80054cc:	f011 0f1f 	tst.w	r1, #31
 80054d0:	bf08      	it	eq
 80054d2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80054d6:	5ad1      	ldrh	r1, [r2, r3]
 80054d8:	b289      	uxth	r1, r1
 80054da:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80054de:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80054e2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80054e6:	b289      	uxth	r1, r1
 80054e8:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 80054ea:	69e3      	ldr	r3, [r4, #28]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f43f ad7c 	beq.w	8004fea <USB_EPStartXfer+0x62>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80054f2:	7822      	ldrb	r2, [r4, #0]
 80054f4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054f8:	f244 0340 	movw	r3, #16448	@ 0x4040
 80054fc:	ea03 0001 	and.w	r0, r3, r1
 8005500:	438b      	bics	r3, r1
 8005502:	d002      	beq.n	800550a <USB_EPStartXfer+0x582>
 8005504:	2800      	cmp	r0, #0
 8005506:	f47f ad70 	bne.w	8004fea <USB_EPStartXfer+0x62>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800550a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005520:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8005524:	e561      	b.n	8004fea <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005526:	b939      	cbnz	r1, 8005538 <USB_EPStartXfer+0x5b0>
 8005528:	5ad1      	ldrh	r1, [r2, r3]
 800552a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800552e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005532:	b289      	uxth	r1, r1
 8005534:	52d1      	strh	r1, [r2, r3]
 8005536:	e7b6      	b.n	80054a6 <USB_EPStartXfer+0x51e>
 8005538:	0848      	lsrs	r0, r1, #1
 800553a:	f011 0f01 	tst.w	r1, #1
 800553e:	bf18      	it	ne
 8005540:	3001      	addne	r0, #1
 8005542:	5ad1      	ldrh	r1, [r2, r3]
 8005544:	b289      	uxth	r1, r1
 8005546:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800554a:	b289      	uxth	r1, r1
 800554c:	52d1      	strh	r1, [r2, r3]
 800554e:	e7aa      	b.n	80054a6 <USB_EPStartXfer+0x51e>
 8005550:	b939      	cbnz	r1, 8005562 <USB_EPStartXfer+0x5da>
 8005552:	5ad1      	ldrh	r1, [r2, r3]
 8005554:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005558:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800555c:	b289      	uxth	r1, r1
 800555e:	52d1      	strh	r1, [r2, r3]
 8005560:	e7c3      	b.n	80054ea <USB_EPStartXfer+0x562>
 8005562:	0848      	lsrs	r0, r1, #1
 8005564:	f011 0f01 	tst.w	r1, #1
 8005568:	bf18      	it	ne
 800556a:	3001      	addne	r0, #1
 800556c:	5ad1      	ldrh	r1, [r2, r3]
 800556e:	b289      	uxth	r1, r1
 8005570:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8005574:	b289      	uxth	r1, r1
 8005576:	52d1      	strh	r1, [r2, r3]
 8005578:	e7b7      	b.n	80054ea <USB_EPStartXfer+0x562>
 800557a:	2b01      	cmp	r3, #1
 800557c:	d1b5      	bne.n	80054ea <USB_EPStartXfer+0x562>
 800557e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	@ 0x50
 8005582:	b289      	uxth	r1, r1
 8005584:	7822      	ldrb	r2, [r4, #0]
 8005586:	0112      	lsls	r2, r2, #4
 8005588:	f205 430c 	addw	r3, r5, #1036	@ 0x40c
 800558c:	440b      	add	r3, r1
 800558e:	8a21      	ldrh	r1, [r4, #16]
 8005590:	52d1      	strh	r1, [r2, r3]
 8005592:	e7aa      	b.n	80054ea <USB_EPStartXfer+0x562>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005594:	b9ea      	cbnz	r2, 80055d2 <USB_EPStartXfer+0x64a>
 8005596:	5ac8      	ldrh	r0, [r1, r3]
 8005598:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800559c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80055a0:	b280      	uxth	r0, r0
 80055a2:	52c8      	strh	r0, [r1, r3]
 80055a4:	7863      	ldrb	r3, [r4, #1]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d139      	bne.n	800561e <USB_EPStartXfer+0x696>
 80055aa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	7821      	ldrb	r1, [r4, #0]
 80055b2:	0109      	lsls	r1, r1, #4
 80055b4:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 80055b8:	441a      	add	r2, r3
 80055ba:	5a8b      	ldrh	r3, [r1, r2]
 80055bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c0:	528b      	strh	r3, [r1, r2]
 80055c2:	5a8b      	ldrh	r3, [r1, r2]
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	528b      	strh	r3, [r1, r2]
 80055d0:	e50b      	b.n	8004fea <USB_EPStartXfer+0x62>
 80055d2:	0856      	lsrs	r6, r2, #1
 80055d4:	f012 0701 	ands.w	r7, r2, #1
 80055d8:	bf14      	ite	ne
 80055da:	f106 0c01 	addne.w	ip, r6, #1
 80055de:	46b4      	moveq	ip, r6
 80055e0:	5ac8      	ldrh	r0, [r1, r3]
 80055e2:	b280      	uxth	r0, r0
 80055e4:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80055e8:	b280      	uxth	r0, r0
 80055ea:	52c8      	strh	r0, [r1, r3]
 80055ec:	7863      	ldrb	r3, [r4, #1]
 80055ee:	b9b3      	cbnz	r3, 800561e <USB_EPStartXfer+0x696>
 80055f0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f205 420c 	addw	r2, r5, #1036	@ 0x40c
 80055fa:	441a      	add	r2, r3
 80055fc:	7821      	ldrb	r1, [r4, #0]
 80055fe:	0109      	lsls	r1, r1, #4
 8005600:	5a53      	ldrh	r3, [r2, r1]
 8005602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005606:	5253      	strh	r3, [r2, r1]
 8005608:	b107      	cbz	r7, 800560c <USB_EPStartXfer+0x684>
 800560a:	3601      	adds	r6, #1
 800560c:	5a53      	ldrh	r3, [r2, r1]
 800560e:	b29b      	uxth	r3, r3
 8005610:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8005614:	b29b      	uxth	r3, r3
 8005616:	5253      	strh	r3, [r2, r1]
 8005618:	e4e7      	b.n	8004fea <USB_EPStartXfer+0x62>
 800561a:	3e01      	subs	r6, #1
 800561c:	e717      	b.n	800544e <USB_EPStartXfer+0x4c6>
 800561e:	2b01      	cmp	r3, #1
 8005620:	f47f ace3 	bne.w	8004fea <USB_EPStartXfer+0x62>
 8005624:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8005628:	b29b      	uxth	r3, r3
 800562a:	7821      	ldrb	r1, [r4, #0]
 800562c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005630:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005634:	b292      	uxth	r2, r2
 8005636:	52ea      	strh	r2, [r5, r3]
 8005638:	e4d7      	b.n	8004fea <USB_EPStartXfer+0x62>
        return HAL_ERROR;
 800563a:	2001      	movs	r0, #1
 800563c:	e4e6      	b.n	800500c <USB_EPStartXfer+0x84>

0800563e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800563e:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005640:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8005644:	f500 6480 	add.w	r4, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 8005648:	085d      	lsrs	r5, r3, #1
 800564a:	d014      	beq.n	8005676 <USB_ReadPMA+0x38>
 800564c:	f101 0c02 	add.w	ip, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005650:	4620      	mov	r0, r4
  for (count = n; count != 0U; count--)
 8005652:	46ae      	mov	lr, r5
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005654:	f830 2b04 	ldrh.w	r2, [r0], #4
 8005658:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800565a:	f80c 2c02 	strb.w	r2, [ip, #-2]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800565e:	0a12      	lsrs	r2, r2, #8
 8005660:	f80c 2c01 	strb.w	r2, [ip, #-1]
  for (count = n; count != 0U; count--)
 8005664:	f10c 0c02 	add.w	ip, ip, #2
 8005668:	f1be 0e01 	subs.w	lr, lr, #1
 800566c:	d1f2      	bne.n	8005654 <USB_ReadPMA+0x16>
    pBuf++;
 800566e:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8005672:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005676:	f013 0f01 	tst.w	r3, #1
  {
    RdVal = *pdwVal;
 800567a:	bf1c      	itt	ne
 800567c:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800567e:	700b      	strbne	r3, [r1, #0]
  }
}
 8005680:	bd30      	pop	{r4, r5, pc}

08005682 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005682:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8005686:	b183      	cbz	r3, 80056aa <USBD_CDC_EP0_RxReady+0x28>
{
 8005688:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800568a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800568e:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8005692:	28ff      	cmp	r0, #255	@ 0xff
 8005694:	d007      	beq.n	80056a6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800569c:	4621      	mov	r1, r4
 800569e:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80056a0:	23ff      	movs	r3, #255	@ 0xff
 80056a2:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 80056a6:	2000      	movs	r0, #0
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	2000      	movs	r0, #0
 80056ac:	4770      	bx	lr
	...

080056b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80056b0:	2343      	movs	r3, #67	@ 0x43
 80056b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80056b4:	4800      	ldr	r0, [pc, #0]	@ (80056b8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80056b6:	4770      	bx	lr
 80056b8:	200001d0 	.word	0x200001d0

080056bc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80056bc:	2343      	movs	r3, #67	@ 0x43
 80056be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80056c0:	4800      	ldr	r0, [pc, #0]	@ (80056c4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80056c2:	4770      	bx	lr
 80056c4:	20000214 	.word	0x20000214

080056c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056c8:	2343      	movs	r3, #67	@ 0x43
 80056ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80056cc:	4800      	ldr	r0, [pc, #0]	@ (80056d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80056ce:	4770      	bx	lr
 80056d0:	2000018c 	.word	0x2000018c

080056d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80056d4:	230a      	movs	r3, #10
 80056d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80056d8:	4800      	ldr	r0, [pc, #0]	@ (80056dc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80056da:	4770      	bx	lr
 80056dc:	20000290 	.word	0x20000290

080056e0 <USBD_CDC_DataOut>:
{
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056e4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056e8:	f000 ffb8 	bl	800665c <USBD_LL_GetRxDataSize>
 80056ec:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80056f0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80056f4:	b14b      	cbz	r3, 800570a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056f6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8005700:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8005704:	4798      	blx	r3
    return USBD_OK;
 8005706:	2000      	movs	r0, #0
}
 8005708:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800570a:	2002      	movs	r0, #2
 800570c:	e7fc      	b.n	8005708 <USBD_CDC_DataOut+0x28>

0800570e <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800570e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8005712:	b312      	cbz	r2, 800575a <USBD_CDC_DataIn+0x4c>
{
 8005714:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005716:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800571a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800571e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	b14b      	cbz	r3, 800573a <USBD_CDC_DataIn+0x2c>
 8005726:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800572a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800572e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 8005730:	fbb3 fcf4 	udiv	ip, r3, r4
 8005734:	fb04 331c 	mls	r3, r4, ip, r3
 8005738:	b11b      	cbz	r3, 8005742 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800573a:	2000      	movs	r0, #0
 800573c:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
}
 8005740:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8005742:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005746:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800574a:	2400      	movs	r4, #0
 800574c:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800574e:	4623      	mov	r3, r4
 8005750:	4622      	mov	r2, r4
 8005752:	f000 ff73 	bl	800663c <USBD_LL_Transmit>
    return USBD_OK;
 8005756:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005758:	e7f2      	b.n	8005740 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 800575a:	2002      	movs	r0, #2
}
 800575c:	4770      	bx	lr

0800575e <USBD_CDC_Setup>:
{
 800575e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005760:	b083      	sub	sp, #12
 8005762:	4606      	mov	r6, r0
 8005764:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005766:	f8d0 72b8 	ldr.w	r7, [r0, #696]	@ 0x2b8
  uint8_t ifalt = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8005770:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005774:	780b      	ldrb	r3, [r1, #0]
 8005776:	f013 0560 	ands.w	r5, r3, #96	@ 0x60
 800577a:	d027      	beq.n	80057cc <USBD_CDC_Setup+0x6e>
 800577c:	2d20      	cmp	r5, #32
 800577e:	d153      	bne.n	8005828 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8005780:	88ca      	ldrh	r2, [r1, #6]
 8005782:	b1da      	cbz	r2, 80057bc <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8005784:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005788:	d00c      	beq.n	80057a4 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800578a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4639      	mov	r1, r7
 8005792:	7860      	ldrb	r0, [r4, #1]
 8005794:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005796:	88e2      	ldrh	r2, [r4, #6]
 8005798:	4639      	mov	r1, r7
 800579a:	4630      	mov	r0, r6
 800579c:	f000 fd45 	bl	800622a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80057a0:	2500      	movs	r5, #0
 80057a2:	e044      	b.n	800582e <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80057a4:	784b      	ldrb	r3, [r1, #1]
 80057a6:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80057aa:	88cb      	ldrh	r3, [r1, #6]
 80057ac:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80057b0:	88ca      	ldrh	r2, [r1, #6]
 80057b2:	4639      	mov	r1, r7
 80057b4:	f000 fd4e 	bl	8006254 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80057b8:	2500      	movs	r5, #0
 80057ba:	e038      	b.n	800582e <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057bc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2200      	movs	r2, #0
 80057c4:	7848      	ldrb	r0, [r1, #1]
 80057c6:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80057c8:	2500      	movs	r5, #0
 80057ca:	e030      	b.n	800582e <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 80057cc:	784f      	ldrb	r7, [r1, #1]
 80057ce:	2f0a      	cmp	r7, #10
 80057d0:	d014      	beq.n	80057fc <USBD_CDC_Setup+0x9e>
 80057d2:	2f0b      	cmp	r7, #11
 80057d4:	d020      	beq.n	8005818 <USBD_CDC_Setup+0xba>
 80057d6:	b11f      	cbz	r7, 80057e0 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 80057d8:	f000 fa3c 	bl	8005c54 <USBD_CtlError>
          ret = USBD_FAIL;
 80057dc:	2502      	movs	r5, #2
          break;
 80057de:	e026      	b.n	800582e <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d003      	beq.n	80057f0 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 80057e8:	f000 fa34 	bl	8005c54 <USBD_CtlError>
            ret = USBD_FAIL;
 80057ec:	2502      	movs	r5, #2
 80057ee:	e01e      	b.n	800582e <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80057f0:	2202      	movs	r2, #2
 80057f2:	a901      	add	r1, sp, #4
 80057f4:	f000 fd19 	bl	800622a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80057f8:	463d      	mov	r5, r7
 80057fa:	e018      	b.n	800582e <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005800:	2b03      	cmp	r3, #3
 8005802:	d003      	beq.n	800580c <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8005804:	f000 fa26 	bl	8005c54 <USBD_CtlError>
            ret = USBD_FAIL;
 8005808:	2502      	movs	r5, #2
 800580a:	e010      	b.n	800582e <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800580c:	2201      	movs	r2, #1
 800580e:	f10d 0107 	add.w	r1, sp, #7
 8005812:	f000 fd0a 	bl	800622a <USBD_CtlSendData>
 8005816:	e00a      	b.n	800582e <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005818:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800581c:	2b03      	cmp	r3, #3
 800581e:	d006      	beq.n	800582e <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8005820:	f000 fa18 	bl	8005c54 <USBD_CtlError>
            ret = USBD_FAIL;
 8005824:	2502      	movs	r5, #2
 8005826:	e002      	b.n	800582e <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8005828:	f000 fa14 	bl	8005c54 <USBD_CtlError>
      ret = USBD_FAIL;
 800582c:	2502      	movs	r5, #2
}
 800582e:	4628      	mov	r0, r5
 8005830:	b003      	add	sp, #12
 8005832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005834 <USBD_CDC_DeInit>:
{
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005838:	2181      	movs	r1, #129	@ 0x81
 800583a:	f000 fec8 	bl	80065ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800583e:	2500      	movs	r5, #0
 8005840:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005842:	2101      	movs	r1, #1
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fec2 	bl	80065ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800584a:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800584e:	2182      	movs	r1, #130	@ 0x82
 8005850:	4620      	mov	r0, r4
 8005852:	f000 febc 	bl	80065ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005856:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8005858:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800585c:	b14b      	cbz	r3, 8005872 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800585e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005866:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 800586a:	f000 ff01 	bl	8006670 <USBD_static_free>
    pdev->pClassData = NULL;
 800586e:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8005872:	2000      	movs	r0, #0
 8005874:	bd38      	pop	{r3, r4, r5, pc}

08005876 <USBD_CDC_Init>:
{
 8005876:	b570      	push	{r4, r5, r6, lr}
 8005878:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800587a:	7c03      	ldrb	r3, [r0, #16]
 800587c:	bba3      	cbnz	r3, 80058e8 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800587e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005882:	2202      	movs	r2, #2
 8005884:	2181      	movs	r1, #129	@ 0x81
 8005886:	f000 fe97 	bl	80065b8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800588a:	2101      	movs	r1, #1
 800588c:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800588e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005892:	2202      	movs	r2, #2
 8005894:	4620      	mov	r0, r4
 8005896:	f000 fe8f 	bl	80065b8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800589a:	2501      	movs	r5, #1
 800589c:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058a0:	2308      	movs	r3, #8
 80058a2:	2203      	movs	r2, #3
 80058a4:	2182      	movs	r1, #130	@ 0x82
 80058a6:	4620      	mov	r0, r4
 80058a8:	f000 fe86 	bl	80065b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80058ac:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058ae:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80058b2:	f000 fed9 	bl	8006668 <USBD_static_malloc>
 80058b6:	4605      	mov	r5, r0
 80058b8:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 80058bc:	b350      	cbz	r0, 8005914 <USBD_CDC_Init+0x9e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058be:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4798      	blx	r3
    hcdc->TxState = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    hcdc->RxState = 0U;
 80058cc:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d0:	7c26      	ldrb	r6, [r4, #16]
 80058d2:	b9b6      	cbnz	r6, 8005902 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058d8:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80058dc:	2101      	movs	r1, #1
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 feb4 	bl	800664c <USBD_LL_PrepareReceive>
}
 80058e4:	4630      	mov	r0, r6
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058e8:	2340      	movs	r3, #64	@ 0x40
 80058ea:	2202      	movs	r2, #2
 80058ec:	2181      	movs	r1, #129	@ 0x81
 80058ee:	f000 fe63 	bl	80065b8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058f2:	2101      	movs	r1, #1
 80058f4:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058f6:	2340      	movs	r3, #64	@ 0x40
 80058f8:	2202      	movs	r2, #2
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fe5c 	bl	80065b8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005900:	e7cb      	b.n	800589a <USBD_CDC_Init+0x24>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005902:	2340      	movs	r3, #64	@ 0x40
 8005904:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8005908:	2101      	movs	r1, #1
 800590a:	4620      	mov	r0, r4
 800590c:	f000 fe9e 	bl	800664c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005910:	2600      	movs	r6, #0
 8005912:	e7e7      	b.n	80058e4 <USBD_CDC_Init+0x6e>
    ret = 1U;
 8005914:	2601      	movs	r6, #1
 8005916:	e7e5      	b.n	80058e4 <USBD_CDC_Init+0x6e>

08005918 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005918:	b119      	cbz	r1, 8005922 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800591a:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 800591e:	2000      	movs	r0, #0
 8005920:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005922:	2002      	movs	r0, #2
  }

  return ret;
}
 8005924:	4770      	bx	lr

08005926 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005926:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
 800592a:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800592e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
}
 8005932:	2000      	movs	r0, #0
 8005934:	4770      	bx	lr

08005936 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005936:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->RxBuffer = pbuff;
 800593a:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return USBD_OK;
}
 800593e:	2000      	movs	r0, #0
 8005940:	4770      	bx	lr

08005942 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005942:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005944:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005948:	b192      	cbz	r2, 8005970 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800594a:	7c04      	ldrb	r4, [r0, #16]
 800594c:	b944      	cbnz	r4, 8005960 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800594e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005952:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8005956:	2101      	movs	r1, #1
 8005958:	f000 fe78 	bl	800664c <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800595c:	4620      	mov	r0, r4
 800595e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005960:	2340      	movs	r3, #64	@ 0x40
 8005962:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8005966:	2101      	movs	r1, #1
 8005968:	f000 fe70 	bl	800664c <USBD_LL_PrepareReceive>
    return USBD_OK;
 800596c:	2400      	movs	r4, #0
 800596e:	e7f5      	b.n	800595c <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8005970:	2402      	movs	r4, #2
 8005972:	e7f3      	b.n	800595c <USBD_CDC_ReceivePacket+0x1a>

08005974 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005974:	b198      	cbz	r0, 800599e <USBD_Init+0x2a>
{
 8005976:	b508      	push	{r3, lr}
 8005978:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800597a:	f8d0 02b4 	ldr.w	r0, [r0, #692]	@ 0x2b4
 800597e:	b110      	cbz	r0, 8005986 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005980:	2000      	movs	r0, #0
 8005982:	f8c3 02b4 	str.w	r0, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005986:	b109      	cbz	r1, 800598c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8005988:	f8c3 12b0 	str.w	r1, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800598c:	2101      	movs	r1, #1
 800598e:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005992:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fdc5 	bl	8006524 <USBD_LL_Init>

  return USBD_OK;
 800599a:	2000      	movs	r0, #0
}
 800599c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800599e:	2002      	movs	r0, #2
}
 80059a0:	4770      	bx	lr

080059a2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80059a2:	b119      	cbz	r1, 80059ac <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80059a4:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 80059a8:	2000      	movs	r0, #0
 80059aa:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80059ac:	2002      	movs	r0, #2
  }

  return status;
}
 80059ae:	4770      	bx	lr

080059b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059b0:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80059b2:	f000 fdf9 	bl	80065a8 <USBD_LL_Start>

  return USBD_OK;
}
 80059b6:	2000      	movs	r0, #0
 80059b8:	bd08      	pop	{r3, pc}

080059ba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80059ba:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80059bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80059c0:	b133      	cbz	r3, 80059d0 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4798      	blx	r3
 80059c6:	3800      	subs	r0, #0
 80059c8:	bf18      	it	ne
 80059ca:	2001      	movne	r0, #1
 80059cc:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80059ce:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059d0:	2002      	movs	r0, #2
 80059d2:	e7fc      	b.n	80059ce <USBD_SetClassConfig+0x14>

080059d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80059d4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80059d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4798      	blx	r3

  return USBD_OK;
}
 80059de:	2000      	movs	r0, #0
 80059e0:	bd08      	pop	{r3, pc}

080059e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059e2:	b538      	push	{r3, r4, r5, lr}
 80059e4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059e6:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f91e 	bl	8005c2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059f6:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 80059fa:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059fe:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 8005a02:	f001 031f 	and.w	r3, r1, #31
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d00e      	beq.n	8005a28 <USBD_LL_SetupStage+0x46>
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d011      	beq.n	8005a32 <USBD_LL_SetupStage+0x50>
 8005a0e:	b12b      	cbz	r3, 8005a1c <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a10:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 fde2 	bl	80065de <USBD_LL_StallEP>
      break;
 8005a1a:	e003      	b.n	8005a24 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 f922 	bl	8005c68 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8005a24:	2000      	movs	r0, #0
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 fad4 	bl	8005fd8 <USBD_StdItfReq>
      break;
 8005a30:	e7f8      	b.n	8005a24 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8005a32:	4629      	mov	r1, r5
 8005a34:	4620      	mov	r0, r4
 8005a36:	f000 faff 	bl	8006038 <USBD_StdEPReq>
      break;
 8005a3a:	e7f3      	b.n	8005a24 <USBD_LL_SetupStage+0x42>

08005a3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a40:	460d      	mov	r5, r1
 8005a42:	bb81      	cbnz	r1, 8005aa6 <USBD_LL_DataOutStage+0x6a>
 8005a44:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a46:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005a4a:	2a03      	cmp	r2, #3
 8005a4c:	d003      	beq.n	8005a56 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005a4e:	2a05      	cmp	r2, #5
 8005a50:	d022      	beq.n	8005a98 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005a52:	4608      	mov	r0, r1
 8005a54:	e031      	b.n	8005aba <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8005a56:	f8d0 1160 	ldr.w	r1, [r0, #352]	@ 0x160
 8005a5a:	f8d0 2164 	ldr.w	r2, [r0, #356]	@ 0x164
 8005a5e:	4291      	cmp	r1, r2
 8005a60:	d90b      	bls.n	8005a7a <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8005a62:	1a89      	subs	r1, r1, r2
 8005a64:	f8c0 1160 	str.w	r1, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005a68:	428a      	cmp	r2, r1
 8005a6a:	bf8c      	ite	hi
 8005a6c:	b28a      	uxthhi	r2, r1
 8005a6e:	b292      	uxthls	r2, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f000 fbfe 	bl	8006272 <USBD_CtlContinueRx>
  return USBD_OK;
 8005a76:	4628      	mov	r0, r5
 8005a78:	e01f      	b.n	8005aba <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a7a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	b11b      	cbz	r3, 8005a8a <USBD_LL_DataOutStage+0x4e>
 8005a82:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005a86:	2a03      	cmp	r2, #3
 8005a88:	d004      	beq.n	8005a94 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 fbf9 	bl	8006282 <USBD_CtlSendStatus>
  return USBD_OK;
 8005a90:	4628      	mov	r0, r5
 8005a92:	e012      	b.n	8005aba <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8005a94:	4798      	blx	r3
 8005a96:	e7f8      	b.n	8005a8a <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005a98:	2100      	movs	r1, #0
 8005a9a:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005a9e:	f000 fd9e 	bl	80065de <USBD_LL_StallEP>
  return USBD_OK;
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	e009      	b.n	8005aba <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005aa6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	b133      	cbz	r3, 8005abc <USBD_LL_DataOutStage+0x80>
 8005aae:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005ab2:	2a03      	cmp	r2, #3
 8005ab4:	d104      	bne.n	8005ac0 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8005ab6:	4798      	blx	r3
  return USBD_OK;
 8005ab8:	2000      	movs	r0, #0
}
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005abc:	2002      	movs	r0, #2
 8005abe:	e7fc      	b.n	8005aba <USBD_LL_DataOutStage+0x7e>
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	e7fa      	b.n	8005aba <USBD_LL_DataOutStage+0x7e>

08005ac4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ac8:	460d      	mov	r5, r1
 8005aca:	2900      	cmp	r1, #0
 8005acc:	d153      	bne.n	8005b76 <USBD_LL_DataInStage+0xb2>
 8005ace:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ad0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005ad4:	2a02      	cmp	r2, #2
 8005ad6:	d008      	beq.n	8005aea <USBD_LL_DataInStage+0x26>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ad8:	f032 0304 	bics.w	r3, r2, #4
 8005adc:	d042      	beq.n	8005b64 <USBD_LL_DataInStage+0xa0>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005ade:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d042      	beq.n	8005b6c <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005ae6:	4628      	mov	r0, r5
}
 8005ae8:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8005aea:	6a02      	ldr	r2, [r0, #32]
 8005aec:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8005aee:	428a      	cmp	r2, r1
 8005af0:	d81b      	bhi.n	8005b2a <USBD_LL_DataInStage+0x66>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005af2:	69c2      	ldr	r2, [r0, #28]
 8005af4:	fbb2 f3f1 	udiv	r3, r2, r1
 8005af8:	fb01 2313 	mls	r3, r1, r3, r2
 8005afc:	b92b      	cbnz	r3, 8005b0a <USBD_LL_DataInStage+0x46>
 8005afe:	4291      	cmp	r1, r2
 8005b00:	d803      	bhi.n	8005b0a <USBD_LL_DataInStage+0x46>
            (pep->total_length >= pep->maxpacket) &&
 8005b02:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d31c      	bcc.n	8005b44 <USBD_LL_DataInStage+0x80>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b0a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	b11b      	cbz	r3, 8005b1a <USBD_LL_DataInStage+0x56>
 8005b12:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8005b16:	2a03      	cmp	r2, #3
 8005b18:	d021      	beq.n	8005b5e <USBD_LL_DataInStage+0x9a>
          USBD_LL_StallEP(pdev, 0x80U);
 8005b1a:	2180      	movs	r1, #128	@ 0x80
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fd5e 	bl	80065de <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 fbb8 	bl	8006298 <USBD_CtlReceiveStatus>
 8005b28:	e7d9      	b.n	8005ade <USBD_LL_DataInStage+0x1a>
        pep->rem_length -= pep->maxpacket;
 8005b2a:	1a52      	subs	r2, r2, r1
 8005b2c:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	f000 fb87 	bl	8006244 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b36:	2300      	movs	r3, #0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fd85 	bl	800664c <USBD_LL_PrepareReceive>
 8005b42:	e7cc      	b.n	8005ade <USBD_LL_DataInStage+0x1a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b44:	2200      	movs	r2, #0
 8005b46:	4611      	mov	r1, r2
 8005b48:	f000 fb7c 	bl	8006244 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b52:	460b      	mov	r3, r1
 8005b54:	460a      	mov	r2, r1
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fd78 	bl	800664c <USBD_LL_PrepareReceive>
 8005b5c:	e7bf      	b.n	8005ade <USBD_LL_DataInStage+0x1a>
            pdev->pClass->EP0_TxSent(pdev);
 8005b5e:	4620      	mov	r0, r4
 8005b60:	4798      	blx	r3
 8005b62:	e7da      	b.n	8005b1a <USBD_LL_DataInStage+0x56>
        USBD_LL_StallEP(pdev, 0x80U);
 8005b64:	2180      	movs	r1, #128	@ 0x80
 8005b66:	f000 fd3a 	bl	80065de <USBD_LL_StallEP>
 8005b6a:	e7b8      	b.n	8005ade <USBD_LL_DataInStage+0x1a>
      pdev->dev_test_mode = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8005b72:	4628      	mov	r0, r5
 8005b74:	e7b8      	b.n	8005ae8 <USBD_LL_DataInStage+0x24>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	b133      	cbz	r3, 8005b8c <USBD_LL_DataInStage+0xc8>
 8005b7e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005b82:	2a03      	cmp	r2, #3
 8005b84:	d104      	bne.n	8005b90 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8005b86:	4798      	blx	r3
  return USBD_OK;
 8005b88:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005b8a:	e7ad      	b.n	8005ae8 <USBD_LL_DataInStage+0x24>
    return USBD_FAIL;
 8005b8c:	2002      	movs	r0, #2
 8005b8e:	e7ab      	b.n	8005ae8 <USBD_LL_DataInStage+0x24>
 8005b90:	2002      	movs	r0, #2
 8005b92:	e7a9      	b.n	8005ae8 <USBD_LL_DataInStage+0x24>

08005b94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b98:	2340      	movs	r3, #64	@ 0x40
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	f000 fd0b 	bl	80065b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ba2:	2501      	movs	r5, #1
 8005ba4:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ba8:	2640      	movs	r6, #64	@ 0x40
 8005baa:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bae:	4633      	mov	r3, r6
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	@ 0x80
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 fcff 	bl	80065b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bba:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bbc:	6266      	str	r6, [r4, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bbe:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005bc8:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bca:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4

  if (pdev->pClassData)
 8005bce:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005bd2:	b12b      	cbz	r3, 8005be0 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005bd4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4620      	mov	r0, r4
 8005bde:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005be0:	2000      	movs	r0, #0
 8005be2:	bd70      	pop	{r4, r5, r6, pc}

08005be4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005be4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005be6:	2000      	movs	r0, #0
 8005be8:	4770      	bx	lr

08005bea <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005bea:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005bee:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	4770      	bx	lr

08005bfc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005bfc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c00:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c02:	bf04      	itt	eq
 8005c04:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8005c08:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	4770      	bx	lr

08005c10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c10:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d001      	beq.n	8005c1e <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8005c1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f8      	beq.n	8005c1a <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8005c28:	4798      	blx	r3
 8005c2a:	e7f6      	b.n	8005c1a <USBD_LL_SOF+0xa>

08005c2c <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8005c2c:	780b      	ldrb	r3, [r1, #0]
 8005c2e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005c30:	784b      	ldrb	r3, [r1, #1]
 8005c32:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005c34:	78ca      	ldrb	r2, [r1, #3]
 8005c36:	788b      	ldrb	r3, [r1, #2]
 8005c38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005c3c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005c3e:	794a      	ldrb	r2, [r1, #5]
 8005c40:	790b      	ldrb	r3, [r1, #4]
 8005c42:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005c46:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005c48:	79ca      	ldrb	r2, [r1, #7]
 8005c4a:	798b      	ldrb	r3, [r1, #6]
 8005c4c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005c50:	80c3      	strh	r3, [r0, #6]

}
 8005c52:	4770      	bx	lr

08005c54 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005c54:	b510      	push	{r4, lr}
 8005c56:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005c58:	2180      	movs	r1, #128	@ 0x80
 8005c5a:	f000 fcc0 	bl	80065de <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 fcbc 	bl	80065de <USBD_LL_StallEP>
}
 8005c66:	bd10      	pop	{r4, pc}

08005c68 <USBD_StdDevReq>:
{
 8005c68:	b530      	push	{r4, r5, lr}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c70:	780b      	ldrb	r3, [r1, #0]
 8005c72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d005      	beq.n	8005c86 <USBD_StdDevReq+0x1e>
 8005c7a:	2b40      	cmp	r3, #64	@ 0x40
 8005c7c:	d003      	beq.n	8005c86 <USBD_StdDevReq+0x1e>
 8005c7e:	b15b      	cbz	r3, 8005c98 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8005c80:	f7ff ffe8 	bl	8005c54 <USBD_CtlError>
      break;
 8005c84:	e005      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8005c86:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	4798      	blx	r3
}
 8005c92:	2000      	movs	r0, #0
 8005c94:	b003      	add	sp, #12
 8005c96:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8005c98:	784b      	ldrb	r3, [r1, #1]
 8005c9a:	2b09      	cmp	r3, #9
 8005c9c:	f200 8197 	bhi.w	8005fce <USBD_StdDevReq+0x366>
 8005ca0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ca4:	0183015f 	.word	0x0183015f
 8005ca8:	017a0195 	.word	0x017a0195
 8005cac:	00c90195 	.word	0x00c90195
 8005cb0:	0195000a 	.word	0x0195000a
 8005cb4:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005cbe:	884a      	ldrh	r2, [r1, #2]
 8005cc0:	0a13      	lsrs	r3, r2, #8
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	2b06      	cmp	r3, #6
 8005cc6:	f200 80a4 	bhi.w	8005e12 <USBD_StdDevReq+0x1aa>
 8005cca:	e8df f003 	tbb	[pc, r3]
 8005cce:	1804      	.short	0x1804
 8005cd0:	86a2a22c 	.word	0x86a2a22c
 8005cd4:	93          	.byte	0x93
 8005cd5:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cd6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f10d 0106 	add.w	r1, sp, #6
 8005ce0:	7c00      	ldrb	r0, [r0, #16]
 8005ce2:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005ce4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 809f 	beq.w	8005e2c <USBD_StdDevReq+0x1c4>
 8005cee:	88e2      	ldrh	r2, [r4, #6]
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	f040 8092 	bne.w	8005e1a <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 fac3 	bl	8006282 <USBD_CtlSendStatus>
 8005cfc:	e7c9      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cfe:	7c03      	ldrb	r3, [r0, #16]
 8005d00:	b943      	cbnz	r3, 8005d14 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d02:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	f10d 0006 	add.w	r0, sp, #6
 8005d0c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005d12:	e7e7      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1a:	f10d 0006 	add.w	r0, sp, #6
 8005d1e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d20:	2302      	movs	r3, #2
 8005d22:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005d24:	e7de      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	2a05      	cmp	r2, #5
 8005d2a:	d852      	bhi.n	8005dd2 <USBD_StdDevReq+0x16a>
 8005d2c:	e8df f002 	tbb	[pc, r2]
 8005d30:	2a1d1003 	.word	0x2a1d1003
 8005d34:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d36:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	b123      	cbz	r3, 8005d48 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d3e:	f10d 0106 	add.w	r1, sp, #6
 8005d42:	7c00      	ldrb	r0, [r0, #16]
 8005d44:	4798      	blx	r3
  if (err != 0U)
 8005d46:	e7cd      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005d48:	4621      	mov	r1, r4
 8005d4a:	f7ff ff83 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005d4e:	e7a0      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d50:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	b123      	cbz	r3, 8005d62 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d58:	f10d 0106 	add.w	r1, sp, #6
 8005d5c:	7c00      	ldrb	r0, [r0, #16]
 8005d5e:	4798      	blx	r3
  if (err != 0U)
 8005d60:	e7c0      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005d62:	4621      	mov	r1, r4
 8005d64:	f7ff ff76 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005d68:	e793      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d6a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	b123      	cbz	r3, 8005d7c <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d72:	f10d 0106 	add.w	r1, sp, #6
 8005d76:	7c00      	ldrb	r0, [r0, #16]
 8005d78:	4798      	blx	r3
  if (err != 0U)
 8005d7a:	e7b3      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	f7ff ff69 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005d82:	e786      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d84:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	b123      	cbz	r3, 8005d96 <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d8c:	f10d 0106 	add.w	r1, sp, #6
 8005d90:	7c00      	ldrb	r0, [r0, #16]
 8005d92:	4798      	blx	r3
  if (err != 0U)
 8005d94:	e7a6      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005d96:	4621      	mov	r1, r4
 8005d98:	f7ff ff5c 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005d9c:	e779      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d9e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	b123      	cbz	r3, 8005db0 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005da6:	f10d 0106 	add.w	r1, sp, #6
 8005daa:	7c00      	ldrb	r0, [r0, #16]
 8005dac:	4798      	blx	r3
  if (err != 0U)
 8005dae:	e799      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005db0:	4621      	mov	r1, r4
 8005db2:	f7ff ff4f 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005db6:	e76c      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005db8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	b123      	cbz	r3, 8005dca <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005dc0:	f10d 0106 	add.w	r1, sp, #6
 8005dc4:	7c00      	ldrb	r0, [r0, #16]
 8005dc6:	4798      	blx	r3
  if (err != 0U)
 8005dc8:	e78c      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8005dca:	4621      	mov	r1, r4
 8005dcc:	f7ff ff42 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005dd0:	e75f      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	f7ff ff3e 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005dd8:	e75b      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dda:	7c03      	ldrb	r3, [r0, #16]
 8005ddc:	b933      	cbnz	r3, 8005dec <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de4:	f10d 0006 	add.w	r0, sp, #6
 8005de8:	4798      	blx	r3
  if (err != 0U)
 8005dea:	e77b      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8005dec:	4621      	mov	r1, r4
 8005dee:	f7ff ff31 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005df2:	e74e      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df4:	7c03      	ldrb	r3, [r0, #16]
 8005df6:	b943      	cbnz	r3, 8005e0a <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005df8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	f10d 0006 	add.w	r0, sp, #6
 8005e02:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e04:	2307      	movs	r3, #7
 8005e06:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005e08:	e76c      	b.n	8005ce4 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	f7ff ff22 	bl	8005c54 <USBD_CtlError>
  if (err != 0U)
 8005e10:	e73f      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8005e12:	4621      	mov	r1, r4
 8005e14:	f7ff ff1e 	bl	8005c54 <USBD_CtlError>
    return;
 8005e18:	e73b      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	bf28      	it	cs
 8005e1e:	461a      	movcs	r2, r3
 8005e20:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e24:	4601      	mov	r1, r0
 8005e26:	4628      	mov	r0, r5
 8005e28:	f000 f9ff 	bl	800622a <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005e2c:	88e3      	ldrh	r3, [r4, #6]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f47f af2f 	bne.w	8005c92 <USBD_StdDevReq+0x2a>
 8005e34:	e75f      	b.n	8005cf6 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e36:	888b      	ldrh	r3, [r1, #4]
 8005e38:	b9eb      	cbnz	r3, 8005e76 <USBD_StdDevReq+0x20e>
 8005e3a:	88cb      	ldrh	r3, [r1, #6]
 8005e3c:	b9db      	cbnz	r3, 8005e76 <USBD_StdDevReq+0x20e>
 8005e3e:	884b      	ldrh	r3, [r1, #2]
 8005e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e42:	d818      	bhi.n	8005e76 <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e44:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005e48:	2a03      	cmp	r2, #3
 8005e4a:	d00d      	beq.n	8005e68 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e4c:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8005e4e:	f880 429e 	strb.w	r4, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e52:	4621      	mov	r1, r4
 8005e54:	f000 fbea 	bl	800662c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 fa12 	bl	8006282 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005e5e:	b134      	cbz	r4, 8005e6e <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e60:	2302      	movs	r3, #2
 8005e62:	f885 329c 	strb.w	r3, [r5, #668]	@ 0x29c
 8005e66:	e714      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8005e68:	f7ff fef4 	bl	8005c54 <USBD_CtlError>
 8005e6c:	e711      	b.n	8005c92 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f885 329c 	strb.w	r3, [r5, #668]	@ 0x29c
 8005e74:	e70d      	b.n	8005c92 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff feeb 	bl	8005c54 <USBD_CtlError>
 8005e7e:	e708      	b.n	8005c92 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8005e80:	788b      	ldrb	r3, [r1, #2]
 8005e82:	4a54      	ldr	r2, [pc, #336]	@ (8005fd4 <USBD_StdDevReq+0x36c>)
 8005e84:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d80d      	bhi.n	8005ea6 <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 8005e8a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005e8e:	2a02      	cmp	r2, #2
 8005e90:	d00c      	beq.n	8005eac <USBD_StdDevReq+0x244>
 8005e92:	2a03      	cmp	r2, #3
 8005e94:	d020      	beq.n	8005ed8 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8005e96:	f7ff fedd 	bl	8005c54 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8005fd4 <USBD_StdDevReq+0x36c>)
 8005e9c:	7819      	ldrb	r1, [r3, #0]
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7ff fd98 	bl	80059d4 <USBD_ClrClassConfig>
        break;
 8005ea4:	e6f5      	b.n	8005c92 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8005ea6:	f7ff fed5 	bl	8005c54 <USBD_CtlError>
 8005eaa:	e6f2      	b.n	8005c92 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8005eac:	b18b      	cbz	r3, 8005ed2 <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 8005eae:	2101      	movs	r1, #1
 8005eb0:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005eb8:	f7ff fd7f 	bl	80059ba <USBD_SetClassConfig>
 8005ebc:	2802      	cmp	r0, #2
 8005ebe:	d003      	beq.n	8005ec8 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f9de 	bl	8006282 <USBD_CtlSendStatus>
 8005ec6:	e6e4      	b.n	8005c92 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7ff fec2 	bl	8005c54 <USBD_CtlError>
            return;
 8005ed0:	e6df      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8005ed2:	f000 f9d6 	bl	8006282 <USBD_CtlSendStatus>
 8005ed6:	e6dc      	b.n	8005c92 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8005ed8:	b18b      	cbz	r3, 8005efe <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8005eda:	6841      	ldr	r1, [r0, #4]
 8005edc:	2901      	cmp	r1, #1
 8005ede:	d01e      	beq.n	8005f1e <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ee0:	b2c9      	uxtb	r1, r1
 8005ee2:	f7ff fd77 	bl	80059d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd4 <USBD_StdDevReq+0x36c>)
 8005ee8:	7819      	ldrb	r1, [r3, #0]
 8005eea:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005eec:	4628      	mov	r0, r5
 8005eee:	f7ff fd64 	bl	80059ba <USBD_SetClassConfig>
 8005ef2:	2802      	cmp	r0, #2
 8005ef4:	d00e      	beq.n	8005f14 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 f9c3 	bl	8006282 <USBD_CtlSendStatus>
 8005efc:	e6c9      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005efe:	2302      	movs	r3, #2
 8005f00:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8005f04:	2100      	movs	r1, #0
 8005f06:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005f08:	f7ff fd64 	bl	80059d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f9b8 	bl	8006282 <USBD_CtlSendStatus>
 8005f12:	e6be      	b.n	8005c92 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8005f14:	4621      	mov	r1, r4
 8005f16:	4628      	mov	r0, r5
 8005f18:	f7ff fe9c 	bl	8005c54 <USBD_CtlError>
            return;
 8005f1c:	e6b9      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8005f1e:	f000 f9b0 	bl	8006282 <USBD_CtlSendStatus>
 8005f22:	e6b6      	b.n	8005c92 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 8005f24:	88cb      	ldrh	r3, [r1, #6]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d10a      	bne.n	8005f40 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 8005f2a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d909      	bls.n	8005f46 <USBD_StdDevReq+0x2de>
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d108      	bne.n	8005f48 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005f36:	2201      	movs	r2, #1
 8005f38:	1d01      	adds	r1, r0, #4
 8005f3a:	f000 f976 	bl	800622a <USBD_CtlSendData>
        break;
 8005f3e:	e6a8      	b.n	8005c92 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8005f40:	f7ff fe88 	bl	8005c54 <USBD_CtlError>
 8005f44:	e6a5      	b.n	8005c92 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8005f46:	b923      	cbnz	r3, 8005f52 <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7ff fe82 	bl	8005c54 <USBD_CtlError>
        break;
 8005f50:	e69f      	b.n	8005c92 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8005f52:	4601      	mov	r1, r0
 8005f54:	2300      	movs	r3, #0
 8005f56:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f000 f965 	bl	800622a <USBD_CtlSendData>
        break;
 8005f60:	e697      	b.n	8005c92 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8005f62:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005f66:	3b01      	subs	r3, #1
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d812      	bhi.n	8005f92 <USBD_StdDevReq+0x32a>
      if (req->wLength != 0x2U)
 8005f6c:	88cb      	ldrh	r3, [r1, #6]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d10c      	bne.n	8005f8c <USBD_StdDevReq+0x324>
      if (pdev->dev_remote_wakeup)
 8005f72:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2303      	movne	r3, #3
 8005f7e:	4601      	mov	r1, r0
 8005f80:	f841 3f0c 	str.w	r3, [r1, #12]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f84:	2202      	movs	r2, #2
 8005f86:	f000 f950 	bl	800622a <USBD_CtlSendData>
      break;
 8005f8a:	e682      	b.n	8005c92 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8005f8c:	f7ff fe62 	bl	8005c54 <USBD_CtlError>
        break;
 8005f90:	e67f      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8005f92:	f7ff fe5f 	bl	8005c54 <USBD_CtlError>
      break;
 8005f96:	e67c      	b.n	8005c92 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f98:	884b      	ldrh	r3, [r1, #2]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	f47f ae79 	bne.w	8005c92 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8005fa0:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8005fa4:	f000 f96d 	bl	8006282 <USBD_CtlSendStatus>
 8005fa8:	e673      	b.n	8005c92 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8005faa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d809      	bhi.n	8005fc8 <USBD_StdDevReq+0x360>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fb4:	884b      	ldrh	r3, [r1, #2]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	f47f ae6b 	bne.w	8005c92 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005fc2:	f000 f95e 	bl	8006282 <USBD_CtlSendStatus>
 8005fc6:	e664      	b.n	8005c92 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8005fc8:	f7ff fe44 	bl	8005c54 <USBD_CtlError>
      break;
 8005fcc:	e661      	b.n	8005c92 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8005fce:	f7ff fe41 	bl	8005c54 <USBD_CtlError>
          break;
 8005fd2:	e65e      	b.n	8005c92 <USBD_StdDevReq+0x2a>
 8005fd4:	20000e8c 	.word	0x20000e8c

08005fd8 <USBD_StdItfReq>:
{
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4605      	mov	r5, r0
 8005fdc:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fde:	780b      	ldrb	r3, [r1, #0]
 8005fe0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005fe4:	d007      	beq.n	8005ff6 <USBD_StdItfReq+0x1e>
 8005fe6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005fea:	2a40      	cmp	r2, #64	@ 0x40
 8005fec:	d003      	beq.n	8005ff6 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8005fee:	f7ff fe31 	bl	8005c54 <USBD_CtlError>
}
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005ff6:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d816      	bhi.n	800602e <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006000:	7923      	ldrb	r3, [r4, #4]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d80e      	bhi.n	8006024 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006006:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4621      	mov	r1, r4
 800600e:	4628      	mov	r0, r5
 8006010:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006012:	88e3      	ldrh	r3, [r4, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1ec      	bne.n	8005ff2 <USBD_StdItfReq+0x1a>
 8006018:	2800      	cmp	r0, #0
 800601a:	d1ea      	bne.n	8005ff2 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f930 	bl	8006282 <USBD_CtlSendStatus>
 8006022:	e7e6      	b.n	8005ff2 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8006024:	4621      	mov	r1, r4
 8006026:	4628      	mov	r0, r5
 8006028:	f7ff fe14 	bl	8005c54 <USBD_CtlError>
 800602c:	e7e1      	b.n	8005ff2 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	f7ff fe0f 	bl	8005c54 <USBD_CtlError>
          break;
 8006036:	e7dc      	b.n	8005ff2 <USBD_StdItfReq+0x1a>

08006038 <USBD_StdEPReq>:
{
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800603c:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800603e:	780b      	ldrb	r3, [r1, #0]
 8006040:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006044:	2b20      	cmp	r3, #32
 8006046:	d005      	beq.n	8006054 <USBD_StdEPReq+0x1c>
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d003      	beq.n	8006054 <USBD_StdEPReq+0x1c>
 800604c:	b14b      	cbz	r3, 8006062 <USBD_StdEPReq+0x2a>
      USBD_CtlError(pdev, req);
 800604e:	f7ff fe01 	bl	8005c54 <USBD_CtlError>
      break;
 8006052:	e004      	b.n	800605e <USBD_StdEPReq+0x26>
      pdev->pClass->Setup(pdev, req);
 8006054:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	4620      	mov	r0, r4
 800605c:	4798      	blx	r3
}
 800605e:	2000      	movs	r0, #0
 8006060:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8006062:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8006064:	784b      	ldrb	r3, [r1, #1]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d031      	beq.n	80060ce <USBD_StdEPReq+0x96>
 800606a:	2b03      	cmp	r3, #3
 800606c:	d005      	beq.n	800607a <USBD_StdEPReq+0x42>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d056      	beq.n	8006120 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff fdee 	bl	8005c54 <USBD_CtlError>
          break;
 8006078:	e7f1      	b.n	800605e <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800607a:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800607e:	2b02      	cmp	r3, #2
 8006080:	d005      	beq.n	800608e <USBD_StdEPReq+0x56>
 8006082:	2b03      	cmp	r3, #3
 8006084:	d013      	beq.n	80060ae <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 8006086:	4620      	mov	r0, r4
 8006088:	f7ff fde4 	bl	8005c54 <USBD_CtlError>
              break;
 800608c:	e7e7      	b.n	800605e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800608e:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 8006092:	d008      	beq.n	80060a6 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8006094:	4601      	mov	r1, r0
 8006096:	4620      	mov	r0, r4
 8006098:	f000 faa1 	bl	80065de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800609c:	2180      	movs	r1, #128	@ 0x80
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fa9d 	bl	80065de <USBD_LL_StallEP>
 80060a4:	e7db      	b.n	800605e <USBD_StdEPReq+0x26>
                USBD_CtlError(pdev, req);
 80060a6:	4620      	mov	r0, r4
 80060a8:	f7ff fdd4 	bl	8005c54 <USBD_CtlError>
 80060ac:	e7d7      	b.n	800605e <USBD_StdEPReq+0x26>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060ae:	884b      	ldrh	r3, [r1, #2]
 80060b0:	b923      	cbnz	r3, 80060bc <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 80060b2:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 80060b6:	d001      	beq.n	80060bc <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060b8:	88cb      	ldrh	r3, [r1, #6]
 80060ba:	b11b      	cbz	r3, 80060c4 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 f8e0 	bl	8006282 <USBD_CtlSendStatus>
              break;
 80060c2:	e7cc      	b.n	800605e <USBD_StdEPReq+0x26>
                  USBD_LL_StallEP(pdev, ep_addr);
 80060c4:	4601      	mov	r1, r0
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fa89 	bl	80065de <USBD_LL_StallEP>
 80060cc:	e7f6      	b.n	80060bc <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 80060ce:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d005      	beq.n	80060e2 <USBD_StdEPReq+0xaa>
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d013      	beq.n	8006102 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 80060da:	4620      	mov	r0, r4
 80060dc:	f7ff fdba 	bl	8005c54 <USBD_CtlError>
              break;
 80060e0:	e7bd      	b.n	800605e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060e2:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 80060e6:	d008      	beq.n	80060fa <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 80060e8:	4601      	mov	r1, r0
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 fa77 	bl	80065de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060f0:	2180      	movs	r1, #128	@ 0x80
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 fa73 	bl	80065de <USBD_LL_StallEP>
 80060f8:	e7b1      	b.n	800605e <USBD_StdEPReq+0x26>
                USBD_CtlError(pdev, req);
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff fdaa 	bl	8005c54 <USBD_CtlError>
 8006100:	e7ad      	b.n	800605e <USBD_StdEPReq+0x26>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006102:	884b      	ldrh	r3, [r1, #2]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1aa      	bne.n	800605e <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006108:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 800610c:	d103      	bne.n	8006116 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f8b7 	bl	8006282 <USBD_CtlSendStatus>
 8006114:	e7a3      	b.n	800605e <USBD_StdEPReq+0x26>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006116:	4601      	mov	r1, r0
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fa68 	bl	80065ee <USBD_LL_ClearStallEP>
 800611e:	e7f6      	b.n	800610e <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 8006120:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006124:	2b02      	cmp	r3, #2
 8006126:	d005      	beq.n	8006134 <USBD_StdEPReq+0xfc>
 8006128:	2b03      	cmp	r3, #3
 800612a:	d018      	beq.n	800615e <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 800612c:	4620      	mov	r0, r4
 800612e:	f7ff fd91 	bl	8005c54 <USBD_CtlError>
              break;
 8006132:	e794      	b.n	800605e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006134:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 8006138:	d003      	beq.n	8006142 <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 800613a:	4620      	mov	r0, r4
 800613c:	f7ff fd8a 	bl	8005c54 <USBD_CtlError>
                break;
 8006140:	e78d      	b.n	800605e <USBD_StdEPReq+0x26>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006142:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8006146:	bf14      	ite	ne
 8006148:	f104 0114 	addne.w	r1, r4, #20
 800614c:	f504 71aa 	addeq.w	r1, r4, #340	@ 0x154
              pep->status = 0x0000U;
 8006150:	2300      	movs	r3, #0
 8006152:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006154:	2202      	movs	r2, #2
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f867 	bl	800622a <USBD_CtlSendData>
              break;
 800615c:	e77f      	b.n	800605e <USBD_StdEPReq+0x26>
              if ((ep_addr & 0x80U) == 0x80U)
 800615e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8006162:	d11b      	bne.n	800619c <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006164:	f000 030f 	and.w	r3, r0, #15
 8006168:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800616c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006170:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006174:	b333      	cbz	r3, 80061c4 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006176:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800617a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800617e:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8006182:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006186:	f010 0f7f 	tst.w	r0, #127	@ 0x7f
 800618a:	d01f      	beq.n	80061cc <USBD_StdEPReq+0x194>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800618c:	4601      	mov	r1, r0
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fa35 	bl	80065fe <USBD_LL_IsStallEP>
 8006194:	3800      	subs	r0, #0
 8006196:	bf18      	it	ne
 8006198:	2001      	movne	r0, #1
 800619a:	e018      	b.n	80061ce <USBD_StdEPReq+0x196>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800619c:	f000 030f 	and.w	r3, r0, #15
 80061a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	b13b      	cbz	r3, 80061bc <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ac:	f000 057f 	and.w	r5, r0, #127	@ 0x7f
 80061b0:	3501      	adds	r5, #1
 80061b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80061b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80061ba:	e7e4      	b.n	8006186 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 80061bc:	4620      	mov	r0, r4
 80061be:	f7ff fd49 	bl	8005c54 <USBD_CtlError>
                  break;
 80061c2:	e74c      	b.n	800605e <USBD_StdEPReq+0x26>
                  USBD_CtlError(pdev, req);
 80061c4:	4620      	mov	r0, r4
 80061c6:	f7ff fd45 	bl	8005c54 <USBD_CtlError>
                  break;
 80061ca:	e748      	b.n	800605e <USBD_StdEPReq+0x26>
 80061cc:	2000      	movs	r0, #0
                pep->status = 0x0000U;
 80061ce:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061d0:	2202      	movs	r2, #2
 80061d2:	4629      	mov	r1, r5
 80061d4:	4620      	mov	r0, r4
 80061d6:	f000 f828 	bl	800622a <USBD_CtlSendData>
              break;
 80061da:	e740      	b.n	800605e <USBD_StdEPReq+0x26>

080061dc <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80061dc:	b320      	cbz	r0, 8006228 <USBD_GetString+0x4c>
{
 80061de:	b410      	push	{r4}
 80061e0:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80061e2:	7800      	ldrb	r0, [r0, #0]
 80061e4:	b148      	cbz	r0, 80061fa <USBD_GetString+0x1e>
 80061e6:	4663      	mov	r3, ip
  {
    len++;
    buf++;
 80061e8:	4618      	mov	r0, r3
  while (*buf != '\0')
 80061ea:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80061ee:	2c00      	cmp	r4, #0
 80061f0:	d1fa      	bne.n	80061e8 <USBD_GetString+0xc>
    len++;
 80061f2:	f1cc 0301 	rsb	r3, ip, #1
 80061f6:	4418      	add	r0, r3
 80061f8:	b2c0      	uxtb	r0, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80061fa:	0040      	lsls	r0, r0, #1
 80061fc:	3002      	adds	r0, #2
 80061fe:	8010      	strh	r0, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006200:	7008      	strb	r0, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006202:	2303      	movs	r3, #3
 8006204:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 8006206:	f89c 0000 	ldrb.w	r0, [ip]
 800620a:	b158      	cbz	r0, 8006224 <USBD_GetString+0x48>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800620c:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800620e:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 8006216:	3302      	adds	r3, #2
 8006218:	b2db      	uxtb	r3, r3
 800621a:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 800621c:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8006220:	2800      	cmp	r0, #0
 8006222:	d1f5      	bne.n	8006210 <USBD_GetString+0x34>
}
 8006224:	bc10      	pop	{r4}
 8006226:	4770      	bx	lr
 8006228:	4770      	bx	lr

0800622a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800622a:	b508      	push	{r3, lr}
 800622c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800622e:	2202      	movs	r2, #2
 8006230:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006234:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8006236:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006238:	460a      	mov	r2, r1
 800623a:	2100      	movs	r1, #0
 800623c:	f000 f9fe 	bl	800663c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006240:	2000      	movs	r0, #0
 8006242:	bd08      	pop	{r3, pc}

08006244 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006244:	b508      	push	{r3, lr}
 8006246:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006248:	460a      	mov	r2, r1
 800624a:	2100      	movs	r1, #0
 800624c:	f000 f9f6 	bl	800663c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006250:	2000      	movs	r0, #0
 8006252:	bd08      	pop	{r3, pc}

08006254 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006254:	b508      	push	{r3, lr}
 8006256:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006258:	2203      	movs	r2, #3
 800625a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800625e:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006262:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006266:	460a      	mov	r2, r1
 8006268:	2100      	movs	r1, #0
 800626a:	f000 f9ef 	bl	800664c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800626e:	2000      	movs	r0, #0
 8006270:	bd08      	pop	{r3, pc}

08006272 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006272:	b508      	push	{r3, lr}
 8006274:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006276:	460a      	mov	r2, r1
 8006278:	2100      	movs	r1, #0
 800627a:	f000 f9e7 	bl	800664c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800627e:	2000      	movs	r0, #0
 8006280:	bd08      	pop	{r3, pc}

08006282 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006282:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006284:	2304      	movs	r3, #4
 8006286:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800628a:	2300      	movs	r3, #0
 800628c:	461a      	mov	r2, r3
 800628e:	4619      	mov	r1, r3
 8006290:	f000 f9d4 	bl	800663c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006294:	2000      	movs	r0, #0
 8006296:	bd08      	pop	{r3, pc}

08006298 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006298:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800629a:	2305      	movs	r3, #5
 800629c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062a0:	2300      	movs	r3, #0
 80062a2:	461a      	mov	r2, r3
 80062a4:	4619      	mov	r1, r3
 80062a6:	f000 f9d1 	bl	800664c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80062aa:	2000      	movs	r0, #0
 80062ac:	bd08      	pop	{r3, pc}
	...

080062b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062b2:	2200      	movs	r2, #0
 80062b4:	490f      	ldr	r1, [pc, #60]	@ (80062f4 <MX_USB_DEVICE_Init+0x44>)
 80062b6:	4810      	ldr	r0, [pc, #64]	@ (80062f8 <MX_USB_DEVICE_Init+0x48>)
 80062b8:	f7ff fb5c 	bl	8005974 <USBD_Init>
 80062bc:	b970      	cbnz	r0, 80062dc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062be:	490f      	ldr	r1, [pc, #60]	@ (80062fc <MX_USB_DEVICE_Init+0x4c>)
 80062c0:	480d      	ldr	r0, [pc, #52]	@ (80062f8 <MX_USB_DEVICE_Init+0x48>)
 80062c2:	f7ff fb6e 	bl	80059a2 <USBD_RegisterClass>
 80062c6:	b960      	cbnz	r0, 80062e2 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062c8:	490d      	ldr	r1, [pc, #52]	@ (8006300 <MX_USB_DEVICE_Init+0x50>)
 80062ca:	480b      	ldr	r0, [pc, #44]	@ (80062f8 <MX_USB_DEVICE_Init+0x48>)
 80062cc:	f7ff fb24 	bl	8005918 <USBD_CDC_RegisterInterface>
 80062d0:	b950      	cbnz	r0, 80062e8 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062d2:	4809      	ldr	r0, [pc, #36]	@ (80062f8 <MX_USB_DEVICE_Init+0x48>)
 80062d4:	f7ff fb6c 	bl	80059b0 <USBD_Start>
 80062d8:	b948      	cbnz	r0, 80062ee <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80062dc:	f7fb fcb0 	bl	8001c40 <Error_Handler>
 80062e0:	e7ed      	b.n	80062be <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80062e2:	f7fb fcad 	bl	8001c40 <Error_Handler>
 80062e6:	e7ef      	b.n	80062c8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80062e8:	f7fb fcaa 	bl	8001c40 <Error_Handler>
 80062ec:	e7f1      	b.n	80062d2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80062ee:	f7fb fca7 	bl	8001c40 <Error_Handler>
}
 80062f2:	e7f2      	b.n	80062da <MX_USB_DEVICE_Init+0x2a>
 80062f4:	200002e0 	.word	0x200002e0
 80062f8:	20000e90 	.word	0x20000e90
 80062fc:	20000258 	.word	0x20000258
 8006300:	2000029c 	.word	0x2000029c

08006304 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006304:	2000      	movs	r0, #0
 8006306:	4770      	bx	lr

08006308 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006308:	2000      	movs	r0, #0
 800630a:	4770      	bx	lr

0800630c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800630c:	b510      	push	{r4, lr}
 800630e:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006310:	4c04      	ldr	r4, [pc, #16]	@ (8006324 <CDC_Receive_FS+0x18>)
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fb0f 	bl	8005936 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006318:	4620      	mov	r0, r4
 800631a:	f7ff fb12 	bl	8005942 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800631e:	2000      	movs	r0, #0
 8006320:	bd10      	pop	{r4, pc}
 8006322:	bf00      	nop
 8006324:	20000e90 	.word	0x20000e90

08006328 <CDC_Init_FS>:
{
 8006328:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800632a:	4c06      	ldr	r4, [pc, #24]	@ (8006344 <CDC_Init_FS+0x1c>)
 800632c:	2200      	movs	r2, #0
 800632e:	4906      	ldr	r1, [pc, #24]	@ (8006348 <CDC_Init_FS+0x20>)
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff faf8 	bl	8005926 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006336:	4905      	ldr	r1, [pc, #20]	@ (800634c <CDC_Init_FS+0x24>)
 8006338:	4620      	mov	r0, r4
 800633a:	f7ff fafc 	bl	8005936 <USBD_CDC_SetRxBuffer>
}
 800633e:	2000      	movs	r0, #0
 8006340:	bd10      	pop	{r4, pc}
 8006342:	bf00      	nop
 8006344:	20000e90 	.word	0x20000e90
 8006348:	20001154 	.word	0x20001154
 800634c:	20001554 	.word	0x20001554

08006350 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006350:	2312      	movs	r3, #18
 8006352:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006354:	4800      	ldr	r0, [pc, #0]	@ (8006358 <USBD_FS_DeviceDescriptor+0x8>)
 8006356:	4770      	bx	lr
 8006358:	200002cc 	.word	0x200002cc

0800635c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800635c:	2304      	movs	r3, #4
 800635e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8006360:	4800      	ldr	r0, [pc, #0]	@ (8006364 <USBD_FS_LangIDStrDescriptor+0x8>)
 8006362:	4770      	bx	lr
 8006364:	200002c8 	.word	0x200002c8

08006368 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006368:	b18a      	cbz	r2, 800638e <IntToUnicode+0x26>
 800636a:	3101      	adds	r1, #1
 800636c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006370:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8006374:	0f03      	lsrs	r3, r0, #28
 8006376:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800637a:	bf34      	ite	cc
 800637c:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800637e:	3337      	addcs	r3, #55	@ 0x37
 8006380:	f801 3c01 	strb.w	r3, [r1, #-1]
    value = value << 4;
 8006384:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8006386:	f801 cb02 	strb.w	ip, [r1], #2
  for (idx = 0; idx < len; idx++)
 800638a:	4291      	cmp	r1, r2
 800638c:	d1f2      	bne.n	8006374 <IntToUnicode+0xc>
  }
}
 800638e:	4770      	bx	lr

08006390 <USBD_FS_SerialStrDescriptor>:
{
 8006390:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006392:	231a      	movs	r3, #26
 8006394:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006396:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <USBD_FS_SerialStrDescriptor+0x38>)
 8006398:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 800639c:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 80063a0:	18c0      	adds	r0, r0, r3
 80063a2:	d101      	bne.n	80063a8 <USBD_FS_SerialStrDescriptor+0x18>
}
 80063a4:	4809      	ldr	r0, [pc, #36]	@ (80063cc <USBD_FS_SerialStrDescriptor+0x3c>)
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063a8:	4b07      	ldr	r3, [pc, #28]	@ (80063c8 <USBD_FS_SerialStrDescriptor+0x38>)
 80063aa:	f8d3 57ec 	ldr.w	r5, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063ae:	4c08      	ldr	r4, [pc, #32]	@ (80063d0 <USBD_FS_SerialStrDescriptor+0x40>)
 80063b0:	2208      	movs	r2, #8
 80063b2:	4621      	mov	r1, r4
 80063b4:	f7ff ffd8 	bl	8006368 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063b8:	2204      	movs	r2, #4
 80063ba:	f104 0110 	add.w	r1, r4, #16
 80063be:	4628      	mov	r0, r5
 80063c0:	f7ff ffd2 	bl	8006368 <IntToUnicode>
 80063c4:	e7ee      	b.n	80063a4 <USBD_FS_SerialStrDescriptor+0x14>
 80063c6:	bf00      	nop
 80063c8:	1ffff000 	.word	0x1ffff000
 80063cc:	200002ac 	.word	0x200002ac
 80063d0:	200002ae 	.word	0x200002ae

080063d4 <USBD_FS_ProductStrDescriptor>:
{
 80063d4:	b508      	push	{r3, lr}
 80063d6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063d8:	4902      	ldr	r1, [pc, #8]	@ (80063e4 <USBD_FS_ProductStrDescriptor+0x10>)
 80063da:	4803      	ldr	r0, [pc, #12]	@ (80063e8 <USBD_FS_ProductStrDescriptor+0x14>)
 80063dc:	f7ff fefe 	bl	80061dc <USBD_GetString>
}
 80063e0:	4800      	ldr	r0, [pc, #0]	@ (80063e4 <USBD_FS_ProductStrDescriptor+0x10>)
 80063e2:	bd08      	pop	{r3, pc}
 80063e4:	20001954 	.word	0x20001954
 80063e8:	0800be08 	.word	0x0800be08

080063ec <USBD_FS_ManufacturerStrDescriptor>:
{
 80063ec:	b510      	push	{r4, lr}
 80063ee:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063f0:	4c03      	ldr	r4, [pc, #12]	@ (8006400 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80063f2:	4621      	mov	r1, r4
 80063f4:	4803      	ldr	r0, [pc, #12]	@ (8006404 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80063f6:	f7ff fef1 	bl	80061dc <USBD_GetString>
}
 80063fa:	4620      	mov	r0, r4
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	20001954 	.word	0x20001954
 8006404:	0800be20 	.word	0x0800be20

08006408 <USBD_FS_ConfigStrDescriptor>:
{
 8006408:	b508      	push	{r3, lr}
 800640a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800640c:	4902      	ldr	r1, [pc, #8]	@ (8006418 <USBD_FS_ConfigStrDescriptor+0x10>)
 800640e:	4803      	ldr	r0, [pc, #12]	@ (800641c <USBD_FS_ConfigStrDescriptor+0x14>)
 8006410:	f7ff fee4 	bl	80061dc <USBD_GetString>
}
 8006414:	4800      	ldr	r0, [pc, #0]	@ (8006418 <USBD_FS_ConfigStrDescriptor+0x10>)
 8006416:	bd08      	pop	{r3, pc}
 8006418:	20001954 	.word	0x20001954
 800641c:	0800be34 	.word	0x0800be34

08006420 <USBD_FS_InterfaceStrDescriptor>:
{
 8006420:	b508      	push	{r3, lr}
 8006422:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006424:	4902      	ldr	r1, [pc, #8]	@ (8006430 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8006426:	4803      	ldr	r0, [pc, #12]	@ (8006434 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006428:	f7ff fed8 	bl	80061dc <USBD_GetString>
}
 800642c:	4800      	ldr	r0, [pc, #0]	@ (8006430 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800642e:	bd08      	pop	{r3, pc}
 8006430:	20001954 	.word	0x20001954
 8006434:	0800be40 	.word	0x0800be40

08006438 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006438:	b120      	cbz	r0, 8006444 <USBD_Get_USB_Status+0xc>
 800643a:	2802      	cmp	r0, #2
 800643c:	bf0c      	ite	eq
 800643e:	2001      	moveq	r0, #1
 8006440:	2002      	movne	r0, #2
 8006442:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006444:	4770      	bx	lr
	...

08006448 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8006448:	6802      	ldr	r2, [r0, #0]
 800644a:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <HAL_PCD_MspInit+0x3c>)
 800644c:	429a      	cmp	r2, r3
 800644e:	d000      	beq.n	8006452 <HAL_PCD_MspInit+0xa>
 8006450:	4770      	bx	lr
{
 8006452:	b500      	push	{lr}
 8006454:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8006456:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006460:	61da      	str	r2, [r3, #28]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800646c:	2200      	movs	r2, #0
 800646e:	4611      	mov	r1, r2
 8006470:	2014      	movs	r0, #20
 8006472:	f7fb fe5f 	bl	8002134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006476:	2014      	movs	r0, #20
 8006478:	f7fb fe92 	bl	80021a0 <HAL_NVIC_EnableIRQ>
}
 800647c:	b003      	add	sp, #12
 800647e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006482:	bf00      	nop
 8006484:	40005c00 	.word	0x40005c00

08006488 <HAL_PCD_SetupStageCallback>:
{
 8006488:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800648a:	f500 712c 	add.w	r1, r0, #688	@ 0x2b0
 800648e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8006492:	f7ff faa6 	bl	80059e2 <USBD_LL_SetupStage>
}
 8006496:	bd08      	pop	{r3, pc}

08006498 <HAL_PCD_DataOutStageCallback>:
{
 8006498:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800649a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800649e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80064a2:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 80064a6:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 80064aa:	f7ff fac7 	bl	8005a3c <USBD_LL_DataOutStage>
}
 80064ae:	bd08      	pop	{r3, pc}

080064b0 <HAL_PCD_DataInStageCallback>:
{
 80064b0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064b2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80064b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80064ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064bc:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 80064c0:	f7ff fb00 	bl	8005ac4 <USBD_LL_DataInStage>
}
 80064c4:	bd08      	pop	{r3, pc}

080064c6 <HAL_PCD_SOFCallback>:
{
 80064c6:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80064c8:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 80064cc:	f7ff fba0 	bl	8005c10 <USBD_LL_SOF>
}
 80064d0:	bd08      	pop	{r3, pc}

080064d2 <HAL_PCD_ResetCallback>:
{
 80064d2:	b510      	push	{r4, lr}
 80064d4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064d6:	6883      	ldr	r3, [r0, #8]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d109      	bne.n	80064f0 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80064dc:	2101      	movs	r1, #1
 80064de:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 80064e2:	f7ff fb7f 	bl	8005be4 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064e6:	f8d4 02ec 	ldr.w	r0, [r4, #748]	@ 0x2ec
 80064ea:	f7ff fb53 	bl	8005b94 <USBD_LL_Reset>
}
 80064ee:	bd10      	pop	{r4, pc}
    Error_Handler();
 80064f0:	f7fb fba6 	bl	8001c40 <Error_Handler>
 80064f4:	e7f2      	b.n	80064dc <HAL_PCD_ResetCallback+0xa>
	...

080064f8 <HAL_PCD_SuspendCallback>:
{
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064fc:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 8006500:	f7ff fb73 	bl	8005bea <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006504:	69a3      	ldr	r3, [r4, #24]
 8006506:	b123      	cbz	r3, 8006512 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006508:	4a02      	ldr	r2, [pc, #8]	@ (8006514 <HAL_PCD_SuspendCallback+0x1c>)
 800650a:	6913      	ldr	r3, [r2, #16]
 800650c:	f043 0306 	orr.w	r3, r3, #6
 8006510:	6113      	str	r3, [r2, #16]
}
 8006512:	bd10      	pop	{r4, pc}
 8006514:	e000ed00 	.word	0xe000ed00

08006518 <HAL_PCD_ResumeCallback>:
{
 8006518:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800651a:	f8d0 02ec 	ldr.w	r0, [r0, #748]	@ 0x2ec
 800651e:	f7ff fb6d 	bl	8005bfc <USBD_LL_Resume>
}
 8006522:	bd08      	pop	{r3, pc}

08006524 <USBD_LL_Init>:
{
 8006524:	b510      	push	{r4, lr}
 8006526:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006528:	481d      	ldr	r0, [pc, #116]	@ (80065a0 <USBD_LL_Init+0x7c>)
 800652a:	f8c0 42ec 	str.w	r4, [r0, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800652e:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Instance = USB;
 8006532:	4b1c      	ldr	r3, [pc, #112]	@ (80065a4 <USBD_LL_Init+0x80>)
 8006534:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006536:	2308      	movs	r3, #8
 8006538:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800653a:	2302      	movs	r3, #2
 800653c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800653e:	2300      	movs	r3, #0
 8006540:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006542:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006544:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006546:	f7fc f8d1 	bl	80026ec <HAL_PCD_Init>
 800654a:	bb30      	cbnz	r0, 800659a <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800654c:	2318      	movs	r3, #24
 800654e:	2200      	movs	r2, #0
 8006550:	4611      	mov	r1, r2
 8006552:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006556:	f7fd f906 	bl	8003766 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800655a:	2358      	movs	r3, #88	@ 0x58
 800655c:	2200      	movs	r2, #0
 800655e:	2180      	movs	r1, #128	@ 0x80
 8006560:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006564:	f7fd f8ff 	bl	8003766 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006568:	23c0      	movs	r3, #192	@ 0xc0
 800656a:	2200      	movs	r2, #0
 800656c:	2181      	movs	r1, #129	@ 0x81
 800656e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006572:	f7fd f8f8 	bl	8003766 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006576:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800657a:	2200      	movs	r2, #0
 800657c:	2101      	movs	r1, #1
 800657e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006582:	f7fd f8f0 	bl	8003766 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800658a:	2200      	movs	r2, #0
 800658c:	2182      	movs	r1, #130	@ 0x82
 800658e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006592:	f7fd f8e8 	bl	8003766 <HAL_PCDEx_PMAConfig>
}
 8006596:	2000      	movs	r0, #0
 8006598:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800659a:	f7fb fb51 	bl	8001c40 <Error_Handler>
 800659e:	e7d5      	b.n	800654c <USBD_LL_Init+0x28>
 80065a0:	20002374 	.word	0x20002374
 80065a4:	40005c00 	.word	0x40005c00

080065a8 <USBD_LL_Start>:
{
 80065a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80065aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065ae:	f7fc f922 	bl	80027f6 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b2:	f7ff ff41 	bl	8006438 <USBD_Get_USB_Status>
}
 80065b6:	bd08      	pop	{r3, pc}

080065b8 <USBD_LL_OpenEP>:
{
 80065b8:	b508      	push	{r3, lr}
 80065ba:	4694      	mov	ip, r2
 80065bc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065be:	4663      	mov	r3, ip
 80065c0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065c4:	f7fc ffaa 	bl	800351c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c8:	f7ff ff36 	bl	8006438 <USBD_Get_USB_Status>
}
 80065cc:	bd08      	pop	{r3, pc}

080065ce <USBD_LL_CloseEP>:
{
 80065ce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80065d0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065d4:	f7fc ffdb 	bl	800358e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065d8:	f7ff ff2e 	bl	8006438 <USBD_Get_USB_Status>
}
 80065dc:	bd08      	pop	{r3, pc}

080065de <USBD_LL_StallEP>:
{
 80065de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065e4:	f7fd f848 	bl	8003678 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065e8:	f7ff ff26 	bl	8006438 <USBD_Get_USB_Status>
}
 80065ec:	bd08      	pop	{r3, pc}

080065ee <USBD_LL_ClearStallEP>:
{
 80065ee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065f0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065f4:	f7fd f87c 	bl	80036f0 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065f8:	f7ff ff1e 	bl	8006438 <USBD_Get_USB_Status>
}
 80065fc:	bd08      	pop	{r3, pc}

080065fe <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065fe:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8006602:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006606:	d108      	bne.n	800661a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006608:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800660c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006610:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006614:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
}
 8006618:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800661a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800661e:	3101      	adds	r1, #1
 8006620:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006624:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006628:	7898      	ldrb	r0, [r3, #2]
 800662a:	4770      	bx	lr

0800662c <USBD_LL_SetUSBAddress>:
{
 800662c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800662e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006632:	f7fc f8f9 	bl	8002828 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006636:	f7ff feff 	bl	8006438 <USBD_Get_USB_Status>
}
 800663a:	bd08      	pop	{r3, pc}

0800663c <USBD_LL_Transmit>:
{
 800663c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800663e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006642:	f7fc fff8 	bl	8003636 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006646:	f7ff fef7 	bl	8006438 <USBD_Get_USB_Status>
}
 800664a:	bd08      	pop	{r3, pc}

0800664c <USBD_LL_PrepareReceive>:
{
 800664c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800664e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006652:	f7fc ffce 	bl	80035f2 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006656:	f7ff feef 	bl	8006438 <USBD_Get_USB_Status>
}
 800665a:	bd08      	pop	{r3, pc}

0800665c <USBD_LL_GetRxDataSize>:
{
 800665c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800665e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006662:	f7fc ffdf 	bl	8003624 <HAL_PCD_EP_GetRxCount>
}
 8006666:	bd08      	pop	{r3, pc}

08006668 <USBD_static_malloc>:
}
 8006668:	4800      	ldr	r0, [pc, #0]	@ (800666c <USBD_static_malloc+0x4>)
 800666a:	4770      	bx	lr
 800666c:	20002154 	.word	0x20002154

08006670 <USBD_static_free>:
}
 8006670:	4770      	bx	lr

08006672 <HAL_PCDEx_SetConnectionState>:
}
 8006672:	4770      	bx	lr

08006674 <fChrono_GetTick>:
 *         In TICK_TYPE_VARIABLE mode, tick is returned by dereferencing the address of tick value as tick_t.
 *         In TICK_TYPE_FUNCTION mode, tick is returned by calling a user defined function that generates tick value.
 *
 * @retval tick: Current tick (raw)
 */
tick_t fChrono_GetTick(void) {
 8006674:	b508      	push	{r3, lr}

  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8006676:	4b04      	ldr	r3, [pc, #16]	@ (8006688 <fChrono_GetTick+0x14>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b11b      	cbz	r3, 8006684 <fChrono_GetTick+0x10>

  return *_chrono.pTickValue;

#elif (CHRONO_TICK_TYPE == TICK_TYPE_FUNCTION)

  return _chrono.GetTickValue();
 800667c:	4b02      	ldr	r3, [pc, #8]	@ (8006688 <fChrono_GetTick+0x14>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006680:	4798      	blx	r3
  
  return (tick_t)0;
  
#endif
  
}
 8006682:	bd08      	pop	{r3, pc}
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8006684:	2000      	movs	r0, #0
 8006686:	e7fc      	b.n	8006682 <fChrono_GetTick+0xe>
 8006688:	20000300 	.word	0x20000300

0800668c <fChrono_GetTickTopValue>:
 * 
 * @retval topValue: Tick top value
 */
tick_t fChrono_GetTickTopValue(void) {
  
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <fChrono_GetTickTopValue+0x10>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b113      	cbz	r3, 8006698 <fChrono_GetTickTopValue+0xc>
  
  return _chrono.TickTopValue;
 8006692:	4b02      	ldr	r3, [pc, #8]	@ (800669c <fChrono_GetTickTopValue+0x10>)
 8006694:	6958      	ldr	r0, [r3, #20]
 8006696:	4770      	bx	lr
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8006698:	2000      	movs	r0, #0
}
 800669a:	4770      	bx	lr
 800669c:	20000300 	.word	0x20000300

080066a0 <fChrono_GetTickInitValue>:
 * 
 * @retval initValue: Tick init value
 */
tick_t fChrono_GetTickInitValue(void) {
  
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80066a0:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <fChrono_GetTickInitValue+0x10>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b113      	cbz	r3, 80066ac <fChrono_GetTickInitValue+0xc>
  
  return _chrono.TickInitValue;
 80066a6:	4b02      	ldr	r3, [pc, #8]	@ (80066b0 <fChrono_GetTickInitValue+0x10>)
 80066a8:	6998      	ldr	r0, [r3, #24]
 80066aa:	4770      	bx	lr
  CHECK_INIT_RET_((tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80066ac:	2000      	movs	r0, #0
}
 80066ae:	4770      	bx	lr
 80066b0:	20000300 	.word	0x20000300

080066b4 <fChrono_GetTickToNsCoef>:
 * 
 * @retval tickToNsCoef: Tick-to-nanoseconds coefficient
 */
uint32_t fChrono_GetTickToNsCoef(void) {
  
  CHECK_INIT_RET_(0U); /* MISRA 2012 Rule 15.5 deviation */
 80066b4:	4b03      	ldr	r3, [pc, #12]	@ (80066c4 <fChrono_GetTickToNsCoef+0x10>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b113      	cbz	r3, 80066c0 <fChrono_GetTickToNsCoef+0xc>
  
  return _chrono.TickToNsCoef;
 80066ba:	4b02      	ldr	r3, [pc, #8]	@ (80066c4 <fChrono_GetTickToNsCoef+0x10>)
 80066bc:	6858      	ldr	r0, [r3, #4]
 80066be:	4770      	bx	lr
  CHECK_INIT_RET_(0U); /* MISRA 2012 Rule 15.5 deviation */
 80066c0:	2000      	movs	r0, #0
}
 80066c2:	4770      	bx	lr
 80066c4:	20000300 	.word	0x20000300

080066c8 <fChrono_TimeSpanMs>:
 * @param endTick End tick
 * @retval timeSpan: Time length between two time stamps (milliseconds)
 */
timeMs_t fChrono_TimeSpanMs(tick_t startTick, tick_t endTick) {
  
  CHECK_INIT_MS_RET_((timeMs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80066c8:	4b08      	ldr	r3, [pc, #32]	@ (80066ec <fChrono_TimeSpanMs+0x24>)
 80066ca:	789b      	ldrb	r3, [r3, #2]
 80066cc:	b15b      	cbz	r3, 80066e6 <fChrono_TimeSpanMs+0x1e>
  
  return (timeMs_t)(ELAPSED_(endTick, startTick)) / _chrono.MsToTickCoef;
 80066ce:	4281      	cmp	r1, r0
 80066d0:	eba1 0000 	sub.w	r0, r1, r0
 80066d4:	bf3e      	ittt	cc
 80066d6:	4b05      	ldrcc	r3, [pc, #20]	@ (80066ec <fChrono_TimeSpanMs+0x24>)
 80066d8:	695b      	ldrcc	r3, [r3, #20]
 80066da:	18c0      	addcc	r0, r0, r3
 80066dc:	4b03      	ldr	r3, [pc, #12]	@ (80066ec <fChrono_TimeSpanMs+0x24>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80066e4:	4770      	bx	lr
  CHECK_INIT_MS_RET_((timeMs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80066e6:	2000      	movs	r0, #0
  
}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20000300 	.word	0x20000300

080066f0 <fChrono_TimeSpanUs>:
 * @param endTick End tick
 * @retval timeSpan: Time length between two time stamps (microseconds)
 */
timeUs_t fChrono_TimeSpanUs(tick_t startTick, tick_t endTick) {
  
  CHECK_INIT_US_RET_((timeUs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80066f0:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <fChrono_TimeSpanUs+0x24>)
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	b15b      	cbz	r3, 800670e <fChrono_TimeSpanUs+0x1e>
  
  return (timeUs_t)(ELAPSED_(endTick, startTick)) / _chrono.UsToTickCoef;
 80066f6:	4281      	cmp	r1, r0
 80066f8:	eba1 0000 	sub.w	r0, r1, r0
 80066fc:	bf3e      	ittt	cc
 80066fe:	4b05      	ldrcc	r3, [pc, #20]	@ (8006714 <fChrono_TimeSpanUs+0x24>)
 8006700:	695b      	ldrcc	r3, [r3, #20]
 8006702:	18c0      	addcc	r0, r0, r3
 8006704:	4b03      	ldr	r3, [pc, #12]	@ (8006714 <fChrono_TimeSpanUs+0x24>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	fbb0 f0f3 	udiv	r0, r0, r3
 800670c:	4770      	bx	lr
  CHECK_INIT_US_RET_((timeUs_t)0); /* MISRA 2012 Rule 15.5 deviation */
 800670e:	2000      	movs	r0, #0
  
}
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000300 	.word	0x20000300

08006718 <fChrono_Start>:
 * 
 * @param me Pointer to the chrono object
 */
tick_t fChrono_Start(sChrono * const me) {

  CHECK_INIT_RET_((tick_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8006718:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <fChrono_Start+0x20>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b143      	cbz	r3, 8006730 <fChrono_Start+0x18>
tick_t fChrono_Start(sChrono * const me) {
 800671e:	b510      	push	{r4, lr}
 8006720:	4604      	mov	r4, r0
  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8006722:	b138      	cbz	r0, 8006734 <fChrono_Start+0x1c>
  
  me->_startTick = fChrono_GetTick();
 8006724:	f7ff ffa6 	bl	8006674 <fChrono_GetTick>
 8006728:	6060      	str	r0, [r4, #4]
  me->_run = TRUE;
 800672a:	2301      	movs	r3, #1
 800672c:	7023      	strb	r3, [r4, #0]

  return me->_startTick;
}
 800672e:	bd10      	pop	{r4, pc}
  CHECK_INIT_RET_((tick_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8006730:	2000      	movs	r0, #0
}
 8006732:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 8006734:	2000      	movs	r0, #0
 8006736:	e7fa      	b.n	800672e <fChrono_Start+0x16>
 8006738:	20000300 	.word	0x20000300

0800673c <fChrono_Init>:
  _chrono.Init = FALSE;
 800673c:	4b19      	ldr	r3, [pc, #100]	@ (80067a4 <fChrono_Init+0x68>)
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
  _chrono.InitUs = FALSE;
 8006742:	705a      	strb	r2, [r3, #1]
  _chrono.InitMs = FALSE;
 8006744:	709a      	strb	r2, [r3, #2]
  _chrono.InitSec = FALSE;
 8006746:	70da      	strb	r2, [r3, #3]
  if(fpTickValue == NULL) {
 8006748:	b350      	cbz	r0, 80067a0 <fChrono_Init+0x64>
uint8_t fChrono_Init(tick_t(*fpTickValue)(void)) {
 800674a:	b510      	push	{r4, lr}
  _chrono.TickTopValue = CHRONO_TICK_TOP_VALUE;
 800674c:	4c15      	ldr	r4, [pc, #84]	@ (80067a4 <fChrono_Init+0x68>)
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	6162      	str	r2, [r4, #20]
  _chrono.TickToNsCoef = CHRONO_TICK_TO_NANOSECOND_COEF;
 8006754:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006758:	6062      	str	r2, [r4, #4]
  _chrono.GetTickValue = fpTickValue;
 800675a:	6720      	str	r0, [r4, #112]	@ 0x70
  _chrono.UsToTickCoef = (1000U / CHRONO_TICK_TO_NANOSECOND_COEF);
 800675c:	2301      	movs	r3, #1
 800675e:	60a3      	str	r3, [r4, #8]
  _chrono.MsToTickCoef = (1000000U / CHRONO_TICK_TO_NANOSECOND_COEF);
 8006760:	60e2      	str	r2, [r4, #12]
  _chrono.SecToTickCoef = (1000000000U / CHRONO_TICK_TO_NANOSECOND_COEF);
 8006762:	4a11      	ldr	r2, [pc, #68]	@ (80067a8 <fChrono_Init+0x6c>)
 8006764:	6122      	str	r2, [r4, #16]
  _chrono.ContinuousTickUs = 0U;
 8006766:	2000      	movs	r0, #0
 8006768:	2100      	movs	r1, #0
 800676a:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
	_chrono.ContinuousTickMs = 0U;
 800676e:	e9c4 0118 	strd	r0, r1, [r4, #96]	@ 0x60
	_chrono.ContinuousTickS = 0U;
 8006772:	e9c4 011a 	strd	r0, r1, [r4, #104]	@ 0x68
  _chrono.Init = TRUE;
 8006776:	7023      	strb	r3, [r4, #0]
  _chrono.InitUs = (_chrono.UsToTickCoef != 0U);
 8006778:	7063      	strb	r3, [r4, #1]
  _chrono.InitMs = (_chrono.MsToTickCoef != 0U);
 800677a:	70a3      	strb	r3, [r4, #2]
  _chrono.InitSec = (_chrono.SecToTickCoef != 0U);
 800677c:	70e3      	strb	r3, [r4, #3]
	fChrono_Start(&_chrono.ChronoTickUs);
 800677e:	f104 001c 	add.w	r0, r4, #28
 8006782:	f7ff ffc9 	bl	8006718 <fChrono_Start>
	fChrono_Start(&_chrono.ChronoTickMs);
 8006786:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800678a:	f7ff ffc5 	bl	8006718 <fChrono_Start>
	fChrono_Start(&_chrono.ChronoTickS);
 800678e:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8006792:	f7ff ffc1 	bl	8006718 <fChrono_Start>
  _chrono.TickInitValue = fChrono_GetTick();
 8006796:	f7ff ff6d 	bl	8006674 <fChrono_GetTick>
 800679a:	61a0      	str	r0, [r4, #24]
  return CHRONO_OK;
 800679c:	2000      	movs	r0, #0
}
 800679e:	bd10      	pop	{r4, pc}
    return CHRONO_ERROR_TICK_PTR_ERROR; /* MISRA 2012 Rule 15.5 deviation */
 80067a0:	2003      	movs	r0, #3
}
 80067a2:	4770      	bx	lr
 80067a4:	20000300 	.word	0x20000300
 80067a8:	000f4240 	.word	0x000f4240

080067ac <fChrono_Stop>:
 * 
 * @param me Pointer to the chrono object
 */
tick_t fChrono_Stop(sChrono * const me) {

  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80067ac:	b140      	cbz	r0, 80067c0 <fChrono_Stop+0x14>
tick_t fChrono_Stop(sChrono * const me) {
 80067ae:	b510      	push	{r4, lr}
 80067b0:	4604      	mov	r4, r0
  
  me->_stopTick = fChrono_GetTick();
 80067b2:	f7ff ff5f 	bl	8006674 <fChrono_GetTick>
 80067b6:	60a0      	str	r0, [r4, #8]
  me->_run = FALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	7023      	strb	r3, [r4, #0]
  me->_isTimeout = FALSE;
 80067bc:	7423      	strb	r3, [r4, #16]

  return me->_stopTick;
}
 80067be:	bd10      	pop	{r4, pc}
  ASSERT_NOT_NULL_RET_(me, (tick_t)0); /* MISRA 2012 Rule 15.5 deviation */
 80067c0:	2000      	movs	r0, #0
}
 80067c2:	4770      	bx	lr

080067c4 <fChrono_ElapsedMs>:
 * @param me Pointer to the chrono object
 * @retval elapsed: Elapsed time since starting the chrono object (milliseconds)
 */
timeMs_t fChrono_ElapsedMs(sChrono const * const me) {
  
  CHECK_INIT_MS_RET_((timeMs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 80067c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006804 <fChrono_ElapsedMs+0x40>)
 80067c6:	789b      	ldrb	r3, [r3, #2]
 80067c8:	b1c3      	cbz	r3, 80067fc <fChrono_ElapsedMs+0x38>
  ASSERT_NOT_NULL_RET_(me, (timeMs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 80067ca:	b1c8      	cbz	r0, 8006800 <fChrono_ElapsedMs+0x3c>
timeMs_t fChrono_ElapsedMs(sChrono const * const me) {
 80067cc:	b510      	push	{r4, lr}
  CHECK_RUN_(fChrono_TimeSpanMs(me->_startTick, me->_stopTick));                /* MISRA 2012 Rule 15.5 deviation */
 80067ce:	7803      	ldrb	r3, [r0, #0]
 80067d0:	b923      	cbnz	r3, 80067dc <fChrono_ElapsedMs+0x18>
 80067d2:	6881      	ldr	r1, [r0, #8]
 80067d4:	6840      	ldr	r0, [r0, #4]
 80067d6:	f7ff ff77 	bl	80066c8 <fChrono_TimeSpanMs>
  
  tick_t startTick = me->_startTick;
  tick_t currentTick = fChrono_GetTick();
  
  return (timeMs_t)((timeMs_t)(ELAPSED_(currentTick, startTick)) / _chrono.MsToTickCoef);
}
 80067da:	bd10      	pop	{r4, pc}
  tick_t startTick = me->_startTick;
 80067dc:	6844      	ldr	r4, [r0, #4]
  tick_t currentTick = fChrono_GetTick();
 80067de:	f7ff ff49 	bl	8006674 <fChrono_GetTick>
  return (timeMs_t)((timeMs_t)(ELAPSED_(currentTick, startTick)) / _chrono.MsToTickCoef);
 80067e2:	4284      	cmp	r4, r0
 80067e4:	d805      	bhi.n	80067f2 <fChrono_ElapsedMs+0x2e>
 80067e6:	1b00      	subs	r0, r0, r4
 80067e8:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <fChrono_ElapsedMs+0x40>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80067f0:	e7f3      	b.n	80067da <fChrono_ElapsedMs+0x16>
 80067f2:	4b04      	ldr	r3, [pc, #16]	@ (8006804 <fChrono_ElapsedMs+0x40>)
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	1b1b      	subs	r3, r3, r4
 80067f8:	4418      	add	r0, r3
 80067fa:	e7f5      	b.n	80067e8 <fChrono_ElapsedMs+0x24>
  CHECK_INIT_MS_RET_((timeMs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 80067fc:	2000      	movs	r0, #0
 80067fe:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (timeMs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 8006800:	2000      	movs	r0, #0
}
 8006802:	4770      	bx	lr
 8006804:	20000300 	.word	0x20000300

08006808 <fChrono_GetContinuousTickMs>:
uint64_t fChrono_GetContinuousTickMs(void) {
 8006808:	b538      	push	{r3, r4, r5, lr}
  _chrono.ContinuousTickMs += (uint64_t)fChrono_ElapsedMs(&_chrono.ChronoTickMs);
 800680a:	4d08      	ldr	r5, [pc, #32]	@ (800682c <fChrono_GetContinuousTickMs+0x24>)
 800680c:	4628      	mov	r0, r5
 800680e:	f7ff ffd9 	bl	80067c4 <fChrono_ElapsedMs>
 8006812:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006814:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8006816:	181b      	adds	r3, r3, r0
 8006818:	f142 0200 	adc.w	r2, r2, #0
 800681c:	632b      	str	r3, [r5, #48]	@ 0x30
 800681e:	636a      	str	r2, [r5, #52]	@ 0x34
  fChrono_Start(&_chrono.ChronoTickMs);
 8006820:	4628      	mov	r0, r5
 8006822:	f7ff ff79 	bl	8006718 <fChrono_Start>
}
 8006826:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	@ 0x30
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	20000330 	.word	0x20000330

08006830 <fChrono_ElapsedUs>:
 * @param me Pointer to the chrono object
 * @retval elapsed: Elapsed time since starting the chrono object (microseconds)
 */
timeUs_t fChrono_ElapsedUs(sChrono const * const me) {
  
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8006830:	4b0f      	ldr	r3, [pc, #60]	@ (8006870 <fChrono_ElapsedUs+0x40>)
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	b1c3      	cbz	r3, 8006868 <fChrono_ElapsedUs+0x38>
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 8006836:	b1c8      	cbz	r0, 800686c <fChrono_ElapsedUs+0x3c>
timeUs_t fChrono_ElapsedUs(sChrono const * const me) {
 8006838:	b510      	push	{r4, lr}
  CHECK_RUN_(fChrono_TimeSpanUs(me->_startTick, me->_stopTick));                /* MISRA 2012 Rule 15.5 deviation */
 800683a:	7803      	ldrb	r3, [r0, #0]
 800683c:	b923      	cbnz	r3, 8006848 <fChrono_ElapsedUs+0x18>
 800683e:	6881      	ldr	r1, [r0, #8]
 8006840:	6840      	ldr	r0, [r0, #4]
 8006842:	f7ff ff55 	bl	80066f0 <fChrono_TimeSpanUs>
  
  tick_t startTick = me->_startTick;
  tick_t currentTick = fChrono_GetTick();
  
  return (timeUs_t)((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
}
 8006846:	bd10      	pop	{r4, pc}
  tick_t startTick = me->_startTick;
 8006848:	6844      	ldr	r4, [r0, #4]
  tick_t currentTick = fChrono_GetTick();
 800684a:	f7ff ff13 	bl	8006674 <fChrono_GetTick>
  return (timeUs_t)((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
 800684e:	4284      	cmp	r4, r0
 8006850:	d805      	bhi.n	800685e <fChrono_ElapsedUs+0x2e>
 8006852:	1b00      	subs	r0, r0, r4
 8006854:	4b06      	ldr	r3, [pc, #24]	@ (8006870 <fChrono_ElapsedUs+0x40>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	fbb0 f0f3 	udiv	r0, r0, r3
 800685c:	e7f3      	b.n	8006846 <fChrono_ElapsedUs+0x16>
 800685e:	4b04      	ldr	r3, [pc, #16]	@ (8006870 <fChrono_ElapsedUs+0x40>)
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	1b1b      	subs	r3, r3, r4
 8006864:	4418      	add	r0, r3
 8006866:	e7f5      	b.n	8006854 <fChrono_ElapsedUs+0x24>
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8006868:	2000      	movs	r0, #0
 800686a:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 800686c:	2000      	movs	r0, #0
}
 800686e:	4770      	bx	lr
 8006870:	20000300 	.word	0x20000300

08006874 <fChrono_StartTimeoutMs>:
 * @brief Starts the chrono object in timeout mode.
 * 
 * @param me Pointer to the chrono object
 * @param timeout Time length until the chrono object times out (milliseconds)
 */
void fChrono_StartTimeoutMs(sChrono * const me, timeMs_t timeout) {
 8006874:	b508      	push	{r3, lr}

  CHECK_INIT_MS_();     /* MISRA 2012 Rule 15.5 deviation */
 8006876:	4b07      	ldr	r3, [pc, #28]	@ (8006894 <fChrono_StartTimeoutMs+0x20>)
 8006878:	789b      	ldrb	r3, [r3, #2]
 800687a:	b14b      	cbz	r3, 8006890 <fChrono_StartTimeoutMs+0x1c>
  ASSERT_NOT_NULL_(me); /* MISRA 2012 Rule 15.5 deviation */
 800687c:	b140      	cbz	r0, 8006890 <fChrono_StartTimeoutMs+0x1c>
  
  me->_timeout = (tick_t)(timeout * (timeMs_t)_chrono.MsToTickCoef);
 800687e:	4b05      	ldr	r3, [pc, #20]	@ (8006894 <fChrono_StartTimeoutMs+0x20>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	60c3      	str	r3, [r0, #12]
  me->_isTimeout = FALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	7403      	strb	r3, [r0, #16]
  
  fChrono_Start(me);
 800688c:	f7ff ff44 	bl	8006718 <fChrono_Start>
}
 8006890:	bd08      	pop	{r3, pc}
 8006892:	bf00      	nop
 8006894:	20000300 	.word	0x20000300

08006898 <fChrono_StartTimeoutUs>:
 * @brief Starts the chrono object in timeout mode.
 * 
 * @param me Pointer to the chrono object
 * @param timeout Time length until the chrono object times out (microseconds)
 */
void fChrono_StartTimeoutUs(sChrono * const me, timeUs_t timeout) {
 8006898:	b508      	push	{r3, lr}

  CHECK_INIT_US_();     /* MISRA 2012 Rule 15.5 deviation */
 800689a:	4b07      	ldr	r3, [pc, #28]	@ (80068b8 <fChrono_StartTimeoutUs+0x20>)
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	b14b      	cbz	r3, 80068b4 <fChrono_StartTimeoutUs+0x1c>
  ASSERT_NOT_NULL_(me); /* MISRA 2012 Rule 15.5 deviation */
 80068a0:	b140      	cbz	r0, 80068b4 <fChrono_StartTimeoutUs+0x1c>
  
  me->_timeout = (tick_t)(timeout * (timeUs_t)_chrono.UsToTickCoef);
 80068a2:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <fChrono_StartTimeoutUs+0x20>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	60c3      	str	r3, [r0, #12]
  me->_isTimeout = FALSE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	7403      	strb	r3, [r0, #16]
  
  fChrono_Start(me);
 80068b0:	f7ff ff32 	bl	8006718 <fChrono_Start>
}
 80068b4:	bd08      	pop	{r3, pc}
 80068b6:	bf00      	nop
 80068b8:	20000300 	.word	0x20000300

080068bc <fChrono_IsTimeout>:
 * @note Before using this function, ensure that fChrono_StartTimeoutS(), fChrono_StartTimeoutMs() or fChrono_StartTimeoutUs() has been called to start the measurement.
 * 
 * @param me Pointer to the chrono object
 * @retval isTimeout: TRUE if the chrono is timed out, otherwise returns FALSE
 */
bool_t fChrono_IsTimeout(sChrono * const me) {
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  CHECK_INIT_RET_(FALSE);           /* MISRA 2012 Rule 15.5 deviation */
 80068be:	4b10      	ldr	r3, [pc, #64]	@ (8006900 <fChrono_IsTimeout+0x44>)
 80068c0:	781d      	ldrb	r5, [r3, #0]
 80068c2:	b1d5      	cbz	r5, 80068fa <fChrono_IsTimeout+0x3e>
 80068c4:	4604      	mov	r4, r0
  ASSERT_NOT_NULL_RET_(me, FALSE);  /* MISRA 2012 Rule 15.5 deviation */
 80068c6:	b1a8      	cbz	r0, 80068f4 <fChrono_IsTimeout+0x38>
  CHECK_RUN_(FALSE);                /* MISRA 2012 Rule 15.5 deviation */
 80068c8:	7806      	ldrb	r6, [r0, #0]
 80068ca:	b1ae      	cbz	r6, 80068f8 <fChrono_IsTimeout+0x3c>
  
  tick_t startTick = me->_startTick;
  
  if(me->_isTimeout) {
 80068cc:	7c05      	ldrb	r5, [r0, #16]
 80068ce:	b9a5      	cbnz	r5, 80068fa <fChrono_IsTimeout+0x3e>
  tick_t startTick = me->_startTick;
 80068d0:	6847      	ldr	r7, [r0, #4]
    return TRUE;
  }
  
  tick_t currentTick = fChrono_GetTick();
 80068d2:	f7ff fecf 	bl	8006674 <fChrono_GetTick>
  if(ELAPSED_(currentTick, startTick) >= me->_timeout) {
 80068d6:	4287      	cmp	r7, r0
 80068d8:	d807      	bhi.n	80068ea <fChrono_IsTimeout+0x2e>
 80068da:	1bc0      	subs	r0, r0, r7
 80068dc:	68e3      	ldr	r3, [r4, #12]
 80068de:	4283      	cmp	r3, r0
 80068e0:	d80b      	bhi.n	80068fa <fChrono_IsTimeout+0x3e>
    me->_isTimeout = TRUE;
 80068e2:	2301      	movs	r3, #1
 80068e4:	7423      	strb	r3, [r4, #16]
  } else {
    return FALSE;
  }

  return TRUE;
 80068e6:	4635      	mov	r5, r6
 80068e8:	e007      	b.n	80068fa <fChrono_IsTimeout+0x3e>
  if(ELAPSED_(currentTick, startTick) >= me->_timeout) {
 80068ea:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <fChrono_IsTimeout+0x44>)
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	1bdb      	subs	r3, r3, r7
 80068f0:	4418      	add	r0, r3
 80068f2:	e7f3      	b.n	80068dc <fChrono_IsTimeout+0x20>
  ASSERT_NOT_NULL_RET_(me, FALSE);  /* MISRA 2012 Rule 15.5 deviation */
 80068f4:	2500      	movs	r5, #0
 80068f6:	e000      	b.n	80068fa <fChrono_IsTimeout+0x3e>
  CHECK_RUN_(FALSE);                /* MISRA 2012 Rule 15.5 deviation */
 80068f8:	4635      	mov	r5, r6
}
 80068fa:	4628      	mov	r0, r5
 80068fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000300 	.word	0x20000300

08006904 <fChrono_IntervalUs>:
 * @param me Pointer to the chrono object
 * @retval interval: Time interval between two consecutive calls of the function (microseconds)
 */
timeUs_t fChrono_IntervalUs(sChrono * const me) {
  
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 8006904:	4b0f      	ldr	r3, [pc, #60]	@ (8006944 <fChrono_IntervalUs+0x40>)
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	b1bb      	cbz	r3, 800693a <fChrono_IntervalUs+0x36>
timeUs_t fChrono_IntervalUs(sChrono * const me) {
 800690a:	b510      	push	{r4, lr}
 800690c:	4604      	mov	r4, r0
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 800690e:	b1b0      	cbz	r0, 800693e <fChrono_IntervalUs+0x3a>
  CHECK_RUN_((timeUs_t)0);                /* MISRA 2012 Rule 15.5 deviation */
 8006910:	7803      	ldrb	r3, [r0, #0]
 8006912:	b90b      	cbnz	r3, 8006918 <fChrono_IntervalUs+0x14>
 8006914:	2000      	movs	r0, #0
  tick_t currentTick = fChrono_GetTick();
  tick_t startTick = me->_startTick;
  me->_startTick = currentTick;
  
  return ((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
}
 8006916:	bd10      	pop	{r4, pc}
  tick_t currentTick = fChrono_GetTick();
 8006918:	f7ff feac 	bl	8006674 <fChrono_GetTick>
  tick_t startTick = me->_startTick;
 800691c:	6863      	ldr	r3, [r4, #4]
  me->_startTick = currentTick;
 800691e:	6060      	str	r0, [r4, #4]
  return ((timeUs_t)(ELAPSED_(currentTick, startTick)) / _chrono.UsToTickCoef);
 8006920:	4298      	cmp	r0, r3
 8006922:	d305      	bcc.n	8006930 <fChrono_IntervalUs+0x2c>
 8006924:	1ac0      	subs	r0, r0, r3
 8006926:	4b07      	ldr	r3, [pc, #28]	@ (8006944 <fChrono_IntervalUs+0x40>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	fbb0 f0f3 	udiv	r0, r0, r3
 800692e:	e7f2      	b.n	8006916 <fChrono_IntervalUs+0x12>
 8006930:	4a04      	ldr	r2, [pc, #16]	@ (8006944 <fChrono_IntervalUs+0x40>)
 8006932:	6952      	ldr	r2, [r2, #20]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	4418      	add	r0, r3
 8006938:	e7f5      	b.n	8006926 <fChrono_IntervalUs+0x22>
  CHECK_INIT_US_RET_((timeUs_t)0);        /* MISRA 2012 Rule 15.5 deviation */
 800693a:	2000      	movs	r0, #0
}
 800693c:	4770      	bx	lr
  ASSERT_NOT_NULL_RET_(me, (timeUs_t)0);  /* MISRA 2012 Rule 15.5 deviation */
 800693e:	2000      	movs	r0, #0
 8006940:	e7e9      	b.n	8006916 <fChrono_IntervalUs+0x12>
 8006942:	bf00      	nop
 8006944:	20000300 	.word	0x20000300

08006948 <fFaraabin_Init>:
 * 
 * @note User need to call this function once in the initialization procedure of the software.
 * 
 * @return result Can be one of FARAABIN_RET values.
 */
fb_result_t fFaraabin_Init(void) {
 8006948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  if(fFaraabinLinkSerializer_Init(fFaraabin_GetTxBufferPointer(), fFaraabin_GetTxBufferSize()) != 0U) {
 800694c:	f7fa fdee 	bl	800152c <fFaraabin_GetTxBufferPointer>
 8006950:	4604      	mov	r4, r0
 8006952:	f7fa fdef 	bl	8001534 <fFaraabin_GetTxBufferSize>
 8006956:	4601      	mov	r1, r0
 8006958:	4620      	mov	r0, r4
 800695a:	f003 fce3 	bl	800a324 <fFaraabinLinkSerializer_Init>
 800695e:	b118      	cbz	r0, 8006968 <fFaraabin_Init+0x20>
    return FARAABIN_SERIALIZER_INIT_FAILED;
 8006960:	2401      	movs	r4, #1
  }
	
	fFaraabinFobjectMcu_SendEventSystem(eMCU_EVENT_INFO_BOOT);
  
  return FARAABIN_OK;
}
 8006962:	4620      	mov	r0, r4
 8006964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(fFaraabinLinkHandler_Init(fFaraabin_GetRxBufferPointer(), fFaraabin_GetRxBufferSize()) != FB_LINK_HANDLER_RESULT_OK) {
 8006968:	f7fa fde8 	bl	800153c <fFaraabin_GetRxBufferPointer>
 800696c:	4604      	mov	r4, r0
 800696e:	f7fa fde9 	bl	8001544 <fFaraabin_GetRxBufferSize>
 8006972:	b281      	uxth	r1, r0
 8006974:	4620      	mov	r0, r4
 8006976:	f002 fcf3 	bl	8009360 <fFaraabinLinkHandler_Init>
 800697a:	2800      	cmp	r0, #0
 800697c:	f040 8092 	bne.w	8006aa4 <fFaraabin_Init+0x15c>
  if(fFaraabinDatabase_Init() != 0U) {
 8006980:	f000 f902 	bl	8006b88 <fFaraabinDatabase_Init>
 8006984:	2800      	cmp	r0, #0
 8006986:	f040 808f 	bne.w	8006aa8 <fFaraabin_Init+0x160>
  if(fFaraabinFobjectMcu_Init() != 0U) {
 800698a:	f001 fa73 	bl	8007e74 <fFaraabinFobjectMcu_Init>
 800698e:	2800      	cmp	r0, #0
 8006990:	f040 808c 	bne.w	8006aac <fFaraabin_Init+0x164>
  if(fFaraabinFunctionEngine_Init() != 0U) {
 8006994:	f001 fb80 	bl	8008098 <fFaraabinFunctionEngine_Init>
 8006998:	2800      	cmp	r0, #0
 800699a:	f040 8089 	bne.w	8006ab0 <fFaraabin_Init+0x168>
	FaraabinInit___ = true;
 800699e:	2701      	movs	r7, #1
 80069a0:	4b45      	ldr	r3, [pc, #276]	@ (8006ab8 <fFaraabin_Init+0x170>)
 80069a2:	701f      	strb	r7, [r3, #0]
	FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(bool_t);
 80069a4:	4845      	ldr	r0, [pc, #276]	@ (8006abc <fFaraabin_Init+0x174>)
 80069a6:	4b46      	ldr	r3, [pc, #280]	@ (8006ac0 <fFaraabin_Init+0x178>)
 80069a8:	6043      	str	r3, [r0, #4]
 80069aa:	4e46      	ldr	r6, [pc, #280]	@ (8006ac4 <fFaraabin_Init+0x17c>)
 80069ac:	60c6      	str	r6, [r0, #12]
 80069ae:	4d46      	ldr	r5, [pc, #280]	@ (8006ac8 <fFaraabin_Init+0x180>)
 80069b0:	6085      	str	r5, [r0, #8]
 80069b2:	6147      	str	r7, [r0, #20]
 80069b4:	2400      	movs	r4, #0
 80069b6:	7484      	strb	r4, [r0, #18]
 80069b8:	6184      	str	r4, [r0, #24]
 80069ba:	f001 fb2f 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint8_t);
 80069be:	4843      	ldr	r0, [pc, #268]	@ (8006acc <fFaraabin_Init+0x184>)
 80069c0:	4b43      	ldr	r3, [pc, #268]	@ (8006ad0 <fFaraabin_Init+0x188>)
 80069c2:	6043      	str	r3, [r0, #4]
 80069c4:	60c6      	str	r6, [r0, #12]
 80069c6:	6085      	str	r5, [r0, #8]
 80069c8:	6147      	str	r7, [r0, #20]
 80069ca:	7484      	strb	r4, [r0, #18]
 80069cc:	6184      	str	r4, [r0, #24]
 80069ce:	f001 fb25 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int8_t);
 80069d2:	4840      	ldr	r0, [pc, #256]	@ (8006ad4 <fFaraabin_Init+0x18c>)
 80069d4:	4b40      	ldr	r3, [pc, #256]	@ (8006ad8 <fFaraabin_Init+0x190>)
 80069d6:	6043      	str	r3, [r0, #4]
 80069d8:	60c6      	str	r6, [r0, #12]
 80069da:	6085      	str	r5, [r0, #8]
 80069dc:	6147      	str	r7, [r0, #20]
 80069de:	7484      	strb	r4, [r0, #18]
 80069e0:	6184      	str	r4, [r0, #24]
 80069e2:	f001 fb1b 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint16_t);
 80069e6:	483d      	ldr	r0, [pc, #244]	@ (8006adc <fFaraabin_Init+0x194>)
 80069e8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae0 <fFaraabin_Init+0x198>)
 80069ea:	6043      	str	r3, [r0, #4]
 80069ec:	60c6      	str	r6, [r0, #12]
 80069ee:	6085      	str	r5, [r0, #8]
 80069f0:	2702      	movs	r7, #2
 80069f2:	6147      	str	r7, [r0, #20]
 80069f4:	7484      	strb	r4, [r0, #18]
 80069f6:	6184      	str	r4, [r0, #24]
 80069f8:	f001 fb10 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int16_t);
 80069fc:	4839      	ldr	r0, [pc, #228]	@ (8006ae4 <fFaraabin_Init+0x19c>)
 80069fe:	4b3a      	ldr	r3, [pc, #232]	@ (8006ae8 <fFaraabin_Init+0x1a0>)
 8006a00:	6043      	str	r3, [r0, #4]
 8006a02:	60c6      	str	r6, [r0, #12]
 8006a04:	6085      	str	r5, [r0, #8]
 8006a06:	6147      	str	r7, [r0, #20]
 8006a08:	7484      	strb	r4, [r0, #18]
 8006a0a:	6184      	str	r4, [r0, #24]
 8006a0c:	f001 fb06 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint32_t);
 8006a10:	4836      	ldr	r0, [pc, #216]	@ (8006aec <fFaraabin_Init+0x1a4>)
 8006a12:	4b37      	ldr	r3, [pc, #220]	@ (8006af0 <fFaraabin_Init+0x1a8>)
 8006a14:	6043      	str	r3, [r0, #4]
 8006a16:	60c6      	str	r6, [r0, #12]
 8006a18:	6085      	str	r5, [r0, #8]
 8006a1a:	f04f 0804 	mov.w	r8, #4
 8006a1e:	f8c0 8014 	str.w	r8, [r0, #20]
 8006a22:	7484      	strb	r4, [r0, #18]
 8006a24:	6184      	str	r4, [r0, #24]
 8006a26:	f001 faf9 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int32_t);
 8006a2a:	4832      	ldr	r0, [pc, #200]	@ (8006af4 <fFaraabin_Init+0x1ac>)
 8006a2c:	4b32      	ldr	r3, [pc, #200]	@ (8006af8 <fFaraabin_Init+0x1b0>)
 8006a2e:	6043      	str	r3, [r0, #4]
 8006a30:	60c6      	str	r6, [r0, #12]
 8006a32:	6085      	str	r5, [r0, #8]
 8006a34:	f8c0 8014 	str.w	r8, [r0, #20]
 8006a38:	7484      	strb	r4, [r0, #18]
 8006a3a:	6184      	str	r4, [r0, #24]
 8006a3c:	f001 faee 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(uint64_t);
 8006a40:	482e      	ldr	r0, [pc, #184]	@ (8006afc <fFaraabin_Init+0x1b4>)
 8006a42:	4b2f      	ldr	r3, [pc, #188]	@ (8006b00 <fFaraabin_Init+0x1b8>)
 8006a44:	6043      	str	r3, [r0, #4]
 8006a46:	60c6      	str	r6, [r0, #12]
 8006a48:	6085      	str	r5, [r0, #8]
 8006a4a:	2708      	movs	r7, #8
 8006a4c:	6147      	str	r7, [r0, #20]
 8006a4e:	7484      	strb	r4, [r0, #18]
 8006a50:	6184      	str	r4, [r0, #24]
 8006a52:	f001 fae3 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(int64_t);
 8006a56:	482b      	ldr	r0, [pc, #172]	@ (8006b04 <fFaraabin_Init+0x1bc>)
 8006a58:	4b2b      	ldr	r3, [pc, #172]	@ (8006b08 <fFaraabin_Init+0x1c0>)
 8006a5a:	6043      	str	r3, [r0, #4]
 8006a5c:	60c6      	str	r6, [r0, #12]
 8006a5e:	6085      	str	r5, [r0, #8]
 8006a60:	6147      	str	r7, [r0, #20]
 8006a62:	7484      	strb	r4, [r0, #18]
 8006a64:	6184      	str	r4, [r0, #24]
 8006a66:	f001 fad9 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(float32_t);
 8006a6a:	4828      	ldr	r0, [pc, #160]	@ (8006b0c <fFaraabin_Init+0x1c4>)
 8006a6c:	4b28      	ldr	r3, [pc, #160]	@ (8006b10 <fFaraabin_Init+0x1c8>)
 8006a6e:	6043      	str	r3, [r0, #4]
 8006a70:	60c6      	str	r6, [r0, #12]
 8006a72:	6085      	str	r5, [r0, #8]
 8006a74:	f8c0 8014 	str.w	r8, [r0, #20]
 8006a78:	7484      	strb	r4, [r0, #18]
 8006a7a:	6184      	str	r4, [r0, #24]
 8006a7c:	f001 face 	bl	800801c <fFaraabinFobjectVarType_Init>
  FARAABIN_VAR_TYPE_PRIMITIVE_INIT_(float64_t);
 8006a80:	4824      	ldr	r0, [pc, #144]	@ (8006b14 <fFaraabin_Init+0x1cc>)
 8006a82:	4b25      	ldr	r3, [pc, #148]	@ (8006b18 <fFaraabin_Init+0x1d0>)
 8006a84:	6043      	str	r3, [r0, #4]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	6085      	str	r5, [r0, #8]
 8006a8a:	6147      	str	r7, [r0, #20]
 8006a8c:	7484      	strb	r4, [r0, #18]
 8006a8e:	6184      	str	r4, [r0, #24]
 8006a90:	f001 fac4 	bl	800801c <fFaraabinFobjectVarType_Init>
	if(fFaraabinDefaultFobjects_Init() != 0U) {
 8006a94:	f000 f918 	bl	8006cc8 <fFaraabinDefaultFobjects_Init>
 8006a98:	4604      	mov	r4, r0
 8006a9a:	b958      	cbnz	r0, 8006ab4 <fFaraabin_Init+0x16c>
	fFaraabinFobjectMcu_SendEventSystem(eMCU_EVENT_INFO_BOOT);
 8006a9c:	2003      	movs	r0, #3
 8006a9e:	f001 fa4d 	bl	8007f3c <fFaraabinFobjectMcu_SendEventSystem>
  return FARAABIN_OK;
 8006aa2:	e75e      	b.n	8006962 <fFaraabin_Init+0x1a>
    return FARAABIN_LINK_HANDLER_INIT_FAILED;
 8006aa4:	2402      	movs	r4, #2
 8006aa6:	e75c      	b.n	8006962 <fFaraabin_Init+0x1a>
    return FARAABIN_DATA_BASE_INIT_FAILED;
 8006aa8:	2403      	movs	r4, #3
 8006aaa:	e75a      	b.n	8006962 <fFaraabin_Init+0x1a>
    return FARAABIN_MCU_FOBJECT_INIT_FAILED;
 8006aac:	2405      	movs	r4, #5
 8006aae:	e758      	b.n	8006962 <fFaraabin_Init+0x1a>
    return FARAABIN_FUNCTION_ENGINE_INIT_FAILED;
 8006ab0:	2406      	movs	r4, #6
 8006ab2:	e756      	b.n	8006962 <fFaraabin_Init+0x1a>
    return FARAABIN_DEFAULT_FOBJECTS_INIT_FAILED;
 8006ab4:	2404      	movs	r4, #4
 8006ab6:	e754      	b.n	8006962 <fFaraabin_Init+0x1a>
 8006ab8:	20002664 	.word	0x20002664
 8006abc:	20002780 	.word	0x20002780
 8006ac0:	0800be50 	.word	0x0800be50
 8006ac4:	0800be58 	.word	0x0800be58
 8006ac8:	0800be98 	.word	0x0800be98
 8006acc:	20002764 	.word	0x20002764
 8006ad0:	0800bea0 	.word	0x0800bea0
 8006ad4:	20002748 	.word	0x20002748
 8006ad8:	0800bea8 	.word	0x0800bea8
 8006adc:	2000272c 	.word	0x2000272c
 8006ae0:	0800beb0 	.word	0x0800beb0
 8006ae4:	20002710 	.word	0x20002710
 8006ae8:	0800bebc 	.word	0x0800bebc
 8006aec:	200026f4 	.word	0x200026f4
 8006af0:	0800bec4 	.word	0x0800bec4
 8006af4:	200026d8 	.word	0x200026d8
 8006af8:	0800bed0 	.word	0x0800bed0
 8006afc:	200026bc 	.word	0x200026bc
 8006b00:	0800bed8 	.word	0x0800bed8
 8006b04:	200026a0 	.word	0x200026a0
 8006b08:	0800bee4 	.word	0x0800bee4
 8006b0c:	20002684 	.word	0x20002684
 8006b10:	0800beec 	.word	0x0800beec
 8006b14:	20002668 	.word	0x20002668
 8006b18:	0800bef8 	.word	0x0800bef8

08006b1c <fFaraabin_IsAllowEvent>:
	faraabin_mcu__.Enable = FALSE;
}

bool fFaraabin_IsAllowEvent(void) {
	
	if(!faraabin_mcu__.Enable) {
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <fFaraabin_IsAllowEvent+0x14>)
 8006b1e:	7898      	ldrb	r0, [r3, #2]
 8006b20:	b120      	cbz	r0, 8006b2c <fFaraabin_IsAllowEvent+0x10>
		return false;
	}
	
	if(LinkHandler.DictSendingMode.SendFlag) {
 8006b22:	4b04      	ldr	r3, [pc, #16]	@ (8006b34 <fFaraabin_IsAllowEvent+0x18>)
 8006b24:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 8006b28:	f080 0001 	eor.w	r0, r0, #1
		return false;
	}
	
	return true;
}
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	2000294c 	.word	0x2000294c
 8006b34:	20002bb4 	.word	0x20002bb4

08006b38 <fFaraabin_Run>:
 * @attention Faraabin uses a queue to hold incoming probe data from various parts of the software.
 *            To prevent data mixing, faraabin utilizes a critical section mechanism.
 *            For more details, refer to the user manual.
 * 
 */
void fFaraabin_Run(void) {
 8006b38:	b538      	push	{r3, r4, r5, lr}
	
	if(!FaraabinInit___) {
 8006b3a:	4b11      	ldr	r3, [pc, #68]	@ (8006b80 <fFaraabin_Run+0x48>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b923      	cbnz	r3, 8006b4a <fFaraabin_Run+0x12>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006b40:	4a10      	ldr	r2, [pc, #64]	@ (8006b84 <fFaraabin_Run+0x4c>)
 8006b42:	7953      	ldrb	r3, [r2, #5]
 8006b44:	f043 0308 	orr.w	r3, r3, #8
 8006b48:	7153      	strb	r3, [r2, #5]
	}
  
  fFaraabinFobjectMcu_Run();
 8006b4a:	f001 f9c5 	bl	8007ed8 <fFaraabinFobjectMcu_Run>
  fFaraabinFunctionEngine_Run();
 8006b4e:	f001 fadf 	bl	8008110 <fFaraabinFunctionEngine_Run>
  fFaraabinLinkHandler_Run();
 8006b52:	f002 fc2b 	bl	80093ac <fFaraabinLinkHandler_Run>
  fFaraabinDefaultFobjects_Run();
 8006b56:	f000 f8df 	bl	8006d18 <fFaraabinDefaultFobjects_Run>
	fCpuProfiler_Run();
#endif

  // Looping over all dictionaries to find databus pointers.
  // After finding databus pointer, captured data of that databus is sent.
  uint16_t dictQty = fFaraabinDatabase_GetNumberOfAddedDicts();
 8006b5a:	f000 f82d 	bl	8006bb8 <fFaraabinDatabase_GetNumberOfAddedDicts>
  for(uint16_t i = 0U; i < dictQty; i++) {
 8006b5e:	4605      	mov	r5, r0
 8006b60:	b168      	cbz	r0, 8006b7e <fFaraabin_Run+0x46>
 8006b62:	2400      	movs	r4, #0
 8006b64:	e002      	b.n	8006b6c <fFaraabin_Run+0x34>
 8006b66:	3401      	adds	r4, #1
 8006b68:	42ac      	cmp	r4, r5
 8006b6a:	d008      	beq.n	8006b7e <fFaraabin_Run+0x46>

    uint32_t fobjectPtr = fFaraabinDatabase_GetFobjectPointerFromDict(i);
 8006b6c:	b2a0      	uxth	r0, r4
 8006b6e:	f000 f88f 	bl	8006c90 <fFaraabinDatabase_GetFobjectPointerFromDict>
    uint8_t *fobjectType = (uint8_t*)fobjectPtr;

    if((eFaraabin_FobjectType)(*fobjectType) == eFO_TYPE_DATABUS) {
 8006b72:	7803      	ldrb	r3, [r0, #0]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d1f6      	bne.n	8006b66 <fFaraabin_Run+0x2e>
      
      fFaraabinFobjectDataBus_SendCaptureDataRun((sFaraabinFobjectDataBus*)fobjectPtr);
 8006b78:	f000 fe96 	bl	80078a8 <fFaraabinFobjectDataBus_SendCaptureDataRun>
 8006b7c:	e7f3      	b.n	8006b66 <fFaraabin_Run+0x2e>

    }
  }
}
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	20002664 	.word	0x20002664
 8006b84:	2000279c 	.word	0x2000279c

08006b88 <fFaraabinDatabase_Init>:
 * 
 * @return result returns '0' after initialization.
 */
uint8_t fFaraabinDatabase_Init(void) {
  
  for(uint16_t i = 1; i < FB_MAX_FOBJECT_QTY; i++) {
 8006b88:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <fFaraabinDatabase_Init+0x28>)
 8006b8a:	f503 71c6 	add.w	r1, r3, #396	@ 0x18c
    
    FaraabinDatabase.DatabaseArray[i] = 0U;
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f843 2f04 	str.w	r2, [r3, #4]!
  for(uint16_t i = 1; i < FB_MAX_FOBJECT_QTY; i++) {
 8006b94:	428b      	cmp	r3, r1
 8006b96:	d1fb      	bne.n	8006b90 <fFaraabinDatabase_Init+0x8>
  }
  
  FaraabinDatabase.DatabaseArrayIndex = 0U;
 8006b98:	2000      	movs	r0, #0
 8006b9a:	4b05      	ldr	r3, [pc, #20]	@ (8006bb0 <fFaraabinDatabase_Init+0x28>)
 8006b9c:	f8a3 0190 	strh.w	r0, [r3, #400]	@ 0x190

  FaraabinFlags.Features.U32 = 0U;
 8006ba0:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <fFaraabinDatabase_Init+0x2c>)
 8006ba2:	6018      	str	r0, [r3, #0]
  FaraabinFlags.Status.U32 = 0U;
 8006ba4:	6058      	str	r0, [r3, #4]

#ifdef FB_FEATURE_FLAG_MCU_CLI
  FaraabinFlags.Features.Bitfield.McuCli = 1U;
#endif
#ifdef FB_FEATURE_FLAG_BUFFER_OVF
  FaraabinFlags.Features.Bitfield.BufferOverFlow = 1U;
 8006ba6:	220f      	movs	r2, #15
 8006ba8:	701a      	strb	r2, [r3, #0]

#ifdef FB_FEATURE_FLAG_ALLOW_SEND_DICT_BLOCKING
  FaraabinFlags.Features.Bitfield.AllowSendDickBlocking = 1U;
#endif

  FaraabinFlags.Status.Bitfield.McuReset = 1U;
 8006baa:	2201      	movs	r2, #1
 8006bac:	711a      	strb	r2, [r3, #4]
  
  return 0U;
}
 8006bae:	4770      	bx	lr
 8006bb0:	200027a4 	.word	0x200027a4
 8006bb4:	2000279c 	.word	0x2000279c

08006bb8 <fFaraabinDatabase_GetNumberOfAddedDicts>:
 * 
 * @return numberOfItems Number of items in database.
 */
uint16_t fFaraabinDatabase_GetNumberOfAddedDicts(void) {
  return FaraabinDatabase.DatabaseArrayIndex;
}
 8006bb8:	4b01      	ldr	r3, [pc, #4]	@ (8006bc0 <fFaraabinDatabase_GetNumberOfAddedDicts+0x8>)
 8006bba:	f8b3 0190 	ldrh.w	r0, [r3, #400]	@ 0x190
 8006bbe:	4770      	bx	lr
 8006bc0:	200027a4 	.word	0x200027a4

08006bc4 <fFaraabinDatabase_IsDictExist>:
 * @param fobjectPtr Pointer of the fobject.
 * @return result Returns TRUE if dict is exist, FALSE if not exist.
 */
bool fFaraabinDatabase_IsDictExist(uint32_t fobjectPtr) {
	
	for(uint32_t i = 0; i < FB_MAX_FOBJECT_QTY; i++) {\
 8006bc4:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <fFaraabinDatabase_IsDictExist+0x1c>)
 8006bc6:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
		
		if(FaraabinDatabase.DatabaseArray[i] == fobjectPtr) {
 8006bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bce:	4282      	cmp	r2, r0
 8006bd0:	d003      	beq.n	8006bda <fFaraabinDatabase_IsDictExist+0x16>
	for(uint32_t i = 0; i < FB_MAX_FOBJECT_QTY; i++) {\
 8006bd2:	428b      	cmp	r3, r1
 8006bd4:	d1f9      	bne.n	8006bca <fFaraabinDatabase_IsDictExist+0x6>
			return true;
		}
	}
	
	return false;
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	4770      	bx	lr
			return true;
 8006bda:	2001      	movs	r0, #1
}
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	200027a4 	.word	0x200027a4

08006be4 <fFaraabinDatabase_AddDict>:
	if(!FaraabinInit___) {
 8006be4:	4b26      	ldr	r3, [pc, #152]	@ (8006c80 <fFaraabinDatabase_AddDict+0x9c>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b1db      	cbz	r3, 8006c22 <fFaraabinDatabase_AddDict+0x3e>
uint8_t fFaraabinDatabase_AddDict(uint32_t fobjectPtr) {
 8006bea:	b510      	push	{r4, lr}
 8006bec:	4604      	mov	r4, r0
  if(fobjectPtr == 0U) {
 8006bee:	b1f8      	cbz	r0, 8006c30 <fFaraabinDatabase_AddDict+0x4c>
	if(fFaraabinDatabase_IsDictExist(fobjectPtr)) {
 8006bf0:	f7ff ffe8 	bl	8006bc4 <fFaraabinDatabase_IsDictExist>
 8006bf4:	bb38      	cbnz	r0, 8006c46 <fFaraabinDatabase_AddDict+0x62>
	if(LinkHandler.DictSendingMode.SendFlag) {
 8006bf6:	4b23      	ldr	r3, [pc, #140]	@ (8006c84 <fFaraabinDatabase_AddDict+0xa0>)
 8006bf8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bfc:	bb53      	cbnz	r3, 8006c54 <fFaraabinDatabase_AddDict+0x70>
  if(FaraabinDatabase.DatabaseArrayIndex >= (uint16_t)((uint16_t)FB_MAX_FOBJECT_QTY - (uint16_t)1)) {
 8006bfe:	4b22      	ldr	r3, [pc, #136]	@ (8006c88 <fFaraabinDatabase_AddDict+0xa4>)
 8006c00:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8006c04:	2b62      	cmp	r3, #98	@ 0x62
 8006c06:	d830      	bhi.n	8006c6a <fFaraabinDatabase_AddDict+0x86>
  FaraabinDatabase.DatabaseArray[FaraabinDatabase.DatabaseArrayIndex] = fobjectPtr;
 8006c08:	491f      	ldr	r1, [pc, #124]	@ (8006c88 <fFaraabinDatabase_AddDict+0xa4>)
 8006c0a:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  FaraabinFlags.Status.Bitfield.NewDict = 1U;
 8006c0e:	481f      	ldr	r0, [pc, #124]	@ (8006c8c <fFaraabinDatabase_AddDict+0xa8>)
 8006c10:	7902      	ldrb	r2, [r0, #4]
 8006c12:	f042 0202 	orr.w	r2, r2, #2
 8006c16:	7102      	strb	r2, [r0, #4]
  FaraabinDatabase.DatabaseArrayIndex++;
 8006c18:	3301      	adds	r3, #1
 8006c1a:	f8a1 3190 	strh.w	r3, [r1, #400]	@ 0x190
  return 0;
 8006c1e:	2000      	movs	r0, #0
}
 8006c20:	bd10      	pop	{r4, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006c22:	4a1a      	ldr	r2, [pc, #104]	@ (8006c8c <fFaraabinDatabase_AddDict+0xa8>)
 8006c24:	7953      	ldrb	r3, [r2, #5]
 8006c26:	f043 0308 	orr.w	r3, r3, #8
 8006c2a:	7153      	strb	r3, [r2, #5]
		return 1;
 8006c2c:	2001      	movs	r0, #1
}
 8006c2e:	4770      	bx	lr
    FaraabinFlags.Status.Bitfield.NullDict = 1U;
 8006c30:	4a16      	ldr	r2, [pc, #88]	@ (8006c8c <fFaraabinDatabase_AddDict+0xa8>)
 8006c32:	7913      	ldrb	r3, [r2, #4]
 8006c34:	f043 0310 	orr.w	r3, r3, #16
 8006c38:	7113      	strb	r3, [r2, #4]
    fFaraabinFobjectMcu_GetFobject()->_init = false;
 8006c3a:	f001 f9eb 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	7043      	strb	r3, [r0, #1]
    return 1;
 8006c42:	2001      	movs	r0, #1
 8006c44:	e7ec      	b.n	8006c20 <fFaraabinDatabase_AddDict+0x3c>
		FaraabinFlags.Status.Bitfield.DictDuplicate = 1U;
 8006c46:	4a11      	ldr	r2, [pc, #68]	@ (8006c8c <fFaraabinDatabase_AddDict+0xa8>)
 8006c48:	7953      	ldrb	r3, [r2, #5]
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	7153      	strb	r3, [r2, #5]
		return 1;
 8006c50:	2001      	movs	r0, #1
 8006c52:	e7e5      	b.n	8006c20 <fFaraabinDatabase_AddDict+0x3c>
		FaraabinFlags.Status.Bitfield.UnexpectedDict = 1U;
 8006c54:	4a0d      	ldr	r2, [pc, #52]	@ (8006c8c <fFaraabinDatabase_AddDict+0xa8>)
 8006c56:	7913      	ldrb	r3, [r2, #4]
 8006c58:	f043 0320 	orr.w	r3, r3, #32
 8006c5c:	7113      	strb	r3, [r2, #4]
    fFaraabinFobjectMcu_GetFobject()->_init = false;
 8006c5e:	f001 f9d9 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 8006c62:	2300      	movs	r3, #0
 8006c64:	7043      	strb	r3, [r0, #1]
		return 1;
 8006c66:	2001      	movs	r0, #1
 8006c68:	e7da      	b.n	8006c20 <fFaraabinDatabase_AddDict+0x3c>
    FaraabinFlags.Status.Bitfield.DictOverflow = 1U;
 8006c6a:	4a08      	ldr	r2, [pc, #32]	@ (8006c8c <fFaraabinDatabase_AddDict+0xa8>)
 8006c6c:	7913      	ldrb	r3, [r2, #4]
 8006c6e:	f043 0308 	orr.w	r3, r3, #8
 8006c72:	7113      	strb	r3, [r2, #4]
    fFaraabinFobjectMcu_GetFobject()->_init = false;
 8006c74:	f001 f9ce 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	7043      	strb	r3, [r0, #1]
    return 1;
 8006c7c:	2001      	movs	r0, #1
 8006c7e:	e7cf      	b.n	8006c20 <fFaraabinDatabase_AddDict+0x3c>
 8006c80:	20002664 	.word	0x20002664
 8006c84:	20002bb4 	.word	0x20002bb4
 8006c88:	200027a4 	.word	0x200027a4
 8006c8c:	2000279c 	.word	0x2000279c

08006c90 <fFaraabinDatabase_GetFobjectPointerFromDict>:
 * @param dictIndex Index of the dictionary in database.
 * @return fobjectPtr Pointer of the fobject.
 */
uint32_t fFaraabinDatabase_GetFobjectPointerFromDict(uint16_t dictIndex) {
  
  if(dictIndex >= FaraabinDatabase.DatabaseArrayIndex) {
 8006c90:	4b04      	ldr	r3, [pc, #16]	@ (8006ca4 <fFaraabinDatabase_GetFobjectPointerFromDict+0x14>)
 8006c92:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 8006c96:	4283      	cmp	r3, r0
    //TODO: Send error
    return 0;
  }
  
  return FaraabinDatabase.DatabaseArray[dictIndex];
 8006c98:	bf86      	itte	hi
 8006c9a:	4b02      	ldrhi	r3, [pc, #8]	@ (8006ca4 <fFaraabinDatabase_GetFobjectPointerFromDict+0x14>)
 8006c9c:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 8006ca0:	2000      	movls	r0, #0
}
 8006ca2:	4770      	bx	lr
 8006ca4:	200027a4 	.word	0x200027a4

08006ca8 <fFaraabinDatabase_GetAllFeatureFlags>:
 * 
 * @return flagsStat Status of the feature flags.
 */
uint32_t fFaraabinDatabase_GetAllFeatureFlags(void) {
  return FaraabinFlags.Features.U32;
}
 8006ca8:	4b01      	ldr	r3, [pc, #4]	@ (8006cb0 <fFaraabinDatabase_GetAllFeatureFlags+0x8>)
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	2000279c 	.word	0x2000279c

08006cb4 <fFaraabinDatabase_GetAllStatusFlags>:
 * 
 * @return flagsStat Status of the status flags.
 */
uint32_t fFaraabinDatabase_GetAllStatusFlags(void) {
  return FaraabinFlags.Status.U32;
}
 8006cb4:	4b01      	ldr	r3, [pc, #4]	@ (8006cbc <fFaraabinDatabase_GetAllStatusFlags+0x8>)
 8006cb6:	6858      	ldr	r0, [r3, #4]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	2000279c 	.word	0x2000279c

08006cc0 <fFaraabinDatabase_GetRamUsage>:
 * @return uint32_t Amount of RAM usage in bytes.
 */
uint32_t fFaraabinDatabase_GetRamUsage(void) {
	
	return sizeof(sFaraabinDatabase) + sizeof(sFaraabinFlags);
}
 8006cc0:	f44f 70ce 	mov.w	r0, #412	@ 0x19c
 8006cc4:	4770      	bx	lr
	...

08006cc8 <fFaraabinDefaultFobjects_Init>:
 * 
 * @note This function is called internally and user does not need to call it manually.
 * 
 * @return result Returns '0' if successful, otherwise '1'. 
 */
uint8_t fFaraabinDefaultFobjects_Init(void) {
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
#if defined(FB_FEATURE_FLAG_DEFAULT_DATABUS) && defined(FARAABIN_ENABLE)
  
  FARAABIN_DATABUS_SET_VALUE_(DefaultDatabus.ChannelQty, FB_DEFAULT_DATABUS_CHANNEL_QTY);
 8006cca:	4c0e      	ldr	r4, [pc, #56]	@ (8006d04 <fFaraabinDefaultFobjects_Init+0x3c>)
 8006ccc:	2314      	movs	r3, #20
 8006cce:	8263      	strh	r3, [r4, #18]
  FARAABIN_DataBus_Init_WithPath_(&DefaultDatabus, DefaultFobjectPath);
 8006cd0:	4f0d      	ldr	r7, [pc, #52]	@ (8006d08 <fFaraabinDefaultFobjects_Init+0x40>)
 8006cd2:	60a7      	str	r7, [r4, #8]
 8006cd4:	4e0d      	ldr	r6, [pc, #52]	@ (8006d0c <fFaraabinDefaultFobjects_Init+0x44>)
 8006cd6:	60e6      	str	r6, [r4, #12]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f8f3 	bl	8006ec4 <fFaraabinFobjectDataBus_Init>
  
  FARAABIN_DataBus_StartStreamMode_(&DefaultDatabus);
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 ff2c 	bl	8007b3c <fFaraabinFobjectDataBus_StartStream>
	FARAABIN_DataBus_Enable_(&DefaultDatabus);
 8006ce4:	2501      	movs	r5, #1
 8006ce6:	70a5      	strb	r5, [r4, #2]
  
  fChrono_StartTimeoutMs(&DefaultDatabusRunner, FB_DEFAULT_DATABUS_CYCLE_MS);
 8006ce8:	2164      	movs	r1, #100	@ 0x64
 8006cea:	4809      	ldr	r0, [pc, #36]	@ (8006d10 <fFaraabinDefaultFobjects_Init+0x48>)
 8006cec:	f7ff fdc2 	bl	8006874 <fChrono_StartTimeoutMs>
  
#endif
  
#if defined(FB_FEATURE_FLAG_DEFAULT_EVENT_GROUP) && defined(FARAABIN_ENABLE)
  
  FARAABIN_EventGroup_Init_WithPath_(&DefaultEventGroup, DefaultFobjectPath);
 8006cf0:	4c08      	ldr	r4, [pc, #32]	@ (8006d14 <fFaraabinDefaultFobjects_Init+0x4c>)
 8006cf2:	60a7      	str	r7, [r4, #8]
 8006cf4:	60e6      	str	r6, [r4, #12]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f001 f886 	bl	8007e08 <fFaraabinFobjectEventGroup_Init>
  FARAABIN_EventGroup_Enable_(&DefaultEventGroup);
 8006cfc:	70a5      	strb	r5, [r4, #2]
  
#endif

  return 0;
}
 8006cfe:	2000      	movs	r0, #0
 8006d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000398 	.word	0x20000398
 8006d08:	0800be98 	.word	0x0800be98
 8006d0c:	0800bf0c 	.word	0x0800bf0c
 8006d10:	20002938 	.word	0x20002938
 8006d14:	2000037c 	.word	0x2000037c

08006d18 <fFaraabinDefaultFobjects_Run>:

/**
 * @brief Runs default databus.
 * 
 */
void fFaraabinDefaultFobjects_Run(void) {
 8006d18:	b508      	push	{r3, lr}
	
#if defined(FB_FEATURE_FLAG_DEFAULT_DATABUS) && defined(FARAABIN_ENABLE)
  
  if(fChrono_IsTimeout(&DefaultDatabusRunner)) {
 8006d1a:	4806      	ldr	r0, [pc, #24]	@ (8006d34 <fFaraabinDefaultFobjects_Run+0x1c>)
 8006d1c:	f7ff fdce 	bl	80068bc <fChrono_IsTimeout>
 8006d20:	b900      	cbnz	r0, 8006d24 <fFaraabinDefaultFobjects_Run+0xc>
    FARAABIN_DataBus_Run_(&DefaultDatabus);
    
  }
	
#endif
}
 8006d22:	bd08      	pop	{r3, pc}
    fChrono_StartTimeoutMs(&DefaultDatabusRunner, FB_DEFAULT_DATABUS_CYCLE_MS);
 8006d24:	2164      	movs	r1, #100	@ 0x64
 8006d26:	4803      	ldr	r0, [pc, #12]	@ (8006d34 <fFaraabinDefaultFobjects_Run+0x1c>)
 8006d28:	f7ff fda4 	bl	8006874 <fChrono_StartTimeoutMs>
    FARAABIN_DataBus_Run_(&DefaultDatabus);
 8006d2c:	4802      	ldr	r0, [pc, #8]	@ (8006d38 <fFaraabinDefaultFobjects_Run+0x20>)
 8006d2e:	f000 f945 	bl	8006fbc <fFaraabinFobjectDataBus_Run>
}
 8006d32:	e7f6      	b.n	8006d22 <fFaraabinDefaultFobjects_Run+0xa>
 8006d34:	20002938 	.word	0x20002938
 8006d38:	20000398 	.word	0x20000398

08006d3c <fFaraabinFobjectContainer_Init>:
 * @brief Initializes a container fobject.
 * 
 * @param me Pointer to the Container.
 * @return InitStat Returns '1' if failed, '0' if successful.
 */
uint8_t fFaraabinFobjectContainer_Init(sFaraabinFobjectContainer *me) {
 8006d3c:	b538      	push	{r3, r4, r5, lr}
	
	if(!FaraabinInit___) {
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <fFaraabinFobjectContainer_Init+0x38>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b93b      	cbnz	r3, 8006d54 <fFaraabinFobjectContainer_Init+0x18>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006d44:	4a0c      	ldr	r2, [pc, #48]	@ (8006d78 <fFaraabinFobjectContainer_Init+0x3c>)
 8006d46:	7953      	ldrb	r3, [r2, #5]
 8006d48:	f043 0308 	orr.w	r3, r3, #8
 8006d4c:	7153      	strb	r3, [r2, #5]
		return 1;
 8006d4e:	2501      	movs	r5, #1
  if(fFaraabinLinkSerializer_CountDictsFrames((uint32_t)me) == 0U) {
    return 0;
  }
  
  return 0;
}
 8006d50:	4628      	mov	r0, r5
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8006d56:	f7ff ff45 	bl	8006be4 <fFaraabinDatabase_AddDict>
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	b108      	cbz	r0, 8006d62 <fFaraabinFobjectContainer_Init+0x26>
    return 1;
 8006d5e:	2501      	movs	r5, #1
 8006d60:	e7f6      	b.n	8006d50 <fFaraabinFobjectContainer_Init+0x14>
  me->_type = (uint8_t)eFO_TYPE_CONTAINER;
 8006d62:	230c      	movs	r3, #12
 8006d64:	7023      	strb	r3, [r4, #0]
  me->Enable = true;
 8006d66:	2301      	movs	r3, #1
 8006d68:	7463      	strb	r3, [r4, #17]
	me->_init = true;
 8006d6a:	7063      	strb	r3, [r4, #1]
  if(fFaraabinLinkSerializer_CountDictsFrames((uint32_t)me) == 0U) {
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f003 fd13 	bl	800a798 <fFaraabinLinkSerializer_CountDictsFrames>
 8006d72:	e7ed      	b.n	8006d50 <fFaraabinFobjectContainer_Init+0x14>
 8006d74:	20002664 	.word	0x20002664
 8006d78:	2000279c 	.word	0x2000279c

08006d7c <fQueueRead>:
static uint8_t fQueueRead(sFaraabinFobjectDataBus * const me, uint32_t num, uint8_t *item) {
  
  uint32_t offset;
  uint32_t index;
  
  if(me->QueueItemCount == 0U) {
 8006d7c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8006d80:	b1f3      	cbz	r3, 8006dc0 <fQueueRead+0x44>
    return FARAABIN_DB_QUEUE_EMPTY;
  }
  
  if(num >= me->QueueItemCount) {
 8006d82:	428b      	cmp	r3, r1
 8006d84:	d91e      	bls.n	8006dc4 <fQueueRead+0x48>
static uint8_t fQueueRead(sFaraabinFobjectDataBus * const me, uint32_t num, uint8_t *item) {
 8006d86:	b500      	push	{lr}
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
  }
  
  index = (num + me->_queueFrontIndex) % me->BufferCaptureSize;
 8006d88:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8006d8c:	4419      	add	r1, r3
 8006d8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006d90:	fbb1 fcf3 	udiv	ip, r1, r3
 8006d94:	fb03 1c1c 	mls	ip, r3, ip, r1
  
  READ_ELEMENT_(index, item);
 8006d98:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8006d9c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006da0:	1e51      	subs	r1, r2, #1
 8006da2:	f102 0e17 	add.w	lr, r2, #23
 8006da6:	f1c2 0201 	rsb	r2, r2, #1
 8006daa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006dac:	4463      	add	r3, ip
 8006dae:	440b      	add	r3, r1
 8006db0:	5c9b      	ldrb	r3, [r3, r2]
 8006db2:	f801 3f01 	strb.w	r3, [r1, #1]!
 8006db6:	4571      	cmp	r1, lr
 8006db8:	d1f7      	bne.n	8006daa <fQueueRead+0x2e>
  
  return FARAABIN_DB_OK;
 8006dba:	2000      	movs	r0, #0
}
 8006dbc:	f85d fb04 	ldr.w	pc, [sp], #4
    return FARAABIN_DB_QUEUE_EMPTY;
 8006dc0:	2006      	movs	r0, #6
 8006dc2:	4770      	bx	lr
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
 8006dc4:	2001      	movs	r0, #1
}
 8006dc6:	4770      	bx	lr

08006dc8 <fFreeAllocatedMemory>:
/**
 * @brief Frees dynamically allocated memories of the databus.
 * 
 * @param me Pointer to the databus fobject.
 */
static void fFreeAllocatedMemory(sFaraabinFobjectDataBus * const me) {
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	4604      	mov	r4, r0

  if(!me->_isBufferChannelsStatic) {
 8006dcc:	7e03      	ldrb	r3, [r0, #24]
 8006dce:	b11b      	cbz	r3, 8006dd8 <fFreeAllocatedMemory+0x10>
    free(me->_pBufferChannels);
  }

  if(!me->_isBufferCaptureStatic) {
 8006dd0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006dd4:	b123      	cbz	r3, 8006de0 <fFreeAllocatedMemory+0x18>
    free(me->_pBufferCapture);
  }
}
 8006dd6:	bd10      	pop	{r4, pc}
    free(me->_pBufferChannels);
 8006dd8:	6940      	ldr	r0, [r0, #20]
 8006dda:	f003 fcf5 	bl	800a7c8 <free>
 8006dde:	e7f7      	b.n	8006dd0 <fFreeAllocatedMemory+0x8>
    free(me->_pBufferCapture);
 8006de0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006de2:	f003 fcf1 	bl	800a7c8 <free>
}
 8006de6:	e7f6      	b.n	8006dd6 <fFreeAllocatedMemory+0xe>

08006de8 <fRunCapture>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006de8:	b672      	cpsid	i
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8006dea:	8a43      	ldrh	r3, [r0, #18]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d066      	beq.n	8006ebe <fRunCapture+0xd6>
static void fRunCapture(sFaraabinFobjectDataBus *me) {
 8006df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df2:	b087      	sub	sp, #28
 8006df4:	4605      	mov	r5, r0
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8006df6:	2400      	movs	r4, #0
 8006df8:	e006      	b.n	8006e08 <fRunCapture+0x20>
        if(me->_pBufferChannels[i].PrimitiveVariableId != 0U) {
 8006dfa:	7adb      	ldrb	r3, [r3, #11]
 8006dfc:	b9ab      	cbnz	r3, 8006e2a <fRunCapture+0x42>
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8006dfe:	3401      	adds	r4, #1
 8006e00:	8a6a      	ldrh	r2, [r5, #18]
 8006e02:	b2a3      	uxth	r3, r4
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d957      	bls.n	8006eb8 <fRunCapture+0xd0>
    if(me->_pBufferChannels[i].ItemFobjectPtr == 0U) {
 8006e08:	b2a3      	uxth	r3, r4
 8006e0a:	011e      	lsls	r6, r3, #4
 8006e0c:	696a      	ldr	r2, [r5, #20]
 8006e0e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006e12:	6859      	ldr	r1, [r3, #4]
 8006e14:	2900      	cmp	r1, #0
 8006e16:	d0f2      	beq.n	8006dfe <fRunCapture+0x16>
    if(!me->_pBufferChannels[i].Enable) {
 8006e18:	7b18      	ldrb	r0, [r3, #12]
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d0ef      	beq.n	8006dfe <fRunCapture+0x16>
    switch(me->_pBufferChannels[i].ItemFobjectType) {
 8006e1e:	5d92      	ldrb	r2, [r2, r6]
 8006e20:	2a02      	cmp	r2, #2
 8006e22:	d0ea      	beq.n	8006dfa <fRunCapture+0x12>
 8006e24:	2a13      	cmp	r2, #19
 8006e26:	d1ea      	bne.n	8006dfe <fRunCapture+0x16>
 8006e28:	e7e7      	b.n	8006dfa <fRunCapture+0x12>
          tmp_capture.FobjectType = me->_pBufferChannels[i].ItemFobjectType;
 8006e2a:	f88d 2000 	strb.w	r2, [sp]
          tmp_capture.FobjectPtr = me->_pBufferChannels[i].ItemFobjectPtr;
 8006e2e:	9101      	str	r1, [sp, #4]
          tmp_capture.CapturedTimeStamp = fChrono_GetTick();
 8006e30:	f7ff fc20 	bl	8006674 <fChrono_GetTick>
 8006e34:	9002      	str	r0, [sp, #8]
          uint8_t *src = (uint8_t*)me->_pBufferChannels[i].ItemFobjectPtr;
 8006e36:	696a      	ldr	r2, [r5, #20]
 8006e38:	4432      	add	r2, r6
 8006e3a:	6853      	ldr	r3, [r2, #4]
          for(uint16_t j = 0; j < me->_pBufferChannels[i].ItemFobjectParam; j++) {
 8006e3c:	8910      	ldrh	r0, [r2, #8]
 8006e3e:	b140      	cbz	r0, 8006e52 <fRunCapture+0x6a>
 8006e40:	f10d 020f 	add.w	r2, sp, #15
 8006e44:	4418      	add	r0, r3
            dst[j] = src[j];
 8006e46:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006e4a:	f802 1f01 	strb.w	r1, [r2, #1]!
          for(uint16_t j = 0; j < me->_pBufferChannels[i].ItemFobjectParam; j++) {
 8006e4e:	4283      	cmp	r3, r0
 8006e50:	d1f9      	bne.n	8006e46 <fRunCapture+0x5e>
  if(me->QueueItemCount >= me->BufferCaptureSize) {
 8006e52:	f8d5 e0a0 	ldr.w	lr, [r5, #160]	@ 0xa0
 8006e56:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
  WRITE_ELEMENT_(me->_queueRearIndex, item);
 8006e58:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8006e5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006e60:	f10d 33ff 	add.w	r3, sp, #4294967295
 8006e64:	f10d 0c17 	add.w	ip, sp, #23
 8006e68:	a906      	add	r1, sp, #24
 8006e6a:	f1c1 0619 	rsb	r6, r1, #25
 8006e6e:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 8006e72:	18f2      	adds	r2, r6, r3
 8006e74:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8006e76:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006e7a:	5488      	strb	r0, [r1, r2]
 8006e7c:	459c      	cmp	ip, r3
 8006e7e:	d1f8      	bne.n	8006e72 <fRunCapture+0x8a>
  INCREMENT_REAR_INDEX_();
 8006e80:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8006e82:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8006e86:	3301      	adds	r3, #1
 8006e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e8c:	fb02 3311 	mls	r3, r2, r1, r3
 8006e90:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
  if(over_write == 1U) {
 8006e94:	45be      	cmp	lr, r7
 8006e96:	d205      	bcs.n	8006ea4 <fRunCapture+0xbc>
    INCREMENT_COUNT_();
 8006e98:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f8c5 30a0 	str.w	r3, [r5, #160]	@ 0xa0
        break;
 8006ea2:	e7ac      	b.n	8006dfe <fRunCapture+0x16>
    INCREMENT_FRONT_INDEX_();
 8006ea4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eae:	fb02 3311 	mls	r3, r2, r1, r3
 8006eb2:	f8c5 30a4 	str.w	r3, [r5, #164]	@ 0xa4
 8006eb6:	e7a2      	b.n	8006dfe <fRunCapture+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8006eb8:	b662      	cpsie	i
}
 8006eba:	b007      	add	sp, #28
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ebe:	b662      	cpsie	i
 8006ec0:	4770      	bx	lr
	...

08006ec4 <fFaraabinFobjectDataBus_Init>:
uint8_t fFaraabinFobjectDataBus_Init(sFaraabinFobjectDataBus *me) {
 8006ec4:	b570      	push	{r4, r5, r6, lr}
	if(!FaraabinInit___) {
 8006ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb4 <fFaraabinFobjectDataBus_Init+0xf0>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b93b      	cbnz	r3, 8006edc <fFaraabinFobjectDataBus_Init+0x18>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8006fb8 <fFaraabinFobjectDataBus_Init+0xf4>)
 8006ece:	7953      	ldrb	r3, [r2, #5]
 8006ed0:	f043 0308 	orr.w	r3, r3, #8
 8006ed4:	7153      	strb	r3, [r2, #5]
		return 1;
 8006ed6:	2501      	movs	r5, #1
}
 8006ed8:	4628      	mov	r0, r5
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8006ede:	f7ff fe81 	bl	8006be4 <fFaraabinDatabase_AddDict>
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d15c      	bne.n	8006fa2 <fFaraabinFobjectDataBus_Init+0xde>
	me->_init = false;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	7063      	strb	r3, [r4, #1]
	me->_type = (uint8_t)eFO_TYPE_DATABUS;
 8006eec:	2308      	movs	r3, #8
 8006eee:	7023      	strb	r3, [r4, #0]
  if(me->ChannelQty == 0U) {
 8006ef0:	8a60      	ldrh	r0, [r4, #18]
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d057      	beq.n	8006fa6 <fFaraabinFobjectDataBus_Init+0xe2>
	if(me->_isBufferChannelsStatic) {
 8006ef6:	7e23      	ldrb	r3, [r4, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d03a      	beq.n	8006f72 <fFaraabinFobjectDataBus_Init+0xae>
		if(me->_pBufferChannels == NULL) {
 8006efc:	6963      	ldr	r3, [r4, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d053      	beq.n	8006faa <fFaraabinFobjectDataBus_Init+0xe6>
uint8_t fFaraabinFobjectDataBus_Init(sFaraabinFobjectDataBus *me) {
 8006f02:	2100      	movs	r1, #0
    me->_pBufferChannels[i].ItemFobjectType = 0U;
 8006f04:	460a      	mov	r2, r1
 8006f06:	b28b      	uxth	r3, r1
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	6960      	ldr	r0, [r4, #20]
 8006f0c:	54c2      	strb	r2, [r0, r3]
    me->_pBufferChannels[i].ItemFobjectPtr = 0U;
 8006f0e:	6960      	ldr	r0, [r4, #20]
 8006f10:	4418      	add	r0, r3
 8006f12:	6042      	str	r2, [r0, #4]
    me->_pBufferChannels[i].ItemFobjectParam = 0U;
 8006f14:	6960      	ldr	r0, [r4, #20]
 8006f16:	4418      	add	r0, r3
 8006f18:	8102      	strh	r2, [r0, #8]
    me->_pBufferChannels[i].VariableDataType = 0U;
 8006f1a:	6960      	ldr	r0, [r4, #20]
 8006f1c:	4418      	add	r0, r3
 8006f1e:	7282      	strb	r2, [r0, #10]
    me->_pBufferChannels[i].PrimitiveVariableId = 0U;
 8006f20:	6960      	ldr	r0, [r4, #20]
 8006f22:	4418      	add	r0, r3
 8006f24:	72c2      	strb	r2, [r0, #11]
    me->_pBufferChannels[i].Enable = false;
 8006f26:	6960      	ldr	r0, [r4, #20]
 8006f28:	4418      	add	r0, r3
 8006f2a:	7302      	strb	r2, [r0, #12]
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8006f2c:	3101      	adds	r1, #1
 8006f2e:	8a60      	ldrh	r0, [r4, #18]
 8006f30:	b28b      	uxth	r3, r1
 8006f32:	4298      	cmp	r0, r3
 8006f34:	d8e7      	bhi.n	8006f06 <fFaraabinFobjectDataBus_Init+0x42>
	if(me->_isBufferCaptureStatic) {
 8006f36:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006f3a:	b313      	cbz	r3, 8006f82 <fFaraabinFobjectDataBus_Init+0xbe>
		if(me->_pBufferCapture == NULL) {
 8006f3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d035      	beq.n	8006fae <fFaraabinFobjectDataBus_Init+0xea>
  me->QueueItemCount = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
  me->_queueFrontIndex = 0U;
 8006f48:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
  me->_queueRearIndex = 0U;
 8006f4c:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  me->CurrentState = eDATABUS_STATE_OFF;
 8006f50:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
  me->ApiTrigEnable = true;
 8006f54:	2601      	movs	r6, #1
 8006f56:	f884 606c 	strb.w	r6, [r4, #108]	@ 0x6c
  me->LastTrigSource = eDATABUS_TRIG_SOURCE_API;
 8006f5a:	f884 606e 	strb.w	r6, [r4, #110]	@ 0x6e
  me->AttachedItemsQty = 0U;
 8006f5e:	8363      	strh	r3, [r4, #26]
  me->AvailableItemsQty = 0U;
 8006f60:	83a3      	strh	r3, [r4, #28]
  me->CaptureSendingQty = 0U;
 8006f62:	6563      	str	r3, [r4, #84]	@ 0x54
  fChrono_Start(&me->_chronoCycle);
 8006f64:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8006f68:	f7ff fbd6 	bl	8006718 <fChrono_Start>
  me->Enable = TRUE;
 8006f6c:	70a6      	strb	r6, [r4, #2]
  me->_init = true;
 8006f6e:	7066      	strb	r6, [r4, #1]
  return 0;
 8006f70:	e7b2      	b.n	8006ed8 <fFaraabinFobjectDataBus_Init+0x14>
		me->_pBufferChannels = (sFaraabinFobjectDataBus_Channel*)malloc(me->ChannelQty * sizeof(sFaraabinFobjectDataBus_Channel));
 8006f72:	0100      	lsls	r0, r0, #4
 8006f74:	f003 fc20 	bl	800a7b8 <malloc>
 8006f78:	6160      	str	r0, [r4, #20]
    if(me->_pBufferChannels == NULL) {
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d1c1      	bne.n	8006f02 <fFaraabinFobjectDataBus_Init+0x3e>
      return 1;
 8006f7e:	2501      	movs	r5, #1
 8006f80:	e7aa      	b.n	8006ed8 <fFaraabinFobjectDataBus_Init+0x14>
		if(me->BufferCaptureSize > 0U) {
 8006f82:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d0dc      	beq.n	8006f42 <fFaraabinFobjectDataBus_Init+0x7e>
			me->_pBufferCapture = (sFaraabinFobjectDataBus_CaptureValue*)malloc(sizeof(sFaraabinFobjectDataBus_CaptureValue) * me->BufferCaptureSize);
 8006f88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006f8c:	00c0      	lsls	r0, r0, #3
 8006f8e:	f003 fc13 	bl	800a7b8 <malloc>
 8006f92:	6260      	str	r0, [r4, #36]	@ 0x24
      if(me->_pBufferCapture == NULL) {
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d1d4      	bne.n	8006f42 <fFaraabinFobjectDataBus_Init+0x7e>
        fFreeAllocatedMemory(me);
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f7ff ff15 	bl	8006dc8 <fFreeAllocatedMemory>
        return 1;
 8006f9e:	2501      	movs	r5, #1
 8006fa0:	e79a      	b.n	8006ed8 <fFaraabinFobjectDataBus_Init+0x14>
    return 1;
 8006fa2:	2501      	movs	r5, #1
 8006fa4:	e798      	b.n	8006ed8 <fFaraabinFobjectDataBus_Init+0x14>
    return 1;
 8006fa6:	2501      	movs	r5, #1
 8006fa8:	e796      	b.n	8006ed8 <fFaraabinFobjectDataBus_Init+0x14>
			return 1;
 8006faa:	2501      	movs	r5, #1
 8006fac:	e794      	b.n	8006ed8 <fFaraabinFobjectDataBus_Init+0x14>
			return 1;
 8006fae:	2501      	movs	r5, #1
 8006fb0:	e792      	b.n	8006ed8 <fFaraabinFobjectDataBus_Init+0x14>
 8006fb2:	bf00      	nop
 8006fb4:	20002664 	.word	0x20002664
 8006fb8:	2000279c 	.word	0x2000279c

08006fbc <fFaraabinFobjectDataBus_Run>:
	if(!FaraabinInit___) {
 8006fbc:	4ba5      	ldr	r3, [pc, #660]	@ (8007254 <fFaraabinFobjectDataBus_Run+0x298>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	b143      	cbz	r3, 8006fd4 <fFaraabinFobjectDataBus_Run+0x18>
void fFaraabinFobjectDataBus_Run(sFaraabinFobjectDataBus *me)  {
 8006fc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fc6:	b08f      	sub	sp, #60	@ 0x3c
 8006fc8:	4604      	mov	r4, r0
  if(!me->_init) {
 8006fca:	7843      	ldrb	r3, [r0, #1]
 8006fcc:	b943      	cbnz	r3, 8006fe0 <fFaraabinFobjectDataBus_Run+0x24>
}
 8006fce:	b00f      	add	sp, #60	@ 0x3c
 8006fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8006fd4:	4aa0      	ldr	r2, [pc, #640]	@ (8007258 <fFaraabinFobjectDataBus_Run+0x29c>)
 8006fd6:	7953      	ldrb	r3, [r2, #5]
 8006fd8:	f043 0308 	orr.w	r3, r3, #8
 8006fdc:	7153      	strb	r3, [r2, #5]
		return;
 8006fde:	4770      	bx	lr
	if(!fFaraabin_IsAllowEvent()) {
 8006fe0:	f7ff fd9c 	bl	8006b1c <fFaraabin_IsAllowEvent>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0f2      	beq.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
  me->CycleUs = fChrono_IntervalUs(&(me->_chronoCycle));
 8006fe8:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8006fec:	f7ff fc8a 	bl	8006904 <fChrono_IntervalUs>
 8006ff0:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  if(!me->Enable) {
 8006ff4:	78a3      	ldrb	r3, [r4, #2]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0e9      	beq.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
  if(me->AvailableItemsQty == 0U) {
 8006ffa:	8ba3      	ldrh	r3, [r4, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0e6      	beq.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
	switch(me->CurrentState) {
 8007000:	f894 3064 	ldrb.w	r3, [r4, #100]	@ 0x64
 8007004:	3b01      	subs	r3, #1
 8007006:	2b03      	cmp	r3, #3
 8007008:	d8e1      	bhi.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
 800700a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800700e:	0004      	.short	0x0004
 8007010:	004c001a 	.word	0x004c001a
 8007014:	0416      	.short	0x0416
      RUN_EVERY_QTY_OBJ_(me->StreamDivideBy, me->_streamDivbyCnt) {
 8007016:	8c23      	ldrh	r3, [r4, #32]
 8007018:	3301      	adds	r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	bf08      	it	eq
 8007020:	2302      	moveq	r3, #2
 8007022:	8423      	strh	r3, [r4, #32]
 8007024:	8be2      	ldrh	r2, [r4, #30]
 8007026:	4293      	cmp	r3, r2
 8007028:	d9d1      	bls.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
 800702a:	2a00      	cmp	r2, #0
 800702c:	d0cf      	beq.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
 800702e:	2301      	movs	r3, #1
 8007030:	8423      	strh	r3, [r4, #32]
        fFaraabinLinkSerializer_DataBusSendValue((uint32_t)me, &me->Seq, 0, false);
 8007032:	2300      	movs	r3, #0
 8007034:	461a      	mov	r2, r3
 8007036:	f104 0110 	add.w	r1, r4, #16
 800703a:	4620      	mov	r0, r4
 800703c:	f003 fabc 	bl	800a5b8 <fFaraabinLinkSerializer_DataBusSendValue>
 8007040:	e7c5      	b.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TimerDivideBy, me->_timerDivbyCnt) {
 8007042:	f8b4 304e 	ldrh.w	r3, [r4, #78]	@ 0x4e
 8007046:	3301      	adds	r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	bf08      	it	eq
 800704e:	2302      	moveq	r3, #2
 8007050:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8007054:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 8007058:	4293      	cmp	r3, r2
 800705a:	d900      	bls.n	800705e <fFaraabinFobjectDataBus_Run+0xa2>
 800705c:	b9e2      	cbnz	r2, 8007098 <fFaraabinFobjectDataBus_Run+0xdc>
      if(fChrono_IsTimeout(&(me->_chronoTrigWindow)) == true) {
 800705e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8007062:	f7ff fc2b 	bl	80068bc <fChrono_IsTimeout>
 8007066:	2800      	cmp	r0, #0
 8007068:	d0b1      	beq.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
        me->CurrentState = eDATABUS_STATE_OFF;
 800706a:	2100      	movs	r1, #0
 800706c:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
        Faraabin_EventSystem_End_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_CAPTURE_END);
 8007070:	2301      	movs	r3, #1
 8007072:	9309      	str	r3, [sp, #36]	@ 0x24
 8007074:	9108      	str	r1, [sp, #32]
 8007076:	9107      	str	r1, [sp, #28]
 8007078:	9106      	str	r1, [sp, #24]
 800707a:	9105      	str	r1, [sp, #20]
 800707c:	9104      	str	r1, [sp, #16]
 800707e:	9103      	str	r1, [sp, #12]
 8007080:	2304      	movs	r3, #4
 8007082:	9302      	str	r3, [sp, #8]
 8007084:	9101      	str	r1, [sp, #4]
 8007086:	2302      	movs	r3, #2
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	78a3      	ldrb	r3, [r4, #2]
 800708c:	f104 0210 	add.w	r2, r4, #16
 8007090:	4620      	mov	r0, r4
 8007092:	f003 f96d 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8007096:	e79a      	b.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TimerDivideBy, me->_timerDivbyCnt) {
 8007098:	2301      	movs	r3, #1
 800709a:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
        fRunCapture(me);
 800709e:	4620      	mov	r0, r4
 80070a0:	f7ff fea2 	bl	8006de8 <fRunCapture>
 80070a4:	e7db      	b.n	800705e <fFaraabinFobjectDataBus_Run+0xa2>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 80070a6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80070aa:	3301      	adds	r3, #1
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	bf08      	it	eq
 80070b2:	2302      	moveq	r3, #2
 80070b4:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 80070b8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80070bc:	4293      	cmp	r3, r2
 80070be:	d901      	bls.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	d147      	bne.n	8007154 <fFaraabinFobjectDataBus_Run+0x198>
      if(me->_isTriggered == true) {
 80070c4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d080      	beq.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
        fChrono_StartTimeoutMs(&(me->_chronoTrigWindow), me->TimeAfterTrigMs);
 80070cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ce:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80070d2:	f7ff fbcf 	bl	8006874 <fChrono_StartTimeoutMs>
        me->CurrentState = eDATABUS_STATE_TRIG_WINDOW;
 80070d6:	2304      	movs	r3, #4
 80070d8:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
				eventParam[0] = (uint8_t)me->CurrentState;
 80070dc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
				eventParam[1] = (uint8_t)me->LastTrigSource;
 80070e0:	f894 306e 	ldrb.w	r3, [r4, #110]	@ 0x6e
 80070e4:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
				trigTimestamp.U32 = me->_trigTimeStamp;
 80070e8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
				eventParam[2] = trigTimestamp.Byte[0];
 80070ea:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
				eventParam[3] = trigTimestamp.Byte[1];
 80070ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80070f2:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
				eventParam[4] = trigTimestamp.Byte[2];
 80070f6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80070fa:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
				eventParam[5] = trigTimestamp.Byte[3];
 80070fe:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007102:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
				cycleUs.U32 = me->CycleUs;
 8007106:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
				eventParam[6] = cycleUs.Byte[0];
 800710a:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
				eventParam[7] = cycleUs.Byte[1];
 800710e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007112:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
				eventParam[8] = cycleUs.Byte[2];
 8007116:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800711a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
				eventParam[9] = cycleUs.Byte[3];
 800711e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007122:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
        Faraabin_EventSystem_ParamEnd_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 10U);
 8007126:	2301      	movs	r3, #1
 8007128:	9309      	str	r3, [sp, #36]	@ 0x24
 800712a:	2100      	movs	r1, #0
 800712c:	9108      	str	r1, [sp, #32]
 800712e:	9107      	str	r1, [sp, #28]
 8007130:	9106      	str	r1, [sp, #24]
 8007132:	9105      	str	r1, [sp, #20]
 8007134:	230a      	movs	r3, #10
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	ab0b      	add	r3, sp, #44	@ 0x2c
 800713a:	9303      	str	r3, [sp, #12]
 800713c:	2303      	movs	r3, #3
 800713e:	9302      	str	r3, [sp, #8]
 8007140:	9101      	str	r1, [sp, #4]
 8007142:	2302      	movs	r3, #2
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	78a3      	ldrb	r3, [r4, #2]
 8007148:	f104 0210 	add.w	r2, r4, #16
 800714c:	4620      	mov	r0, r4
 800714e:	f003 f90f 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8007152:	e73c      	b.n	8006fce <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 8007154:	2301      	movs	r3, #1
 8007156:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
        fRunCapture(me);
 800715a:	4620      	mov	r0, r4
 800715c:	f7ff fe44 	bl	8006de8 <fRunCapture>
  if(!me->ChTrigEnable) {
 8007160:	f894 3089 	ldrb.w	r3, [r4, #137]	@ 0x89
 8007164:	2b00      	cmp	r3, #0
 8007166:	d0ad      	beq.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
  if(me->ChTrigNo >= me->ChannelQty) {
 8007168:	f8b4 308a 	ldrh.w	r3, [r4, #138]	@ 0x8a
 800716c:	8a62      	ldrh	r2, [r4, #18]
 800716e:	429a      	cmp	r2, r3
 8007170:	d9a8      	bls.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
  if(!me->_pBufferChannels[me->ChTrigNo].Enable) {
 8007172:	6960      	ldr	r0, [r4, #20]
 8007174:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8007178:	7b03      	ldrb	r3, [r0, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0a2      	beq.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
  uint8_t *ptr = (uint8_t*)me->_pBufferChannels[me->ChTrigNo].ItemFobjectPtr;
 800717e:	6841      	ldr	r1, [r0, #4]
  uByte8 tmp = {0x00};
 8007180:	2700      	movs	r7, #0
 8007182:	f04f 0800 	mov.w	r8, #0
  switch((eFaraabinFobjectVarType_PrimitiveId)me->_pBufferChannels[me->ChTrigNo].PrimitiveVariableId) {
 8007186:	7ac0      	ldrb	r0, [r0, #11]
 8007188:	3801      	subs	r0, #1
 800718a:	280a      	cmp	r0, #10
 800718c:	d89a      	bhi.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
 800718e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007192:	000b      	.short	0x000b
 8007194:	00890047 	.word	0x00890047
 8007198:	010b00c8 	.word	0x010b00c8
 800719c:	0197014e 	.word	0x0197014e
 80071a0:	024701e0 	.word	0x024701e0
 80071a4:	02f902b1 	.word	0x02f902b1
      bool value = (bool)ptr[0];
 80071a8:	780d      	ldrb	r5, [r1, #0]
 80071aa:	3d00      	subs	r5, #0
 80071ac:	bf18      	it	ne
 80071ae:	2501      	movne	r5, #1
      switch(me->ChTrigType) {
 80071b0:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d013      	beq.n	80071e0 <fFaraabinFobjectDataBus_Run+0x224>
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d021      	beq.n	8007200 <fFaraabinFobjectDataBus_Run+0x244>
 80071bc:	b113      	cbz	r3, 80071c4 <fFaraabinFobjectDataBus_Run+0x208>
      me->_trigChannelPayload.Byte[0] = (uint8_t)value;
 80071be:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
      break;
 80071c2:	e77f      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.Byte[0]) {
 80071c4:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80071c8:	429d      	cmp	r5, r3
 80071ca:	d0f8      	beq.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
            me->_trigTimeStamp = fChrono_GetTick();
 80071cc:	f7ff fa52 	bl	8006674 <fChrono_GetTick>
 80071d0:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80071d8:	2301      	movs	r3, #1
 80071da:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80071de:	e7ee      	b.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
          if((value != me->_trigChannelPayload.Byte[0]) && (me->_trigChannelPayload.Byte[0] == false)) {
 80071e0:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80071e4:	429d      	cmp	r5, r3
 80071e6:	d0ea      	beq.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e8      	bne.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
            me->_trigTimeStamp = fChrono_GetTick();
 80071ec:	f7ff fa42 	bl	8006674 <fChrono_GetTick>
 80071f0:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80071f2:	2303      	movs	r3, #3
 80071f4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80071fe:	e7de      	b.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
          if((value != me->_trigChannelPayload.Byte[0]) && (me->_trigChannelPayload.Byte[0] == true)) {
 8007200:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8007204:	429d      	cmp	r5, r3
 8007206:	d0da      	beq.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
 8007208:	2b01      	cmp	r3, #1
 800720a:	d1d8      	bne.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
            me->_trigTimeStamp = fChrono_GetTick();
 800720c:	f7ff fa32 	bl	8006674 <fChrono_GetTick>
 8007210:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007212:	2303      	movs	r3, #3
 8007214:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007218:	2301      	movs	r3, #1
 800721a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800721e:	e7ce      	b.n	80071be <fFaraabinFobjectDataBus_Run+0x202>
      uint8_t value = (uint8_t)ptr[0];
 8007220:	780d      	ldrb	r5, [r1, #0]
      switch(me->ChTrigType) {
 8007222:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d018      	beq.n	800725c <fFaraabinFobjectDataBus_Run+0x2a0>
 800722a:	2b02      	cmp	r3, #2
 800722c:	d028      	beq.n	8007280 <fFaraabinFobjectDataBus_Run+0x2c4>
 800722e:	b113      	cbz	r3, 8007236 <fFaraabinFobjectDataBus_Run+0x27a>
      me->_trigChannelPayload.Byte[0] = value;
 8007230:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
      break;
 8007234:	e746      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.Byte[0]) {
 8007236:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 800723a:	42ab      	cmp	r3, r5
 800723c:	d0f8      	beq.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
            me->_trigTimeStamp = fChrono_GetTick();
 800723e:	f7ff fa19 	bl	8006674 <fChrono_GetTick>
 8007242:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007244:	2303      	movs	r3, #3
 8007246:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800724a:	2301      	movs	r3, #1
 800724c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007250:	e7ee      	b.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
 8007252:	bf00      	nop
 8007254:	20002664 	.word	0x20002664
 8007258:	2000279c 	.word	0x2000279c
          if((value > me->ChTrigThreshold.Byte[0]) && (me->_trigChannelPayload.Byte[0] <= me->ChTrigThreshold.Byte[0])) {
 800725c:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 8007260:	429d      	cmp	r5, r3
 8007262:	d9e5      	bls.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
 8007264:	f894 2098 	ldrb.w	r2, [r4, #152]	@ 0x98
 8007268:	429a      	cmp	r2, r3
 800726a:	d8e1      	bhi.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
            me->_trigTimeStamp = fChrono_GetTick();
 800726c:	f7ff fa02 	bl	8006674 <fChrono_GetTick>
 8007270:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007272:	2303      	movs	r3, #3
 8007274:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007278:	2301      	movs	r3, #1
 800727a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800727e:	e7d7      	b.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
          if((value < me->ChTrigThreshold.Byte[0]) && (me->_trigChannelPayload.Byte[0] >= me->ChTrigThreshold.Byte[0])) {
 8007280:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
 8007284:	429d      	cmp	r5, r3
 8007286:	d2d3      	bcs.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
 8007288:	f894 2098 	ldrb.w	r2, [r4, #152]	@ 0x98
 800728c:	429a      	cmp	r2, r3
 800728e:	d3cf      	bcc.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
            me->_trigTimeStamp = fChrono_GetTick();
 8007290:	f7ff f9f0 	bl	8006674 <fChrono_GetTick>
 8007294:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007296:	2303      	movs	r3, #3
 8007298:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800729c:	2301      	movs	r3, #1
 800729e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80072a2:	e7c5      	b.n	8007230 <fFaraabinFobjectDataBus_Run+0x274>
      int8_t value = (int8_t)ptr[0];
 80072a4:	780d      	ldrb	r5, [r1, #0]
 80072a6:	f991 2000 	ldrsb.w	r2, [r1]
      switch(me->ChTrigType) {
 80072aa:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d013      	beq.n	80072da <fFaraabinFobjectDataBus_Run+0x31e>
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d023      	beq.n	80072fe <fFaraabinFobjectDataBus_Run+0x342>
 80072b6:	b113      	cbz	r3, 80072be <fFaraabinFobjectDataBus_Run+0x302>
      me->_trigChannelPayload.Byte[0] = value;
 80072b8:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
      break;
 80072bc:	e702      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != (int8_t)me->_trigChannelPayload.Byte[0]) {
 80072be:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80072c2:	42ab      	cmp	r3, r5
 80072c4:	d0f8      	beq.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
            me->_trigTimeStamp = fChrono_GetTick();
 80072c6:	f7ff f9d5 	bl	8006674 <fChrono_GetTick>
 80072ca:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80072d8:	e7ee      	b.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
          if((value > (int8_t)me->ChTrigThreshold.Byte[0]) && ((int8_t)me->_trigChannelPayload.Byte[0] <= (int8_t)me->ChTrigThreshold.Byte[0])) {
 80072da:	f994 3090 	ldrsb.w	r3, [r4, #144]	@ 0x90
 80072de:	429a      	cmp	r2, r3
 80072e0:	ddea      	ble.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
 80072e2:	f994 2098 	ldrsb.w	r2, [r4, #152]	@ 0x98
 80072e6:	429a      	cmp	r2, r3
 80072e8:	dce6      	bgt.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
            me->_trigTimeStamp = fChrono_GetTick();
 80072ea:	f7ff f9c3 	bl	8006674 <fChrono_GetTick>
 80072ee:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80072f0:	2303      	movs	r3, #3
 80072f2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80072fc:	e7dc      	b.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
          if((value < (int8_t)me->ChTrigThreshold.Byte[0]) && ((int8_t)me->_trigChannelPayload.Byte[0] >= (int8_t)me->ChTrigThreshold.Byte[0])) {
 80072fe:	f994 3090 	ldrsb.w	r3, [r4, #144]	@ 0x90
 8007302:	429a      	cmp	r2, r3
 8007304:	dad8      	bge.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
 8007306:	f994 2098 	ldrsb.w	r2, [r4, #152]	@ 0x98
 800730a:	429a      	cmp	r2, r3
 800730c:	dbd4      	blt.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
            me->_trigTimeStamp = fChrono_GetTick();
 800730e:	f7ff f9b1 	bl	8006674 <fChrono_GetTick>
 8007312:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007314:	2303      	movs	r3, #3
 8007316:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800731a:	2301      	movs	r3, #1
 800731c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007320:	e7ca      	b.n	80072b8 <fFaraabinFobjectDataBus_Run+0x2fc>
      tmp.Byte[0] = ptr[0];
 8007322:	780b      	ldrb	r3, [r1, #0]
 8007324:	f363 0707 	bfi	r7, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007328:	784b      	ldrb	r3, [r1, #1]
 800732a:	f363 270f 	bfi	r7, r3, #8, #8
      uint16_t value = tmp.U16[0];
 800732e:	b2bd      	uxth	r5, r7
      switch(me->ChTrigType) {
 8007330:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d013      	beq.n	8007360 <fFaraabinFobjectDataBus_Run+0x3a4>
 8007338:	2b02      	cmp	r3, #2
 800733a:	d023      	beq.n	8007384 <fFaraabinFobjectDataBus_Run+0x3c8>
 800733c:	b113      	cbz	r3, 8007344 <fFaraabinFobjectDataBus_Run+0x388>
      me->_trigChannelPayload.U16[0] = value;
 800733e:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
      break;
 8007342:	e6bf      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.U16[0]) {
 8007344:	f8b4 3098 	ldrh.w	r3, [r4, #152]	@ 0x98
 8007348:	42ab      	cmp	r3, r5
 800734a:	d0f8      	beq.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
            me->_trigTimeStamp = fChrono_GetTick();
 800734c:	f7ff f992 	bl	8006674 <fChrono_GetTick>
 8007350:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007352:	2303      	movs	r3, #3
 8007354:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007358:	2301      	movs	r3, #1
 800735a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800735e:	e7ee      	b.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
          if((value > me->ChTrigThreshold.U16[0]) && (me->_trigChannelPayload.U16[0] <= me->ChTrigThreshold.U16[0])) {
 8007360:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 8007364:	429d      	cmp	r5, r3
 8007366:	d9ea      	bls.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
 8007368:	f8b4 2098 	ldrh.w	r2, [r4, #152]	@ 0x98
 800736c:	429a      	cmp	r2, r3
 800736e:	d8e6      	bhi.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
            me->_trigTimeStamp = fChrono_GetTick();
 8007370:	f7ff f980 	bl	8006674 <fChrono_GetTick>
 8007374:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007376:	2303      	movs	r3, #3
 8007378:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800737c:	2301      	movs	r3, #1
 800737e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007382:	e7dc      	b.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
          if((value < me->ChTrigThreshold.U16[0]) && (me->_trigChannelPayload.U16[0] >= me->ChTrigThreshold.U16[0])) {
 8007384:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 8007388:	429d      	cmp	r5, r3
 800738a:	d2d8      	bcs.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
 800738c:	f8b4 2098 	ldrh.w	r2, [r4, #152]	@ 0x98
 8007390:	429a      	cmp	r2, r3
 8007392:	d3d4      	bcc.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
            me->_trigTimeStamp = fChrono_GetTick();
 8007394:	f7ff f96e 	bl	8006674 <fChrono_GetTick>
 8007398:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800739a:	2303      	movs	r3, #3
 800739c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80073a6:	e7ca      	b.n	800733e <fFaraabinFobjectDataBus_Run+0x382>
      tmp.Byte[0] = ptr[0];
 80073a8:	780b      	ldrb	r3, [r1, #0]
 80073aa:	f363 0707 	bfi	r7, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 80073ae:	784b      	ldrb	r3, [r1, #1]
 80073b0:	f363 270f 	bfi	r7, r3, #8, #8
      int16_t value = tmp.I16[0];
 80073b4:	b23d      	sxth	r5, r7
      switch(me->ChTrigType) {
 80073b6:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d013      	beq.n	80073e6 <fFaraabinFobjectDataBus_Run+0x42a>
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d023      	beq.n	800740a <fFaraabinFobjectDataBus_Run+0x44e>
 80073c2:	b113      	cbz	r3, 80073ca <fFaraabinFobjectDataBus_Run+0x40e>
      me->_trigChannelPayload.I16[0] = value;
 80073c4:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
      break;
 80073c8:	e67c      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.I16[0]) {
 80073ca:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 80073ce:	42ab      	cmp	r3, r5
 80073d0:	d0f8      	beq.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
            me->_trigTimeStamp = fChrono_GetTick();
 80073d2:	f7ff f94f 	bl	8006674 <fChrono_GetTick>
 80073d6:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80073d8:	2303      	movs	r3, #3
 80073da:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80073de:	2301      	movs	r3, #1
 80073e0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80073e4:	e7ee      	b.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
          if((value > me->ChTrigThreshold.I16[0]) && (me->_trigChannelPayload.I16[0] <= me->ChTrigThreshold.I16[0])) {
 80073e6:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	@ 0x90
 80073ea:	429d      	cmp	r5, r3
 80073ec:	ddea      	ble.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
 80073ee:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	@ 0x98
 80073f2:	429a      	cmp	r2, r3
 80073f4:	dce6      	bgt.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
            me->_trigTimeStamp = fChrono_GetTick();
 80073f6:	f7ff f93d 	bl	8006674 <fChrono_GetTick>
 80073fa:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80073fc:	2303      	movs	r3, #3
 80073fe:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007402:	2301      	movs	r3, #1
 8007404:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007408:	e7dc      	b.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
          if((value < me->ChTrigThreshold.I16[0]) && (me->_trigChannelPayload.I16[0] >= me->ChTrigThreshold.I16[0])) {
 800740a:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	@ 0x90
 800740e:	429d      	cmp	r5, r3
 8007410:	dad8      	bge.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
 8007412:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	@ 0x98
 8007416:	429a      	cmp	r2, r3
 8007418:	dbd4      	blt.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
            me->_trigTimeStamp = fChrono_GetTick();
 800741a:	f7ff f92b 	bl	8006674 <fChrono_GetTick>
 800741e:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007420:	2303      	movs	r3, #3
 8007422:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007426:	2301      	movs	r3, #1
 8007428:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800742c:	e7ca      	b.n	80073c4 <fFaraabinFobjectDataBus_Run+0x408>
      tmp.Byte[0] = ptr[0];
 800742e:	7808      	ldrb	r0, [r1, #0]
 8007430:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 8007434:	7848      	ldrb	r0, [r1, #1]
 8007436:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 800743a:	7888      	ldrb	r0, [r1, #2]
 800743c:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 8007440:	78c9      	ldrb	r1, [r1, #3]
 8007442:	f361 671f 	bfi	r7, r1, #24, #8
      uint32_t value = tmp.U32[0];
 8007446:	463d      	mov	r5, r7
      switch(me->ChTrigType) {
 8007448:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 800744c:	2901      	cmp	r1, #1
 800744e:	d013      	beq.n	8007478 <fFaraabinFobjectDataBus_Run+0x4bc>
 8007450:	2902      	cmp	r1, #2
 8007452:	d023      	beq.n	800749c <fFaraabinFobjectDataBus_Run+0x4e0>
 8007454:	b111      	cbz	r1, 800745c <fFaraabinFobjectDataBus_Run+0x4a0>
      me->_trigChannelPayload.U32[0] = value;
 8007456:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
      break;
 800745a:	e633      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.U32[0]) {
 800745c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8007460:	429f      	cmp	r7, r3
 8007462:	d0f8      	beq.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
            me->_trigTimeStamp = fChrono_GetTick();
 8007464:	f7ff f906 	bl	8006674 <fChrono_GetTick>
 8007468:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800746a:	2303      	movs	r3, #3
 800746c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007470:	2301      	movs	r3, #1
 8007472:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007476:	e7ee      	b.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
          if((value > me->ChTrigThreshold.U32[0]) && (me->_trigChannelPayload.U32[0] <= me->ChTrigThreshold.U32[0])) {
 8007478:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800747c:	429f      	cmp	r7, r3
 800747e:	d9ea      	bls.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
 8007480:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8007484:	4293      	cmp	r3, r2
 8007486:	d3e6      	bcc.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
            me->_trigTimeStamp = fChrono_GetTick();
 8007488:	f7ff f8f4 	bl	8006674 <fChrono_GetTick>
 800748c:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800748e:	2303      	movs	r3, #3
 8007490:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007494:	2301      	movs	r3, #1
 8007496:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800749a:	e7dc      	b.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
          if((value < me->ChTrigThreshold.U32[0]) && (me->_trigChannelPayload.U32[0] >= me->ChTrigThreshold.U32[0])) {
 800749c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80074a0:	429f      	cmp	r7, r3
 80074a2:	d2d8      	bcs.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
 80074a4:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d8d4      	bhi.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
            me->_trigTimeStamp = fChrono_GetTick();
 80074ac:	f7ff f8e2 	bl	8006674 <fChrono_GetTick>
 80074b0:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80074b2:	2303      	movs	r3, #3
 80074b4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80074be:	e7ca      	b.n	8007456 <fFaraabinFobjectDataBus_Run+0x49a>
      tmp.Byte[0] = ptr[0];
 80074c0:	7808      	ldrb	r0, [r1, #0]
 80074c2:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 80074c6:	7848      	ldrb	r0, [r1, #1]
 80074c8:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 80074cc:	7888      	ldrb	r0, [r1, #2]
 80074ce:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 80074d2:	78c9      	ldrb	r1, [r1, #3]
 80074d4:	f361 671f 	bfi	r7, r1, #24, #8
      int32_t value = tmp.I32[0];
 80074d8:	463d      	mov	r5, r7
      switch(me->ChTrigType) {
 80074da:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 80074de:	2901      	cmp	r1, #1
 80074e0:	d013      	beq.n	800750a <fFaraabinFobjectDataBus_Run+0x54e>
 80074e2:	2902      	cmp	r1, #2
 80074e4:	d023      	beq.n	800752e <fFaraabinFobjectDataBus_Run+0x572>
 80074e6:	b111      	cbz	r1, 80074ee <fFaraabinFobjectDataBus_Run+0x532>
      me->_trigChannelPayload.I32[0] = value;
 80074e8:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
      break;
 80074ec:	e5ea      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.I32[0]) {
 80074ee:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80074f2:	429f      	cmp	r7, r3
 80074f4:	d0f8      	beq.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
            me->_trigTimeStamp = fChrono_GetTick();
 80074f6:	f7ff f8bd 	bl	8006674 <fChrono_GetTick>
 80074fa:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80074fc:	2303      	movs	r3, #3
 80074fe:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007502:	2301      	movs	r3, #1
 8007504:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007508:	e7ee      	b.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
          if((value > me->ChTrigThreshold.I32[0]) && (me->_trigChannelPayload.I32[0] <= me->ChTrigThreshold.I32[0])) {
 800750a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800750e:	429f      	cmp	r7, r3
 8007510:	ddea      	ble.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
 8007512:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8007516:	4293      	cmp	r3, r2
 8007518:	dbe6      	blt.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
            me->_trigTimeStamp = fChrono_GetTick();
 800751a:	f7ff f8ab 	bl	8006674 <fChrono_GetTick>
 800751e:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007520:	2303      	movs	r3, #3
 8007522:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007526:	2301      	movs	r3, #1
 8007528:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800752c:	e7dc      	b.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
          if((value < me->ChTrigThreshold.I32[0]) && (me->_trigChannelPayload.I32[0] >= me->ChTrigThreshold.I32[0])) {
 800752e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007532:	429f      	cmp	r7, r3
 8007534:	dad8      	bge.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
 8007536:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800753a:	4293      	cmp	r3, r2
 800753c:	dcd4      	bgt.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
            me->_trigTimeStamp = fChrono_GetTick();
 800753e:	f7ff f899 	bl	8006674 <fChrono_GetTick>
 8007542:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007544:	2303      	movs	r3, #3
 8007546:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800754a:	2301      	movs	r3, #1
 800754c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007550:	e7ca      	b.n	80074e8 <fFaraabinFobjectDataBus_Run+0x52c>
      tmp.Byte[0] = ptr[0];
 8007552:	7808      	ldrb	r0, [r1, #0]
 8007554:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 8007558:	7848      	ldrb	r0, [r1, #1]
 800755a:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 800755e:	7888      	ldrb	r0, [r1, #2]
 8007560:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 8007564:	78c8      	ldrb	r0, [r1, #3]
 8007566:	f360 671f 	bfi	r7, r0, #24, #8
      tmp.Byte[4] = ptr[4];
 800756a:	7908      	ldrb	r0, [r1, #4]
 800756c:	f360 0807 	bfi	r8, r0, #0, #8
      tmp.Byte[5] = ptr[5];
 8007570:	7948      	ldrb	r0, [r1, #5]
 8007572:	f360 280f 	bfi	r8, r0, #8, #8
      tmp.Byte[6] = ptr[6];
 8007576:	7988      	ldrb	r0, [r1, #6]
 8007578:	f360 4817 	bfi	r8, r0, #16, #8
      tmp.Byte[7] = ptr[7];
 800757c:	79c9      	ldrb	r1, [r1, #7]
 800757e:	f361 681f 	bfi	r8, r1, #24, #8
      uint64_t value = tmp.U64;
 8007582:	463e      	mov	r6, r7
 8007584:	4645      	mov	r5, r8
      switch(me->ChTrigType) {
 8007586:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 800758a:	2901      	cmp	r1, #1
 800758c:	d019      	beq.n	80075c2 <fFaraabinFobjectDataBus_Run+0x606>
 800758e:	2902      	cmp	r1, #2
 8007590:	d02d      	beq.n	80075ee <fFaraabinFobjectDataBus_Run+0x632>
 8007592:	b121      	cbz	r1, 800759e <fFaraabinFobjectDataBus_Run+0x5e2>
      me->_trigChannelPayload.U64 = value;
 8007594:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
 8007598:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
      break;
 800759c:	e592      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.U64) {
 800759e:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80075a2:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80075a6:	429d      	cmp	r5, r3
 80075a8:	bf08      	it	eq
 80075aa:	4297      	cmpeq	r7, r2
 80075ac:	d0f2      	beq.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
            me->_trigTimeStamp = fChrono_GetTick();
 80075ae:	f7ff f861 	bl	8006674 <fChrono_GetTick>
 80075b2:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80075b4:	2303      	movs	r3, #3
 80075b6:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80075c0:	e7e8      	b.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
          if((value > me->ChTrigThreshold.U64) && (me->_trigChannelPayload.U64 <= me->ChTrigThreshold.U64)) {
 80075c2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80075c6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80075ca:	42b8      	cmp	r0, r7
 80075cc:	eb71 0308 	sbcs.w	r3, r1, r8
 80075d0:	d2e0      	bcs.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
 80075d2:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80075d6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80075da:	4290      	cmp	r0, r2
 80075dc:	4199      	sbcs	r1, r3
 80075de:	d3d9      	bcc.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80075ec:	e7d2      	b.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
          if((value < me->ChTrigThreshold.U64) && (me->_trigChannelPayload.U64 >= me->ChTrigThreshold.U64)) {
 80075ee:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80075f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80075f6:	428f      	cmp	r7, r1
 80075f8:	eb78 0203 	sbcs.w	r2, r8, r3
 80075fc:	d2ca      	bcs.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
 80075fe:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8007602:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8007606:	4288      	cmp	r0, r1
 8007608:	419a      	sbcs	r2, r3
 800760a:	d3c3      	bcc.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
            me->_trigTimeStamp = fChrono_GetTick();
 800760c:	f7ff f832 	bl	8006674 <fChrono_GetTick>
 8007610:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007612:	2303      	movs	r3, #3
 8007614:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007618:	2301      	movs	r3, #1
 800761a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800761e:	e7b9      	b.n	8007594 <fFaraabinFobjectDataBus_Run+0x5d8>
      tmp.Byte[0] = ptr[0];
 8007620:	7808      	ldrb	r0, [r1, #0]
 8007622:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 8007626:	7848      	ldrb	r0, [r1, #1]
 8007628:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 800762c:	7888      	ldrb	r0, [r1, #2]
 800762e:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 8007632:	78c8      	ldrb	r0, [r1, #3]
 8007634:	f360 671f 	bfi	r7, r0, #24, #8
      tmp.Byte[4] = ptr[4];
 8007638:	7908      	ldrb	r0, [r1, #4]
 800763a:	f360 0807 	bfi	r8, r0, #0, #8
      tmp.Byte[5] = ptr[5];
 800763e:	7948      	ldrb	r0, [r1, #5]
 8007640:	f360 280f 	bfi	r8, r0, #8, #8
      tmp.Byte[6] = ptr[6];
 8007644:	7988      	ldrb	r0, [r1, #6]
 8007646:	f360 4817 	bfi	r8, r0, #16, #8
      tmp.Byte[7] = ptr[7];
 800764a:	79c9      	ldrb	r1, [r1, #7]
 800764c:	f361 681f 	bfi	r8, r1, #24, #8
      int64_t value = tmp.I64;
 8007650:	463e      	mov	r6, r7
 8007652:	4645      	mov	r5, r8
      switch(me->ChTrigType) {
 8007654:	f894 108c 	ldrb.w	r1, [r4, #140]	@ 0x8c
 8007658:	2901      	cmp	r1, #1
 800765a:	d019      	beq.n	8007690 <fFaraabinFobjectDataBus_Run+0x6d4>
 800765c:	2902      	cmp	r1, #2
 800765e:	d030      	beq.n	80076c2 <fFaraabinFobjectDataBus_Run+0x706>
 8007660:	b121      	cbz	r1, 800766c <fFaraabinFobjectDataBus_Run+0x6b0>
      me->_trigChannelPayload.I64 = value;
 8007662:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
 8007666:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
      break;
 800766a:	e52b      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if(value != me->_trigChannelPayload.I64) {
 800766c:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8007670:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8007674:	429d      	cmp	r5, r3
 8007676:	bf08      	it	eq
 8007678:	4297      	cmpeq	r7, r2
 800767a:	d0f2      	beq.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
            me->_trigTimeStamp = fChrono_GetTick();
 800767c:	f7fe fffa 	bl	8006674 <fChrono_GetTick>
 8007680:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007682:	2303      	movs	r3, #3
 8007684:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007688:	2301      	movs	r3, #1
 800768a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800768e:	e7e8      	b.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
          if((value > me->ChTrigThreshold.I64) && (me->_trigChannelPayload.I64 <= me->ChTrigThreshold.I64)) {
 8007690:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007694:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8007698:	42b8      	cmp	r0, r7
 800769a:	eb71 0308 	sbcs.w	r3, r1, r8
 800769e:	dae0      	bge.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
 80076a0:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80076a4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80076a8:	4290      	cmp	r0, r2
 80076aa:	4199      	sbcs	r1, r3
 80076ac:	dbd9      	blt.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
            me->_trigTimeStamp = fChrono_GetTick();
 80076ae:	f7fe ffe1 	bl	8006674 <fChrono_GetTick>
 80076b2:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80076c0:	e7cf      	b.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
          if((value < me->ChTrigThreshold.I64) && (me->_trigChannelPayload.I64 >= me->ChTrigThreshold.I64)) {
 80076c2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80076c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80076ca:	428f      	cmp	r7, r1
 80076cc:	eb78 0203 	sbcs.w	r2, r8, r3
 80076d0:	dac7      	bge.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
 80076d2:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80076d6:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 80076da:	4288      	cmp	r0, r1
 80076dc:	419a      	sbcs	r2, r3
 80076de:	dbc0      	blt.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
            me->_trigTimeStamp = fChrono_GetTick();
 80076e0:	f7fe ffc8 	bl	8006674 <fChrono_GetTick>
 80076e4:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80076e6:	2303      	movs	r3, #3
 80076e8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80076ec:	2301      	movs	r3, #1
 80076ee:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80076f2:	e7b6      	b.n	8007662 <fFaraabinFobjectDataBus_Run+0x6a6>
      tmp.Byte[0] = ptr[0];
 80076f4:	780b      	ldrb	r3, [r1, #0]
 80076f6:	f363 0707 	bfi	r7, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 80076fa:	784b      	ldrb	r3, [r1, #1]
 80076fc:	f363 270f 	bfi	r7, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8007700:	788b      	ldrb	r3, [r1, #2]
 8007702:	f363 4717 	bfi	r7, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8007706:	78cb      	ldrb	r3, [r1, #3]
 8007708:	f363 671f 	bfi	r7, r3, #24, #8
      float32_t value = tmp.F32[0];
 800770c:	463d      	mov	r5, r7
      switch(me->ChTrigType) {
 800770e:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8007712:	2b01      	cmp	r3, #1
 8007714:	d004      	beq.n	8007720 <fFaraabinFobjectDataBus_Run+0x764>
 8007716:	2b02      	cmp	r3, #2
 8007718:	d01b      	beq.n	8007752 <fFaraabinFobjectDataBus_Run+0x796>
      me->_trigChannelPayload.F32[0] = value;
 800771a:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
      break;
 800771e:	e4d1      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if((value > me->ChTrigThreshold.F32[0]) && (me->_trigChannelPayload.F32[0] <= me->ChTrigThreshold.F32[0])) {
 8007720:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8007724:	4631      	mov	r1, r6
 8007726:	4638      	mov	r0, r7
 8007728:	f7f9 fcc0 	bl	80010ac <__aeabi_fcmpgt>
 800772c:	2800      	cmp	r0, #0
 800772e:	d0f4      	beq.n	800771a <fFaraabinFobjectDataBus_Run+0x75e>
 8007730:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8007734:	4630      	mov	r0, r6
 8007736:	f7f9 fcaf 	bl	8001098 <__aeabi_fcmpge>
 800773a:	2800      	cmp	r0, #0
 800773c:	d0ed      	beq.n	800771a <fFaraabinFobjectDataBus_Run+0x75e>
            me->_trigTimeStamp = fChrono_GetTick();
 800773e:	f7fe ff99 	bl	8006674 <fChrono_GetTick>
 8007742:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007744:	2303      	movs	r3, #3
 8007746:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800774a:	2301      	movs	r3, #1
 800774c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007750:	e7e3      	b.n	800771a <fFaraabinFobjectDataBus_Run+0x75e>
          if((value < me->ChTrigThreshold.F32[0]) && (me->_trigChannelPayload.F32[0] >= me->ChTrigThreshold.F32[0])) {
 8007752:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8007756:	4631      	mov	r1, r6
 8007758:	4638      	mov	r0, r7
 800775a:	f7f9 fc89 	bl	8001070 <__aeabi_fcmplt>
 800775e:	2800      	cmp	r0, #0
 8007760:	d0db      	beq.n	800771a <fFaraabinFobjectDataBus_Run+0x75e>
 8007762:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8007766:	4630      	mov	r0, r6
 8007768:	f7f9 fc8c 	bl	8001084 <__aeabi_fcmple>
 800776c:	2800      	cmp	r0, #0
 800776e:	d0d4      	beq.n	800771a <fFaraabinFobjectDataBus_Run+0x75e>
            me->_trigTimeStamp = fChrono_GetTick();
 8007770:	f7fe ff80 	bl	8006674 <fChrono_GetTick>
 8007774:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 8007776:	2303      	movs	r3, #3
 8007778:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 800777c:	2301      	movs	r3, #1
 800777e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007782:	e7ca      	b.n	800771a <fFaraabinFobjectDataBus_Run+0x75e>
      tmp.Byte[0] = ptr[0];
 8007784:	7808      	ldrb	r0, [r1, #0]
 8007786:	f360 0707 	bfi	r7, r0, #0, #8
      tmp.Byte[1] = ptr[1];
 800778a:	7848      	ldrb	r0, [r1, #1]
 800778c:	f360 270f 	bfi	r7, r0, #8, #8
      tmp.Byte[2] = ptr[2];
 8007790:	7888      	ldrb	r0, [r1, #2]
 8007792:	f360 4717 	bfi	r7, r0, #16, #8
      tmp.Byte[3] = ptr[3];
 8007796:	78c8      	ldrb	r0, [r1, #3]
 8007798:	f360 671f 	bfi	r7, r0, #24, #8
      tmp.Byte[4] = ptr[4];
 800779c:	7908      	ldrb	r0, [r1, #4]
 800779e:	f360 0807 	bfi	r8, r0, #0, #8
      tmp.Byte[5] = ptr[5];
 80077a2:	7948      	ldrb	r0, [r1, #5]
 80077a4:	f360 280f 	bfi	r8, r0, #8, #8
      tmp.Byte[6] = ptr[6];
 80077a8:	7988      	ldrb	r0, [r1, #6]
 80077aa:	f360 4817 	bfi	r8, r0, #16, #8
      tmp.Byte[7] = ptr[7];
 80077ae:	79c9      	ldrb	r1, [r1, #7]
 80077b0:	f361 681f 	bfi	r8, r1, #24, #8
      float64_t value = tmp.F64;
 80077b4:	463e      	mov	r6, r7
 80077b6:	4647      	mov	r7, r8
      switch(me->ChTrigType) {
 80077b8:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d004      	beq.n	80077ca <fFaraabinFobjectDataBus_Run+0x80e>
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d01e      	beq.n	8007802 <fFaraabinFobjectDataBus_Run+0x846>
      me->_trigChannelPayload.F64 = value;
 80077c4:	e9c4 6726 	strd	r6, r7, [r4, #152]	@ 0x98
      break;
 80077c8:	e47c      	b.n	80070c4 <fFaraabinFobjectDataBus_Run+0x108>
          if((value > me->ChTrigThreshold.F64) && (me->_trigChannelPayload.F64 <= me->ChTrigThreshold.F64)) {
 80077ca:	e9d4 8924 	ldrd	r8, r9, [r4, #144]	@ 0x90
 80077ce:	4642      	mov	r2, r8
 80077d0:	464b      	mov	r3, r9
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f9 f90f 	bl	80009f8 <__aeabi_dcmpgt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d0f2      	beq.n	80077c4 <fFaraabinFobjectDataBus_Run+0x808>
 80077de:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	@ 0x98
 80077e2:	4640      	mov	r0, r8
 80077e4:	4649      	mov	r1, r9
 80077e6:	f7f9 f8fd 	bl	80009e4 <__aeabi_dcmpge>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d0ea      	beq.n	80077c4 <fFaraabinFobjectDataBus_Run+0x808>
            me->_trigTimeStamp = fChrono_GetTick();
 80077ee:	f7fe ff41 	bl	8006674 <fChrono_GetTick>
 80077f2:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 80077f4:	2303      	movs	r3, #3
 80077f6:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007800:	e7e0      	b.n	80077c4 <fFaraabinFobjectDataBus_Run+0x808>
          if((value < me->ChTrigThreshold.F64) && (me->_trigChannelPayload.F64 >= me->ChTrigThreshold.F64)) {
 8007802:	e9d4 8924 	ldrd	r8, r9, [r4, #144]	@ 0x90
 8007806:	4642      	mov	r2, r8
 8007808:	464b      	mov	r3, r9
 800780a:	4630      	mov	r0, r6
 800780c:	4639      	mov	r1, r7
 800780e:	f7f9 f8d5 	bl	80009bc <__aeabi_dcmplt>
 8007812:	2800      	cmp	r0, #0
 8007814:	d0d6      	beq.n	80077c4 <fFaraabinFobjectDataBus_Run+0x808>
 8007816:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	@ 0x98
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f9 f8d7 	bl	80009d0 <__aeabi_dcmple>
 8007822:	2800      	cmp	r0, #0
 8007824:	d0ce      	beq.n	80077c4 <fFaraabinFobjectDataBus_Run+0x808>
            me->_trigTimeStamp = fChrono_GetTick();
 8007826:	f7fe ff25 	bl	8006674 <fChrono_GetTick>
 800782a:	6620      	str	r0, [r4, #96]	@ 0x60
            me->LastTrigSource = eDATABUS_TRIG_SOURCE_CHANNEL;
 800782c:	2303      	movs	r3, #3
 800782e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            me->_isTriggered = true;
 8007832:	2301      	movs	r3, #1
 8007834:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007838:	e7c4      	b.n	80077c4 <fFaraabinFobjectDataBus_Run+0x808>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 800783a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800783e:	3301      	adds	r3, #1
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	bf08      	it	eq
 8007846:	2302      	moveq	r3, #2
 8007848:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800784c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8007850:	4293      	cmp	r3, r2
 8007852:	d900      	bls.n	8007856 <fFaraabinFobjectDataBus_Run+0x89a>
 8007854:	bb02      	cbnz	r2, 8007898 <fFaraabinFobjectDataBus_Run+0x8dc>
      if(fChrono_IsTimeout(&(me->_chronoTrigWindow)) == true) {
 8007856:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800785a:	f7ff f82f 	bl	80068bc <fChrono_IsTimeout>
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f abb5 	beq.w	8006fce <fFaraabinFobjectDataBus_Run+0x12>
        me->IsCaptureEnd = true;
 8007864:	2301      	movs	r3, #1
 8007866:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
        me->CurrentState = eDATABUS_STATE_OFF;
 800786a:	2100      	movs	r1, #0
 800786c:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
        Faraabin_EventSystem_End_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_CAPTURE_END);
 8007870:	9309      	str	r3, [sp, #36]	@ 0x24
 8007872:	9108      	str	r1, [sp, #32]
 8007874:	9107      	str	r1, [sp, #28]
 8007876:	9106      	str	r1, [sp, #24]
 8007878:	9105      	str	r1, [sp, #20]
 800787a:	9104      	str	r1, [sp, #16]
 800787c:	9103      	str	r1, [sp, #12]
 800787e:	2304      	movs	r3, #4
 8007880:	9302      	str	r3, [sp, #8]
 8007882:	9101      	str	r1, [sp, #4]
 8007884:	2302      	movs	r3, #2
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	78a3      	ldrb	r3, [r4, #2]
 800788a:	f104 0210 	add.w	r2, r4, #16
 800788e:	4620      	mov	r0, r4
 8007890:	f002 fd6e 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8007894:	f7ff bb9b 	b.w	8006fce <fFaraabinFobjectDataBus_Run+0x12>
      RUN_EVERY_QTY_OBJ_(me->TrigDivideBy, me->_trigDivbyCnt) {
 8007898:	2301      	movs	r3, #1
 800789a:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
        fRunCapture(me);
 800789e:	4620      	mov	r0, r4
 80078a0:	f7ff faa2 	bl	8006de8 <fRunCapture>
 80078a4:	e7d7      	b.n	8007856 <fFaraabinFobjectDataBus_Run+0x89a>
 80078a6:	bf00      	nop

080078a8 <fFaraabinFobjectDataBus_SendCaptureDataRun>:
	if(!FaraabinInit___) {
 80078a8:	4b33      	ldr	r3, [pc, #204]	@ (8007978 <fFaraabinFobjectDataBus_SendCaptureDataRun+0xd0>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b163      	cbz	r3, 80078c8 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x20>
void fFaraabinFobjectDataBus_SendCaptureDataRun(sFaraabinFobjectDataBus *me) {
 80078ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	b090      	sub	sp, #64	@ 0x40
 80078b4:	4604      	mov	r4, r0
  if(!me->_init) {
 80078b6:	7843      	ldrb	r3, [r0, #1]
 80078b8:	b11b      	cbz	r3, 80078c2 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
  switch(me->CurrentState) {
 80078ba:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d008      	beq.n	80078d4 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x2c>
}
 80078c2:	b010      	add	sp, #64	@ 0x40
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 80078c8:	4a2c      	ldr	r2, [pc, #176]	@ (800797c <fFaraabinFobjectDataBus_SendCaptureDataRun+0xd4>)
 80078ca:	7953      	ldrb	r3, [r2, #5]
 80078cc:	f043 0308 	orr.w	r3, r3, #8
 80078d0:	7153      	strb	r3, [r2, #5]
		return;
 80078d2:	4770      	bx	lr
  switch(me->CurrentState) {
 80078d4:	2614      	movs	r6, #20
        uint8_t ret = fQueueRead(me, me->CaptureSendingCnt, (uint8_t*)&tmp_capture);
 80078d6:	ad0a      	add	r5, sp, #40	@ 0x28
          fFaraabinLinkSerializer_DataBusSendCaptureValue(
 80078d8:	f100 0710 	add.w	r7, r0, #16
 80078dc:	f04f 0800 	mov.w	r8, #0
        uint8_t ret = fQueueRead(me, me->CaptureSendingCnt, (uint8_t*)&tmp_capture);
 80078e0:	462a      	mov	r2, r5
 80078e2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff fa49 	bl	8006d7c <fQueueRead>
        if(ret == 0U) {
 80078ea:	b9a0      	cbnz	r0, 8007916 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x6e>
          fFaraabinLinkSerializer_DataBusSendCaptureValue(
 80078ec:	9500      	str	r5, [sp, #0]
 80078ee:	4643      	mov	r3, r8
 80078f0:	f894 205c 	ldrb.w	r2, [r4, #92]	@ 0x5c
 80078f4:	4639      	mov	r1, r7
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 fe4a 	bl	800a590 <fFaraabinLinkSerializer_DataBusSendCaptureValue>
          fFaraabinLinkHandler_FlushBuffer();
 80078fc:	f001 fdce 	bl	800949c <fFaraabinLinkHandler_FlushBuffer>
        me->CaptureSendingCnt++;
 8007900:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007902:	3301      	adds	r3, #1
 8007904:	65a3      	str	r3, [r4, #88]	@ 0x58
        if(me->CaptureSendingCnt >= me->CaptureSendingQty) {
 8007906:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007908:	4293      	cmp	r3, r2
 800790a:	d21b      	bcs.n	8007944 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x9c>
      for(uint16_t i = 0; i < FB_DATABUS_CAPTURE_SEND_ITEMS; i++) {
 800790c:	3e01      	subs	r6, #1
 800790e:	b2b6      	uxth	r6, r6
 8007910:	2e00      	cmp	r6, #0
 8007912:	d1e5      	bne.n	80078e0 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x38>
 8007914:	e7d5      	b.n	80078c2 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
          Faraabin_EventSystem_EndResponse_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_ERROR_CAPTURE_QUEUE, me->CaptureSendingReqSeq);
 8007916:	2301      	movs	r3, #1
 8007918:	9309      	str	r3, [sp, #36]	@ 0x24
 800791a:	2100      	movs	r1, #0
 800791c:	9108      	str	r1, [sp, #32]
 800791e:	9107      	str	r1, [sp, #28]
 8007920:	9306      	str	r3, [sp, #24]
 8007922:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	9104      	str	r1, [sp, #16]
 800792a:	9103      	str	r1, [sp, #12]
 800792c:	230a      	movs	r3, #10
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	9101      	str	r1, [sp, #4]
 8007932:	2302      	movs	r3, #2
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	78a3      	ldrb	r3, [r4, #2]
 8007938:	f104 0210 	add.w	r2, r4, #16
 800793c:	4620      	mov	r0, r4
 800793e:	f002 fd17 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
          break;
 8007942:	e7be      	b.n	80078c2 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
          me->CurrentState = eDATABUS_STATE_OFF;
 8007944:	2100      	movs	r1, #0
 8007946:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
          Faraabin_EventSystem_ParamEndResponse_((uint32_t)me, &me->Seq, me->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, (uint8_t*)&me->CurrentState, 1, me->CaptureSendingReqSeq);
 800794a:	2301      	movs	r3, #1
 800794c:	9309      	str	r3, [sp, #36]	@ 0x24
 800794e:	9108      	str	r1, [sp, #32]
 8007950:	9107      	str	r1, [sp, #28]
 8007952:	9306      	str	r3, [sp, #24]
 8007954:	f894 205c 	ldrb.w	r2, [r4, #92]	@ 0x5c
 8007958:	9205      	str	r2, [sp, #20]
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	2303      	movs	r3, #3
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	9101      	str	r1, [sp, #4]
 8007968:	2302      	movs	r3, #2
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	78a3      	ldrb	r3, [r4, #2]
 800796e:	463a      	mov	r2, r7
 8007970:	4620      	mov	r0, r4
 8007972:	f002 fcfd 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
          break;
 8007976:	e7a4      	b.n	80078c2 <fFaraabinFobjectDataBus_SendCaptureDataRun+0x1a>
 8007978:	20002664 	.word	0x20002664
 800797c:	2000279c 	.word	0x2000279c

08007980 <fFaraabinFobjectDataBus_GetAttachCount>:
uint16_t fFaraabinFobjectDataBus_GetAttachCount(sFaraabinFobjectDataBus *me) {
 8007980:	4603      	mov	r3, r0
  if(!me->_init) {
 8007982:	7842      	ldrb	r2, [r0, #1]
 8007984:	b182      	cbz	r2, 80079a8 <fFaraabinFobjectDataBus_GetAttachCount+0x28>
  for(uint16_t i = 0; i<me->ChannelQty; i++) {
 8007986:	8a40      	ldrh	r0, [r0, #18]
 8007988:	b178      	cbz	r0, 80079aa <fFaraabinFobjectDataBus_GetAttachCount+0x2a>
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	eb03 1100 	add.w	r1, r3, r0, lsl #4
  uint16_t cnt = 0;
 8007990:	2000      	movs	r0, #0
 8007992:	e002      	b.n	800799a <fFaraabinFobjectDataBus_GetAttachCount+0x1a>
  for(uint16_t i = 0; i<me->ChannelQty; i++) {
 8007994:	3310      	adds	r3, #16
 8007996:	428b      	cmp	r3, r1
 8007998:	d005      	beq.n	80079a6 <fFaraabinFobjectDataBus_GetAttachCount+0x26>
    if(me->_pBufferChannels[i].ItemFobjectPtr != 0U) {
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	2a00      	cmp	r2, #0
 800799e:	d0f9      	beq.n	8007994 <fFaraabinFobjectDataBus_GetAttachCount+0x14>
      cnt++;
 80079a0:	3001      	adds	r0, #1
 80079a2:	b280      	uxth	r0, r0
 80079a4:	e7f6      	b.n	8007994 <fFaraabinFobjectDataBus_GetAttachCount+0x14>
 80079a6:	4770      	bx	lr
    return 0;
 80079a8:	2000      	movs	r0, #0
}
 80079aa:	4770      	bx	lr

080079ac <fFaraabinFobjectDataBus_ResetTrigger>:
  if(!me->_init) {
 80079ac:	7843      	ldrb	r3, [r0, #1]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80c2 	beq.w	8007b38 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  if(!me->ChTrigEnable) {
 80079b4:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80bd 	beq.w	8007b38 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  if(me->ChTrigNo >= me->ChannelQty) {
 80079be:	f8b0 208a 	ldrh.w	r2, [r0, #138]	@ 0x8a
 80079c2:	8a43      	ldrh	r3, [r0, #18]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	f240 80b7 	bls.w	8007b38 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  if(!me->_pBufferChannels[me->ChTrigNo].Enable) {
 80079ca:	6943      	ldr	r3, [r0, #20]
 80079cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80079d0:	7b1a      	ldrb	r2, [r3, #12]
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	f000 80b0 	beq.w	8007b38 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
  uint8_t *ptr = (uint8_t*)me->_pBufferChannels[me->ChTrigNo].ItemFobjectPtr;
 80079d8:	685a      	ldr	r2, [r3, #4]
  if(ptr == NULL) {
 80079da:	2a00      	cmp	r2, #0
 80079dc:	f000 80ac 	beq.w	8007b38 <fFaraabinFobjectDataBus_ResetTrigger+0x18c>
void fFaraabinFobjectDataBus_ResetTrigger(sFaraabinFobjectDataBus *me) {
 80079e0:	b430      	push	{r4, r5}
  uByte8 tmp = {0x00};
 80079e2:	2400      	movs	r4, #0
 80079e4:	2500      	movs	r5, #0
  switch((eFaraabinFobjectVarType_PrimitiveId)me->_pBufferChannels[me->ChTrigNo].PrimitiveVariableId) {
 80079e6:	7adb      	ldrb	r3, [r3, #11]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	2b0a      	cmp	r3, #10
 80079ec:	d80a      	bhi.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
 80079ee:	e8df f003 	tbb	[pc, r3]
 80079f2:	0b06      	.short	0x0b06
 80079f4:	251c130f 	.word	0x251c130f
 80079f8:	795e4334 	.word	0x795e4334
 80079fc:	88          	.byte	0x88
 80079fd:	00          	.byte	0x00
      me->_trigChannelPayload.Byte[0] = ptr[0];
 80079fe:	7813      	ldrb	r3, [r2, #0]
 8007a00:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
}
 8007a04:	bc30      	pop	{r4, r5}
 8007a06:	4770      	bx	lr
      me->_trigChannelPayload.Byte[0] = ptr[0];
 8007a08:	7813      	ldrb	r3, [r2, #0]
 8007a0a:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      break;
 8007a0e:	e7f9      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      me->_trigChannelPayload.Byte[0] = ptr[0];
 8007a10:	7813      	ldrb	r3, [r2, #0]
 8007a12:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      break;
 8007a16:	e7f5      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007a18:	7813      	ldrb	r3, [r2, #0]
 8007a1a:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007a1e:	7853      	ldrb	r3, [r2, #1]
 8007a20:	f363 240f 	bfi	r4, r3, #8, #8
      me->_trigChannelPayload.U16[0] = tmp.U16[0];
 8007a24:	f8a0 4098 	strh.w	r4, [r0, #152]	@ 0x98
      break;
 8007a28:	e7ec      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007a2a:	7813      	ldrb	r3, [r2, #0]
 8007a2c:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007a30:	7853      	ldrb	r3, [r2, #1]
 8007a32:	f363 240f 	bfi	r4, r3, #8, #8
      me->_trigChannelPayload.I16[0] = tmp.I16[0];
 8007a36:	f8a0 4098 	strh.w	r4, [r0, #152]	@ 0x98
      break;
 8007a3a:	e7e3      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007a3c:	7813      	ldrb	r3, [r2, #0]
 8007a3e:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007a42:	7853      	ldrb	r3, [r2, #1]
 8007a44:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8007a48:	7893      	ldrb	r3, [r2, #2]
 8007a4a:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8007a4e:	78d3      	ldrb	r3, [r2, #3]
 8007a50:	f363 641f 	bfi	r4, r3, #24, #8
      me->_trigChannelPayload.U32[0] = tmp.U32[0];
 8007a54:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
      break;
 8007a58:	e7d4      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007a5a:	7813      	ldrb	r3, [r2, #0]
 8007a5c:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007a60:	7853      	ldrb	r3, [r2, #1]
 8007a62:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8007a66:	7893      	ldrb	r3, [r2, #2]
 8007a68:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8007a6c:	78d3      	ldrb	r3, [r2, #3]
 8007a6e:	f363 641f 	bfi	r4, r3, #24, #8
      me->_trigChannelPayload.I32[0] = tmp.I32[0];
 8007a72:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
      break;
 8007a76:	e7c5      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007a78:	7813      	ldrb	r3, [r2, #0]
 8007a7a:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007a7e:	7853      	ldrb	r3, [r2, #1]
 8007a80:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8007a84:	7893      	ldrb	r3, [r2, #2]
 8007a86:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8007a8a:	78d3      	ldrb	r3, [r2, #3]
 8007a8c:	f363 641f 	bfi	r4, r3, #24, #8
      tmp.Byte[4] = ptr[4];
 8007a90:	7913      	ldrb	r3, [r2, #4]
 8007a92:	f363 0507 	bfi	r5, r3, #0, #8
      tmp.Byte[5] = ptr[5];
 8007a96:	7953      	ldrb	r3, [r2, #5]
 8007a98:	f363 250f 	bfi	r5, r3, #8, #8
      tmp.Byte[6] = ptr[6];
 8007a9c:	7993      	ldrb	r3, [r2, #6]
 8007a9e:	f363 4517 	bfi	r5, r3, #16, #8
      tmp.Byte[7] = ptr[7];
 8007aa2:	79d3      	ldrb	r3, [r2, #7]
 8007aa4:	f363 651f 	bfi	r5, r3, #24, #8
      me->_trigChannelPayload.U64 = tmp.U64;
 8007aa8:	e9c0 4526 	strd	r4, r5, [r0, #152]	@ 0x98
      break;
 8007aac:	e7aa      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007aae:	7813      	ldrb	r3, [r2, #0]
 8007ab0:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007ab4:	7853      	ldrb	r3, [r2, #1]
 8007ab6:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8007aba:	7893      	ldrb	r3, [r2, #2]
 8007abc:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8007ac0:	78d3      	ldrb	r3, [r2, #3]
 8007ac2:	f363 641f 	bfi	r4, r3, #24, #8
      tmp.Byte[4] = ptr[4];
 8007ac6:	7913      	ldrb	r3, [r2, #4]
 8007ac8:	f363 0507 	bfi	r5, r3, #0, #8
      tmp.Byte[5] = ptr[5];
 8007acc:	7953      	ldrb	r3, [r2, #5]
 8007ace:	f363 250f 	bfi	r5, r3, #8, #8
      tmp.Byte[6] = ptr[6];
 8007ad2:	7993      	ldrb	r3, [r2, #6]
 8007ad4:	f363 4517 	bfi	r5, r3, #16, #8
      tmp.Byte[7] = ptr[7];
 8007ad8:	79d3      	ldrb	r3, [r2, #7]
 8007ada:	f363 651f 	bfi	r5, r3, #24, #8
      me->_trigChannelPayload.I64 = tmp.I64;
 8007ade:	e9c0 4526 	strd	r4, r5, [r0, #152]	@ 0x98
      break;
 8007ae2:	e78f      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007ae4:	7813      	ldrb	r3, [r2, #0]
 8007ae6:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007aea:	7853      	ldrb	r3, [r2, #1]
 8007aec:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8007af0:	7893      	ldrb	r3, [r2, #2]
 8007af2:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8007af6:	78d3      	ldrb	r3, [r2, #3]
 8007af8:	f363 641f 	bfi	r4, r3, #24, #8
      me->_trigChannelPayload.F32[0] = tmp.F32[0];
 8007afc:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
      break;
 8007b00:	e780      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
      tmp.Byte[0] = ptr[0];
 8007b02:	7813      	ldrb	r3, [r2, #0]
 8007b04:	f363 0407 	bfi	r4, r3, #0, #8
      tmp.Byte[1] = ptr[1];
 8007b08:	7853      	ldrb	r3, [r2, #1]
 8007b0a:	f363 240f 	bfi	r4, r3, #8, #8
      tmp.Byte[2] = ptr[2];
 8007b0e:	7893      	ldrb	r3, [r2, #2]
 8007b10:	f363 4417 	bfi	r4, r3, #16, #8
      tmp.Byte[3] = ptr[3];
 8007b14:	78d3      	ldrb	r3, [r2, #3]
 8007b16:	f363 641f 	bfi	r4, r3, #24, #8
      tmp.Byte[4] = ptr[4];
 8007b1a:	7913      	ldrb	r3, [r2, #4]
 8007b1c:	f363 0507 	bfi	r5, r3, #0, #8
      tmp.Byte[5] = ptr[5];
 8007b20:	7953      	ldrb	r3, [r2, #5]
 8007b22:	f363 250f 	bfi	r5, r3, #8, #8
      tmp.Byte[6] = ptr[6];
 8007b26:	7993      	ldrb	r3, [r2, #6]
 8007b28:	f363 4517 	bfi	r5, r3, #16, #8
      tmp.Byte[7] = ptr[7];
 8007b2c:	79d3      	ldrb	r3, [r2, #7]
 8007b2e:	f363 651f 	bfi	r5, r3, #24, #8
      me->_trigChannelPayload.F64 = tmp.F64;
 8007b32:	e9c0 4526 	strd	r4, r5, [r0, #152]	@ 0x98
      break;
 8007b36:	e765      	b.n	8007a04 <fFaraabinFobjectDataBus_ResetTrigger+0x58>
 8007b38:	4770      	bx	lr
	...

08007b3c <fFaraabinFobjectDataBus_StartStream>:
	if(!FaraabinInit___) {
 8007b3c:	4b07      	ldr	r3, [pc, #28]	@ (8007b5c <fFaraabinFobjectDataBus_StartStream+0x20>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b12b      	cbz	r3, 8007b4e <fFaraabinFobjectDataBus_StartStream+0x12>
  if(!me->_init) {
 8007b42:	7843      	ldrb	r3, [r0, #1]
 8007b44:	b113      	cbz	r3, 8007b4c <fFaraabinFobjectDataBus_StartStream+0x10>
  me->CurrentState = eDATABUS_STATE_STREAM;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
}
 8007b4c:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007b4e:	4a04      	ldr	r2, [pc, #16]	@ (8007b60 <fFaraabinFobjectDataBus_StartStream+0x24>)
 8007b50:	7953      	ldrb	r3, [r2, #5]
 8007b52:	f043 0308 	orr.w	r3, r3, #8
 8007b56:	7153      	strb	r3, [r2, #5]
		return;
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20002664 	.word	0x20002664
 8007b60:	2000279c 	.word	0x2000279c

08007b64 <fFaraabinFobjectDataBus_StartTimer>:
	if(!FaraabinInit___) {
 8007b64:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba0 <fFaraabinFobjectDataBus_StartTimer+0x3c>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b123      	cbz	r3, 8007b74 <fFaraabinFobjectDataBus_StartTimer+0x10>
void fFaraabinFobjectDataBus_StartTimer(sFaraabinFobjectDataBus *me) {
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
  if(!me->_init) {
 8007b6e:	7843      	ldrb	r3, [r0, #1]
 8007b70:	b933      	cbnz	r3, 8007b80 <fFaraabinFobjectDataBus_StartTimer+0x1c>
}
 8007b72:	bd10      	pop	{r4, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007b74:	4a0b      	ldr	r2, [pc, #44]	@ (8007ba4 <fFaraabinFobjectDataBus_StartTimer+0x40>)
 8007b76:	7953      	ldrb	r3, [r2, #5]
 8007b78:	f043 0308 	orr.w	r3, r3, #8
 8007b7c:	7153      	strb	r3, [r2, #5]
		return;
 8007b7e:	4770      	bx	lr
  me->QueueItemCount = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  me->_queueFrontIndex = 0U;
 8007b86:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  me->_queueRearIndex = 0U;
 8007b8a:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
	fChrono_StartTimeoutMs(&me->_chronoTrigWindow, me->TimerWindowMs);
 8007b8e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007b90:	3038      	adds	r0, #56	@ 0x38
 8007b92:	f7fe fe6f 	bl	8006874 <fChrono_StartTimeoutMs>
  me->CurrentState = eDATABUS_STATE_TIMER;
 8007b96:	2302      	movs	r3, #2
 8007b98:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8007b9c:	e7e9      	b.n	8007b72 <fFaraabinFobjectDataBus_StartTimer+0xe>
 8007b9e:	bf00      	nop
 8007ba0:	20002664 	.word	0x20002664
 8007ba4:	2000279c 	.word	0x2000279c

08007ba8 <fFaraabinFobjectDataBus_StartTrigger>:
void fFaraabinFobjectDataBus_StartTrigger(sFaraabinFobjectDataBus *me) {
 8007ba8:	b538      	push	{r3, r4, r5, lr}
	if(!FaraabinInit___) {
 8007baa:	4b0e      	ldr	r3, [pc, #56]	@ (8007be4 <fFaraabinFobjectDataBus_StartTrigger+0x3c>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b19b      	cbz	r3, 8007bd8 <fFaraabinFobjectDataBus_StartTrigger+0x30>
 8007bb0:	4604      	mov	r4, r0
  if(!me->_init) {
 8007bb2:	7843      	ldrb	r3, [r0, #1]
 8007bb4:	b1ab      	cbz	r3, 8007be2 <fFaraabinFobjectDataBus_StartTrigger+0x3a>
  me->_isTriggered = false;
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	f880 506d 	strb.w	r5, [r0, #109]	@ 0x6d
  me->IsCaptureEnd = false;
 8007bbc:	f880 5088 	strb.w	r5, [r0, #136]	@ 0x88
  fFaraabinFobjectDataBus_ResetTrigger(me);
 8007bc0:	f7ff fef4 	bl	80079ac <fFaraabinFobjectDataBus_ResetTrigger>
  me->QueueItemCount = 0U;
 8007bc4:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
  me->_queueFrontIndex = 0U;
 8007bc8:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
  me->_queueRearIndex = 0U;
 8007bcc:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
  me->CurrentState = eDATABUS_STATE_TRIG_WAIT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8007bd6:	e004      	b.n	8007be2 <fFaraabinFobjectDataBus_StartTrigger+0x3a>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007bd8:	4a03      	ldr	r2, [pc, #12]	@ (8007be8 <fFaraabinFobjectDataBus_StartTrigger+0x40>)
 8007bda:	7953      	ldrb	r3, [r2, #5]
 8007bdc:	f043 0308 	orr.w	r3, r3, #8
 8007be0:	7153      	strb	r3, [r2, #5]
}
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20002664 	.word	0x20002664
 8007be8:	2000279c 	.word	0x2000279c

08007bec <fFaraabinFobjectDataBus_ForceManualTrigger>:
	if(!FaraabinInit___) {
 8007bec:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <fFaraabinFobjectDataBus_ForceManualTrigger+0x38>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b143      	cbz	r3, 8007c04 <fFaraabinFobjectDataBus_ForceManualTrigger+0x18>
void fFaraabinFobjectDataBus_ForceManualTrigger(sFaraabinFobjectDataBus *me) {
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
  if(!me->_init) {
 8007bf6:	7843      	ldrb	r3, [r0, #1]
 8007bf8:	b11b      	cbz	r3, 8007c02 <fFaraabinFobjectDataBus_ForceManualTrigger+0x16>
  if(me->CurrentState == eDATABUS_STATE_TRIG_WAIT) {
 8007bfa:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d006      	beq.n	8007c10 <fFaraabinFobjectDataBus_ForceManualTrigger+0x24>
}
 8007c02:	bd10      	pop	{r4, pc}
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007c04:	4a08      	ldr	r2, [pc, #32]	@ (8007c28 <fFaraabinFobjectDataBus_ForceManualTrigger+0x3c>)
 8007c06:	7953      	ldrb	r3, [r2, #5]
 8007c08:	f043 0308 	orr.w	r3, r3, #8
 8007c0c:	7153      	strb	r3, [r2, #5]
		return;
 8007c0e:	4770      	bx	lr
    me->_trigTimeStamp = fChrono_GetTick();
 8007c10:	f7fe fd30 	bl	8006674 <fChrono_GetTick>
 8007c14:	6620      	str	r0, [r4, #96]	@ 0x60
    me->LastTrigSource = eDATABUS_TRIG_SOURCE_MANUAL;
 8007c16:	2302      	movs	r3, #2
 8007c18:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
    me->_isTriggered = true;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8007c22:	e7ee      	b.n	8007c02 <fFaraabinFobjectDataBus_ForceManualTrigger+0x16>
 8007c24:	20002664 	.word	0x20002664
 8007c28:	2000279c 	.word	0x2000279c

08007c2c <fFaraabinFobjectDataBus_Stop>:
	if(!FaraabinInit___) {
 8007c2c:	4b07      	ldr	r3, [pc, #28]	@ (8007c4c <fFaraabinFobjectDataBus_Stop+0x20>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	b12b      	cbz	r3, 8007c3e <fFaraabinFobjectDataBus_Stop+0x12>
  if(!me->_init) {
 8007c32:	7843      	ldrb	r3, [r0, #1]
 8007c34:	b113      	cbz	r3, 8007c3c <fFaraabinFobjectDataBus_Stop+0x10>
  me->CurrentState = eDATABUS_STATE_OFF;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
}
 8007c3c:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007c3e:	4a04      	ldr	r2, [pc, #16]	@ (8007c50 <fFaraabinFobjectDataBus_Stop+0x24>)
 8007c40:	7953      	ldrb	r3, [r2, #5]
 8007c42:	f043 0308 	orr.w	r3, r3, #8
 8007c46:	7153      	strb	r3, [r2, #5]
		return;
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20002664 	.word	0x20002664
 8007c50:	2000279c 	.word	0x2000279c

08007c54 <fFaraabinFobjectDataBus_AttachVariableToChannel>:
  uint8_t fobjectType) {
 8007c54:	b410      	push	{r4}
	if(!FaraabinInit___) {
 8007c56:	4c1c      	ldr	r4, [pc, #112]	@ (8007cc8 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x74>)
 8007c58:	7824      	ldrb	r4, [r4, #0]
 8007c5a:	b33c      	cbz	r4, 8007cac <fFaraabinFobjectDataBus_AttachVariableToChannel+0x58>
  if(!me->_init) {
 8007c5c:	7844      	ldrb	r4, [r0, #1]
 8007c5e:	b36c      	cbz	r4, 8007cbc <fFaraabinFobjectDataBus_AttachVariableToChannel+0x68>
  if(channel >= me->ChannelQty) {
 8007c60:	8a44      	ldrh	r4, [r0, #18]
 8007c62:	428c      	cmp	r4, r1
 8007c64:	d92c      	bls.n	8007cc0 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x6c>
  if(varPtr == 0U) {
 8007c66:	b36a      	cbz	r2, 8007cc4 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x70>
  me->_pBufferChannels[channel].ItemFobjectType = fobjectType;
 8007c68:	0109      	lsls	r1, r1, #4
 8007c6a:	6944      	ldr	r4, [r0, #20]
 8007c6c:	f89d c00c 	ldrb.w	ip, [sp, #12]
 8007c70:	f804 c001 	strb.w	ip, [r4, r1]
  me->_pBufferChannels[channel].ItemFobjectPtr = varPtr;
 8007c74:	6944      	ldr	r4, [r0, #20]
 8007c76:	440c      	add	r4, r1
 8007c78:	6062      	str	r2, [r4, #4]
  me->_pBufferChannels[channel].ItemFobjectParam = varSize;
 8007c7a:	6942      	ldr	r2, [r0, #20]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	8113      	strh	r3, [r2, #8]
  me->_pBufferChannels[channel].VariableDataType = varTypeArchitecture;
 8007c80:	6943      	ldr	r3, [r0, #20]
 8007c82:	440b      	add	r3, r1
 8007c84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007c88:	729a      	strb	r2, [r3, #10]
  me->_pBufferChannels[channel].PrimitiveVariableId = varPrimitiveId;
 8007c8a:	6943      	ldr	r3, [r0, #20]
 8007c8c:	440b      	add	r3, r1
 8007c8e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8007c92:	72da      	strb	r2, [r3, #11]
  me->_pBufferChannels[channel].Enable = true;
 8007c94:	6943      	ldr	r3, [r0, #20]
 8007c96:	440b      	add	r3, r1
 8007c98:	2201      	movs	r2, #1
 8007c9a:	731a      	strb	r2, [r3, #12]
  me->AttachedItemsQty++;
 8007c9c:	8b43      	ldrh	r3, [r0, #26]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	8343      	strh	r3, [r0, #26]
  me->AvailableItemsQty++;
 8007ca2:	8b83      	ldrh	r3, [r0, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	8383      	strh	r3, [r0, #28]
  return FARAABIN_DB_OK;
 8007ca8:	2000      	movs	r0, #0
 8007caa:	e005      	b.n	8007cb8 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007cac:	4a07      	ldr	r2, [pc, #28]	@ (8007ccc <fFaraabinFobjectDataBus_AttachVariableToChannel+0x78>)
 8007cae:	7953      	ldrb	r3, [r2, #5]
 8007cb0:	f043 0308 	orr.w	r3, r3, #8
 8007cb4:	7153      	strb	r3, [r2, #5]
		return 1;
 8007cb6:	2001      	movs	r0, #1
}
 8007cb8:	bc10      	pop	{r4}
 8007cba:	4770      	bx	lr
    return FARAABIN_DB_NOT_INIT;
 8007cbc:	2005      	movs	r0, #5
 8007cbe:	e7fb      	b.n	8007cb8 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	e7f9      	b.n	8007cb8 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
    return FARAABIN_DB_ACTION_WITH_NULL_REFERENCE;
 8007cc4:	2003      	movs	r0, #3
 8007cc6:	e7f7      	b.n	8007cb8 <fFaraabinFobjectDataBus_AttachVariableToChannel+0x64>
 8007cc8:	20002664 	.word	0x20002664
 8007ccc:	2000279c 	.word	0x2000279c

08007cd0 <fFaraabinFobjectDataBus_AttachVariable>:
uint8_t fFaraabinFobjectDataBus_AttachVariable(sFaraabinFobjectDataBus *me, uint32_t varPtr, uint16_t varSize, uint8_t varTypeArchitecture, uint8_t varPrimitiveId, uint8_t fobjectType) {
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	b084      	sub	sp, #16
	if(!FaraabinInit___) {
 8007cd4:	4c16      	ldr	r4, [pc, #88]	@ (8007d30 <fFaraabinFobjectDataBus_AttachVariable+0x60>)
 8007cd6:	7824      	ldrb	r4, [r4, #0]
 8007cd8:	b17c      	cbz	r4, 8007cfa <fFaraabinFobjectDataBus_AttachVariable+0x2a>
  if(!me->_init) {
 8007cda:	7844      	ldrb	r4, [r0, #1]
 8007cdc:	b31c      	cbz	r4, 8007d26 <fFaraabinFobjectDataBus_AttachVariable+0x56>
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8007cde:	8a45      	ldrh	r5, [r0, #18]
 8007ce0:	b31d      	cbz	r5, 8007d2a <fFaraabinFobjectDataBus_AttachVariable+0x5a>
 8007ce2:	6944      	ldr	r4, [r0, #20]
    if(me->_pBufferChannels[i].ItemFobjectPtr == 0U) {
 8007ce4:	f04f 0c00 	mov.w	ip, #0
 8007ce8:	6866      	ldr	r6, [r4, #4]
 8007cea:	b176      	cbz	r6, 8007d0a <fFaraabinFobjectDataBus_AttachVariable+0x3a>
  for(uint16_t i = 0U; i < me->ChannelQty; i++) {
 8007cec:	f10c 0c01 	add.w	ip, ip, #1
 8007cf0:	3410      	adds	r4, #16
 8007cf2:	45ac      	cmp	ip, r5
 8007cf4:	d1f8      	bne.n	8007ce8 <fFaraabinFobjectDataBus_AttachVariable+0x18>
  return FARAABIN_DB_IS_FULL;
 8007cf6:	2002      	movs	r0, #2
 8007cf8:	e005      	b.n	8007d06 <fFaraabinFobjectDataBus_AttachVariable+0x36>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8007d34 <fFaraabinFobjectDataBus_AttachVariable+0x64>)
 8007cfc:	7953      	ldrb	r3, [r2, #5]
 8007cfe:	f043 0308 	orr.w	r3, r3, #8
 8007d02:	7153      	strb	r3, [r2, #5]
		return 1;
 8007d04:	2001      	movs	r0, #1
}
 8007d06:	b004      	add	sp, #16
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
      return fFaraabinFobjectDataBus_AttachVariableToChannel(me, i, varPtr, varSize, varTypeArchitecture, varPrimitiveId, fobjectType);
 8007d0a:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 8007d0e:	9402      	str	r4, [sp, #8]
 8007d10:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8007d14:	9401      	str	r4, [sp, #4]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	fa1f f18c 	uxth.w	r1, ip
 8007d20:	f7ff ff98 	bl	8007c54 <fFaraabinFobjectDataBus_AttachVariableToChannel>
 8007d24:	e7ef      	b.n	8007d06 <fFaraabinFobjectDataBus_AttachVariable+0x36>
    return FARAABIN_DB_NOT_INIT;
 8007d26:	2005      	movs	r0, #5
 8007d28:	e7ed      	b.n	8007d06 <fFaraabinFobjectDataBus_AttachVariable+0x36>
  return FARAABIN_DB_IS_FULL;
 8007d2a:	2002      	movs	r0, #2
 8007d2c:	e7eb      	b.n	8007d06 <fFaraabinFobjectDataBus_AttachVariable+0x36>
 8007d2e:	bf00      	nop
 8007d30:	20002664 	.word	0x20002664
 8007d34:	2000279c 	.word	0x2000279c

08007d38 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel>:
	if(!FaraabinInit___) {
 8007d38:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel+0x18>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b10b      	cbz	r3, 8007d42 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel+0xa>
	return FARAABIN_DB_NOT_INIT;
 8007d3e:	2005      	movs	r0, #5
}
 8007d40:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007d42:	4a04      	ldr	r2, [pc, #16]	@ (8007d54 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel+0x1c>)
 8007d44:	7953      	ldrb	r3, [r2, #5]
 8007d46:	f043 0308 	orr.w	r3, r3, #8
 8007d4a:	7153      	strb	r3, [r2, #5]
		return 1;
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	4770      	bx	lr
 8007d50:	20002664 	.word	0x20002664
 8007d54:	2000279c 	.word	0x2000279c

08007d58 <fFaraabinFobjectDataBus_DetachFromChannel>:
	if(!FaraabinInit___) {
 8007d58:	4b15      	ldr	r3, [pc, #84]	@ (8007db0 <fFaraabinFobjectDataBus_DetachFromChannel+0x58>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b1eb      	cbz	r3, 8007d9a <fFaraabinFobjectDataBus_DetachFromChannel+0x42>
  if(!me->_init) {
 8007d5e:	7843      	ldrb	r3, [r0, #1]
 8007d60:	b313      	cbz	r3, 8007da8 <fFaraabinFobjectDataBus_DetachFromChannel+0x50>
  if(channel >= me->ChannelQty) {
 8007d62:	8a43      	ldrh	r3, [r0, #18]
 8007d64:	428b      	cmp	r3, r1
 8007d66:	d921      	bls.n	8007dac <fFaraabinFobjectDataBus_DetachFromChannel+0x54>
  me->_pBufferChannels[channel].ItemFobjectParam = 0U;
 8007d68:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8007d6c:	6943      	ldr	r3, [r0, #20]
 8007d6e:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8007d72:	2300      	movs	r3, #0
 8007d74:	8113      	strh	r3, [r2, #8]
  me->_pBufferChannels[channel].ItemFobjectPtr = 0U;
 8007d76:	6942      	ldr	r2, [r0, #20]
 8007d78:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d7c:	6053      	str	r3, [r2, #4]
  me->_pBufferChannels[channel].ItemFobjectType = 0U;
 8007d7e:	6942      	ldr	r2, [r0, #20]
 8007d80:	f802 300c 	strb.w	r3, [r2, ip]
  me->_pBufferChannels[channel].Enable = false;
 8007d84:	6942      	ldr	r2, [r0, #20]
 8007d86:	4462      	add	r2, ip
 8007d88:	7313      	strb	r3, [r2, #12]
  me->AttachedItemsQty--;
 8007d8a:	8b42      	ldrh	r2, [r0, #26]
 8007d8c:	3a01      	subs	r2, #1
 8007d8e:	8342      	strh	r2, [r0, #26]
  me->AvailableItemsQty--;
 8007d90:	8b82      	ldrh	r2, [r0, #28]
 8007d92:	3a01      	subs	r2, #1
 8007d94:	8382      	strh	r2, [r0, #28]
  return FARAABIN_DB_OK;
 8007d96:	4618      	mov	r0, r3
 8007d98:	4770      	bx	lr
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007d9a:	4a06      	ldr	r2, [pc, #24]	@ (8007db4 <fFaraabinFobjectDataBus_DetachFromChannel+0x5c>)
 8007d9c:	7953      	ldrb	r3, [r2, #5]
 8007d9e:	f043 0308 	orr.w	r3, r3, #8
 8007da2:	7153      	strb	r3, [r2, #5]
		return 1;
 8007da4:	2001      	movs	r0, #1
 8007da6:	4770      	bx	lr
    return FARAABIN_DB_NOT_INIT;
 8007da8:	2005      	movs	r0, #5
 8007daa:	4770      	bx	lr
    return FARAABIN_DB_CHANNEL_INDEX_GREATER_THAN_MAX;
 8007dac:	2001      	movs	r0, #1
}
 8007dae:	4770      	bx	lr
 8007db0:	20002664 	.word	0x20002664
 8007db4:	2000279c 	.word	0x2000279c

08007db8 <fFaraabinFobjectDataBus_DetachAllChannels>:
uint8_t fFaraabinFobjectDataBus_DetachAllChannels(sFaraabinFobjectDataBus *me) {
 8007db8:	b538      	push	{r3, r4, r5, lr}
	if(!FaraabinInit___) {
 8007dba:	4b11      	ldr	r3, [pc, #68]	@ (8007e00 <fFaraabinFobjectDataBus_DetachAllChannels+0x48>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b1a3      	cbz	r3, 8007dea <fFaraabinFobjectDataBus_DetachAllChannels+0x32>
 8007dc0:	4605      	mov	r5, r0
  if(!me->_init) {
 8007dc2:	7843      	ldrb	r3, [r0, #1]
 8007dc4:	b1cb      	cbz	r3, 8007dfa <fFaraabinFobjectDataBus_DetachAllChannels+0x42>
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8007dc6:	8a43      	ldrh	r3, [r0, #18]
 8007dc8:	b15b      	cbz	r3, 8007de2 <fFaraabinFobjectDataBus_DetachAllChannels+0x2a>
 8007dca:	2400      	movs	r4, #0
    result = fFaraabinFobjectDataBus_DetachFromChannel(me, i);
 8007dcc:	b2a1      	uxth	r1, r4
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f7ff ffc2 	bl	8007d58 <fFaraabinFobjectDataBus_DetachFromChannel>
    if(result != FARAABIN_DB_OK) {
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	b970      	cbnz	r0, 8007df6 <fFaraabinFobjectDataBus_DetachAllChannels+0x3e>
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8007dd8:	3401      	adds	r4, #1
 8007dda:	8a6a      	ldrh	r2, [r5, #18]
 8007ddc:	b2a3      	uxth	r3, r4
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d8f4      	bhi.n	8007dcc <fFaraabinFobjectDataBus_DetachAllChannels+0x14>
  me->AttachedItemsQty = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	836b      	strh	r3, [r5, #26]
  me->AvailableItemsQty = 0U;
 8007de6:	83ab      	strh	r3, [r5, #28]
  return FARAABIN_DB_OK;
 8007de8:	e005      	b.n	8007df6 <fFaraabinFobjectDataBus_DetachAllChannels+0x3e>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007dea:	4a06      	ldr	r2, [pc, #24]	@ (8007e04 <fFaraabinFobjectDataBus_DetachAllChannels+0x4c>)
 8007dec:	7953      	ldrb	r3, [r2, #5]
 8007dee:	f043 0308 	orr.w	r3, r3, #8
 8007df2:	7153      	strb	r3, [r2, #5]
		return 1;
 8007df4:	2301      	movs	r3, #1
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
    return FARAABIN_DB_NOT_INIT;
 8007dfa:	2305      	movs	r3, #5
 8007dfc:	e7fb      	b.n	8007df6 <fFaraabinFobjectDataBus_DetachAllChannels+0x3e>
 8007dfe:	bf00      	nop
 8007e00:	20002664 	.word	0x20002664
 8007e04:	2000279c 	.word	0x2000279c

08007e08 <fFaraabinFobjectEventGroup_Init>:
 * @param me Pointer to the event group fobject.
 * @return InitResult '1' if fails, '0' if successful.
 */
uint8_t fFaraabinFobjectEventGroup_Init(sFaraabinFobjectEventGroup *me) {
	
	if(!FaraabinInit___) {
 8007e08:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <fFaraabinFobjectEventGroup_Init+0x30>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b933      	cbnz	r3, 8007e1c <fFaraabinFobjectEventGroup_Init+0x14>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8007e3c <fFaraabinFobjectEventGroup_Init+0x34>)
 8007e10:	7953      	ldrb	r3, [r2, #5]
 8007e12:	f043 0308 	orr.w	r3, r3, #8
 8007e16:	7153      	strb	r3, [r2, #5]
		return 1;
 8007e18:	2001      	movs	r0, #1
	me->_type = (uint8_t)eFO_TYPE_EVENT_GROUP;
	
	me->Enable = true;
  me->_init = true;
  return 0;
}
 8007e1a:	4770      	bx	lr
uint8_t fFaraabinFobjectEventGroup_Init(sFaraabinFobjectEventGroup *me) {
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8007e20:	f7fe fee0 	bl	8006be4 <fFaraabinDatabase_AddDict>
 8007e24:	b928      	cbnz	r0, 8007e32 <fFaraabinFobjectEventGroup_Init+0x2a>
	me->_type = (uint8_t)eFO_TYPE_EVENT_GROUP;
 8007e26:	2304      	movs	r3, #4
 8007e28:	7023      	strb	r3, [r4, #0]
	me->Enable = true;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	70a3      	strb	r3, [r4, #2]
  me->_init = true;
 8007e2e:	7063      	strb	r3, [r4, #1]
}
 8007e30:	bd10      	pop	{r4, pc}
    return 1;
 8007e32:	2001      	movs	r0, #1
 8007e34:	e7fc      	b.n	8007e30 <fFaraabinFobjectEventGroup_Init+0x28>
 8007e36:	bf00      	nop
 8007e38:	20002664 	.word	0x20002664
 8007e3c:	2000279c 	.word	0x2000279c

08007e40 <fFaraabinFobjectFunctionGroupType_Init>:
 * @param me Pointer to the function group.
 * @return InitStat Returns '0' if successful, '1' if failed. 
 */
uint8_t fFaraabinFobjectFunctionGroupType_Init(sFaraabinFobjectFunctionGroupType *me) {
	
	if(!FaraabinInit___) {
 8007e40:	4b0a      	ldr	r3, [pc, #40]	@ (8007e6c <fFaraabinFobjectFunctionGroupType_Init+0x2c>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b933      	cbnz	r3, 8007e54 <fFaraabinFobjectFunctionGroupType_Init+0x14>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8007e46:	4a0a      	ldr	r2, [pc, #40]	@ (8007e70 <fFaraabinFobjectFunctionGroupType_Init+0x30>)
 8007e48:	7953      	ldrb	r3, [r2, #5]
 8007e4a:	f043 0308 	orr.w	r3, r3, #8
 8007e4e:	7153      	strb	r3, [r2, #5]
		return 1;
 8007e50:	2001      	movs	r0, #1
  
	me->_type = (uint8_t)eFO_TYPE_FUNCTION_GROUP_TYPE;
	
  me->_init = true;
  return 0;
}
 8007e52:	4770      	bx	lr
uint8_t fFaraabinFobjectFunctionGroupType_Init(sFaraabinFobjectFunctionGroupType *me) {
 8007e54:	b510      	push	{r4, lr}
 8007e56:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8007e58:	f7fe fec4 	bl	8006be4 <fFaraabinDatabase_AddDict>
 8007e5c:	b920      	cbnz	r0, 8007e68 <fFaraabinFobjectFunctionGroupType_Init+0x28>
	me->_type = (uint8_t)eFO_TYPE_FUNCTION_GROUP_TYPE;
 8007e5e:	2307      	movs	r3, #7
 8007e60:	7023      	strb	r3, [r4, #0]
  me->_init = true;
 8007e62:	2301      	movs	r3, #1
 8007e64:	7063      	strb	r3, [r4, #1]
}
 8007e66:	bd10      	pop	{r4, pc}
    return 1;
 8007e68:	2001      	movs	r0, #1
 8007e6a:	e7fc      	b.n	8007e66 <fFaraabinFobjectFunctionGroupType_Init+0x26>
 8007e6c:	20002664 	.word	0x20002664
 8007e70:	2000279c 	.word	0x2000279c

08007e74 <fFaraabinFobjectMcu_Init>:
/**
 * @brief Initializes MCU Fobject.
 * 
 * @return result Returns '0' if success
 */
uint8_t fFaraabinFobjectMcu_Init(void) {
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
	FaraabinInit___ = true;
 8007e76:	4b15      	ldr	r3, [pc, #84]	@ (8007ecc <fFaraabinFobjectMcu_Init+0x58>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	701a      	strb	r2, [r3, #0]
  if(fFaraabinDatabase_AddDict((uint32_t)&faraabin_mcu__) != 0U) {
 8007e7c:	4814      	ldr	r0, [pc, #80]	@ (8007ed0 <fFaraabinFobjectMcu_Init+0x5c>)
 8007e7e:	f7fe feb1 	bl	8006be4 <fFaraabinDatabase_AddDict>
 8007e82:	b110      	cbz	r0, 8007e8a <fFaraabinFobjectMcu_Init+0x16>
    return 1;
 8007e84:	2601      	movs	r6, #1
	faraabin_mcu__.BootTimeMs = 0;
	faraabin_mcu__.BootTimeFirstFlag = TRUE;
	
  faraabin_mcu__._init = TRUE;
  return 0;
}
 8007e86:	4630      	mov	r0, r6
 8007e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8a:	4606      	mov	r6, r0
	FaraabinInit___ = false;
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007ecc <fFaraabinFobjectMcu_Init+0x58>)
 8007e90:	701d      	strb	r5, [r3, #0]
	faraabin_mcu__._type = (uint8_t)eFO_TYPE_MCU;
 8007e92:	4c0f      	ldr	r4, [pc, #60]	@ (8007ed0 <fFaraabinFobjectMcu_Init+0x5c>)
 8007e94:	7025      	strb	r5, [r4, #0]
  faraabin_mcu__._init = FALSE;
 8007e96:	7065      	strb	r5, [r4, #1]
	faraabin_mcu__.Enable = TRUE;
 8007e98:	2701      	movs	r7, #1
 8007e9a:	70a7      	strb	r7, [r4, #2]
	faraabin_mcu__.Path = "System";
 8007e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed4 <fFaraabinFobjectMcu_Init+0x60>)
 8007e9e:	60a3      	str	r3, [r4, #8]
  faraabin_mcu__.Seq = 0U;
 8007ea0:	7425      	strb	r5, [r4, #16]
	faraabin_mcu__._isHostConnected = FALSE;
 8007ea2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
  fChrono_StartTimeoutMs(&(faraabin_mcu__.ChronoLiveTimeout), FB_LIVE_TIMEOUT_MS);
 8007ea6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007eaa:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8007eae:	f7fe fce1 	bl	8006874 <fChrono_StartTimeoutMs>
  faraabin_mcu__.StatisticsRxFramesCnt = 0U;
 8007eb2:	61a5      	str	r5, [r4, #24]
  faraabin_mcu__.StatisticsRxBytesCnt = 0U;
 8007eb4:	61e5      	str	r5, [r4, #28]
  faraabin_mcu__.StatisticsRxFramesEscapingErrorCnt = 0U;
 8007eb6:	6225      	str	r5, [r4, #32]
  faraabin_mcu__.StatisticsRxFramesChecksumErrorCnt = 0U;
 8007eb8:	6265      	str	r5, [r4, #36]	@ 0x24
  faraabin_mcu__.StatisticsRxFramesOverrideErrorCnt = 0U;
 8007eba:	62a5      	str	r5, [r4, #40]	@ 0x28
  faraabin_mcu__.StatisticsRxFramesMinimumSizeErrorCnt = 0U;
 8007ebc:	62e5      	str	r5, [r4, #44]	@ 0x2c
  faraabin_mcu__.StatisticsTxFramesCnt = 0U;
 8007ebe:	6325      	str	r5, [r4, #48]	@ 0x30
  faraabin_mcu__.StatisticsTxBytesCnt = 0U;
 8007ec0:	6365      	str	r5, [r4, #52]	@ 0x34
	faraabin_mcu__.BootTimeMs = 0;
 8007ec2:	6565      	str	r5, [r4, #84]	@ 0x54
	faraabin_mcu__.BootTimeFirstFlag = TRUE;
 8007ec4:	f884 7058 	strb.w	r7, [r4, #88]	@ 0x58
  faraabin_mcu__._init = TRUE;
 8007ec8:	7067      	strb	r7, [r4, #1]
  return 0;
 8007eca:	e7dc      	b.n	8007e86 <fFaraabinFobjectMcu_Init+0x12>
 8007ecc:	20002664 	.word	0x20002664
 8007ed0:	2000294c 	.word	0x2000294c
 8007ed4:	0800be98 	.word	0x0800be98

08007ed8 <fFaraabinFobjectMcu_Run>:

/**
 * @brief Runs all statistics in Faraabin related to the MCU Fobject.
 * 
 */
void fFaraabinFobjectMcu_Run(void) {
 8007ed8:	b538      	push	{r3, r4, r5, lr}

  if(!faraabin_mcu__._init) {
 8007eda:	4b15      	ldr	r3, [pc, #84]	@ (8007f30 <fFaraabinFobjectMcu_Run+0x58>)
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	b17b      	cbz	r3, 8007f00 <fFaraabinFobjectMcu_Run+0x28>
    return;
  }
	
	if(faraabin_mcu__.BootTimeFirstFlag) {
 8007ee0:	4b13      	ldr	r3, [pc, #76]	@ (8007f30 <fFaraabinFobjectMcu_Run+0x58>)
 8007ee2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007ee6:	b963      	cbnz	r3, 8007f02 <fFaraabinFobjectMcu_Run+0x2a>
		faraabin_mcu__.BootTimeFirstFlag = false;
		
		faraabin_mcu__.BootTimeMs = fChrono_TimeSpanMs(fChrono_GetTickInitValue(), fChrono_GetTick());
	}
	
	FaraabinFlags.Status.Bitfield.ProfilerSend = faraabin_mcu__.IsSendingCpuProfiler;
 8007ee8:	4b12      	ldr	r3, [pc, #72]	@ (8007f34 <fFaraabinFobjectMcu_Run+0x5c>)
 8007eea:	4811      	ldr	r0, [pc, #68]	@ (8007f30 <fFaraabinFobjectMcu_Run+0x58>)
 8007eec:	791a      	ldrb	r2, [r3, #4]
 8007eee:	f890 1050 	ldrb.w	r1, [r0, #80]	@ 0x50
 8007ef2:	f361 1286 	bfi	r2, r1, #6, #1
 8007ef6:	711a      	strb	r2, [r3, #4]
	
	if(fChrono_IsTimeout(&(faraabin_mcu__.ChronoLiveTimeout)) == true) {
 8007ef8:	3038      	adds	r0, #56	@ 0x38
 8007efa:	f7fe fcdf 	bl	80068bc <fChrono_IsTimeout>
 8007efe:	b978      	cbnz	r0, 8007f20 <fFaraabinFobjectMcu_Run+0x48>
    
    fChrono_Start(&(faraabin_mcu__.ChronoLiveTimeout));
    
    faraabin_mcu__._isHostConnected = false;
  }
}
 8007f00:	bd38      	pop	{r3, r4, r5, pc}
		faraabin_mcu__.BootTimeFirstFlag = false;
 8007f02:	4d0b      	ldr	r5, [pc, #44]	@ (8007f30 <fFaraabinFobjectMcu_Run+0x58>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	f885 3058 	strb.w	r3, [r5, #88]	@ 0x58
		faraabin_mcu__.BootTimeMs = fChrono_TimeSpanMs(fChrono_GetTickInitValue(), fChrono_GetTick());
 8007f0a:	f7fe fbc9 	bl	80066a0 <fChrono_GetTickInitValue>
 8007f0e:	4604      	mov	r4, r0
 8007f10:	f7fe fbb0 	bl	8006674 <fChrono_GetTick>
 8007f14:	4601      	mov	r1, r0
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7fe fbd6 	bl	80066c8 <fChrono_TimeSpanMs>
 8007f1c:	6568      	str	r0, [r5, #84]	@ 0x54
 8007f1e:	e7e3      	b.n	8007ee8 <fFaraabinFobjectMcu_Run+0x10>
    fChrono_Start(&(faraabin_mcu__.ChronoLiveTimeout));
 8007f20:	4c05      	ldr	r4, [pc, #20]	@ (8007f38 <fFaraabinFobjectMcu_Run+0x60>)
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7fe fbf8 	bl	8006718 <fChrono_Start>
    faraabin_mcu__._isHostConnected = false;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	7523      	strb	r3, [r4, #20]
 8007f2c:	e7e8      	b.n	8007f00 <fFaraabinFobjectMcu_Run+0x28>
 8007f2e:	bf00      	nop
 8007f30:	2000294c 	.word	0x2000294c
 8007f34:	2000279c 	.word	0x2000279c
 8007f38:	20002984 	.word	0x20002984

08007f3c <fFaraabinFobjectMcu_SendEventSystem>:
/**
 * @brief Sends system event to Faraabin.
 * 
 * @param eventId ID of the event.
 */
void fFaraabinFobjectMcu_SendEventSystem(uint16_t eventId) {
 8007f3c:	b500      	push	{lr}
 8007f3e:	b08b      	sub	sp, #44	@ 0x2c
	
	Faraabin_EventSystem_End_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, faraabin_mcu__.Enable, eventId);
 8007f40:	4a0b      	ldr	r2, [pc, #44]	@ (8007f70 <fFaraabinFobjectMcu_SendEventSystem+0x34>)
 8007f42:	2301      	movs	r3, #1
 8007f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f46:	2100      	movs	r1, #0
 8007f48:	9108      	str	r1, [sp, #32]
 8007f4a:	9107      	str	r1, [sp, #28]
 8007f4c:	9106      	str	r1, [sp, #24]
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	9104      	str	r1, [sp, #16]
 8007f52:	9103      	str	r1, [sp, #12]
 8007f54:	9002      	str	r0, [sp, #8]
 8007f56:	9101      	str	r1, [sp, #4]
 8007f58:	2302      	movs	r3, #2
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	7893      	ldrb	r3, [r2, #2]
 8007f5e:	3210      	adds	r2, #16
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	f002 fa04 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 8007f68:	b00b      	add	sp, #44	@ 0x2c
 8007f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f6e:	bf00      	nop
 8007f70:	2000294c 	.word	0x2000294c

08007f74 <fFaraabinFobjectMcu_SendEventSystemException>:
/**
 * @brief Sends system exception event to Faraabin.
 * 
 * @param eventId ID of the event.
 */
void fFaraabinFobjectMcu_SendEventSystemException(uint16_t eventId) {
 8007f74:	b500      	push	{lr}
 8007f76:	b08b      	sub	sp, #44	@ 0x2c
	
	Faraabin_EventSystemException_End_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, faraabin_mcu__.Enable, eventId);
 8007f78:	4a0b      	ldr	r2, [pc, #44]	@ (8007fa8 <fFaraabinFobjectMcu_SendEventSystemException+0x34>)
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f7e:	2100      	movs	r1, #0
 8007f80:	9108      	str	r1, [sp, #32]
 8007f82:	9107      	str	r1, [sp, #28]
 8007f84:	9106      	str	r1, [sp, #24]
 8007f86:	9105      	str	r1, [sp, #20]
 8007f88:	9104      	str	r1, [sp, #16]
 8007f8a:	9103      	str	r1, [sp, #12]
 8007f8c:	9002      	str	r0, [sp, #8]
 8007f8e:	9101      	str	r1, [sp, #4]
 8007f90:	2303      	movs	r3, #3
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	7893      	ldrb	r3, [r2, #2]
 8007f96:	3210      	adds	r2, #16
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	f002 f9e8 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 8007fa0:	b00b      	add	sp, #44	@ 0x2c
 8007fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fa6:	bf00      	nop
 8007fa8:	2000294c 	.word	0x2000294c

08007fac <fFaraabinFobjectMcu_SendEventSystemResponse>:
 * @brief Sends system event response.
 * 
 * @param eventId ID of the event.
 * @param reqSeq Request sequence.
 */
void fFaraabinFobjectMcu_SendEventSystemResponse(uint16_t eventId, uint8_t reqSeq) {
 8007fac:	b500      	push	{lr}
 8007fae:	b08b      	sub	sp, #44	@ 0x2c
 8007fb0:	460a      	mov	r2, r1
	
	Faraabin_EventSystem_EndResponse_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, true, eventId, reqSeq);
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	9108      	str	r1, [sp, #32]
 8007fba:	9107      	str	r1, [sp, #28]
 8007fbc:	9306      	str	r3, [sp, #24]
 8007fbe:	9205      	str	r2, [sp, #20]
 8007fc0:	9104      	str	r1, [sp, #16]
 8007fc2:	9103      	str	r1, [sp, #12]
 8007fc4:	9002      	str	r0, [sp, #8]
 8007fc6:	9101      	str	r1, [sp, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	9200      	str	r2, [sp, #0]
 8007fcc:	4a03      	ldr	r2, [pc, #12]	@ (8007fdc <fFaraabinFobjectMcu_SendEventSystemResponse+0x30>)
 8007fce:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd2:	f002 f9cd 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 8007fd6:	b00b      	add	sp, #44	@ 0x2c
 8007fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fdc:	2000295c 	.word	0x2000295c

08007fe0 <fFaraabinFobjectMcu_SendEventSystemExceptionResponse>:
 * @brief Sends system exception event response.
 * 
 * @param eventId 
 * @param reqSeq 
 */
void fFaraabinFobjectMcu_SendEventSystemExceptionResponse(uint16_t eventId, uint8_t reqSeq) {
 8007fe0:	b500      	push	{lr}
 8007fe2:	b08b      	sub	sp, #44	@ 0x2c
 8007fe4:	460a      	mov	r2, r1
	
	Faraabin_EventSystemException_EndResponse_((uint32_t)0xFFFFFFFFU, &faraabin_mcu__.Seq, true, eventId, reqSeq);
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fea:	2100      	movs	r1, #0
 8007fec:	9108      	str	r1, [sp, #32]
 8007fee:	9107      	str	r1, [sp, #28]
 8007ff0:	9306      	str	r3, [sp, #24]
 8007ff2:	9205      	str	r2, [sp, #20]
 8007ff4:	9104      	str	r1, [sp, #16]
 8007ff6:	9103      	str	r1, [sp, #12]
 8007ff8:	9002      	str	r0, [sp, #8]
 8007ffa:	9101      	str	r1, [sp, #4]
 8007ffc:	2203      	movs	r2, #3
 8007ffe:	9200      	str	r2, [sp, #0]
 8008000:	4a03      	ldr	r2, [pc, #12]	@ (8008010 <fFaraabinFobjectMcu_SendEventSystemExceptionResponse+0x30>)
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	f002 f9b3 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
		
}
 800800a:	b00b      	add	sp, #44	@ 0x2c
 800800c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008010:	2000295c 	.word	0x2000295c

08008014 <fFaraabinFobjectMcu_GetFobject>:
 * @return ptr Pointer to the MCU fobject.
 */
sFaraabinFobjectMcu* fFaraabinFobjectMcu_GetFobject(void) {
	
	return &faraabin_mcu__;
}
 8008014:	4800      	ldr	r0, [pc, #0]	@ (8008018 <fFaraabinFobjectMcu_GetFobject+0x4>)
 8008016:	4770      	bx	lr
 8008018:	2000294c 	.word	0x2000294c

0800801c <fFaraabinFobjectVarType_Init>:
 * @param me Pointer to the fobject.
 * @return InitStat Returns zero on success, 1 on failure.
 */
uint8_t fFaraabinFobjectVarType_Init(sFaraabinFobjectVarType *me) {
	
	if(!FaraabinInit___) {
 800801c:	4b0b      	ldr	r3, [pc, #44]	@ (800804c <fFaraabinFobjectVarType_Init+0x30>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b933      	cbnz	r3, 8008030 <fFaraabinFobjectVarType_Init+0x14>
		FaraabinFlags.Status.Bitfield.UninitializedFaraabin = 1;
 8008022:	4a0b      	ldr	r2, [pc, #44]	@ (8008050 <fFaraabinFobjectVarType_Init+0x34>)
 8008024:	7953      	ldrb	r3, [r2, #5]
 8008026:	f043 0308 	orr.w	r3, r3, #8
 800802a:	7153      	strb	r3, [r2, #5]
		return 1;
 800802c:	2001      	movs	r0, #1
  me->_type = (uint8_t)eFO_TYPE_VAR_TYPE;
	
  me->Enable = true;
  me->_init = true;
  return 0;
}
 800802e:	4770      	bx	lr
uint8_t fFaraabinFobjectVarType_Init(sFaraabinFobjectVarType *me) {
 8008030:	b510      	push	{r4, lr}
 8008032:	4604      	mov	r4, r0
  if(fFaraabinDatabase_AddDict((uint32_t)me) != 0U) {
 8008034:	f7fe fdd6 	bl	8006be4 <fFaraabinDatabase_AddDict>
 8008038:	b928      	cbnz	r0, 8008046 <fFaraabinFobjectVarType_Init+0x2a>
  me->_type = (uint8_t)eFO_TYPE_VAR_TYPE;
 800803a:	2303      	movs	r3, #3
 800803c:	7023      	strb	r3, [r4, #0]
  me->Enable = true;
 800803e:	2301      	movs	r3, #1
 8008040:	7463      	strb	r3, [r4, #17]
  me->_init = true;
 8008042:	7063      	strb	r3, [r4, #1]
}
 8008044:	bd10      	pop	{r4, pc}
    return 1;
 8008046:	2001      	movs	r0, #1
 8008048:	e7fc      	b.n	8008044 <fFaraabinFobjectVarType_Init+0x28>
 800804a:	bf00      	nop
 800804c:	20002664 	.word	0x20002664
 8008050:	2000279c 	.word	0x2000279c

08008054 <fFindFunction>:
 */
static sFaraabinFunctionEngine_Item* fFindFunction(uint32_t functionPtr, uint32_t objectPtr) {
  
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
    
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 8008054:	4b0f      	ldr	r3, [pc, #60]	@ (8008094 <fFindFunction+0x40>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4283      	cmp	r3, r0
 800805a:	d006      	beq.n	800806a <fFindFunction+0x16>
 800805c:	4b0d      	ldr	r3, [pc, #52]	@ (8008094 <fFindFunction+0x40>)
 800805e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008062:	4283      	cmp	r3, r0
 8008064:	d00d      	beq.n	8008082 <fFindFunction+0x2e>
      return &(FunctionsList[i]);
    }
  }
  
  return NULL;
 8008066:	2000      	movs	r0, #0
 8008068:	4770      	bx	lr
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 800806a:	4b0a      	ldr	r3, [pc, #40]	@ (8008094 <fFindFunction+0x40>)
 800806c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008070:	4299      	cmp	r1, r3
 8008072:	d1f3      	bne.n	800805c <fFindFunction+0x8>
 8008074:	2300      	movs	r3, #0
      return &(FunctionsList[i]);
 8008076:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800807a:	4806      	ldr	r0, [pc, #24]	@ (8008094 <fFindFunction+0x40>)
 800807c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8008080:	4770      	bx	lr
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 8008082:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <fFindFunction+0x40>)
 8008084:	f8d3 31e8 	ldr.w	r3, [r3, #488]	@ 0x1e8
 8008088:	428b      	cmp	r3, r1
 800808a:	bf08      	it	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	d0f2      	beq.n	8008076 <fFindFunction+0x22>
  return NULL;
 8008090:	2000      	movs	r0, #0
}
 8008092:	4770      	bx	lr
 8008094:	200029a8 	.word	0x200029a8

08008098 <fFaraabinFunctionEngine_Init>:
uint8_t fFaraabinFunctionEngine_Init(void) {
 8008098:	b570      	push	{r4, r5, r6, lr}
    FunctionsList[i].Function = NULL;
 800809a:	4d1c      	ldr	r5, [pc, #112]	@ (800810c <fFaraabinFunctionEngine_Init+0x74>)
 800809c:	2400      	movs	r4, #0
 800809e:	4628      	mov	r0, r5
 80080a0:	f840 4b04 	str.w	r4, [r0], #4
    if(memset(FunctionsList[i].Param, 0x00, sizeof(FunctionsList[i].Param)) == NULL) {
 80080a4:	26c8      	movs	r6, #200	@ 0xc8
 80080a6:	4632      	mov	r2, r6
 80080a8:	4621      	mov	r1, r4
 80080aa:	f002 fc7d 	bl	800a9a8 <memset>
    FunctionsList[i].IsFirstRun = false;
 80080ae:	f885 40cc 	strb.w	r4, [r5, #204]	@ 0xcc
    FunctionsList[i]._result = 0U;
 80080b2:	f885 40e4 	strb.w	r4, [r5, #228]	@ 0xe4
    FunctionsList[i].fpUserTerminalCallback = NULL;
 80080b6:	f8c5 40e8 	str.w	r4, [r5, #232]	@ 0xe8
    FunctionsList[i].Status = eFN_STATUS_STOP;
 80080ba:	f885 40ec 	strb.w	r4, [r5, #236]	@ 0xec
    FunctionsList[i].ObjectPtr = 0U;
 80080be:	f8c5 40f0 	str.w	r4, [r5, #240]	@ 0xf0
    FunctionsList[i].IsBusy = false;
 80080c2:	f885 40f4 	strb.w	r4, [r5, #244]	@ 0xf4
    FunctionsList[i].IsRunning = false;
 80080c6:	f885 40f5 	strb.w	r4, [r5, #245]	@ 0xf5
    fChrono_Stop(&FunctionsList[i]._chrono);
 80080ca:	f105 00d0 	add.w	r0, r5, #208	@ 0xd0
 80080ce:	f7fe fb6d 	bl	80067ac <fChrono_Stop>
    FunctionsList[i].Function = NULL;
 80080d2:	f8c5 40f8 	str.w	r4, [r5, #248]	@ 0xf8
    if(memset(FunctionsList[i].Param, 0x00, sizeof(FunctionsList[i].Param)) == NULL) {
 80080d6:	4632      	mov	r2, r6
 80080d8:	4621      	mov	r1, r4
 80080da:	f105 00fc 	add.w	r0, r5, #252	@ 0xfc
 80080de:	f002 fc63 	bl	800a9a8 <memset>
    FunctionsList[i].IsFirstRun = false;
 80080e2:	f885 41c4 	strb.w	r4, [r5, #452]	@ 0x1c4
    FunctionsList[i]._result = 0U;
 80080e6:	f885 41dc 	strb.w	r4, [r5, #476]	@ 0x1dc
    FunctionsList[i].fpUserTerminalCallback = NULL;
 80080ea:	f8c5 41e0 	str.w	r4, [r5, #480]	@ 0x1e0
    FunctionsList[i].Status = eFN_STATUS_STOP;
 80080ee:	f885 41e4 	strb.w	r4, [r5, #484]	@ 0x1e4
    FunctionsList[i].ObjectPtr = 0U;
 80080f2:	f8c5 41e8 	str.w	r4, [r5, #488]	@ 0x1e8
    FunctionsList[i].IsBusy = false;
 80080f6:	f885 41ec 	strb.w	r4, [r5, #492]	@ 0x1ec
    FunctionsList[i].IsRunning = false;
 80080fa:	f885 41ed 	strb.w	r4, [r5, #493]	@ 0x1ed
    fChrono_Stop(&FunctionsList[i]._chrono);
 80080fe:	f505 70e4 	add.w	r0, r5, #456	@ 0x1c8
 8008102:	f7fe fb53 	bl	80067ac <fChrono_Stop>
}
 8008106:	4620      	mov	r0, r4
 8008108:	bd70      	pop	{r4, r5, r6, pc}
 800810a:	bf00      	nop
 800810c:	200029a8 	.word	0x200029a8

08008110 <fFaraabinFunctionEngine_Run>:
void fFaraabinFunctionEngine_Run(void) {
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	b08c      	sub	sp, #48	@ 0x30
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 8008116:	4c2f      	ldr	r4, [pc, #188]	@ (80081d4 <fFaraabinFunctionEngine_Run+0xc4>)
 8008118:	f504 77f8 	add.w	r7, r4, #496	@ 0x1f0
 800811c:	e006      	b.n	800812c <fFaraabinFunctionEngine_Run+0x1c>
				fChrono_Start(&(item->_chrono));
 800811e:	4620      	mov	r0, r4
 8008120:	f7fe fafa 	bl	8006718 <fChrono_Start>
 8008124:	e010      	b.n	8008148 <fFaraabinFunctionEngine_Run+0x38>
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 8008126:	34f8      	adds	r4, #248	@ 0xf8
 8008128:	42bc      	cmp	r4, r7
 800812a:	d04f      	beq.n	80081cc <fFaraabinFunctionEngine_Run+0xbc>
    if(item->IsRunning == false) {
 800812c:	4625      	mov	r5, r4
 800812e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f7      	beq.n	8008126 <fFaraabinFunctionEngine_Run+0x16>
    if(item->Function->FunctionPtr != NULL) {
 8008136:	f854 3cd0 	ldr.w	r3, [r4, #-208]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f2      	beq.n	8008126 <fFaraabinFunctionEngine_Run+0x16>
			if(item->IsFirstRun) {
 8008140:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1ea      	bne.n	800811e <fFaraabinFunctionEngine_Run+0xe>
      uint8_t res = item->Function->FunctionPtr(item->ObjectPtr, (char*)item->Param, item->IsFirstRun);
 8008148:	f855 3cd0 	ldr.w	r3, [r5, #-208]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 8008152:	f1a4 01cc 	sub.w	r1, r4, #204	@ 0xcc
 8008156:	6a28      	ldr	r0, [r5, #32]
 8008158:	4798      	blx	r3
 800815a:	4606      	mov	r6, r0
      item->IsFirstRun = false;
 800815c:	2300      	movs	r3, #0
 800815e:	f805 3c04 	strb.w	r3, [r5, #-4]
      if(res != FUNCTION_CONTINUE) {
 8008162:	28ff      	cmp	r0, #255	@ 0xff
 8008164:	d0df      	beq.n	8008126 <fFaraabinFunctionEngine_Run+0x16>
        item->IsBusy = false;
 8008166:	4698      	mov	r8, r3
 8008168:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
        item->IsRunning = false;
 800816c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
				executeUs.U32 = fChrono_ElapsedUs(&(item->_chrono));
 8008170:	4628      	mov	r0, r5
 8008172:	f7fe fb5d 	bl	8006830 <fChrono_ElapsedUs>
				arg[0] = res;
 8008176:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
				arg[1] = executeUs.Byte[0];
 800817a:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
				arg[2] = executeUs.Byte[1];
 800817e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008182:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
				arg[3] = executeUs.Byte[2];
 8008186:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800818a:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
				arg[4] = executeUs.Byte[3];
 800818e:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8008192:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
        Faraabin_EventSystemExtended_ParamEnd_((uint32_t)item->Function, item->ObjectPtr, &(item->Function->Seq), true, eFN_EVENT_INFO_STOP, arg, sizeof(arg));
 8008196:	f855 0cd0 	ldr.w	r0, [r5, #-208]
 800819a:	2301      	movs	r3, #1
 800819c:	9309      	str	r3, [sp, #36]	@ 0x24
 800819e:	f8cd 8020 	str.w	r8, [sp, #32]
 80081a2:	f8cd 801c 	str.w	r8, [sp, #28]
 80081a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80081aa:	f8cd 8014 	str.w	r8, [sp, #20]
 80081ae:	2205      	movs	r2, #5
 80081b0:	9204      	str	r2, [sp, #16]
 80081b2:	aa0a      	add	r2, sp, #40	@ 0x28
 80081b4:	9203      	str	r2, [sp, #12]
 80081b6:	2202      	movs	r2, #2
 80081b8:	9202      	str	r2, [sp, #8]
 80081ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80081be:	9200      	str	r2, [sp, #0]
 80081c0:	f100 020c 	add.w	r2, r0, #12
 80081c4:	6a29      	ldr	r1, [r5, #32]
 80081c6:	f002 f8d3 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 80081ca:	e7ac      	b.n	8008126 <fFaraabinFunctionEngine_Run+0x16>
}
 80081cc:	b00c      	add	sp, #48	@ 0x30
 80081ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d2:	bf00      	nop
 80081d4:	20002a78 	.word	0x20002a78

080081d8 <fFaraabinFunctionEngine_Start>:
uint8_t fFaraabinFunctionEngine_Start(uint32_t functionPtr, uint32_t objectPtr, uint8_t* arg, uint16_t argSize) {
 80081d8:	b530      	push	{r4, r5, lr}
 */
static sFaraabinFunctionEngine_Item* fFindRunningFunction(uint32_t functionPtr, uint32_t objectPtr) {
  
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
    
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 80081da:	4c28      	ldr	r4, [pc, #160]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 80081dc:	6824      	ldr	r4, [r4, #0]
 80081de:	4284      	cmp	r4, r0
 80081e0:	d00f      	beq.n	8008202 <fFaraabinFunctionEngine_Start+0x2a>
 80081e2:	4c26      	ldr	r4, [pc, #152]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 80081e4:	f8d4 40f8 	ldr.w	r4, [r4, #248]	@ 0xf8
 80081e8:	4284      	cmp	r4, r0
 80081ea:	d016      	beq.n	800821a <fFaraabinFunctionEngine_Start+0x42>
 */
static uint8_t fFaraabinFn_GetFreeIndex(void) {
  
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
    
    if(FunctionsList[i].IsBusy == false) {
 80081ec:	4c23      	ldr	r4, [pc, #140]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 80081ee:	f894 40f4 	ldrb.w	r4, [r4, #244]	@ 0xf4
 80081f2:	b1f4      	cbz	r4, 8008232 <fFaraabinFunctionEngine_Start+0x5a>
 80081f4:	4c21      	ldr	r4, [pc, #132]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 80081f6:	f894 41ec 	ldrb.w	r4, [r4, #492]	@ 0x1ec
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 80081fa:	2501      	movs	r5, #1
    if(FunctionsList[i].IsBusy == false) {
 80081fc:	b1d4      	cbz	r4, 8008234 <fFaraabinFunctionEngine_Start+0x5c>
    return FB_FENGINE_MAX_CONCURRENT_LIMIT_REACHED;
 80081fe:	2002      	movs	r0, #2
}
 8008200:	bd30      	pop	{r4, r5, pc}
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 8008202:	4c1e      	ldr	r4, [pc, #120]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 8008204:	f8d4 40f0 	ldr.w	r4, [r4, #240]	@ 0xf0
 8008208:	42a1      	cmp	r1, r4
 800820a:	d1ea      	bne.n	80081e2 <fFaraabinFunctionEngine_Start+0xa>
      if(FunctionsList[i].IsRunning) {
 800820c:	4c1b      	ldr	r4, [pc, #108]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 800820e:	f894 40f5 	ldrb.w	r4, [r4, #245]	@ 0xf5
 8008212:	2c00      	cmp	r4, #0
 8008214:	d0e5      	beq.n	80081e2 <fFaraabinFunctionEngine_Start+0xa>
    return FB_FENGINE_FUNCTION_ALREADY_RUNNING;
 8008216:	2001      	movs	r0, #1
 8008218:	e7f2      	b.n	8008200 <fFaraabinFunctionEngine_Start+0x28>
    if(((uint32_t)(FunctionsList[i].Function) == functionPtr) && ((uint32_t)(FunctionsList[i].ObjectPtr == objectPtr))) {
 800821a:	4c18      	ldr	r4, [pc, #96]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 800821c:	f8d4 41e8 	ldr.w	r4, [r4, #488]	@ 0x1e8
 8008220:	42a1      	cmp	r1, r4
 8008222:	d1e3      	bne.n	80081ec <fFaraabinFunctionEngine_Start+0x14>
      if(FunctionsList[i].IsRunning) {
 8008224:	4c15      	ldr	r4, [pc, #84]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 8008226:	f894 41ed 	ldrb.w	r4, [r4, #493]	@ 0x1ed
 800822a:	2c00      	cmp	r4, #0
 800822c:	d0de      	beq.n	80081ec <fFaraabinFunctionEngine_Start+0x14>
    return FB_FENGINE_FUNCTION_ALREADY_RUNNING;
 800822e:	2001      	movs	r0, #1
 8008230:	e7e6      	b.n	8008200 <fFaraabinFunctionEngine_Start+0x28>
  for(uint16_t i = 0; i < FB_MAX_CONCURRENT_FUNCTION; i++) {
 8008232:	2500      	movs	r5, #0
      
      return i;
 8008234:	b2ed      	uxtb	r5, r5
  for(uint16_t i = 0; i < argSize; i++) {
 8008236:	b163      	cbz	r3, 8008252 <fFaraabinFunctionEngine_Start+0x7a>
 8008238:	4694      	mov	ip, r2
 800823a:	ebc5 1e45 	rsb	lr, r5, r5, lsl #5
 800823e:	4c10      	ldr	r4, [pc, #64]	@ (8008280 <fFaraabinFunctionEngine_Start+0xa8>)
 8008240:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8008244:	441a      	add	r2, r3
    FunctionsList[freeIndex].Param[i] = arg[i];
 8008246:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800824a:	f80e 4f01 	strb.w	r4, [lr, #1]!
  for(uint16_t i = 0; i < argSize; i++) {
 800824e:	4594      	cmp	ip, r2
 8008250:	d1f9      	bne.n	8008246 <fFaraabinFunctionEngine_Start+0x6e>
  FunctionsList[freeIndex].Param[argSize] = 0x00U;
 8008252:	4c0a      	ldr	r4, [pc, #40]	@ (800827c <fFaraabinFunctionEngine_Start+0xa4>)
 8008254:	ebc5 1e45 	rsb	lr, r5, r5, lsl #5
 8008258:	eb04 0cce 	add.w	ip, r4, lr, lsl #3
 800825c:	4463      	add	r3, ip
 800825e:	2200      	movs	r2, #0
 8008260:	711a      	strb	r2, [r3, #4]
  FunctionsList[freeIndex].ObjectPtr = objectPtr;
 8008262:	f8cc 10f0 	str.w	r1, [ip, #240]	@ 0xf0
  FunctionsList[freeIndex].IsFirstRun = true;
 8008266:	2301      	movs	r3, #1
 8008268:	f88c 30cc 	strb.w	r3, [ip, #204]	@ 0xcc
  FunctionsList[freeIndex].Function = (sFaraabinFobjectFunction*)functionPtr;
 800826c:	f844 003e 	str.w	r0, [r4, lr, lsl #3]
  FunctionsList[freeIndex].IsBusy = true;
 8008270:	f88c 30f4 	strb.w	r3, [ip, #244]	@ 0xf4
  FunctionsList[freeIndex].IsRunning = true;
 8008274:	f88c 30f5 	strb.w	r3, [ip, #245]	@ 0xf5
  return FB_FENGINE_FUNCTION_CMD_OK;
 8008278:	4610      	mov	r0, r2
 800827a:	e7c1      	b.n	8008200 <fFaraabinFunctionEngine_Start+0x28>
 800827c:	200029a8 	.word	0x200029a8
 8008280:	200029ab 	.word	0x200029ab

08008284 <fFaraabinFunctionEngine_Stop>:
uint8_t fFaraabinFunctionEngine_Stop(uint32_t functionPtr, uint32_t objectPtr) {
 8008284:	b508      	push	{r3, lr}
  sFaraabinFunctionEngine_Item* item = (sFaraabinFunctionEngine_Item*)fFindFunction(functionPtr, objectPtr);
 8008286:	f7ff fee5 	bl	8008054 <fFindFunction>
  if(item == NULL) {
 800828a:	b130      	cbz	r0, 800829a <fFaraabinFunctionEngine_Stop+0x16>
 800828c:	4603      	mov	r3, r0
  item->IsBusy = false;
 800828e:	2000      	movs	r0, #0
 8008290:	f883 00f4 	strb.w	r0, [r3, #244]	@ 0xf4
  item->IsRunning = false;
 8008294:	f883 00f5 	strb.w	r0, [r3, #245]	@ 0xf5
}
 8008298:	bd08      	pop	{r3, pc}
    return FB_FENGINE_FUNCTION_NOT_IN_LIST;
 800829a:	2003      	movs	r0, #3
 800829c:	e7fc      	b.n	8008298 <fFaraabinFunctionEngine_Stop+0x14>

0800829e <fFaraabinFunctionEngine_Pause>:
uint8_t fFaraabinFunctionEngine_Pause(uint32_t functionPtr, uint32_t objectPtr) {
 800829e:	b508      	push	{r3, lr}
  sFaraabinFunctionEngine_Item* item = (sFaraabinFunctionEngine_Item*)fFindFunction(functionPtr, objectPtr);
 80082a0:	f7ff fed8 	bl	8008054 <fFindFunction>
  if(item == NULL) {
 80082a4:	b138      	cbz	r0, 80082b6 <fFaraabinFunctionEngine_Pause+0x18>
 80082a6:	4603      	mov	r3, r0
  item->IsBusy = true;
 80082a8:	2201      	movs	r2, #1
 80082aa:	f880 20f4 	strb.w	r2, [r0, #244]	@ 0xf4
  item->IsRunning = false;
 80082ae:	2000      	movs	r0, #0
 80082b0:	f883 00f5 	strb.w	r0, [r3, #245]	@ 0xf5
}
 80082b4:	bd08      	pop	{r3, pc}
    return FB_FENGINE_FUNCTION_NOT_IN_LIST;
 80082b6:	2003      	movs	r0, #3
 80082b8:	e7fc      	b.n	80082b4 <fFaraabinFunctionEngine_Pause+0x16>

080082ba <fFaraabinFunctionEngine_Resume>:
uint8_t fFaraabinFunctionEngine_Resume(uint32_t functionPtr, uint32_t objectPtr) {
 80082ba:	b508      	push	{r3, lr}
  sFaraabinFunctionEngine_Item* item = (sFaraabinFunctionEngine_Item*)fFindFunction(functionPtr, objectPtr);
 80082bc:	f7ff feca 	bl	8008054 <fFindFunction>
  if(item == NULL) {
 80082c0:	b130      	cbz	r0, 80082d0 <fFaraabinFunctionEngine_Resume+0x16>
  item->IsBusy = true;
 80082c2:	2201      	movs	r2, #1
 80082c4:	f880 20f4 	strb.w	r2, [r0, #244]	@ 0xf4
  item->IsRunning = true;
 80082c8:	f880 20f5 	strb.w	r2, [r0, #245]	@ 0xf5
  return FB_FENGINE_FUNCTION_CMD_OK;
 80082cc:	2000      	movs	r0, #0
}
 80082ce:	bd08      	pop	{r3, pc}
    return FB_FENGINE_FUNCTION_NOT_IN_LIST;
 80082d0:	2003      	movs	r0, #3
 80082d2:	e7fc      	b.n	80082ce <fFaraabinFunctionEngine_Resume+0x14>

080082d4 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions>:
    if(FunctionsList[i].IsRunning == true) {
 80082d4:	4b03      	ldr	r3, [pc, #12]	@ (80082e4 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions+0x10>)
 80082d6:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 80082da:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80082de:	b103      	cbz	r3, 80082e2 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions+0xe>
      cnt++;
 80082e0:	3001      	adds	r0, #1
}
 80082e2:	4770      	bx	lr
 80082e4:	200029a8 	.word	0x200029a8

080082e8 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction>:
uint8_t fFaraabinFunctionEngine_GetPtrsOfRunningFunction(uint16_t index, uint32_t *ptr, uint32_t *objectPtr) {
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4604      	mov	r4, r0
 80082ec:	460e      	mov	r6, r1
 80082ee:	4615      	mov	r5, r2
  if(index >= fFaraabinFunctionEngine_GetQtyOfRunningFunctions()) {
 80082f0:	f7ff fff0 	bl	80082d4 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions>
 80082f4:	42a0      	cmp	r0, r4
 80082f6:	d921      	bls.n	800833c <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x54>
    if(FunctionsList[i].IsRunning == true) {
 80082f8:	4b12      	ldr	r3, [pc, #72]	@ (8008344 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x5c>)
 80082fa:	f893 30f5 	ldrb.w	r3, [r3, #245]	@ 0xf5
 80082fe:	b113      	cbz	r3, 8008306 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x1e>
      if(cnt == index) {
 8008300:	b164      	cbz	r4, 800831c <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x34>
      cnt++;
 8008302:	2201      	movs	r2, #1
 8008304:	e000      	b.n	8008308 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x20>
  uint16_t cnt = 0;
 8008306:	2200      	movs	r2, #0
    if(FunctionsList[i].IsRunning == true) {
 8008308:	4b0e      	ldr	r3, [pc, #56]	@ (8008344 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x5c>)
 800830a:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800830e:	b1bb      	cbz	r3, 8008340 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x58>
      if(cnt == index) {
 8008310:	4294      	cmp	r4, r2
    if(FunctionsList[i].IsRunning == true) {
 8008312:	bf08      	it	eq
 8008314:	2301      	moveq	r3, #1
      if(cnt == index) {
 8008316:	d002      	beq.n	800831e <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x36>
  return 0;
 8008318:	2000      	movs	r0, #0
 800831a:	e010      	b.n	800833e <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x56>
    if(FunctionsList[i].IsRunning == true) {
 800831c:	2300      	movs	r3, #0
        *ptr = (uint32_t)FunctionsList[i].Function;
 800831e:	4a09      	ldr	r2, [pc, #36]	@ (8008344 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x5c>)
 8008320:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 8008324:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
 8008328:	6031      	str	r1, [r6, #0]
        *objectPtr = FunctionsList[i].ObjectPtr;
 800832a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800832e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008332:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8008336:	602b      	str	r3, [r5, #0]
  return 0;
 8008338:	2000      	movs	r0, #0
        break;
 800833a:	e000      	b.n	800833e <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x56>
    return 1;
 800833c:	2001      	movs	r0, #1
}
 800833e:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 8008340:	2000      	movs	r0, #0
 8008342:	e7fc      	b.n	800833e <fFaraabinFunctionEngine_GetPtrsOfRunningFunction+0x56>
 8008344:	200029a8 	.word	0x200029a8

08008348 <fFaraabinFunctionEngine_GetRamUsage>:
 * @return usage Amount of bytes dedicated to Faraabin function feature. 
 */
uint32_t fFaraabinFunctionEngine_GetRamUsage(void) {
	
	return sizeof(sFaraabinFunctionEngine_Item) * FB_MAX_CONCURRENT_FUNCTION;
}
 8008348:	f44f 70f8 	mov.w	r0, #496	@ 0x1f0
 800834c:	4770      	bx	lr
	...

08008350 <fFaraabinLinkBuffer_GetRamUsage>:
 * 
 * @return usage Amount of RAM used by Faraabin link in bytes.
 */
uint32_t fFaraabinLinkBuffer_GetRamUsage(void) {
	
	return sizeof(sFaraabinLinkBuffer) + FbCircularBuffer.Size;
 8008350:	4b01      	ldr	r3, [pc, #4]	@ (8008358 <fFaraabinLinkBuffer_GetRamUsage+0x8>)
 8008352:	6858      	ldr	r0, [r3, #4]
}
 8008354:	3018      	adds	r0, #24
 8008356:	4770      	bx	lr
 8008358:	20002b98 	.word	0x20002b98

0800835c <fFaraabinLinkBuffer_Clear>:

void fFaraabinLinkBuffer_Clear(void) {
	
	FbCircularBuffer._head = 0U;
 800835c:	4b08      	ldr	r3, [pc, #32]	@ (8008380 <fFaraabinLinkBuffer_Clear+0x24>)
 800835e:	2200      	movs	r2, #0
 8008360:	609a      	str	r2, [r3, #8]
  FbCircularBuffer._tail = 0U;
 8008362:	60da      	str	r2, [r3, #12]
  FbCircularBuffer._isFull = false;
 8008364:	751a      	strb	r2, [r3, #20]
  FbCircularBuffer._count = 0U;
 8008366:	611a      	str	r2, [r3, #16]
  
  for(uint32_t i = 0; i < FbCircularBuffer.Size; i++) {
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b143      	cbz	r3, 800837e <fFaraabinLinkBuffer_Clear+0x22>
 800836c:	4613      	mov	r3, r2
    FbCircularBuffer.Buffer[i] = 0x00U;
 800836e:	4a04      	ldr	r2, [pc, #16]	@ (8008380 <fFaraabinLinkBuffer_Clear+0x24>)
 8008370:	4618      	mov	r0, r3
 8008372:	6811      	ldr	r1, [r2, #0]
 8008374:	54c8      	strb	r0, [r1, r3]
  for(uint32_t i = 0; i < FbCircularBuffer.Size; i++) {
 8008376:	3301      	adds	r3, #1
 8008378:	6851      	ldr	r1, [r2, #4]
 800837a:	4299      	cmp	r1, r3
 800837c:	d8f9      	bhi.n	8008372 <fFaraabinLinkBuffer_Clear+0x16>
  }
}
 800837e:	4770      	bx	lr
 8008380:	20002b98 	.word	0x20002b98

08008384 <fFaraabinLinkBuffer_Init>:
  if(size == 0U) {
 8008384:	b189      	cbz	r1, 80083aa <fFaraabinLinkBuffer_Init+0x26>
uint8_t fFaraabinLinkBuffer_Init(uint8_t *txBuffer, uint32_t size) {
 8008386:	b508      	push	{r3, lr}
  FbCircularBuffer.Size = size;
 8008388:	4a09      	ldr	r2, [pc, #36]	@ (80083b0 <fFaraabinLinkBuffer_Init+0x2c>)
 800838a:	6051      	str	r1, [r2, #4]
  if(txBuffer != NULL) {
 800838c:	b120      	cbz	r0, 8008398 <fFaraabinLinkBuffer_Init+0x14>
    FbCircularBuffer.Buffer = txBuffer;
 800838e:	6010      	str	r0, [r2, #0]
  fFaraabinLinkBuffer_Clear();
 8008390:	f7ff ffe4 	bl	800835c <fFaraabinLinkBuffer_Clear>
  return 0;
 8008394:	2000      	movs	r0, #0
}
 8008396:	bd08      	pop	{r3, pc}
    FbCircularBuffer.Buffer = malloc(FbCircularBuffer.Size);
 8008398:	4608      	mov	r0, r1
 800839a:	f002 fa0d 	bl	800a7b8 <malloc>
 800839e:	4b04      	ldr	r3, [pc, #16]	@ (80083b0 <fFaraabinLinkBuffer_Init+0x2c>)
 80083a0:	6018      	str	r0, [r3, #0]
    if(FbCircularBuffer.Buffer == NULL) {
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d1f4      	bne.n	8008390 <fFaraabinLinkBuffer_Init+0xc>
      return 1;
 80083a6:	2001      	movs	r0, #1
 80083a8:	e7f5      	b.n	8008396 <fFaraabinLinkBuffer_Init+0x12>
    return 1;
 80083aa:	2001      	movs	r0, #1
}
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20002b98 	.word	0x20002b98

080083b4 <fFrameHandler>:
/**
 * @brief Handles new valid frame.
 * 
 * @param LinkHandler.ClientFrame Pointer to the client frame.
 */
static void fFrameHandler(sClientFrame *clientFrame) {
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	b08f      	sub	sp, #60	@ 0x3c
 80083ba:	4604      	mov	r4, r0
  
  uint8_t *fobjectType = (clientFrame->FobjectPtr == 0xFFFFFFFFU) ? (uint8_t*)fFaraabinFobjectMcu_GetFobject() : (uint8_t*)clientFrame->FobjectPtr;
 80083bc:	6843      	ldr	r3, [r0, #4]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d016      	beq.n	80083f2 <fFrameHandler+0x3e>

  switch((eFaraabin_FobjectType)*fobjectType) {
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	f200 8774 	bhi.w	80092b4 <fFrameHandler+0xf00>
 80083cc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80083d0:	07720031 	.word	0x07720031
 80083d4:	07720772 	.word	0x07720772
 80083d8:	05e1071c 	.word	0x05e1071c
 80083dc:	07720772 	.word	0x07720772
 80083e0:	077201fa 	.word	0x077201fa
 80083e4:	07780778 	.word	0x07780778
 80083e8:	07720772 	.word	0x07720772
 80083ec:	07780772 	.word	0x07780772
 80083f0:	0778      	.short	0x0778
  uint8_t *fobjectType = (clientFrame->FobjectPtr == 0xFFFFFFFFU) ? (uint8_t*)fFaraabinFobjectMcu_GetFobject() : (uint8_t*)clientFrame->FobjectPtr;
 80083f2:	f7ff fe0f 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
  switch((eFaraabin_FobjectType)*fobjectType) {
 80083f6:	7803      	ldrb	r3, [r0, #0]
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	f200 875b 	bhi.w	80092b4 <fFrameHandler+0xf00>
 80083fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008402:	0011      	.short	0x0011
 8008404:	07590759 	.word	0x07590759
 8008408:	07030759 	.word	0x07030759
 800840c:	075905c8 	.word	0x075905c8
 8008410:	01e10759 	.word	0x01e10759
 8008414:	075f0759 	.word	0x075f0759
 8008418:	0759075f 	.word	0x0759075f
 800841c:	07590759 	.word	0x07590759
 8008420:	075f075f 	.word	0x075f075f
  
  #ifdef FARAABIN_ENABLE
  
  bool errorFobjectProperty = false;
  
  if(clientFrame->FobjectPtr == 0xFFFFFFFFU) {
 8008424:	6863      	ldr	r3, [r4, #4]
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d102      	bne.n	8008432 <fFrameHandler+0x7e>
    clientFrame->FobjectPtr = (uint32_t)fFaraabinFobjectMcu_GetFobject();
 800842c:	f7ff fdf2 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 8008430:	6060      	str	r0, [r4, #4]
  }

  sFaraabinFobjectMcu *mcuHandle = (sFaraabinFobjectMcu*)clientFrame->FobjectPtr;
 8008432:	6865      	ldr	r5, [r4, #4]
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 8008434:	7863      	ldrb	r3, [r4, #1]
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
 8008436:	f003 011f 	and.w	r1, r3, #31
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 800843a:	7822      	ldrb	r2, [r4, #0]
 800843c:	f002 060f 	and.w	r6, r2, #15
  uint8_t controlAccessType = ClientFrame_GetAccessType_(clientFrame->Control);
 8008440:	f3c2 1280 	ubfx	r2, r2, #6, #1

  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 8008444:	095b      	lsrs	r3, r3, #5
 8008446:	2b04      	cmp	r3, #4
 8008448:	f200 8193 	bhi.w	8008772 <fFrameHandler+0x3be>
 800844c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008450:	00260005 	.word	0x00260005
 8008454:	00db0050 	.word	0x00db0050
 8008458:	018f      	.short	0x018f
    
    case eFB_PROP_GROUP_DICT: {
      
      uByte2 dictIndex;
      dictIndex.Byte[0] = clientFrame->Payload[0];
 800845a:	68a2      	ldr	r2, [r4, #8]
 800845c:	7811      	ldrb	r1, [r2, #0]
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	f361 0307 	bfi	r3, r1, #0, #8
      dictIndex.Byte[1] = clientFrame->Payload[1];
 8008466:	7852      	ldrb	r2, [r2, #1]
 8008468:	f362 230f 	bfi	r3, r2, #8, #8
      
      if(dictIndex.U16 >= fFaraabinDatabase_GetNumberOfAddedDicts()) {
 800846c:	b29c      	uxth	r4, r3
 800846e:	f7fe fba3 	bl	8006bb8 <fFaraabinDatabase_GetNumberOfAddedDicts>
 8008472:	4284      	cmp	r4, r0
 8008474:	d305      	bcc.n	8008482 <fFrameHandler+0xce>

        fFaraabinFobjectMcu_SendEventSystemExceptionResponse(eMCU_EVENT_ERROR_DICT_INDEX_OVERFLOW, controlReqSeq);
 8008476:	4631      	mov	r1, r6
 8008478:	200e      	movs	r0, #14
 800847a:	f7ff fdb1 	bl	8007fe0 <fFaraabinFobjectMcu_SendEventSystemExceptionResponse>

        break;
 800847e:	f000 bf1f 	b.w	80092c0 <fFrameHandler+0xf0c>
      }
      
      fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(dictIndex.U16), dictIndex.U16, controlReqSeq);
 8008482:	4620      	mov	r0, r4
 8008484:	f7fe fc04 	bl	8006c90 <fFaraabinDatabase_GetFobjectPointerFromDict>
 8008488:	4632      	mov	r2, r6
 800848a:	4621      	mov	r1, r4
 800848c:	f002 f810 	bl	800a4b0 <fFaraabinLinkSerializer_SerializeDict>
      
      fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_DICT_END, controlReqSeq);
 8008490:	4631      	mov	r1, r6
 8008492:	2001      	movs	r0, #1
 8008494:	f7ff fd8a 	bl	8007fac <fFaraabinFobjectMcu_SendEventSystemResponse>
      
      break;
 8008498:	f000 bf12 	b.w	80092c0 <fFrameHandler+0xf0c>
    
    case eFB_PROP_GROUP_SETTING: {
      
      eFaraabinLinkSerializer_McuPropertyIdSetting propId = (eFaraabinLinkSerializer_McuPropertyIdSetting)framePropId;
      
      switch(propId) {
 800849c:	b1a9      	cbz	r1, 80084ca <fFrameHandler+0x116>
 800849e:	2902      	cmp	r1, #2
 80084a0:	f040 8167 	bne.w	8008772 <fFrameHandler+0x3be>
          break;
        }
				
				case eFB_MCU_PROP_ID_SETTING_SEND_PROFILER_ENABLE: {
          
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 80084a4:	b132      	cbz	r2, 80084b4 <fFrameHandler+0x100>

            sFaraabinFobjectMcu *obj = (sFaraabinFobjectMcu*)clientFrame->FobjectPtr;

            obj->IsSendingCpuProfiler = (*clientFrame->Payload == 0U) ? false : true;
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	3b00      	subs	r3, #0
 80084ac:	bf18      	it	ne
 80084ae:	2301      	movne	r3, #1
 80084b0:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
          }
          
          if(controlReqSeq != 0U) {
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	f000 8703 	beq.w	80092c0 <fFrameHandler+0xf0c>
						
						fFaraabinLinkSerializer_McuSendLive(clientFrame->FobjectPtr, &mcuHandle->Seq, controlReqSeq);
 80084ba:	4632      	mov	r2, r6
 80084bc:	f105 0110 	add.w	r1, r5, #16
 80084c0:	6860      	ldr	r0, [r4, #4]
 80084c2:	f002 f8bf 	bl	800a644 <fFaraabinLinkSerializer_McuSendLive>
      errorFobjectProperty = true;
      break;
    }
  }
  
  if(errorFobjectProperty) {
 80084c6:	f000 befb 	b.w	80092c0 <fFrameHandler+0xf0c>
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 80084ca:	b12a      	cbz	r2, 80084d8 <fFrameHandler+0x124>
            obj->Enable = (*clientFrame->Payload == 0U) ? false : true;
 80084cc:	68a3      	ldr	r3, [r4, #8]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	3b00      	subs	r3, #0
 80084d2:	bf18      	it	ne
 80084d4:	2301      	movne	r3, #1
 80084d6:	70ab      	strb	r3, [r5, #2]
          if(controlReqSeq != 0U) {
 80084d8:	2e00      	cmp	r6, #0
 80084da:	f000 86f1 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_CommonSendEnable(clientFrame->FobjectPtr, &mcuHandle->Seq, controlReqSeq, true);
 80084de:	2301      	movs	r3, #1
 80084e0:	4632      	mov	r2, r6
 80084e2:	f105 0110 	add.w	r1, r5, #16
 80084e6:	6860      	ldr	r0, [r4, #4]
 80084e8:	f002 f82c 	bl	800a544 <fFaraabinLinkSerializer_CommonSendEnable>
  if(errorFobjectProperty) {
 80084ec:	f000 bee8 	b.w	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 80084f0:	2900      	cmp	r1, #0
 80084f2:	f040 813e 	bne.w	8008772 <fFrameHandler+0x3be>
          ptr.Byte[0] = clientFrame->Payload[0];
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	7819      	ldrb	r1, [r3, #0]
 80084fa:	2700      	movs	r7, #0
 80084fc:	f361 0707 	bfi	r7, r1, #0, #8
          ptr.Byte[1] = clientFrame->Payload[1];
 8008500:	7859      	ldrb	r1, [r3, #1]
 8008502:	f361 270f 	bfi	r7, r1, #8, #8
          ptr.Byte[2] = clientFrame->Payload[2];
 8008506:	7899      	ldrb	r1, [r3, #2]
 8008508:	f361 4717 	bfi	r7, r1, #16, #8
          ptr.Byte[3] = clientFrame->Payload[3];
 800850c:	78d9      	ldrb	r1, [r3, #3]
 800850e:	f361 671f 	bfi	r7, r1, #24, #8
          size.Byte[0] = clientFrame->Payload[4];
 8008512:	7919      	ldrb	r1, [r3, #4]
 8008514:	2400      	movs	r4, #0
 8008516:	f361 0407 	bfi	r4, r1, #0, #8
          size.Byte[1] = clientFrame->Payload[5];
 800851a:	7959      	ldrb	r1, [r3, #5]
 800851c:	f361 240f 	bfi	r4, r1, #8, #8
          size.Byte[2] = clientFrame->Payload[6];
 8008520:	7999      	ldrb	r1, [r3, #6]
 8008522:	f361 4417 	bfi	r4, r1, #16, #8
          size.Byte[3] = clientFrame->Payload[7];
 8008526:	79d9      	ldrb	r1, [r3, #7]
 8008528:	f361 641f 	bfi	r4, r1, #24, #8
          bool isExternal = (clientFrame->Payload[8] != 0U);
 800852c:	f893 a008 	ldrb.w	sl, [r3, #8]
          externalFuncPtr.Byte[0] = clientFrame->Payload[9];
 8008530:	7a59      	ldrb	r1, [r3, #9]
 8008532:	f04f 0800 	mov.w	r8, #0
 8008536:	f361 0807 	bfi	r8, r1, #0, #8
          externalFuncPtr.Byte[1] = clientFrame->Payload[10];
 800853a:	7a99      	ldrb	r1, [r3, #10]
 800853c:	f361 280f 	bfi	r8, r1, #8, #8
          externalFuncPtr.Byte[2] = clientFrame->Payload[11];
 8008540:	7ad9      	ldrb	r1, [r3, #11]
 8008542:	f361 4817 	bfi	r8, r1, #16, #8
          externalFuncPtr.Byte[3] = clientFrame->Payload[12];
 8008546:	7b19      	ldrb	r1, [r3, #12]
 8008548:	f361 681f 	bfi	r8, r1, #24, #8
          bool isAccessCb = (clientFrame->Payload[13] != 0U);
 800854c:	7b58      	ldrb	r0, [r3, #13]
          accessCbFuncPtr.Byte[0] = clientFrame->Payload[14];
 800854e:	7b99      	ldrb	r1, [r3, #14]
 8008550:	f04f 0900 	mov.w	r9, #0
 8008554:	f361 0907 	bfi	r9, r1, #0, #8
          accessCbFuncPtr.Byte[1] = clientFrame->Payload[15];
 8008558:	7bd9      	ldrb	r1, [r3, #15]
 800855a:	f361 290f 	bfi	r9, r1, #8, #8
          accessCbFuncPtr.Byte[2] = clientFrame->Payload[16];
 800855e:	7c19      	ldrb	r1, [r3, #16]
 8008560:	f361 4917 	bfi	r9, r1, #16, #8
          accessCbFuncPtr.Byte[3] = clientFrame->Payload[17];
 8008564:	7c59      	ldrb	r1, [r3, #17]
 8008566:	f361 691f 	bfi	r9, r1, #24, #8
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 800856a:	b312      	cbz	r2, 80085b2 <fFrameHandler+0x1fe>
          uint8_t *valuePtr = &(clientFrame->Payload[18]);
 800856c:	f103 0b12 	add.w	fp, r3, #18
            if(isAccessCb) {
 8008570:	b140      	cbz	r0, 8008584 <fFrameHandler+0x1d0>
              if(func != NULL) {
 8008572:	f1b8 0f00 	cmp.w	r8, #0
 8008576:	d014      	beq.n	80085a2 <fFrameHandler+0x1ee>
                uint8_t res = func(eVAR_ACCESS_TYPE_WRITE, ptr.U32, valuePtr, size.U32);
 8008578:	b2a3      	uxth	r3, r4
 800857a:	465a      	mov	r2, fp
 800857c:	4639      	mov	r1, r7
 800857e:	2001      	movs	r0, #1
 8008580:	47c0      	blx	r8
                if(res != 0U) {
 8008582:	e00e      	b.n	80085a2 <fFrameHandler+0x1ee>
              for(uint32_t i = 0U; i < size.U32; i++) {
 8008584:	b16c      	cbz	r4, 80085a2 <fFrameHandler+0x1ee>
 8008586:	f103 0211 	add.w	r2, r3, #17
 800858a:	f104 0c11 	add.w	ip, r4, #17
 800858e:	449c      	add	ip, r3
                dst[i] = src[i];
 8008590:	f1a7 0011 	sub.w	r0, r7, #17
 8008594:	1ac0      	subs	r0, r0, r3
 8008596:	1883      	adds	r3, r0, r2
 8008598:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800859c:	7019      	strb	r1, [r3, #0]
              for(uint32_t i = 0U; i < size.U32; i++) {
 800859e:	4594      	cmp	ip, r2
 80085a0:	d1f9      	bne.n	8008596 <fFrameHandler+0x1e2>
            if(func != NULL) {
 80085a2:	f1b9 0f00 	cmp.w	r9, #0
 80085a6:	d004      	beq.n	80085b2 <fFrameHandler+0x1fe>
              uint8_t res = func(eVAR_ACCESS_TYPE_WRITE, ptr.U32, valuePtr, size.U32);
 80085a8:	b2a3      	uxth	r3, r4
 80085aa:	465a      	mov	r2, fp
 80085ac:	4639      	mov	r1, r7
 80085ae:	2001      	movs	r0, #1
 80085b0:	47c8      	blx	r9
          if(controlReqSeq != 0U) {
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	f000 8684 	beq.w	80092c0 <fFrameHandler+0xf0c>
            if(isExternal) {
 80085b8:	f1ba 0f00 	cmp.w	sl, #0
 80085bc:	d017      	beq.n	80085ee <fFrameHandler+0x23a>
              if(func != NULL) {
 80085be:	f1b8 0f00 	cmp.w	r8, #0
 80085c2:	f000 867d 	beq.w	80092c0 <fFrameHandler+0xf0c>
                uint8_t res = func(eVAR_ACCESS_TYPE_READ, ptr.U32, dataPtr, size.U32);
 80085c6:	b2a3      	uxth	r3, r4
 80085c8:	2200      	movs	r2, #0
 80085ca:	4639      	mov	r1, r7
 80085cc:	4610      	mov	r0, r2
 80085ce:	47c0      	blx	r8
                if(res != 0U) {
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f040 8675 	bne.w	80092c0 <fFrameHandler+0xf0c>
                  fFaraabinLinkSerializer_VarSendValue(ptr.U32, (uint32_t)dataPtr, size.U32, &mcuHandle->Seq, controlReqSeq, true);
 80085d6:	2301      	movs	r3, #1
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	9600      	str	r6, [sp, #0]
 80085dc:	f105 0310 	add.w	r3, r5, #16
 80085e0:	4622      	mov	r2, r4
 80085e2:	2100      	movs	r1, #0
 80085e4:	4638      	mov	r0, r7
 80085e6:	f001 fffb 	bl	800a5e0 <fFaraabinLinkSerializer_VarSendValue>
 80085ea:	f000 be69 	b.w	80092c0 <fFrameHandler+0xf0c>
              fFaraabinLinkSerializer_VarSendValue(ptr.U32, ptr.U32, size.U32, &mcuHandle->Seq, controlReqSeq, true);
 80085ee:	2301      	movs	r3, #1
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	9600      	str	r6, [sp, #0]
 80085f4:	f105 0310 	add.w	r3, r5, #16
 80085f8:	4622      	mov	r2, r4
 80085fa:	4639      	mov	r1, r7
 80085fc:	4638      	mov	r0, r7
 80085fe:	f001 ffef 	bl	800a5e0 <fFaraabinLinkSerializer_VarSendValue>
  if(errorFobjectProperty) {
 8008602:	f000 be5d 	b.w	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 8008606:	2905      	cmp	r1, #5
 8008608:	f200 80b3 	bhi.w	8008772 <fFrameHandler+0x3be>
 800860c:	e8df f001 	tbb	[pc, r1]
 8008610:	32220f03 	.word	0x32220f03
 8008614:	957d      	.short	0x957d
          if(controlReqSeq != 0U) {
 8008616:	2e00      	cmp	r6, #0
 8008618:	f000 8652 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_McuSendPing((uint32_t)mcuHandle, &mcuHandle->Seq, controlReqSeq, clientFrame->Payload);
 800861c:	68a3      	ldr	r3, [r4, #8]
 800861e:	4632      	mov	r2, r6
 8008620:	f105 0110 	add.w	r1, r5, #16
 8008624:	4628      	mov	r0, r5
 8008626:	f001 fff9 	bl	800a61c <fFaraabinLinkSerializer_McuSendPing>
  if(errorFobjectProperty) {
 800862a:	f000 be49 	b.w	80092c0 <fFrameHandler+0xf0c>
          fChrono_Start(&(mcuHandle->ChronoLiveTimeout));
 800862e:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8008632:	f7fe f871 	bl	8006718 <fChrono_Start>
          mcuHandle->_isHostConnected = true;
 8008636:	2301      	movs	r3, #1
 8008638:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
          if(controlReqSeq != 0U) {
 800863c:	2e00      	cmp	r6, #0
 800863e:	f000 863f 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_McuSendLive((uint32_t)0xFFFFFFFFU, &mcuHandle->Seq, controlReqSeq);
 8008642:	4632      	mov	r2, r6
 8008644:	f105 0110 	add.w	r1, r5, #16
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	f001 fffa 	bl	800a644 <fFaraabinLinkSerializer_McuSendLive>
  if(errorFobjectProperty) {
 8008650:	f000 be36 	b.w	80092c0 <fFrameHandler+0xf0c>
          if(controlReqSeq != 0U) {
 8008654:	2e00      	cmp	r6, #0
 8008656:	f000 8633 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_McuSendWhoAmI((uint32_t)mcuHandle, &mcuHandle->Seq, controlReqSeq);
 800865a:	4632      	mov	r2, r6
 800865c:	f105 0110 	add.w	r1, r5, #16
 8008660:	4628      	mov	r0, r5
 8008662:	f002 f803 	bl	800a66c <fFaraabinLinkSerializer_McuSendWhoAmI>
            FaraabinFlags.Status.Bitfield.McuReset = 0U;
 8008666:	4ba8      	ldr	r3, [pc, #672]	@ (8008908 <fFrameHandler+0x554>)
 8008668:	791a      	ldrb	r2, [r3, #4]
 800866a:	f36f 0200 	bfc	r2, #0, #1
 800866e:	711a      	strb	r2, [r3, #4]
  if(errorFobjectProperty) {
 8008670:	f000 be26 	b.w	80092c0 <fFrameHandler+0xf0c>
					if(FaraabinFlags.Features.Bitfield.AllowSendDickBlocking) {
 8008674:	4ba4      	ldr	r3, [pc, #656]	@ (8008908 <fFrameHandler+0x554>)
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	f013 0f01 	tst.w	r3, #1
 800867c:	d02d      	beq.n	80086da <fFrameHandler+0x326>
						LinkHandler.DictSendingMode.IsBlocking = (clientFrame->Payload[0] == 0U) ? false : true;
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	3b00      	subs	r3, #0
 8008684:	bf18      	it	ne
 8008686:	2301      	movne	r3, #1
 8008688:	4aa0      	ldr	r2, [pc, #640]	@ (800890c <fFrameHandler+0x558>)
 800868a:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
					tmp2.Byte[0] = clientFrame->Payload[1];
 800868e:	68a2      	ldr	r2, [r4, #8]
 8008690:	7851      	ldrb	r1, [r2, #1]
 8008692:	f04f 0300 	mov.w	r3, #0
 8008696:	f361 0307 	bfi	r3, r1, #0, #8
					tmp2.Byte[1] = clientFrame->Payload[2];
 800869a:	7892      	ldrb	r2, [r2, #2]
 800869c:	f362 230f 	bfi	r3, r2, #8, #8
					mcuHandle->SessionId = tmp2.U16;
 80086a0:	f8a5 304e 	strh.w	r3, [r5, #78]	@ 0x4e
          if(FaraabinFlags.Features.Bitfield.Password == 1U) {
 80086a4:	4b98      	ldr	r3, [pc, #608]	@ (8008908 <fFrameHandler+0x554>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f013 0f10 	tst.w	r3, #16
 80086ac:	d00b      	beq.n	80086c6 <fFrameHandler+0x312>
            if(strncmp(LinkHandler.Password, (char*)(&(clientFrame->Payload[3])), strlen(LinkHandler.Password)) != 0) {
 80086ae:	4b97      	ldr	r3, [pc, #604]	@ (800890c <fFrameHandler+0x558>)
 80086b0:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80086b2:	4638      	mov	r0, r7
 80086b4:	f7f7 fd4c 	bl	8000150 <strlen>
 80086b8:	4602      	mov	r2, r0
 80086ba:	68a1      	ldr	r1, [r4, #8]
 80086bc:	3103      	adds	r1, #3
 80086be:	4638      	mov	r0, r7
 80086c0:	f002 f97a 	bl	800a9b8 <strncmp>
 80086c4:	b958      	cbnz	r0, 80086de <fFrameHandler+0x32a>
						fFaraabinLinkBuffer_Clear();						
 80086c6:	f7ff fe49 	bl	800835c <fFaraabinLinkBuffer_Clear>
            LinkHandler.DictSendingMode.SendFlag = true;
 80086ca:	4b90      	ldr	r3, [pc, #576]	@ (800890c <fFrameHandler+0x558>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            LinkHandler.DictSendingMode.ReqSeq = controlReqSeq;
 80086d2:	f883 6035 	strb.w	r6, [r3, #53]	@ 0x35
  if(errorFobjectProperty) {
 80086d6:	f000 bdf3 	b.w	80092c0 <fFrameHandler+0xf0c>
						LinkHandler.DictSendingMode.IsBlocking = false;
 80086da:	2300      	movs	r3, #0
 80086dc:	e7d4      	b.n	8008688 <fFrameHandler+0x2d4>
            Faraabin_EventSystemException_EndResponse_((uint32_t)mcuHandle, 
 80086de:	78ab      	ldrb	r3, [r5, #2]
 80086e0:	2201      	movs	r2, #1
 80086e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80086e4:	2100      	movs	r1, #0
 80086e6:	9108      	str	r1, [sp, #32]
 80086e8:	9107      	str	r1, [sp, #28]
 80086ea:	9206      	str	r2, [sp, #24]
 80086ec:	9605      	str	r6, [sp, #20]
 80086ee:	9104      	str	r1, [sp, #16]
 80086f0:	9103      	str	r1, [sp, #12]
 80086f2:	2211      	movs	r2, #17
 80086f4:	9202      	str	r2, [sp, #8]
 80086f6:	9101      	str	r1, [sp, #4]
 80086f8:	2203      	movs	r2, #3
 80086fa:	9200      	str	r2, [sp, #0]
 80086fc:	f105 0210 	add.w	r2, r5, #16
 8008700:	4628      	mov	r0, r5
 8008702:	f001 fe35 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8008706:	f000 bddb 	b.w	80092c0 <fFrameHandler+0xf0c>
          fFaraabin_ResetMcu();
 800870a:	f7f8 ff22 	bl	8001552 <fFaraabin_ResetMcu>
          Faraabin_EventSystemException_EndResponse_((uint32_t)mcuHandle, 
 800870e:	78ab      	ldrb	r3, [r5, #2]
 8008710:	2201      	movs	r2, #1
 8008712:	9209      	str	r2, [sp, #36]	@ 0x24
 8008714:	2100      	movs	r1, #0
 8008716:	9108      	str	r1, [sp, #32]
 8008718:	9107      	str	r1, [sp, #28]
 800871a:	9206      	str	r2, [sp, #24]
 800871c:	9605      	str	r6, [sp, #20]
 800871e:	9104      	str	r1, [sp, #16]
 8008720:	9103      	str	r1, [sp, #12]
 8008722:	2212      	movs	r2, #18
 8008724:	9202      	str	r2, [sp, #8]
 8008726:	9101      	str	r1, [sp, #4]
 8008728:	2203      	movs	r2, #3
 800872a:	9200      	str	r2, [sp, #0]
 800872c:	f105 0210 	add.w	r2, r5, #16
 8008730:	4628      	mov	r0, r5
 8008732:	f001 fe1d 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008736:	f000 bdc3 	b.w	80092c0 <fFrameHandler+0xf0c>
          FaraabinFlags.Status.Bitfield.BufferOverflow = 0U;
 800873a:	4b73      	ldr	r3, [pc, #460]	@ (8008908 <fFrameHandler+0x554>)
 800873c:	791a      	ldrb	r2, [r3, #4]
 800873e:	f36f 0282 	bfc	r2, #2, #1
 8008742:	711a      	strb	r2, [r3, #4]
          Faraabin_EventSystem_EndResponse_((uint32_t)mcuHandle, 
 8008744:	78ab      	ldrb	r3, [r5, #2]
 8008746:	2201      	movs	r2, #1
 8008748:	9209      	str	r2, [sp, #36]	@ 0x24
 800874a:	2100      	movs	r1, #0
 800874c:	9108      	str	r1, [sp, #32]
 800874e:	9107      	str	r1, [sp, #28]
 8008750:	9206      	str	r2, [sp, #24]
 8008752:	9605      	str	r6, [sp, #20]
 8008754:	9104      	str	r1, [sp, #16]
 8008756:	9103      	str	r1, [sp, #12]
 8008758:	2202      	movs	r2, #2
 800875a:	9202      	str	r2, [sp, #8]
 800875c:	9101      	str	r1, [sp, #4]
 800875e:	9200      	str	r2, [sp, #0]
 8008760:	f105 0210 	add.w	r2, r5, #16
 8008764:	4628      	mov	r0, r5
 8008766:	f001 fe03 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 800876a:	f000 bda9 	b.w	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 800876e:	2906      	cmp	r1, #6
 8008770:	d016      	beq.n	80087a0 <fFrameHandler+0x3ec>
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)mcuHandle,
 8008772:	78ab      	ldrb	r3, [r5, #2]
 8008774:	2201      	movs	r2, #1
 8008776:	9209      	str	r2, [sp, #36]	@ 0x24
 8008778:	2100      	movs	r1, #0
 800877a:	9108      	str	r1, [sp, #32]
 800877c:	9107      	str	r1, [sp, #28]
 800877e:	9206      	str	r2, [sp, #24]
 8008780:	9605      	str	r6, [sp, #20]
 8008782:	9204      	str	r2, [sp, #16]
 8008784:	4414      	add	r4, r2
 8008786:	9403      	str	r4, [sp, #12]
 8008788:	220f      	movs	r2, #15
 800878a:	9202      	str	r2, [sp, #8]
 800878c:	9101      	str	r1, [sp, #4]
 800878e:	2203      	movs	r2, #3
 8008790:	9200      	str	r2, [sp, #0]
 8008792:	f105 0210 	add.w	r2, r5, #16
 8008796:	4628      	mov	r0, r5
 8008798:	f001 fdea 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 800879c:	f000 bd90 	b.w	80092c0 <fFrameHandler+0xf0c>
          clientFrame->Payload[clientFrame->PayloadSize] = 0x00U; // Terminate end of data
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	68a2      	ldr	r2, [r4, #8]
 80087a4:	2100      	movs	r1, #0
 80087a6:	54d1      	strb	r1, [r2, r3]
          if(mcuHandle->fpUserTerminalCallback != NULL) {
 80087a8:	696b      	ldr	r3, [r5, #20]
 80087aa:	b113      	cbz	r3, 80087b2 <fFrameHandler+0x3fe>
            mcuHandle->fpUserTerminalCallback(clientFrame->Payload, clientFrame->PayloadSize);
 80087ac:	89a1      	ldrh	r1, [r4, #12]
 80087ae:	68a0      	ldr	r0, [r4, #8]
 80087b0:	4798      	blx	r3
          if(controlReqSeq != 0U) {
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	f000 8584 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_USER_DATA_RECEIVED, controlReqSeq);
 80087b8:	4631      	mov	r1, r6
 80087ba:	2000      	movs	r0, #0
 80087bc:	f7ff fbf6 	bl	8007fac <fFaraabinFobjectMcu_SendEventSystemResponse>
  if(errorFobjectProperty) {
 80087c0:	f000 bd7e 	b.w	80092c0 <fFrameHandler+0xf0c>
  
  #ifdef FARAABIN_ENABLE
  
  bool errorFobjectProperty = false;
  
  sFaraabinFobjectDataBus *dbHandle = (sFaraabinFobjectDataBus*)clientFrame->FobjectPtr;
 80087c4:	6865      	ldr	r5, [r4, #4]
  uint8_t *param = clientFrame->Payload;
 80087c6:	68a7      	ldr	r7, [r4, #8]
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 80087c8:	7863      	ldrb	r3, [r4, #1]
 80087ca:	095a      	lsrs	r2, r3, #5
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
 80087cc:	f003 031f 	and.w	r3, r3, #31
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 80087d0:	7821      	ldrb	r1, [r4, #0]
 80087d2:	f001 060f 	and.w	r6, r1, #15
  uint8_t controlAccessType = ClientFrame_GetAccessType_(clientFrame->Control);

  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 80087d6:	2a03      	cmp	r2, #3
 80087d8:	f000 815e 	beq.w	8008a98 <fFrameHandler+0x6e4>
 80087dc:	2a04      	cmp	r2, #4
 80087de:	f000 83b6 	beq.w	8008f4e <fFrameHandler+0xb9a>
 80087e2:	2a01      	cmp	r2, #1
 80087e4:	d016      	beq.n	8008814 <fFrameHandler+0x460>
    }
  }
  
  if(errorFobjectProperty) {
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)dbHandle,
 80087e6:	78ab      	ldrb	r3, [r5, #2]
 80087e8:	2201      	movs	r2, #1
 80087ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80087ec:	2100      	movs	r1, #0
 80087ee:	9108      	str	r1, [sp, #32]
 80087f0:	9107      	str	r1, [sp, #28]
 80087f2:	9206      	str	r2, [sp, #24]
 80087f4:	9605      	str	r6, [sp, #20]
 80087f6:	9204      	str	r2, [sp, #16]
 80087f8:	4414      	add	r4, r2
 80087fa:	9403      	str	r4, [sp, #12]
 80087fc:	2206      	movs	r2, #6
 80087fe:	9202      	str	r2, [sp, #8]
 8008800:	9101      	str	r1, [sp, #4]
 8008802:	2203      	movs	r2, #3
 8008804:	9200      	str	r2, [sp, #0]
 8008806:	f105 0210 	add.w	r2, r5, #16
 800880a:	4628      	mov	r0, r5
 800880c:	f001 fdb0 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8008810:	f000 bd56 	b.w	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 8008814:	2b08      	cmp	r3, #8
 8008816:	d8e6      	bhi.n	80087e6 <fFrameHandler+0x432>
 8008818:	e8df f013 	tbh	[pc, r3, lsl #1]
 800881c:	001d0009 	.word	0x001d0009
 8008820:	00650028 	.word	0x00650028
 8008824:	008b007a 	.word	0x008b007a
 8008828:	00e400b8 	.word	0x00e400b8
 800882c:	0111      	.short	0x0111
              if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 800882e:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8008832:	d004      	beq.n	800883e <fFrameHandler+0x48a>
                dbHandle->Enable = (*clientFrame->Payload == 0U) ? false : true;
 8008834:	783b      	ldrb	r3, [r7, #0]
 8008836:	3b00      	subs	r3, #0
 8008838:	bf18      	it	ne
 800883a:	2301      	movne	r3, #1
 800883c:	70ab      	strb	r3, [r5, #2]
              if(controlReqSeq != 0U) {
 800883e:	2e00      	cmp	r6, #0
 8008840:	f000 853e 	beq.w	80092c0 <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_CommonSendEnable(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq, true);
 8008844:	2301      	movs	r3, #1
 8008846:	4632      	mov	r2, r6
 8008848:	f105 0110 	add.w	r1, r5, #16
 800884c:	6860      	ldr	r0, [r4, #4]
 800884e:	f001 fe79 	bl	800a544 <fFaraabinLinkSerializer_CommonSendEnable>
  if(errorFobjectProperty) {
 8008852:	f000 bd35 	b.w	80092c0 <fFrameHandler+0xf0c>
              if(controlReqSeq != 0U) {
 8008856:	2e00      	cmp	r6, #0
 8008858:	f000 8532 	beq.w	80092c0 <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 800885c:	4632      	mov	r2, r6
 800885e:	f105 0110 	add.w	r1, r5, #16
 8008862:	4628      	mov	r0, r5
 8008864:	f001 fe82 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008868:	f000 bd2a 	b.w	80092c0 <fFrameHandler+0xf0c>
              channelNo.Byte[0] = param[0];
 800886c:	7839      	ldrb	r1, [r7, #0]
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	f361 0307 	bfi	r3, r1, #0, #8
              channelNo.Byte[1] = param[1];
 8008876:	787a      	ldrb	r2, [r7, #1]
 8008878:	f362 230f 	bfi	r3, r2, #8, #8
              if(channelNo.U16 >= dbHandle->ChannelQty) {
 800887c:	b29b      	uxth	r3, r3
 800887e:	8a6a      	ldrh	r2, [r5, #18]
 8008880:	429a      	cmp	r2, r3
 8008882:	d91a      	bls.n	80088ba <fFrameHandler+0x506>
                if(dbHandle->_pBufferChannels[channelNo.U16].ItemFobjectPtr != 0U) {
 8008884:	696a      	ldr	r2, [r5, #20]
 8008886:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	b152      	cbz	r2, 80088a4 <fFrameHandler+0x4f0>
              bool itemEnable = (param[0] != 0U);
 800888e:	2900      	cmp	r1, #0
 8008890:	bf14      	ite	ne
 8008892:	2201      	movne	r2, #1
 8008894:	2200      	moveq	r2, #0
 8008896:	731a      	strb	r2, [r3, #12]
                    dbHandle->AvailableItemsQty++;
 8008898:	8bab      	ldrh	r3, [r5, #28]
 800889a:	bf14      	ite	ne
 800889c:	3301      	addne	r3, #1
                    dbHandle->AvailableItemsQty--;
 800889e:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80088a2:	83ab      	strh	r3, [r5, #28]
              if(controlReqSeq != 0U) {
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	f000 850b 	beq.w	80092c0 <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 80088aa:	4632      	mov	r2, r6
 80088ac:	f105 0110 	add.w	r1, r5, #16
 80088b0:	6860      	ldr	r0, [r4, #4]
 80088b2:	f001 fe5b 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 80088b6:	f000 bd03 	b.w	80092c0 <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_NOT_FREE_LOCATION_FOR_ATTACH, controlReqSeq);
 80088ba:	78ab      	ldrb	r3, [r5, #2]
 80088bc:	2201      	movs	r2, #1
 80088be:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c0:	2100      	movs	r1, #0
 80088c2:	9108      	str	r1, [sp, #32]
 80088c4:	9107      	str	r1, [sp, #28]
 80088c6:	9206      	str	r2, [sp, #24]
 80088c8:	9605      	str	r6, [sp, #20]
 80088ca:	9104      	str	r1, [sp, #16]
 80088cc:	9103      	str	r1, [sp, #12]
 80088ce:	2207      	movs	r2, #7
 80088d0:	9202      	str	r2, [sp, #8]
 80088d2:	9101      	str	r1, [sp, #4]
 80088d4:	2203      	movs	r2, #3
 80088d6:	9200      	str	r2, [sp, #0]
 80088d8:	f105 0210 	add.w	r2, r5, #16
 80088dc:	4628      	mov	r0, r5
 80088de:	f001 fd47 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 80088e2:	f000 bced 	b.w	80092c0 <fFrameHandler+0xf0c>
          dbHandle->ApiTrigEnable = (param[0] != 0U);
 80088e6:	783b      	ldrb	r3, [r7, #0]
 80088e8:	3b00      	subs	r3, #0
 80088ea:	bf18      	it	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	f885 306c 	strb.w	r3, [r5, #108]	@ 0x6c
          if(controlReqSeq != 0U) {
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	f000 84e4 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 80088f8:	4632      	mov	r2, r6
 80088fa:	f105 0110 	add.w	r1, r5, #16
 80088fe:	6860      	ldr	r0, [r4, #4]
 8008900:	f001 fe34 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008904:	f000 bcdc 	b.w	80092c0 <fFrameHandler+0xf0c>
 8008908:	2000279c 	.word	0x2000279c
 800890c:	20002bb4 	.word	0x20002bb4
          dbHandle->ChTrigEnable = (param[0] != 0U);
 8008910:	783b      	ldrb	r3, [r7, #0]
 8008912:	3b00      	subs	r3, #0
 8008914:	bf18      	it	ne
 8008916:	2301      	movne	r3, #1
 8008918:	f885 3089 	strb.w	r3, [r5, #137]	@ 0x89
          if(controlReqSeq != 0U) {
 800891c:	2e00      	cmp	r6, #0
 800891e:	f000 84cf 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008922:	4632      	mov	r2, r6
 8008924:	f105 0110 	add.w	r1, r5, #16
 8008928:	6860      	ldr	r0, [r4, #4]
 800892a:	f001 fe1f 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 800892e:	f000 bcc7 	b.w	80092c0 <fFrameHandler+0xf0c>
          chNo.Byte[0] = param[0];
 8008932:	783a      	ldrb	r2, [r7, #0]
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	f362 0307 	bfi	r3, r2, #0, #8
          chNo.Byte[1] = param[1];
 800893c:	787a      	ldrb	r2, [r7, #1]
 800893e:	f362 230f 	bfi	r3, r2, #8, #8
          uint8_t chTrigType = param[2];
 8008942:	f897 9002 	ldrb.w	r9, [r7, #2]
          if(dbHandle->ChTrigNo != chNo.U16) {
 8008946:	fa1f f883 	uxth.w	r8, r3
 800894a:	f8b5 308a 	ldrh.w	r3, [r5, #138]	@ 0x8a
 800894e:	4543      	cmp	r3, r8
 8008950:	d118      	bne.n	8008984 <fFrameHandler+0x5d0>
          dbHandle->ChTrigNo = chNo.U16;
 8008952:	f8a5 808a 	strh.w	r8, [r5, #138]	@ 0x8a
          dbHandle->ChTrigType = chTrigType;
 8008956:	f885 908c 	strb.w	r9, [r5, #140]	@ 0x8c
          for(int i=0; i<8; i++) {
 800895a:	1cbb      	adds	r3, r7, #2
 800895c:	f105 028f 	add.w	r2, r5, #143	@ 0x8f
 8008960:	370a      	adds	r7, #10
            dbHandle->ChTrigThreshold.Byte[i] = param[3 + i];
 8008962:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008966:	f802 1f01 	strb.w	r1, [r2, #1]!
          for(int i=0; i<8; i++) {
 800896a:	42bb      	cmp	r3, r7
 800896c:	d1f9      	bne.n	8008962 <fFrameHandler+0x5ae>
          if(controlReqSeq != 0U) {
 800896e:	2e00      	cmp	r6, #0
 8008970:	f000 84a6 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008974:	4632      	mov	r2, r6
 8008976:	f105 0110 	add.w	r1, r5, #16
 800897a:	6860      	ldr	r0, [r4, #4]
 800897c:	f001 fdf6 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008980:	f000 bc9e 	b.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinFobjectDataBus_ResetTrigger(dbHandle);
 8008984:	4628      	mov	r0, r5
 8008986:	f7ff f811 	bl	80079ac <fFaraabinFobjectDataBus_ResetTrigger>
 800898a:	e7e2      	b.n	8008952 <fFrameHandler+0x59e>
              divideBy.Byte[0] = param[0];
 800898c:	783a      	ldrb	r2, [r7, #0]
 800898e:	f04f 0300 	mov.w	r3, #0
 8008992:	f362 0307 	bfi	r3, r2, #0, #8
              divideBy.Byte[1] = param[1];
 8008996:	787a      	ldrb	r2, [r7, #1]
 8008998:	f362 230f 	bfi	r3, r2, #8, #8
              if(divideBy.U16 == 0) {
 800899c:	b29a      	uxth	r2, r3
 800899e:	b15a      	cbz	r2, 80089b8 <fFrameHandler+0x604>
								dbHandle->StreamDivideBy = divideBy.U16;
 80089a0:	83eb      	strh	r3, [r5, #30]
              if(controlReqSeq != 0U) {
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	f000 848c 	beq.w	80092c0 <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 80089a8:	4632      	mov	r2, r6
 80089aa:	f105 0110 	add.w	r1, r5, #16
 80089ae:	6860      	ldr	r0, [r4, #4]
 80089b0:	f001 fddc 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 80089b4:	f000 bc84 	b.w	80092c0 <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_PARAM, controlReqSeq);
 80089b8:	78ab      	ldrb	r3, [r5, #2]
 80089ba:	2201      	movs	r2, #1
 80089bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80089be:	2100      	movs	r1, #0
 80089c0:	9108      	str	r1, [sp, #32]
 80089c2:	9107      	str	r1, [sp, #28]
 80089c4:	9206      	str	r2, [sp, #24]
 80089c6:	9605      	str	r6, [sp, #20]
 80089c8:	9104      	str	r1, [sp, #16]
 80089ca:	9103      	str	r1, [sp, #12]
 80089cc:	220c      	movs	r2, #12
 80089ce:	9202      	str	r2, [sp, #8]
 80089d0:	9101      	str	r1, [sp, #4]
 80089d2:	2203      	movs	r2, #3
 80089d4:	9200      	str	r2, [sp, #0]
 80089d6:	f105 0210 	add.w	r2, r5, #16
 80089da:	4628      	mov	r0, r5
 80089dc:	f001 fcc8 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 80089e0:	f000 bc6e 	b.w	80092c0 <fFrameHandler+0xf0c>
              divideBy.Byte[0] = param[0];
 80089e4:	783a      	ldrb	r2, [r7, #0]
 80089e6:	f04f 0300 	mov.w	r3, #0
 80089ea:	f362 0307 	bfi	r3, r2, #0, #8
              divideBy.Byte[1] = param[1];
 80089ee:	787a      	ldrb	r2, [r7, #1]
 80089f0:	f362 230f 	bfi	r3, r2, #8, #8
              if(divideBy.U16 == 0) {
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	b162      	cbz	r2, 8008a12 <fFrameHandler+0x65e>
								dbHandle->TimerDivideBy = divideBy.U16;
 80089f8:	f8a5 304c 	strh.w	r3, [r5, #76]	@ 0x4c
              if(controlReqSeq != 0U) {
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	f000 845f 	beq.w	80092c0 <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008a02:	4632      	mov	r2, r6
 8008a04:	f105 0110 	add.w	r1, r5, #16
 8008a08:	6860      	ldr	r0, [r4, #4]
 8008a0a:	f001 fdaf 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008a0e:	f000 bc57 	b.w	80092c0 <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_PARAM, controlReqSeq);
 8008a12:	78ab      	ldrb	r3, [r5, #2]
 8008a14:	2201      	movs	r2, #1
 8008a16:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a18:	2100      	movs	r1, #0
 8008a1a:	9108      	str	r1, [sp, #32]
 8008a1c:	9107      	str	r1, [sp, #28]
 8008a1e:	9206      	str	r2, [sp, #24]
 8008a20:	9605      	str	r6, [sp, #20]
 8008a22:	9104      	str	r1, [sp, #16]
 8008a24:	9103      	str	r1, [sp, #12]
 8008a26:	220c      	movs	r2, #12
 8008a28:	9202      	str	r2, [sp, #8]
 8008a2a:	9101      	str	r1, [sp, #4]
 8008a2c:	2203      	movs	r2, #3
 8008a2e:	9200      	str	r2, [sp, #0]
 8008a30:	f105 0210 	add.w	r2, r5, #16
 8008a34:	4628      	mov	r0, r5
 8008a36:	f001 fc9b 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 8008a3a:	f000 bc41 	b.w	80092c0 <fFrameHandler+0xf0c>
              divideBy.Byte[0] = param[0];
 8008a3e:	783a      	ldrb	r2, [r7, #0]
 8008a40:	f04f 0300 	mov.w	r3, #0
 8008a44:	f362 0307 	bfi	r3, r2, #0, #8
              divideBy.Byte[1] = param[1];
 8008a48:	787a      	ldrb	r2, [r7, #1]
 8008a4a:	f362 230f 	bfi	r3, r2, #8, #8
              if(divideBy.U16 == 0) {
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	b162      	cbz	r2, 8008a6c <fFrameHandler+0x6b8>
								dbHandle->TrigDivideBy = divideBy.U16;
 8008a52:	f8a5 3050 	strh.w	r3, [r5, #80]	@ 0x50
              if(controlReqSeq != 0U) {
 8008a56:	2e00      	cmp	r6, #0
 8008a58:	f000 8432 	beq.w	80092c0 <fFrameHandler+0xf0c>
                fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	f105 0110 	add.w	r1, r5, #16
 8008a62:	6860      	ldr	r0, [r4, #4]
 8008a64:	f001 fd82 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008a68:	f000 bc2a 	b.w	80092c0 <fFrameHandler+0xf0c>
                Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_PARAM, controlReqSeq);
 8008a6c:	78ab      	ldrb	r3, [r5, #2]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a72:	2100      	movs	r1, #0
 8008a74:	9108      	str	r1, [sp, #32]
 8008a76:	9107      	str	r1, [sp, #28]
 8008a78:	9206      	str	r2, [sp, #24]
 8008a7a:	9605      	str	r6, [sp, #20]
 8008a7c:	9104      	str	r1, [sp, #16]
 8008a7e:	9103      	str	r1, [sp, #12]
 8008a80:	220c      	movs	r2, #12
 8008a82:	9202      	str	r2, [sp, #8]
 8008a84:	9101      	str	r1, [sp, #4]
 8008a86:	2203      	movs	r2, #3
 8008a88:	9200      	str	r2, [sp, #0]
 8008a8a:	f105 0210 	add.w	r2, r5, #16
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f001 fc6e 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
                return;
 8008a94:	f000 bc14 	b.w	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 8008a98:	2b0a      	cmp	r3, #10
 8008a9a:	f63f aea4 	bhi.w	80087e6 <fFrameHandler+0x432>
 8008a9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008aa2:	003b      	.short	0x003b
 8008aa4:	00bb008f 	.word	0x00bb008f
 8008aa8:	011c00de 	.word	0x011c00de
 8008aac:	01de017d 	.word	0x01de017d
 8008ab0:	023e01f8 	.word	0x023e01f8
 8008ab4:	000b0023 	.word	0x000b0023
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8008ab8:	8a6b      	ldrh	r3, [r5, #18]
 8008aba:	b15b      	cbz	r3, 8008ad4 <fFrameHandler+0x720>
 8008abc:	2300      	movs	r3, #0
            dbHandle->_pBufferChannels[i].Enable = false;
 8008abe:	4618      	mov	r0, r3
 8008ac0:	b299      	uxth	r1, r3
 8008ac2:	696a      	ldr	r2, [r5, #20]
 8008ac4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008ac8:	7310      	strb	r0, [r2, #12]
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8008aca:	3301      	adds	r3, #1
 8008acc:	8a69      	ldrh	r1, [r5, #18]
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	4291      	cmp	r1, r2
 8008ad2:	d8f5      	bhi.n	8008ac0 <fFrameHandler+0x70c>
          if(controlReqSeq != 0U) {
 8008ad4:	2e00      	cmp	r6, #0
 8008ad6:	f000 83f3 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008ada:	4632      	mov	r2, r6
 8008adc:	f105 0110 	add.w	r1, r5, #16
 8008ae0:	6860      	ldr	r0, [r4, #4]
 8008ae2:	f001 fd43 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008ae6:	e3eb      	b.n	80092c0 <fFrameHandler+0xf0c>
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8008ae8:	8a6b      	ldrh	r3, [r5, #18]
 8008aea:	b15b      	cbz	r3, 8008b04 <fFrameHandler+0x750>
 8008aec:	2300      	movs	r3, #0
            dbHandle->_pBufferChannels[i].Enable = true;
 8008aee:	2001      	movs	r0, #1
 8008af0:	b299      	uxth	r1, r3
 8008af2:	696a      	ldr	r2, [r5, #20]
 8008af4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008af8:	7310      	strb	r0, [r2, #12]
          for(uint16_t i = 0; i < dbHandle->ChannelQty; i++) {
 8008afa:	3301      	adds	r3, #1
 8008afc:	8a69      	ldrh	r1, [r5, #18]
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	4291      	cmp	r1, r2
 8008b02:	d8f5      	bhi.n	8008af0 <fFrameHandler+0x73c>
          if(controlReqSeq != 0U) {
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	f000 83db 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008b0a:	4632      	mov	r2, r6
 8008b0c:	f105 0110 	add.w	r1, r5, #16
 8008b10:	6860      	ldr	r0, [r4, #4]
 8008b12:	f001 fd2b 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008b16:	e3d3      	b.n	80092c0 <fFrameHandler+0xf0c>
          uint8_t itemFobjectType = param[0];
 8008b18:	7838      	ldrb	r0, [r7, #0]
          itemFobjectPtr.Byte[0] = param[1];
 8008b1a:	787b      	ldrb	r3, [r7, #1]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f363 0207 	bfi	r2, r3, #0, #8
          itemFobjectPtr.Byte[1] = param[2];
 8008b22:	78bb      	ldrb	r3, [r7, #2]
 8008b24:	f363 220f 	bfi	r2, r3, #8, #8
          itemFobjectPtr.Byte[2] = param[3];
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	f363 4217 	bfi	r2, r3, #16, #8
          itemFobjectPtr.Byte[3] = param[4];
 8008b2e:	793b      	ldrb	r3, [r7, #4]
 8008b30:	f363 621f 	bfi	r2, r3, #24, #8
          itemFobjectParam.Byte[0] = param[5];
 8008b34:	7979      	ldrb	r1, [r7, #5]
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	f361 0307 	bfi	r3, r1, #0, #8
          itemFobjectParam.Byte[1] = param[6];
 8008b3e:	79b9      	ldrb	r1, [r7, #6]
 8008b40:	f361 230f 	bfi	r3, r1, #8, #8
          uint8_t varTypeArchitecture = param[7];
 8008b44:	f897 e007 	ldrb.w	lr, [r7, #7]
          uint8_t varPrimitiveId = param[8];
 8008b48:	f897 8008 	ldrb.w	r8, [r7, #8]
          itemChannelNo.Byte[0] = param[9];
 8008b4c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8008b50:	f04f 0100 	mov.w	r1, #0
 8008b54:	f36c 0107 	bfi	r1, ip, #0, #8
          itemChannelNo.Byte[1] = param[10];
 8008b58:	7abf      	ldrb	r7, [r7, #10]
 8008b5a:	f367 210f 	bfi	r1, r7, #8, #8
          if(itemFobjectType == (uint8_t)eFO_TYPE_CODE_BLOCK) {
 8008b5e:	280a      	cmp	r0, #10
 8008b60:	d014      	beq.n	8008b8c <fFrameHandler+0x7d8>
            ret = fFaraabinFobjectDataBus_AttachVariableToChannel(dbHandle, itemChannelNo.U16, itemFobjectPtr.U32, itemFobjectParam.U16, varTypeArchitecture, varPrimitiveId, itemFobjectType);
 8008b62:	9002      	str	r0, [sp, #8]
 8008b64:	f8cd 8004 	str.w	r8, [sp, #4]
 8008b68:	f8cd e000 	str.w	lr, [sp]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	b289      	uxth	r1, r1
 8008b70:	4628      	mov	r0, r5
 8008b72:	f7ff f86f 	bl	8007c54 <fFaraabinFobjectDataBus_AttachVariableToChannel>
          if(ret != FARAABIN_DB_OK) {
 8008b76:	b970      	cbnz	r0, 8008b96 <fFrameHandler+0x7e2>
            if(controlReqSeq != 0U) {
 8008b78:	2e00      	cmp	r6, #0
 8008b7a:	f000 83a1 	beq.w	80092c0 <fFrameHandler+0xf0c>
              fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008b7e:	4632      	mov	r2, r6
 8008b80:	f105 0110 	add.w	r1, r5, #16
 8008b84:	6860      	ldr	r0, [r4, #4]
 8008b86:	f001 fcf1 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008b8a:	e399      	b.n	80092c0 <fFrameHandler+0xf0c>
            ret = fFaraabinFobjectDataBus_AttachCodeBlockToChannel(dbHandle, itemChannelNo.U16, itemFobjectPtr.U32);
 8008b8c:	b289      	uxth	r1, r1
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f7ff f8d2 	bl	8007d38 <fFaraabinFobjectDataBus_AttachCodeBlockToChannel>
 8008b94:	e7ef      	b.n	8008b76 <fFrameHandler+0x7c2>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_ATTACH, controlReqSeq);
 8008b96:	78ab      	ldrb	r3, [r5, #2]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	9108      	str	r1, [sp, #32]
 8008ba0:	9107      	str	r1, [sp, #28]
 8008ba2:	9206      	str	r2, [sp, #24]
 8008ba4:	9605      	str	r6, [sp, #20]
 8008ba6:	9104      	str	r1, [sp, #16]
 8008ba8:	9103      	str	r1, [sp, #12]
 8008baa:	220e      	movs	r2, #14
 8008bac:	9202      	str	r2, [sp, #8]
 8008bae:	9101      	str	r1, [sp, #4]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	9200      	str	r2, [sp, #0]
 8008bb4:	f105 0210 	add.w	r2, r5, #16
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f001 fbd9 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8008bbe:	e37f      	b.n	80092c0 <fFrameHandler+0xf0c>
          itemChannelNo.Byte[0] = param[0];
 8008bc0:	783b      	ldrb	r3, [r7, #0]
 8008bc2:	f04f 0100 	mov.w	r1, #0
 8008bc6:	f363 0107 	bfi	r1, r3, #0, #8
          itemChannelNo.Byte[1] = param[1];
 8008bca:	787b      	ldrb	r3, [r7, #1]
 8008bcc:	f363 210f 	bfi	r1, r3, #8, #8
          ret = fFaraabinFobjectDataBus_DetachFromChannel(dbHandle, itemChannelNo.U16);
 8008bd0:	b289      	uxth	r1, r1
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f7ff f8c0 	bl	8007d58 <fFaraabinFobjectDataBus_DetachFromChannel>
          if(ret != FARAABIN_DB_OK) {
 8008bd8:	b948      	cbnz	r0, 8008bee <fFrameHandler+0x83a>
            if(controlReqSeq != 0U) {
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	f000 8370 	beq.w	80092c0 <fFrameHandler+0xf0c>
              fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008be0:	4632      	mov	r2, r6
 8008be2:	f105 0110 	add.w	r1, r5, #16
 8008be6:	6860      	ldr	r0, [r4, #4]
 8008be8:	f001 fcc0 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008bec:	e368      	b.n	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_DETACH, controlReqSeq);
 8008bee:	78ab      	ldrb	r3, [r5, #2]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	9108      	str	r1, [sp, #32]
 8008bf8:	9107      	str	r1, [sp, #28]
 8008bfa:	9206      	str	r2, [sp, #24]
 8008bfc:	9605      	str	r6, [sp, #20]
 8008bfe:	9104      	str	r1, [sp, #16]
 8008c00:	9103      	str	r1, [sp, #12]
 8008c02:	220d      	movs	r2, #13
 8008c04:	9202      	str	r2, [sp, #8]
 8008c06:	9101      	str	r1, [sp, #4]
 8008c08:	2203      	movs	r2, #3
 8008c0a:	9200      	str	r2, [sp, #0]
 8008c0c:	f105 0210 	add.w	r2, r5, #16
 8008c10:	4628      	mov	r0, r5
 8008c12:	f001 fbad 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8008c16:	e353      	b.n	80092c0 <fFrameHandler+0xf0c>
          if(fFaraabinFobjectDataBus_DetachAllChannels(dbHandle) != FARAABIN_DB_OK) {
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f7ff f8cd 	bl	8007db8 <fFaraabinFobjectDataBus_DetachAllChannels>
 8008c1e:	b948      	cbnz	r0, 8008c34 <fFrameHandler+0x880>
          if(controlReqSeq != 0U) {
 8008c20:	2e00      	cmp	r6, #0
 8008c22:	f000 834d 	beq.w	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_DataBusSendSetting(clientFrame->FobjectPtr, &dbHandle->Seq, controlReqSeq);
 8008c26:	4632      	mov	r2, r6
 8008c28:	f105 0110 	add.w	r1, r5, #16
 8008c2c:	6860      	ldr	r0, [r4, #4]
 8008c2e:	f001 fc9d 	bl	800a56c <fFaraabinLinkSerializer_DataBusSendSetting>
  if(errorFobjectProperty) {
 8008c32:	e345      	b.n	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_CODE_BLOCK_NOT_EMPTY, controlReqSeq);
 8008c34:	78ab      	ldrb	r3, [r5, #2]
 8008c36:	2201      	movs	r2, #1
 8008c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	9108      	str	r1, [sp, #32]
 8008c3e:	9107      	str	r1, [sp, #28]
 8008c40:	9206      	str	r2, [sp, #24]
 8008c42:	9605      	str	r6, [sp, #20]
 8008c44:	9104      	str	r1, [sp, #16]
 8008c46:	9103      	str	r1, [sp, #12]
 8008c48:	220b      	movs	r2, #11
 8008c4a:	9202      	str	r2, [sp, #8]
 8008c4c:	9101      	str	r1, [sp, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	9200      	str	r2, [sp, #0]
 8008c52:	f105 0210 	add.w	r2, r5, #16
 8008c56:	4628      	mov	r0, r5
 8008c58:	f001 fb8a 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8008c5c:	e7e0      	b.n	8008c20 <fFrameHandler+0x86c>
          streamDivideBy.Byte[0] = param[0];
 8008c5e:	783a      	ldrb	r2, [r7, #0]
 8008c60:	f04f 0300 	mov.w	r3, #0
 8008c64:	f362 0307 	bfi	r3, r2, #0, #8
          streamDivideBy.Byte[1] = param[1];
 8008c68:	787a      	ldrb	r2, [r7, #1]
 8008c6a:	f362 230f 	bfi	r3, r2, #8, #8
          dbHandle->StreamDivideBy = streamDivideBy.U16;
 8008c6e:	83eb      	strh	r3, [r5, #30]
          fFaraabinFobjectDataBus_StartStream(dbHandle);
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7fe ff63 	bl	8007b3c <fFaraabinFobjectDataBus_StartStream>
          eventParam[0] = (uint8_t)dbHandle->CurrentState;
 8008c76:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 8008c7a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
          tmp2.U16 = dbHandle->StreamDivideBy;
 8008c7e:	8beb      	ldrh	r3, [r5, #30]
          eventParam[1] = tmp2.Byte[0];
 8008c80:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
          eventParam[2] = tmp2.Byte[1];
 8008c84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008c88:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
          tmp4.U32 = dbHandle->CycleUs;
 8008c8c:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
          eventParam[3] = tmp4.Byte[0];
 8008c90:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
          eventParam[4] = tmp4.Byte[1];
 8008c94:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008c98:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
          eventParam[5] = tmp4.Byte[2];
 8008c9c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008ca0:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
          eventParam[6] = tmp4.Byte[3];
 8008ca4:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008ca8:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
          Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 7U, controlReqSeq);
 8008cac:	78ab      	ldrb	r3, [r5, #2]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	9108      	str	r1, [sp, #32]
 8008cb6:	9107      	str	r1, [sp, #28]
 8008cb8:	9206      	str	r2, [sp, #24]
 8008cba:	9605      	str	r6, [sp, #20]
 8008cbc:	2207      	movs	r2, #7
 8008cbe:	9204      	str	r2, [sp, #16]
 8008cc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cc2:	9203      	str	r2, [sp, #12]
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	9202      	str	r2, [sp, #8]
 8008cc8:	9101      	str	r1, [sp, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	9200      	str	r2, [sp, #0]
 8008cce:	f105 0210 	add.w	r2, r5, #16
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f001 fb4c 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008cd8:	e2f2      	b.n	80092c0 <fFrameHandler+0xf0c>
          if(dbHandle->BufferCaptureSize > 0U) {
 8008cda:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 82ef 	beq.w	80092c0 <fFrameHandler+0xf0c>
            timeAfterTrigMs.Byte[0] = param[0];
 8008ce2:	783a      	ldrb	r2, [r7, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f362 0307 	bfi	r3, r2, #0, #8
            timeAfterTrigMs.Byte[1] = param[1];
 8008cea:	787a      	ldrb	r2, [r7, #1]
 8008cec:	f362 230f 	bfi	r3, r2, #8, #8
            timeAfterTrigMs.Byte[2] = param[2];
 8008cf0:	78ba      	ldrb	r2, [r7, #2]
 8008cf2:	f362 4317 	bfi	r3, r2, #16, #8
            timeAfterTrigMs.Byte[3] = param[3];
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	f362 631f 	bfi	r3, r2, #24, #8
            dbHandle->TimeAfterTrigMs = timeAfterTrigMs.U32;
 8008cfc:	636b      	str	r3, [r5, #52]	@ 0x34
            trigDivideBy.Byte[0] = param[4];
 8008cfe:	793a      	ldrb	r2, [r7, #4]
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	f362 0307 	bfi	r3, r2, #0, #8
            trigDivideBy.Byte[1] = param[5];
 8008d08:	797a      	ldrb	r2, [r7, #5]
 8008d0a:	f362 230f 	bfi	r3, r2, #8, #8
            dbHandle->TrigDivideBy = trigDivideBy.U16;
 8008d0e:	f8a5 3050 	strh.w	r3, [r5, #80]	@ 0x50
            fFaraabinFobjectDataBus_StartTrigger(dbHandle);
 8008d12:	4628      	mov	r0, r5
 8008d14:	f7fe ff48 	bl	8007ba8 <fFaraabinFobjectDataBus_StartTrigger>
            eventParam[0] = (uint8_t)dbHandle->CurrentState;
 8008d18:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 8008d1c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
            tmp4.U32 = dbHandle->TimeAfterTrigMs;
 8008d20:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            eventParam[1] = tmp4.Byte[0];
 8008d22:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
            eventParam[2] = tmp4.Byte[1];
 8008d26:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008d2a:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            eventParam[3] = tmp4.Byte[2];
 8008d2e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008d32:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
            eventParam[4] = tmp4.Byte[3];
 8008d36:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008d3a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            tmp2.U16 = dbHandle->TrigDivideBy;
 8008d3e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
            eventParam[5] = tmp2.Byte[0];
 8008d42:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
            eventParam[6] = tmp2.Byte[1];
 8008d46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008d4a:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
            tmp4.U32 = dbHandle->CycleUs;
 8008d4e:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
            eventParam[7] = tmp4.Byte[0];
 8008d52:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
            eventParam[8] = tmp4.Byte[1];
 8008d56:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008d5a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
            eventParam[9] = tmp4.Byte[2];
 8008d5e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008d62:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
            eventParam[10] = tmp4.Byte[3];
 8008d66:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008d6a:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
            Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 11U, controlReqSeq);        
 8008d6e:	78ab      	ldrb	r3, [r5, #2]
 8008d70:	2201      	movs	r2, #1
 8008d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d74:	2100      	movs	r1, #0
 8008d76:	9108      	str	r1, [sp, #32]
 8008d78:	9107      	str	r1, [sp, #28]
 8008d7a:	9206      	str	r2, [sp, #24]
 8008d7c:	9605      	str	r6, [sp, #20]
 8008d7e:	220b      	movs	r2, #11
 8008d80:	9204      	str	r2, [sp, #16]
 8008d82:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d84:	9203      	str	r2, [sp, #12]
 8008d86:	2203      	movs	r2, #3
 8008d88:	9202      	str	r2, [sp, #8]
 8008d8a:	9101      	str	r1, [sp, #4]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	9200      	str	r2, [sp, #0]
 8008d90:	f105 0210 	add.w	r2, r5, #16
 8008d94:	4628      	mov	r0, r5
 8008d96:	f001 faeb 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008d9a:	e291      	b.n	80092c0 <fFrameHandler+0xf0c>
          if(dbHandle->BufferCaptureSize > 0U) {
 8008d9c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 828e 	beq.w	80092c0 <fFrameHandler+0xf0c>
            timerWindowMs.Byte[0] = param[0];
 8008da4:	783a      	ldrb	r2, [r7, #0]
 8008da6:	2300      	movs	r3, #0
 8008da8:	f362 0307 	bfi	r3, r2, #0, #8
            timerWindowMs.Byte[1] = param[1];
 8008dac:	787a      	ldrb	r2, [r7, #1]
 8008dae:	f362 230f 	bfi	r3, r2, #8, #8
            timerWindowMs.Byte[2] = param[2];
 8008db2:	78ba      	ldrb	r2, [r7, #2]
 8008db4:	f362 4317 	bfi	r3, r2, #16, #8
            timerWindowMs.Byte[3] = param[3];
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	f362 631f 	bfi	r3, r2, #24, #8
            dbHandle->TimerWindowMs = timerWindowMs.U32;
 8008dbe:	632b      	str	r3, [r5, #48]	@ 0x30
            timerDivideBy.Byte[0] = param[4];
 8008dc0:	793a      	ldrb	r2, [r7, #4]
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	f362 0307 	bfi	r3, r2, #0, #8
            timerDivideBy.Byte[1] = param[5];
 8008dca:	797a      	ldrb	r2, [r7, #5]
 8008dcc:	f362 230f 	bfi	r3, r2, #8, #8
            dbHandle->TimerDivideBy = timerDivideBy.U16;
 8008dd0:	f8a5 304c 	strh.w	r3, [r5, #76]	@ 0x4c
            fFaraabinFobjectDataBus_StartTimer(dbHandle);
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f7fe fec5 	bl	8007b64 <fFaraabinFobjectDataBus_StartTimer>
            eventParam[0] = (uint8_t)dbHandle->CurrentState;
 8008dda:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 8008dde:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
            tmp4.U32 = dbHandle->TimerWindowMs;
 8008de2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
            eventParam[1] = tmp4.Byte[0];
 8008de4:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
            eventParam[2] = tmp4.Byte[1];
 8008de8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008dec:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            eventParam[3] = tmp4.Byte[2];
 8008df0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008df4:	f88d 202f 	strb.w	r2, [sp, #47]	@ 0x2f
            eventParam[4] = tmp4.Byte[3];
 8008df8:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008dfc:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            tmp2.U16 = dbHandle->TimerDivideBy;
 8008e00:	f8b5 304c 	ldrh.w	r3, [r5, #76]	@ 0x4c
            eventParam[5] = tmp2.Byte[0];
 8008e04:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
            eventParam[6] = tmp2.Byte[1];
 8008e08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008e0c:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
            tmp4.U32 = dbHandle->CycleUs;
 8008e10:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
            eventParam[7] = tmp4.Byte[0];
 8008e14:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
            eventParam[8] = tmp4.Byte[1];
 8008e18:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008e1c:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
            eventParam[9] = tmp4.Byte[2];
 8008e20:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008e24:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
            eventParam[10] = tmp4.Byte[3];
 8008e28:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008e2c:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
            Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 11U, controlReqSeq);        
 8008e30:	78ab      	ldrb	r3, [r5, #2]
 8008e32:	2201      	movs	r2, #1
 8008e34:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e36:	2100      	movs	r1, #0
 8008e38:	9108      	str	r1, [sp, #32]
 8008e3a:	9107      	str	r1, [sp, #28]
 8008e3c:	9206      	str	r2, [sp, #24]
 8008e3e:	9605      	str	r6, [sp, #20]
 8008e40:	220b      	movs	r2, #11
 8008e42:	9204      	str	r2, [sp, #16]
 8008e44:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e46:	9203      	str	r2, [sp, #12]
 8008e48:	2203      	movs	r2, #3
 8008e4a:	9202      	str	r2, [sp, #8]
 8008e4c:	9101      	str	r1, [sp, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	9200      	str	r2, [sp, #0]
 8008e52:	f105 0210 	add.w	r2, r5, #16
 8008e56:	4628      	mov	r0, r5
 8008e58:	f001 fa8a 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008e5c:	e230      	b.n	80092c0 <fFrameHandler+0xf0c>
          fFaraabinFobjectDataBus_Stop(dbHandle);
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f7fe fee4 	bl	8007c2c <fFaraabinFobjectDataBus_Stop>
          Faraabin_EventSystem_ParamEndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, (uint8_t*)&dbHandle->CurrentState, 1, controlReqSeq);
 8008e64:	78ab      	ldrb	r3, [r5, #2]
 8008e66:	2201      	movs	r2, #1
 8008e68:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	9108      	str	r1, [sp, #32]
 8008e6e:	9107      	str	r1, [sp, #28]
 8008e70:	9206      	str	r2, [sp, #24]
 8008e72:	9605      	str	r6, [sp, #20]
 8008e74:	9204      	str	r2, [sp, #16]
 8008e76:	f105 0264 	add.w	r2, r5, #100	@ 0x64
 8008e7a:	9203      	str	r2, [sp, #12]
 8008e7c:	2203      	movs	r2, #3
 8008e7e:	9202      	str	r2, [sp, #8]
 8008e80:	9101      	str	r1, [sp, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	9200      	str	r2, [sp, #0]
 8008e86:	f105 0210 	add.w	r2, r5, #16
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f001 fa70 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008e90:	e216      	b.n	80092c0 <fFrameHandler+0xf0c>
          dbHandle->CaptureSendingCnt = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	65ab      	str	r3, [r5, #88]	@ 0x58
          dbHandle->CaptureSendingReqSeq = controlReqSeq;
 8008e96:	f885 605c 	strb.w	r6, [r5, #92]	@ 0x5c
          dbHandle->CaptureSendingQty = dbHandle->QueueItemCount;
 8008e9a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8008e9e:	656b      	str	r3, [r5, #84]	@ 0x54
          if(dbHandle->CaptureSendingQty == 0U) {
 8008ea0:	b9a3      	cbnz	r3, 8008ecc <fFrameHandler+0xb18>
            Faraabin_EventSystemException_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_ERROR_NO_CAPTURE_DATA_FOR_SEND, controlReqSeq);
 8008ea2:	78ab      	ldrb	r3, [r5, #2]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	9108      	str	r1, [sp, #32]
 8008eac:	9107      	str	r1, [sp, #28]
 8008eae:	9206      	str	r2, [sp, #24]
 8008eb0:	9605      	str	r6, [sp, #20]
 8008eb2:	9104      	str	r1, [sp, #16]
 8008eb4:	9103      	str	r1, [sp, #12]
 8008eb6:	2208      	movs	r2, #8
 8008eb8:	9202      	str	r2, [sp, #8]
 8008eba:	9101      	str	r1, [sp, #4]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	9200      	str	r2, [sp, #0]
 8008ec0:	f105 0210 	add.w	r2, r5, #16
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f001 fa53 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008eca:	e1f9      	b.n	80092c0 <fFrameHandler+0xf0c>
            dbHandle->CurrentState = eDATABUS_STATE_CAPTURE_SEND;
 8008ecc:	2205      	movs	r2, #5
 8008ece:	f885 2064 	strb.w	r2, [r5, #100]	@ 0x64
            eventParam[0] = (uint8_t)dbHandle->CurrentState;
 8008ed2:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
            eventParam[1] = tmp4.Byte[0];
 8008ed6:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
            eventParam[2] = tmp4.Byte[1];
 8008eda:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008ede:	f88d 102e 	strb.w	r1, [sp, #46]	@ 0x2e
            eventParam[3] = tmp4.Byte[2];
 8008ee2:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008ee6:	f88d 102f 	strb.w	r1, [sp, #47]	@ 0x2f
            eventParam[4] = tmp4.Byte[3];
 8008eea:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008eee:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            Faraabin_EventSystem_ParamResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_STATE_CHANGE, eventParam, 5U, controlReqSeq);
 8008ef2:	78ab      	ldrb	r3, [r5, #2]
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ef8:	9108      	str	r1, [sp, #32]
 8008efa:	9107      	str	r1, [sp, #28]
 8008efc:	2001      	movs	r0, #1
 8008efe:	9006      	str	r0, [sp, #24]
 8008f00:	9605      	str	r6, [sp, #20]
 8008f02:	9204      	str	r2, [sp, #16]
 8008f04:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008f06:	9203      	str	r2, [sp, #12]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	9202      	str	r2, [sp, #8]
 8008f0c:	9101      	str	r1, [sp, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	9200      	str	r2, [sp, #0]
 8008f12:	f105 0210 	add.w	r2, r5, #16
 8008f16:	4628      	mov	r0, r5
 8008f18:	f001 fa2a 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008f1c:	e1d0      	b.n	80092c0 <fFrameHandler+0xf0c>
          fFaraabinFobjectDataBus_ForceManualTrigger(dbHandle);
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f7fe fe64 	bl	8007bec <fFaraabinFobjectDataBus_ForceManualTrigger>
          Faraabin_EventSystem_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_MANUAL_TRIG, controlReqSeq);
 8008f24:	78ab      	ldrb	r3, [r5, #2]
 8008f26:	2201      	movs	r2, #1
 8008f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	9108      	str	r1, [sp, #32]
 8008f2e:	9107      	str	r1, [sp, #28]
 8008f30:	9206      	str	r2, [sp, #24]
 8008f32:	9605      	str	r6, [sp, #20]
 8008f34:	9104      	str	r1, [sp, #16]
 8008f36:	9103      	str	r1, [sp, #12]
 8008f38:	2205      	movs	r2, #5
 8008f3a:	9202      	str	r2, [sp, #8]
 8008f3c:	9101      	str	r1, [sp, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	9200      	str	r2, [sp, #0]
 8008f42:	f105 0210 	add.w	r2, r5, #16
 8008f46:	4628      	mov	r0, r5
 8008f48:	f001 fa12 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008f4c:	e1b8      	b.n	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	f47f ac49 	bne.w	80087e6 <fFrameHandler+0x432>
          clientFrame->Payload[clientFrame->PayloadSize] = 0x00U; // Terminate end of data
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	54fa      	strb	r2, [r7, r3]
          if(dbHandle->fpUserTerminalCallback != NULL) {
 8008f5a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8008f5c:	b113      	cbz	r3, 8008f64 <fFrameHandler+0xbb0>
            dbHandle->fpUserTerminalCallback(clientFrame->Payload, clientFrame->PayloadSize);
 8008f5e:	89a1      	ldrh	r1, [r4, #12]
 8008f60:	68a0      	ldr	r0, [r4, #8]
 8008f62:	4798      	blx	r3
          if(controlReqSeq != 0U) {
 8008f64:	2e00      	cmp	r6, #0
 8008f66:	f000 81ab 	beq.w	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystem_EndResponse_((uint32_t)dbHandle, &dbHandle->Seq, dbHandle->Enable, eDATABUS_EVENT_INFO_USER_DATA_RECEIVED, controlReqSeq);
 8008f6a:	78ab      	ldrb	r3, [r5, #2]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f70:	2100      	movs	r1, #0
 8008f72:	9108      	str	r1, [sp, #32]
 8008f74:	9107      	str	r1, [sp, #28]
 8008f76:	9206      	str	r2, [sp, #24]
 8008f78:	9605      	str	r6, [sp, #20]
 8008f7a:	9104      	str	r1, [sp, #16]
 8008f7c:	9103      	str	r1, [sp, #12]
 8008f7e:	9102      	str	r1, [sp, #8]
 8008f80:	9101      	str	r1, [sp, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	9200      	str	r2, [sp, #0]
 8008f86:	f105 0210 	add.w	r2, r5, #16
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f001 f9f0 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 8008f90:	e196      	b.n	80092c0 <fFrameHandler+0xf0c>
  
  bool errorFobjectProperty = false;
    
  sFaraabinFobjectFunction *fnHandle = (sFaraabinFobjectFunction*)clientFrame->FobjectPtr;
  uint8_t *param = (uint8_t*)clientFrame->Payload;
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 8008f92:	7863      	ldrb	r3, [r4, #1]
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
  
  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 8008f94:	095a      	lsrs	r2, r3, #5
 8008f96:	2a03      	cmp	r2, #3
 8008f98:	f040 8192 	bne.w	80092c0 <fFrameHandler+0xf0c>
  sFaraabinFobjectFunction *fnHandle = (sFaraabinFobjectFunction*)clientFrame->FobjectPtr;
 8008f9c:	6866      	ldr	r6, [r4, #4]
  uint8_t *param = (uint8_t*)clientFrame->Payload;
 8008f9e:	68a2      	ldr	r2, [r4, #8]
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 8008fa0:	7821      	ldrb	r1, [r4, #0]
 8008fa2:	f001 050f 	and.w	r5, r1, #15
    
    case eFB_PROP_GROUP_COMMAND: {
      
      eFaraabinLinkSerializer_FunctionPropertyIdCommand propId = (eFaraabinLinkSerializer_FunctionPropertyIdCommand)framePropId;

      switch(propId) {
 8008fa6:	f003 031f 	and.w	r3, r3, #31
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	f200 8117 	bhi.w	80091de <fFrameHandler+0xe2a>
 8008fb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fb4:	00610004 	.word	0x00610004
 8008fb8:	00d9009d 	.word	0x00d9009d
        
        case eFB_FN_PROP_ID_COMMAND_RUN: {
          
          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 8008fbc:	7813      	ldrb	r3, [r2, #0]
 8008fbe:	2400      	movs	r4, #0
 8008fc0:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 8008fc4:	7853      	ldrb	r3, [r2, #1]
 8008fc6:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 8008fca:	7893      	ldrb	r3, [r2, #2]
 8008fcc:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 8008fd0:	78d3      	ldrb	r3, [r2, #3]
 8008fd2:	f363 641f 	bfi	r4, r3, #24, #8
          
          uByte2 paramSize;
          paramSize.Byte[0] = param[4];
 8008fd6:	7911      	ldrb	r1, [r2, #4]
 8008fd8:	f04f 0300 	mov.w	r3, #0
 8008fdc:	f361 0307 	bfi	r3, r1, #0, #8
          paramSize.Byte[1] = param[5];
 8008fe0:	7951      	ldrb	r1, [r2, #5]
 8008fe2:	f361 230f 	bfi	r3, r1, #8, #8

          uint8_t ret = fFaraabinFunctionEngine_Start((uint32_t)fnHandle, objectPtr.U32, &(param[6]), paramSize.U16);
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	3206      	adds	r2, #6
 8008fea:	4621      	mov	r1, r4
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7ff f8f3 	bl	80081d8 <fFaraabinFunctionEngine_Start>

          if(ret == FB_FENGINE_FUNCTION_ALREADY_RUNNING) {
 8008ff2:	2801      	cmp	r0, #1
 8008ff4:	d015      	beq.n	8009022 <fFrameHandler+0xc6e>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_IS_RUNNING_NOW, controlReqSeq);
            
            break;
          }

          if(ret == FB_FENGINE_MAX_CONCURRENT_LIMIT_REACHED) {
 8008ff6:	2802      	cmp	r0, #2
 8008ff8:	d028      	beq.n	800904c <fFrameHandler+0xc98>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_MAX_CONCURRENT_CMD_REACHED, controlReqSeq);
            
            break;
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_RUN, controlReqSeq);
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ffe:	2200      	movs	r2, #0
 8009000:	9208      	str	r2, [sp, #32]
 8009002:	9207      	str	r2, [sp, #28]
 8009004:	9306      	str	r3, [sp, #24]
 8009006:	9505      	str	r5, [sp, #20]
 8009008:	9204      	str	r2, [sp, #16]
 800900a:	9203      	str	r2, [sp, #12]
 800900c:	9302      	str	r3, [sp, #8]
 800900e:	9201      	str	r2, [sp, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	9200      	str	r2, [sp, #0]
 8009014:	f106 020c 	add.w	r2, r6, #12
 8009018:	4621      	mov	r1, r4
 800901a:	4630      	mov	r0, r6
 800901c:	f001 f9a8 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
          
          break;
 8009020:	e14e      	b.n	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_IS_RUNNING_NOW, controlReqSeq);
 8009022:	2301      	movs	r3, #1
 8009024:	9309      	str	r3, [sp, #36]	@ 0x24
 8009026:	2200      	movs	r2, #0
 8009028:	9208      	str	r2, [sp, #32]
 800902a:	9207      	str	r2, [sp, #28]
 800902c:	9306      	str	r3, [sp, #24]
 800902e:	9505      	str	r5, [sp, #20]
 8009030:	9204      	str	r2, [sp, #16]
 8009032:	9203      	str	r2, [sp, #12]
 8009034:	2106      	movs	r1, #6
 8009036:	9102      	str	r1, [sp, #8]
 8009038:	9201      	str	r2, [sp, #4]
 800903a:	2203      	movs	r2, #3
 800903c:	9200      	str	r2, [sp, #0]
 800903e:	f106 020c 	add.w	r2, r6, #12
 8009042:	4621      	mov	r1, r4
 8009044:	4630      	mov	r0, r6
 8009046:	f001 f993 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 800904a:	e139      	b.n	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_MAX_CONCURRENT_CMD_REACHED, controlReqSeq);
 800904c:	2301      	movs	r3, #1
 800904e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009050:	2200      	movs	r2, #0
 8009052:	9208      	str	r2, [sp, #32]
 8009054:	9207      	str	r2, [sp, #28]
 8009056:	9306      	str	r3, [sp, #24]
 8009058:	9505      	str	r5, [sp, #20]
 800905a:	9204      	str	r2, [sp, #16]
 800905c:	9203      	str	r2, [sp, #12]
 800905e:	2107      	movs	r1, #7
 8009060:	9102      	str	r1, [sp, #8]
 8009062:	9201      	str	r2, [sp, #4]
 8009064:	2203      	movs	r2, #3
 8009066:	9200      	str	r2, [sp, #0]
 8009068:	f106 020c 	add.w	r2, r6, #12
 800906c:	4621      	mov	r1, r4
 800906e:	4630      	mov	r0, r6
 8009070:	f001 f97e 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 8009074:	e124      	b.n	80092c0 <fFrameHandler+0xf0c>
        }
        
        case eFB_FN_PROP_ID_COMMAND_STOP: {
          
          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 8009076:	7813      	ldrb	r3, [r2, #0]
 8009078:	2400      	movs	r4, #0
 800907a:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 800907e:	7853      	ldrb	r3, [r2, #1]
 8009080:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 8009084:	7893      	ldrb	r3, [r2, #2]
 8009086:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 800908a:	78d3      	ldrb	r3, [r2, #3]
 800908c:	f363 641f 	bfi	r4, r3, #24, #8
          
          uint8_t ret = fFaraabinFunctionEngine_Stop(clientFrame->FobjectPtr, objectPtr.U32);
 8009090:	4621      	mov	r1, r4
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff f8f6 	bl	8008284 <fFaraabinFunctionEngine_Stop>

          if(ret == FB_FENGINE_FUNCTION_NOT_IN_LIST) {
 8009098:	2803      	cmp	r0, #3
 800909a:	d013      	beq.n	80090c4 <fFrameHandler+0xd10>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
            
            break;
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_STOP, controlReqSeq);
 800909c:	2301      	movs	r3, #1
 800909e:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a0:	2200      	movs	r2, #0
 80090a2:	9208      	str	r2, [sp, #32]
 80090a4:	9207      	str	r2, [sp, #28]
 80090a6:	9306      	str	r3, [sp, #24]
 80090a8:	9505      	str	r5, [sp, #20]
 80090aa:	9204      	str	r2, [sp, #16]
 80090ac:	9203      	str	r2, [sp, #12]
 80090ae:	2102      	movs	r1, #2
 80090b0:	9102      	str	r1, [sp, #8]
 80090b2:	9201      	str	r2, [sp, #4]
 80090b4:	9100      	str	r1, [sp, #0]
 80090b6:	f106 020c 	add.w	r2, r6, #12
 80090ba:	4621      	mov	r1, r4
 80090bc:	4630      	mov	r0, r6
 80090be:	f001 f957 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>

          break;
 80090c2:	e0fd      	b.n	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystemExceptionExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
 80090c4:	2301      	movs	r3, #1
 80090c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090c8:	2200      	movs	r2, #0
 80090ca:	9208      	str	r2, [sp, #32]
 80090cc:	9207      	str	r2, [sp, #28]
 80090ce:	9306      	str	r3, [sp, #24]
 80090d0:	9505      	str	r5, [sp, #20]
 80090d2:	9204      	str	r2, [sp, #16]
 80090d4:	9203      	str	r2, [sp, #12]
 80090d6:	2108      	movs	r1, #8
 80090d8:	9102      	str	r1, [sp, #8]
 80090da:	9201      	str	r2, [sp, #4]
 80090dc:	2203      	movs	r2, #3
 80090de:	9200      	str	r2, [sp, #0]
 80090e0:	f106 020c 	add.w	r2, r6, #12
 80090e4:	4621      	mov	r1, r4
 80090e6:	4630      	mov	r0, r6
 80090e8:	f001 f942 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 80090ec:	e0e8      	b.n	80092c0 <fFrameHandler+0xf0c>
        }
        
        case eFB_FN_PROP_ID_COMMAND_PAUSE: {

          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 80090ee:	7813      	ldrb	r3, [r2, #0]
 80090f0:	2400      	movs	r4, #0
 80090f2:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 80090f6:	7853      	ldrb	r3, [r2, #1]
 80090f8:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 80090fc:	7893      	ldrb	r3, [r2, #2]
 80090fe:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 8009102:	78d3      	ldrb	r3, [r2, #3]
 8009104:	f363 641f 	bfi	r4, r3, #24, #8
          
          uint8_t ret = fFaraabinFunctionEngine_Pause(clientFrame->FobjectPtr, objectPtr.U32);
 8009108:	4621      	mov	r1, r4
 800910a:	4630      	mov	r0, r6
 800910c:	f7ff f8c7 	bl	800829e <fFaraabinFunctionEngine_Pause>
          
          if(ret == FB_FENGINE_FUNCTION_NOT_IN_LIST) {
 8009110:	2803      	cmp	r0, #3
 8009112:	d014      	beq.n	800913e <fFrameHandler+0xd8a>
            Faraabin_EventSystemException_EndResponse_((uint32_t)fnHandle, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
            
            break;
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_PAUSE, controlReqSeq);
 8009114:	2301      	movs	r3, #1
 8009116:	9309      	str	r3, [sp, #36]	@ 0x24
 8009118:	2200      	movs	r2, #0
 800911a:	9208      	str	r2, [sp, #32]
 800911c:	9207      	str	r2, [sp, #28]
 800911e:	9306      	str	r3, [sp, #24]
 8009120:	9505      	str	r5, [sp, #20]
 8009122:	9204      	str	r2, [sp, #16]
 8009124:	9203      	str	r2, [sp, #12]
 8009126:	2103      	movs	r1, #3
 8009128:	9102      	str	r1, [sp, #8]
 800912a:	9201      	str	r2, [sp, #4]
 800912c:	2202      	movs	r2, #2
 800912e:	9200      	str	r2, [sp, #0]
 8009130:	f106 020c 	add.w	r2, r6, #12
 8009134:	4621      	mov	r1, r4
 8009136:	4630      	mov	r0, r6
 8009138:	f001 f91a 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>

          break;
 800913c:	e0c0      	b.n	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)fnHandle, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
 800913e:	2301      	movs	r3, #1
 8009140:	9309      	str	r3, [sp, #36]	@ 0x24
 8009142:	2100      	movs	r1, #0
 8009144:	9108      	str	r1, [sp, #32]
 8009146:	9107      	str	r1, [sp, #28]
 8009148:	9306      	str	r3, [sp, #24]
 800914a:	9505      	str	r5, [sp, #20]
 800914c:	9104      	str	r1, [sp, #16]
 800914e:	9103      	str	r1, [sp, #12]
 8009150:	2208      	movs	r2, #8
 8009152:	9202      	str	r2, [sp, #8]
 8009154:	9101      	str	r1, [sp, #4]
 8009156:	2203      	movs	r2, #3
 8009158:	9200      	str	r2, [sp, #0]
 800915a:	f106 020c 	add.w	r2, r6, #12
 800915e:	4630      	mov	r0, r6
 8009160:	f001 f906 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 8009164:	e0ac      	b.n	80092c0 <fFrameHandler+0xf0c>
        }
        
        case eFB_FN_PROP_ID_COMMAND_RESUME: {

          uByte4 objectPtr;
          objectPtr.Byte[0] = param[0];
 8009166:	7813      	ldrb	r3, [r2, #0]
 8009168:	2400      	movs	r4, #0
 800916a:	f363 0407 	bfi	r4, r3, #0, #8
          objectPtr.Byte[1] = param[1];
 800916e:	7853      	ldrb	r3, [r2, #1]
 8009170:	f363 240f 	bfi	r4, r3, #8, #8
          objectPtr.Byte[2] = param[2];
 8009174:	7893      	ldrb	r3, [r2, #2]
 8009176:	f363 4417 	bfi	r4, r3, #16, #8
          objectPtr.Byte[3] = param[3];
 800917a:	78d3      	ldrb	r3, [r2, #3]
 800917c:	f363 641f 	bfi	r4, r3, #24, #8
          
          uint8_t ret = fFaraabinFunctionEngine_Resume(clientFrame->FobjectPtr, objectPtr.U32);
 8009180:	4621      	mov	r1, r4
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff f899 	bl	80082ba <fFaraabinFunctionEngine_Resume>
          
          if(ret == FB_FENGINE_FUNCTION_NOT_IN_LIST) {
 8009188:	2803      	cmp	r0, #3
 800918a:	d014      	beq.n	80091b6 <fFrameHandler+0xe02>
            
            break;
            
          }

          Faraabin_EventSystemExtended_EndResponse_((uint32_t)fnHandle, objectPtr.U32, &fnHandle->Seq, true, eFN_EVENT_INFO_RESUME, controlReqSeq);
 800918c:	2301      	movs	r3, #1
 800918e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009190:	2200      	movs	r2, #0
 8009192:	9208      	str	r2, [sp, #32]
 8009194:	9207      	str	r2, [sp, #28]
 8009196:	9306      	str	r3, [sp, #24]
 8009198:	9505      	str	r5, [sp, #20]
 800919a:	9204      	str	r2, [sp, #16]
 800919c:	9203      	str	r2, [sp, #12]
 800919e:	2104      	movs	r1, #4
 80091a0:	9102      	str	r1, [sp, #8]
 80091a2:	9201      	str	r2, [sp, #4]
 80091a4:	2202      	movs	r2, #2
 80091a6:	9200      	str	r2, [sp, #0]
 80091a8:	f106 020c 	add.w	r2, r6, #12
 80091ac:	4621      	mov	r1, r4
 80091ae:	4630      	mov	r0, r6
 80091b0:	f001 f8de 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>

          break;
 80091b4:	e084      	b.n	80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystemException_EndResponse_((uint32_t)fnHandle, &fnHandle->Seq, true, eFN_EVENT_ERROR_CMD_NOT_FOUND, controlReqSeq);
 80091b6:	2301      	movs	r3, #1
 80091b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ba:	2100      	movs	r1, #0
 80091bc:	9108      	str	r1, [sp, #32]
 80091be:	9107      	str	r1, [sp, #28]
 80091c0:	9306      	str	r3, [sp, #24]
 80091c2:	9505      	str	r5, [sp, #20]
 80091c4:	9104      	str	r1, [sp, #16]
 80091c6:	9103      	str	r1, [sp, #12]
 80091c8:	2208      	movs	r2, #8
 80091ca:	9202      	str	r2, [sp, #8]
 80091cc:	9101      	str	r1, [sp, #4]
 80091ce:	2203      	movs	r2, #3
 80091d0:	9200      	str	r2, [sp, #0]
 80091d2:	f106 020c 	add.w	r2, r6, #12
 80091d6:	4630      	mov	r0, r6
 80091d8:	f001 f8ca 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
            break;
 80091dc:	e070      	b.n	80092c0 <fFrameHandler+0xf0c>
    }
  }
  
  if(errorFobjectProperty) {
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)fnHandle,
 80091de:	2301      	movs	r3, #1
 80091e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e2:	2100      	movs	r1, #0
 80091e4:	9108      	str	r1, [sp, #32]
 80091e6:	9107      	str	r1, [sp, #28]
 80091e8:	9306      	str	r3, [sp, #24]
 80091ea:	9505      	str	r5, [sp, #20]
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	441c      	add	r4, r3
 80091f0:	9403      	str	r4, [sp, #12]
 80091f2:	2205      	movs	r2, #5
 80091f4:	9202      	str	r2, [sp, #8]
 80091f6:	9101      	str	r1, [sp, #4]
 80091f8:	2203      	movs	r2, #3
 80091fa:	9200      	str	r2, [sp, #0]
 80091fc:	f106 020c 	add.w	r2, r6, #12
 8009200:	4630      	mov	r0, r6
 8009202:	f001 f8b5 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8009206:	e05b      	b.n	80092c0 <fFrameHandler+0xf0c>
  
  #ifdef FARAABIN_ENABLE
  
  bool errorFobjectProperty = false;
  
  sFaraabinFobjectEventGroup *egHandle = (sFaraabinFobjectEventGroup*)clientFrame->FobjectPtr;
 8009208:	6865      	ldr	r5, [r4, #4]
  uint8_t framePropGroup = ClientFrame_GetPropGroup_(clientFrame->FobjectProperty);
 800920a:	7863      	ldrb	r3, [r4, #1]
 800920c:	095a      	lsrs	r2, r3, #5
  uint8_t framePropId = ClientFrame_GetPropId_(clientFrame->FobjectProperty);
 800920e:	f003 031f 	and.w	r3, r3, #31
  uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 8009212:	7821      	ldrb	r1, [r4, #0]
 8009214:	f001 060f 	and.w	r6, r1, #15
  uint8_t controlAccessType = ClientFrame_GetAccessType_(clientFrame->Control);

  switch((eFaraabinLinkSerializer_PropertyGroup)framePropGroup) {
 8009218:	2a01      	cmp	r2, #1
 800921a:	d016      	beq.n	800924a <fFrameHandler+0xe96>
 800921c:	2a04      	cmp	r2, #4
 800921e:	d029      	beq.n	8009274 <fFrameHandler+0xec0>
    }
  }
  
  if(errorFobjectProperty) {
    
    Faraabin_EventSystemException_ParamEndResponse_((uint32_t)egHandle,
 8009220:	78ab      	ldrb	r3, [r5, #2]
 8009222:	2201      	movs	r2, #1
 8009224:	9209      	str	r2, [sp, #36]	@ 0x24
 8009226:	2100      	movs	r1, #0
 8009228:	9108      	str	r1, [sp, #32]
 800922a:	9107      	str	r1, [sp, #28]
 800922c:	9206      	str	r2, [sp, #24]
 800922e:	9605      	str	r6, [sp, #20]
 8009230:	9204      	str	r2, [sp, #16]
 8009232:	4414      	add	r4, r2
 8009234:	9403      	str	r4, [sp, #12]
 8009236:	9202      	str	r2, [sp, #8]
 8009238:	9101      	str	r1, [sp, #4]
 800923a:	2203      	movs	r2, #3
 800923c:	9200      	str	r2, [sp, #0]
 800923e:	f105 0210 	add.w	r2, r5, #16
 8009242:	4628      	mov	r0, r5
 8009244:	f001 f894 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
 8009248:	e03a      	b.n	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e8      	bne.n	8009220 <fFrameHandler+0xe6c>
          if(controlAccessType == (uint8_t)eFB_CLIENT_FRAME_ACCESS_TYPE_WRITE) {
 800924e:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8009252:	d005      	beq.n	8009260 <fFrameHandler+0xeac>
            egHandle->Enable = (*clientFrame->Payload == 0U) ? false : true;
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	3b00      	subs	r3, #0
 800925a:	bf18      	it	ne
 800925c:	2301      	movne	r3, #1
 800925e:	70ab      	strb	r3, [r5, #2]
          if(controlReqSeq != 0U) {
 8009260:	2e00      	cmp	r6, #0
 8009262:	d02d      	beq.n	80092c0 <fFrameHandler+0xf0c>
            fFaraabinLinkSerializer_CommonSendEnable(clientFrame->FobjectPtr, &egHandle->Seq, controlReqSeq, true);
 8009264:	2301      	movs	r3, #1
 8009266:	4632      	mov	r2, r6
 8009268:	f105 0110 	add.w	r1, r5, #16
 800926c:	6860      	ldr	r0, [r4, #4]
 800926e:	f001 f969 	bl	800a544 <fFaraabinLinkSerializer_CommonSendEnable>
  if(errorFobjectProperty) {
 8009272:	e025      	b.n	80092c0 <fFrameHandler+0xf0c>
      switch(propId) {
 8009274:	2b06      	cmp	r3, #6
 8009276:	d1d3      	bne.n	8009220 <fFrameHandler+0xe6c>
          clientFrame->Payload[clientFrame->PayloadSize] = 0x00U; // Terminate end of data
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	68a2      	ldr	r2, [r4, #8]
 800927c:	2100      	movs	r1, #0
 800927e:	54d1      	strb	r1, [r2, r3]
          if(egHandle->fpUserTerminalCallback != NULL) {
 8009280:	696b      	ldr	r3, [r5, #20]
 8009282:	b113      	cbz	r3, 800928a <fFrameHandler+0xed6>
            egHandle->fpUserTerminalCallback(clientFrame->Payload, clientFrame->PayloadSize);
 8009284:	89a1      	ldrh	r1, [r4, #12]
 8009286:	68a0      	ldr	r0, [r4, #8]
 8009288:	4798      	blx	r3
          if(controlReqSeq != 0U) {
 800928a:	b1ce      	cbz	r6, 80092c0 <fFrameHandler+0xf0c>
            Faraabin_EventSystem_EndResponse_((uint32_t)egHandle, &egHandle->Seq, egHandle->Enable, eEG_EVENT_INFO_USER_DATA_RECEIVED, controlReqSeq);
 800928c:	78ab      	ldrb	r3, [r5, #2]
 800928e:	2201      	movs	r2, #1
 8009290:	9209      	str	r2, [sp, #36]	@ 0x24
 8009292:	2100      	movs	r1, #0
 8009294:	9108      	str	r1, [sp, #32]
 8009296:	9107      	str	r1, [sp, #28]
 8009298:	9206      	str	r2, [sp, #24]
 800929a:	9605      	str	r6, [sp, #20]
 800929c:	9104      	str	r1, [sp, #16]
 800929e:	9103      	str	r1, [sp, #12]
 80092a0:	9102      	str	r1, [sp, #8]
 80092a2:	9101      	str	r1, [sp, #4]
 80092a4:	2202      	movs	r2, #2
 80092a6:	9200      	str	r2, [sp, #0]
 80092a8:	f105 0210 	add.w	r2, r5, #16
 80092ac:	4628      	mov	r0, r5
 80092ae:	f001 f85f 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  if(errorFobjectProperty) {
 80092b2:	e005      	b.n	80092c0 <fFrameHandler+0xf0c>
      uint8_t controlReqSeq = ClientFrame_GetRequestSequence_(clientFrame->Control);
 80092b4:	7821      	ldrb	r1, [r4, #0]
      fFaraabinFobjectMcu_SendEventSystemExceptionResponse(eMCU_EVENT_ERROR_UNSUPPORTED_FOBJECT_TYPE, controlReqSeq);
 80092b6:	f001 010f 	and.w	r1, r1, #15
 80092ba:	2010      	movs	r0, #16
 80092bc:	f7fe fe90 	bl	8007fe0 <fFaraabinFobjectMcu_SendEventSystemExceptionResponse>
}
 80092c0:	b00f      	add	sp, #60	@ 0x3c
 80092c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c6:	bf00      	nop

080092c8 <fSendCircularBuffer>:
/**
 * @brief Transmits available data in TX buffer to the link.
 * 
 * @param flush Forces the function to flsuh the buffer.
 */
static void fSendCircularBuffer(bool flush) {
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	b082      	sub	sp, #8
  uint8_t *buffPtr = NULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	9301      	str	r3, [sp, #4]
  uint16_t transmitSize = 0;
  
  if(LinkHandler.IsFlushingBuffer == true) {
 80092d0:	4b21      	ldr	r3, [pc, #132]	@ (8009358 <fSendCircularBuffer+0x90>)
 80092d2:	7f1b      	ldrb	r3, [r3, #28]
 80092d4:	b9a3      	cbnz	r3, 8009300 <fSendCircularBuffer+0x38>
 80092d6:	4606      	mov	r6, r0
    return;
  }
  
  if(flush == true) {
 80092d8:	b110      	cbz	r0, 80092e0 <fSendCircularBuffer+0x18>
    LinkHandler.IsFlushingBuffer = true;
 80092da:	4b1f      	ldr	r3, [pc, #124]	@ (8009358 <fSendCircularBuffer+0x90>)
 80092dc:	2201      	movs	r2, #1
 80092de:	771a      	strb	r2, [r3, #28]
    
    if(flush == true) {
  
      while(fFaraabin_IsSending() == true) {
        
        if(fChrono_IsTimeout(&(LinkHandler.ChronoPortSending)) == true) {
 80092e0:	4c1e      	ldr	r4, [pc, #120]	@ (800935c <fSendCircularBuffer+0x94>)
 80092e2:	e011      	b.n	8009308 <fSendCircularBuffer+0x40>
      while(fFaraabin_IsSending() == true) {
 80092e4:	f7f8 f933 	bl	800154e <fFaraabin_IsSending>
 80092e8:	b1a0      	cbz	r0, 8009314 <fSendCircularBuffer+0x4c>
        if(fChrono_IsTimeout(&(LinkHandler.ChronoPortSending)) == true) {
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fd fae6 	bl	80068bc <fChrono_IsTimeout>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d0f7      	beq.n	80092e4 <fSendCircularBuffer+0x1c>
          
          fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_TX_FRAME_TIMEOUT);
 80092f4:	2009      	movs	r0, #9
 80092f6:	f7fe fe3d 	bl	8007f74 <fFaraabinFobjectMcu_SendEventSystemException>

          if(flush) {
            LinkHandler.IsFlushingBuffer = false;
 80092fa:	4b17      	ldr	r3, [pc, #92]	@ (8009358 <fSendCircularBuffer+0x90>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	771a      	strb	r2, [r3, #28]
  }while((flush == true) && (transmitSize > 0U));
  
  if(flush == true) {
    LinkHandler.IsFlushingBuffer = false;
  }
}
 8009300:	b002      	add	sp, #8
 8009302:	bd70      	pop	{r4, r5, r6, pc}
  }while((flush == true) && (transmitSize > 0U));
 8009304:	2e00      	cmp	r6, #0
 8009306:	d0fb      	beq.n	8009300 <fSendCircularBuffer+0x38>
    if(flush == true) {
 8009308:	2e00      	cmp	r6, #0
 800930a:	d1eb      	bne.n	80092e4 <fSendCircularBuffer+0x1c>
      if(fFaraabin_IsSending() == true) {
 800930c:	f7f8 f91f 	bl	800154e <fFaraabin_IsSending>
 8009310:	2800      	cmp	r0, #0
 8009312:	d1f5      	bne.n	8009300 <fSendCircularBuffer+0x38>
    transmitSize = fFaraabinLinkSerializer_FlushBuffer(&buffPtr);
 8009314:	a801      	add	r0, sp, #4
 8009316:	f001 f8e1 	bl	800a4dc <fFaraabinLinkSerializer_FlushBuffer>
    if(transmitSize > 0U) {
 800931a:	4605      	mov	r5, r0
 800931c:	b1b0      	cbz	r0, 800934c <fSendCircularBuffer+0x84>
      if(buffPtr == NULL) {
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	b1a3      	cbz	r3, 800934c <fSendCircularBuffer+0x84>
      fChrono_StartTimeoutMs(&LinkHandler.ChronoPortSending, (transmitSize * FB_BYTE_SENDING_TIME_MS) * 2U);
 8009322:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8009326:	0089      	lsls	r1, r1, #2
 8009328:	4620      	mov	r0, r4
 800932a:	f7fd faa3 	bl	8006874 <fChrono_StartTimeoutMs>
      (fFaraabinFobjectMcu_GetFobject())->StatisticsTxBytesCnt += transmitSize;
 800932e:	f7fe fe71 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 8009332:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009334:	442b      	add	r3, r5
 8009336:	6343      	str	r3, [r0, #52]	@ 0x34
      if(fFaraabin_Send(buffPtr, transmitSize) != 0U) {
 8009338:	4629      	mov	r1, r5
 800933a:	9801      	ldr	r0, [sp, #4]
 800933c:	f7f8 f905 	bl	800154a <fFaraabin_Send>
 8009340:	2800      	cmp	r0, #0
 8009342:	d0df      	beq.n	8009304 <fSendCircularBuffer+0x3c>
        fFaraabinFobjectMcu_SendEventSystemException(eMCU_EVENT_ERROR_TX_FRAME_SEND);
 8009344:	200a      	movs	r0, #10
 8009346:	f7fe fe15 	bl	8007f74 <fFaraabinFobjectMcu_SendEventSystemException>
 800934a:	e7db      	b.n	8009304 <fSendCircularBuffer+0x3c>
  if(flush == true) {
 800934c:	2e00      	cmp	r6, #0
 800934e:	d0d7      	beq.n	8009300 <fSendCircularBuffer+0x38>
    LinkHandler.IsFlushingBuffer = false;
 8009350:	4b01      	ldr	r3, [pc, #4]	@ (8009358 <fSendCircularBuffer+0x90>)
 8009352:	2200      	movs	r2, #0
 8009354:	771a      	strb	r2, [r3, #28]
 8009356:	e7d3      	b.n	8009300 <fSendCircularBuffer+0x38>
 8009358:	20002bb4 	.word	0x20002bb4
 800935c:	20002bd4 	.word	0x20002bd4

08009360 <fFaraabinLinkHandler_Init>:
uint8_t fFaraabinLinkHandler_Init(uint8_t *rxBuffer, uint16_t rxBufferSize) {
 8009360:	b508      	push	{r3, lr}
  LinkHandler.Init = false;
 8009362:	4b11      	ldr	r3, [pc, #68]	@ (80093a8 <fFaraabinLinkHandler_Init+0x48>)
 8009364:	2200      	movs	r2, #0
 8009366:	701a      	strb	r2, [r3, #0]
  LinkHandler.Password = NULL;
 8009368:	639a      	str	r2, [r3, #56]	@ 0x38
  if(rxBufferSize < 20U) {
 800936a:	2913      	cmp	r1, #19
 800936c:	d91a      	bls.n	80093a4 <fFaraabinLinkHandler_Init+0x44>
  LinkHandler.RxCharBufferSize = rxBufferSize;
 800936e:	8119      	strh	r1, [r3, #8]
  if(rxBuffer != NULL) {
 8009370:	b178      	cbz	r0, 8009392 <fFaraabinLinkHandler_Init+0x32>
    LinkHandler.RxCharBuffer = rxBuffer;
 8009372:	6058      	str	r0, [r3, #4]
    LinkHandler.RxCharBuffer[i] = 0x00U;
 8009374:	4b0c      	ldr	r3, [pc, #48]	@ (80093a8 <fFaraabinLinkHandler_Init+0x48>)
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	2000      	movs	r0, #0
 800937a:	7010      	strb	r0, [r2, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	7050      	strb	r0, [r2, #1]
  LinkHandler.IsNewFrameDetected = false;
 8009380:	7298      	strb	r0, [r3, #10]
  LinkHandler.IsFlushingBuffer = false;
 8009382:	7718      	strb	r0, [r3, #28]
  LinkHandler.DictSendingMode.ReqSeq = 0U;
 8009384:	f883 0035 	strb.w	r0, [r3, #53]	@ 0x35
  LinkHandler.DictSendingMode.SendFlag = false;
 8009388:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
  LinkHandler.Init = true;
 800938c:	2201      	movs	r2, #1
 800938e:	701a      	strb	r2, [r3, #0]
}
 8009390:	bd08      	pop	{r3, pc}
    LinkHandler.RxCharBuffer = malloc(rxBufferSize);
 8009392:	4608      	mov	r0, r1
 8009394:	f001 fa10 	bl	800a7b8 <malloc>
 8009398:	4b03      	ldr	r3, [pc, #12]	@ (80093a8 <fFaraabinLinkHandler_Init+0x48>)
 800939a:	6058      	str	r0, [r3, #4]
    if(LinkHandler.RxCharBuffer == NULL) {
 800939c:	2800      	cmp	r0, #0
 800939e:	d1e9      	bne.n	8009374 <fFaraabinLinkHandler_Init+0x14>
      return FB_LINK_HANDLER_RESULT_ERROR_RX_BUFFER_SIZE_IS_NULL;
 80093a0:	2002      	movs	r0, #2
 80093a2:	e7f5      	b.n	8009390 <fFaraabinLinkHandler_Init+0x30>
    return FB_LINK_HANDLER_RESULT_ERROR_ALLOCATED_RX_BUFFER_SIZE_IS_SMALL;
 80093a4:	2001      	movs	r0, #1
 80093a6:	e7f3      	b.n	8009390 <fFaraabinLinkHandler_Init+0x30>
 80093a8:	20002bb4 	.word	0x20002bb4

080093ac <fFaraabinLinkHandler_Run>:
  if(!LinkHandler.Init) {
 80093ac:	4b37      	ldr	r3, [pc, #220]	@ (800948c <fFaraabinLinkHandler_Run+0xe0>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d069      	beq.n	8009488 <fFaraabinLinkHandler_Run+0xdc>
void fFaraabinLinkHandler_Run(void) {
 80093b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(LinkHandler.IsNewFrameDetected) {
 80093b8:	4b34      	ldr	r3, [pc, #208]	@ (800948c <fFaraabinLinkHandler_Run+0xe0>)
 80093ba:	7a9b      	ldrb	r3, [r3, #10]
 80093bc:	b943      	cbnz	r3, 80093d0 <fFaraabinLinkHandler_Run+0x24>
  fSendCircularBuffer(false);
 80093be:	2000      	movs	r0, #0
 80093c0:	f7ff ff82 	bl	80092c8 <fSendCircularBuffer>
  if(LinkHandler.DictSendingMode.SendFlag == true) {
 80093c4:	4b31      	ldr	r3, [pc, #196]	@ (800948c <fFaraabinLinkHandler_Run+0xe0>)
 80093c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80093ca:	b94b      	cbnz	r3, 80093e0 <fFaraabinLinkHandler_Run+0x34>
}
 80093cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fFrameHandler(&LinkHandler.ClientFrame);
 80093d0:	4c2f      	ldr	r4, [pc, #188]	@ (8009490 <fFaraabinLinkHandler_Run+0xe4>)
 80093d2:	4620      	mov	r0, r4
 80093d4:	f7fe ffee 	bl	80083b4 <fFrameHandler>
    LinkHandler.IsNewFrameDetected = false;
 80093d8:	2300      	movs	r3, #0
 80093da:	f804 3c02 	strb.w	r3, [r4, #-2]
 80093de:	e7ee      	b.n	80093be <fFaraabinLinkHandler_Run+0x12>
    uint16_t dictQty = fFaraabinDatabase_GetNumberOfAddedDicts();
 80093e0:	f7fd fbea 	bl	8006bb8 <fFaraabinDatabase_GetNumberOfAddedDicts>
 80093e4:	4606      	mov	r6, r0
    if(LinkHandler.DictSendingMode.IsBlocking && FaraabinFlags.Features.Bitfield.AllowSendDickBlocking) {
 80093e6:	4b29      	ldr	r3, [pc, #164]	@ (800948c <fFaraabinLinkHandler_Run+0xe0>)
 80093e8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80093ec:	b33b      	cbz	r3, 800943e <fFaraabinLinkHandler_Run+0x92>
 80093ee:	4b29      	ldr	r3, [pc, #164]	@ (8009494 <fFaraabinLinkHandler_Run+0xe8>)
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	f013 0f01 	tst.w	r3, #1
 80093f6:	d022      	beq.n	800943e <fFaraabinLinkHandler_Run+0x92>
      for(uint16_t i = 0; i < dictQty; i++) {
 80093f8:	b190      	cbz	r0, 8009420 <fFaraabinLinkHandler_Run+0x74>
 80093fa:	2400      	movs	r4, #0
        fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), i, LinkHandler.DictSendingMode.ReqSeq);
 80093fc:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800948c <fFaraabinLinkHandler_Run+0xe0>
        fSendCircularBuffer(true);
 8009400:	2701      	movs	r7, #1
 8009402:	b2a5      	uxth	r5, r4
        fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), i, LinkHandler.DictSendingMode.ReqSeq);
 8009404:	4628      	mov	r0, r5
 8009406:	f7fd fc43 	bl	8006c90 <fFaraabinDatabase_GetFobjectPointerFromDict>
 800940a:	f898 2035 	ldrb.w	r2, [r8, #53]	@ 0x35
 800940e:	4629      	mov	r1, r5
 8009410:	f001 f84e 	bl	800a4b0 <fFaraabinLinkSerializer_SerializeDict>
        fSendCircularBuffer(true);
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff ff57 	bl	80092c8 <fSendCircularBuffer>
      for(uint16_t i = 0; i < dictQty; i++) {
 800941a:	3401      	adds	r4, #1
 800941c:	42b4      	cmp	r4, r6
 800941e:	d1f0      	bne.n	8009402 <fFaraabinLinkHandler_Run+0x56>
      LinkHandler.DictSendingMode.SendFlag = false;
 8009420:	4b1a      	ldr	r3, [pc, #104]	@ (800948c <fFaraabinLinkHandler_Run+0xe0>)
 8009422:	2400      	movs	r4, #0
 8009424:	f883 4034 	strb.w	r4, [r3, #52]	@ 0x34
      fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_DICT_END, LinkHandler.DictSendingMode.ReqSeq);
 8009428:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 800942c:	2001      	movs	r0, #1
 800942e:	f7fe fdbd 	bl	8007fac <fFaraabinFobjectMcu_SendEventSystemResponse>
      FaraabinFlags.Status.Bitfield.NewDict = 0U;
 8009432:	4b18      	ldr	r3, [pc, #96]	@ (8009494 <fFaraabinLinkHandler_Run+0xe8>)
 8009434:	791a      	ldrb	r2, [r3, #4]
 8009436:	f364 0241 	bfi	r2, r4, #1, #1
 800943a:	711a      	strb	r2, [r3, #4]
 800943c:	e7c6      	b.n	80093cc <fFaraabinLinkHandler_Run+0x20>
       fFaraabinLinkSerializer_SerializeDict(fFaraabinDatabase_GetFobjectPointerFromDict(dictIndex), dictIndex, LinkHandler.DictSendingMode.ReqSeq);
 800943e:	4c16      	ldr	r4, [pc, #88]	@ (8009498 <fFaraabinLinkHandler_Run+0xec>)
 8009440:	8820      	ldrh	r0, [r4, #0]
 8009442:	f7fd fc25 	bl	8006c90 <fFaraabinDatabase_GetFobjectPointerFromDict>
 8009446:	4b11      	ldr	r3, [pc, #68]	@ (800948c <fFaraabinLinkHandler_Run+0xe0>)
 8009448:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800944c:	8821      	ldrh	r1, [r4, #0]
 800944e:	f001 f82f 	bl	800a4b0 <fFaraabinLinkSerializer_SerializeDict>
       fSendCircularBuffer(true);
 8009452:	2001      	movs	r0, #1
 8009454:	f7ff ff38 	bl	80092c8 <fSendCircularBuffer>
       dictIndex++;
 8009458:	8823      	ldrh	r3, [r4, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	b29b      	uxth	r3, r3
       if(dictIndex >= dictQty) {
 800945e:	42b3      	cmp	r3, r6
 8009460:	d201      	bcs.n	8009466 <fFaraabinLinkHandler_Run+0xba>
       dictIndex++;
 8009462:	8023      	strh	r3, [r4, #0]
 8009464:	e7b2      	b.n	80093cc <fFaraabinLinkHandler_Run+0x20>
         dictIndex = 0U;
 8009466:	2400      	movs	r4, #0
 8009468:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <fFaraabinLinkHandler_Run+0xec>)
 800946a:	801c      	strh	r4, [r3, #0]
         LinkHandler.DictSendingMode.SendFlag = false;
 800946c:	4b07      	ldr	r3, [pc, #28]	@ (800948c <fFaraabinLinkHandler_Run+0xe0>)
 800946e:	f883 4034 	strb.w	r4, [r3, #52]	@ 0x34
         fFaraabinFobjectMcu_SendEventSystemResponse(eMCU_EVENT_INFO_DICT_END, LinkHandler.DictSendingMode.ReqSeq);
 8009472:	f893 1035 	ldrb.w	r1, [r3, #53]	@ 0x35
 8009476:	2001      	movs	r0, #1
 8009478:	f7fe fd98 	bl	8007fac <fFaraabinFobjectMcu_SendEventSystemResponse>
         FaraabinFlags.Status.Bitfield.NewDict = 0U;
 800947c:	4b05      	ldr	r3, [pc, #20]	@ (8009494 <fFaraabinLinkHandler_Run+0xe8>)
 800947e:	791a      	ldrb	r2, [r3, #4]
 8009480:	f364 0241 	bfi	r2, r4, #1, #1
 8009484:	711a      	strb	r2, [r3, #4]
 8009486:	e7a1      	b.n	80093cc <fFaraabinLinkHandler_Run+0x20>
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	20002bb4 	.word	0x20002bb4
 8009490:	20002bc0 	.word	0x20002bc0
 8009494:	2000279c 	.word	0x2000279c
 8009498:	20002bb0 	.word	0x20002bb0

0800949c <fFaraabinLinkHandler_FlushBuffer>:
void fFaraabinLinkHandler_FlushBuffer(void) {
 800949c:	b508      	push	{r3, lr}
  fSendCircularBuffer(true);
 800949e:	2001      	movs	r0, #1
 80094a0:	f7ff ff12 	bl	80092c8 <fSendCircularBuffer>
}
 80094a4:	bd08      	pop	{r3, pc}

080094a6 <fFaraabinLinkHandler_GetRamUsage>:
}
 80094a6:	203c      	movs	r0, #60	@ 0x3c
 80094a8:	4770      	bx	lr
	...

080094ac <fAddToBufferU8>:
 */
static void fAddToBufferU8(uint8_t d) {
  
  uint8_t tmp = 0;

  _serializer.Serializer.CheckSum += d;
 80094ac:	4a48      	ldr	r2, [pc, #288]	@ (80095d0 <fAddToBufferU8+0x124>)
 80094ae:	f892 38a2 	ldrb.w	r3, [r2, #2210]	@ 0x8a2
 80094b2:	4403      	add	r3, r0
 80094b4:	f882 38a2 	strb.w	r3, [r2, #2210]	@ 0x8a2

  if ((d == FB_EOF) || (d == FB_ESC)) { // If byte escaping is needed
 80094b8:	f1a0 037d 	sub.w	r3, r0, #125	@ 0x7d
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d927      	bls.n	8009512 <fAddToBufferU8+0x66>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
    tmp = d ^ FB_ESC_XOR;
    fFaraabinLinkBuffer_Put_(&tmp, 1);
  } else {
    tmp = d;
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80094c2:	4b44      	ldr	r3, [pc, #272]	@ (80095d4 <fAddToBufferU8+0x128>)
 80094c4:	6819      	ldr	r1, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	5488      	strb	r0, [r1, r2]
 80094ca:	7d1b      	ldrb	r3, [r3, #20]
 80094cc:	b133      	cbz	r3, 80094dc <fAddToBufferU8+0x30>
 80094ce:	4a41      	ldr	r2, [pc, #260]	@ (80095d4 <fAddToBufferU8+0x128>)
 80094d0:	68d3      	ldr	r3, [r2, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60d3      	str	r3, [r2, #12]
 80094d6:	6852      	ldr	r2, [r2, #4]
 80094d8:	4293      	cmp	r3, r2
 80094da:	d074      	beq.n	80095c6 <fAddToBufferU8+0x11a>
 80094dc:	4a3d      	ldr	r2, [pc, #244]	@ (80095d4 <fAddToBufferU8+0x128>)
 80094de:	6893      	ldr	r3, [r2, #8]
 80094e0:	3301      	adds	r3, #1
 80094e2:	6850      	ldr	r0, [r2, #4]
 80094e4:	4283      	cmp	r3, r0
 80094e6:	bf08      	it	eq
 80094e8:	2300      	moveq	r3, #0
 80094ea:	6093      	str	r3, [r2, #8]
 80094ec:	6911      	ldr	r1, [r2, #16]
 80094ee:	3101      	adds	r1, #1
 80094f0:	4281      	cmp	r1, r0
 80094f2:	bf28      	it	cs
 80094f4:	4601      	movcs	r1, r0
 80094f6:	6111      	str	r1, [r2, #16]
 80094f8:	68d1      	ldr	r1, [r2, #12]
 80094fa:	4299      	cmp	r1, r3
 80094fc:	bf0c      	ite	eq
 80094fe:	2301      	moveq	r3, #1
 8009500:	2300      	movne	r3, #0
 8009502:	7513      	strb	r3, [r2, #20]
 8009504:	d163      	bne.n	80095ce <fAddToBufferU8+0x122>
 8009506:	4a34      	ldr	r2, [pc, #208]	@ (80095d8 <fAddToBufferU8+0x12c>)
 8009508:	7913      	ldrb	r3, [r2, #4]
 800950a:	f043 0304 	orr.w	r3, r3, #4
 800950e:	7113      	strb	r3, [r2, #4]
  }
}
 8009510:	4770      	bx	lr
static void fAddToBufferU8(uint8_t d) {
 8009512:	b410      	push	{r4}
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8009514:	4b2f      	ldr	r3, [pc, #188]	@ (80095d4 <fAddToBufferU8+0x128>)
 8009516:	6819      	ldr	r1, [r3, #0]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	247d      	movs	r4, #125	@ 0x7d
 800951c:	548c      	strb	r4, [r1, r2]
 800951e:	7d1b      	ldrb	r3, [r3, #20]
 8009520:	b133      	cbz	r3, 8009530 <fAddToBufferU8+0x84>
 8009522:	4a2c      	ldr	r2, [pc, #176]	@ (80095d4 <fAddToBufferU8+0x128>)
 8009524:	68d3      	ldr	r3, [r2, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	60d3      	str	r3, [r2, #12]
 800952a:	6852      	ldr	r2, [r2, #4]
 800952c:	4293      	cmp	r3, r2
 800952e:	d042      	beq.n	80095b6 <fAddToBufferU8+0x10a>
 8009530:	4a28      	ldr	r2, [pc, #160]	@ (80095d4 <fAddToBufferU8+0x128>)
 8009532:	6893      	ldr	r3, [r2, #8]
 8009534:	3301      	adds	r3, #1
 8009536:	6854      	ldr	r4, [r2, #4]
 8009538:	42a3      	cmp	r3, r4
 800953a:	bf08      	it	eq
 800953c:	2300      	moveq	r3, #0
 800953e:	6093      	str	r3, [r2, #8]
 8009540:	6911      	ldr	r1, [r2, #16]
 8009542:	3101      	adds	r1, #1
 8009544:	42a1      	cmp	r1, r4
 8009546:	bf28      	it	cs
 8009548:	4621      	movcs	r1, r4
 800954a:	6111      	str	r1, [r2, #16]
 800954c:	68d1      	ldr	r1, [r2, #12]
 800954e:	4299      	cmp	r1, r3
 8009550:	bf0c      	ite	eq
 8009552:	2101      	moveq	r1, #1
 8009554:	2100      	movne	r1, #0
 8009556:	7511      	strb	r1, [r2, #20]
 8009558:	d104      	bne.n	8009564 <fAddToBufferU8+0xb8>
 800955a:	491f      	ldr	r1, [pc, #124]	@ (80095d8 <fAddToBufferU8+0x12c>)
 800955c:	790a      	ldrb	r2, [r1, #4]
 800955e:	f042 0204 	orr.w	r2, r2, #4
 8009562:	710a      	strb	r2, [r1, #4]
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8009564:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <fAddToBufferU8+0x128>)
 8009566:	6811      	ldr	r1, [r2, #0]
    tmp = d ^ FB_ESC_XOR;
 8009568:	f080 0020 	eor.w	r0, r0, #32
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 800956c:	54c8      	strb	r0, [r1, r3]
 800956e:	7d13      	ldrb	r3, [r2, #20]
 8009570:	b12b      	cbz	r3, 800957e <fAddToBufferU8+0xd2>
 8009572:	68d3      	ldr	r3, [r2, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60d3      	str	r3, [r2, #12]
 8009578:	6852      	ldr	r2, [r2, #4]
 800957a:	4293      	cmp	r3, r2
 800957c:	d01f      	beq.n	80095be <fAddToBufferU8+0x112>
 800957e:	4a15      	ldr	r2, [pc, #84]	@ (80095d4 <fAddToBufferU8+0x128>)
 8009580:	6893      	ldr	r3, [r2, #8]
 8009582:	3301      	adds	r3, #1
 8009584:	6850      	ldr	r0, [r2, #4]
 8009586:	4283      	cmp	r3, r0
 8009588:	bf08      	it	eq
 800958a:	2300      	moveq	r3, #0
 800958c:	6093      	str	r3, [r2, #8]
 800958e:	6911      	ldr	r1, [r2, #16]
 8009590:	3101      	adds	r1, #1
 8009592:	4281      	cmp	r1, r0
 8009594:	bf28      	it	cs
 8009596:	4601      	movcs	r1, r0
 8009598:	6111      	str	r1, [r2, #16]
 800959a:	68d1      	ldr	r1, [r2, #12]
 800959c:	4299      	cmp	r1, r3
 800959e:	bf0c      	ite	eq
 80095a0:	2301      	moveq	r3, #1
 80095a2:	2300      	movne	r3, #0
 80095a4:	7513      	strb	r3, [r2, #20]
 80095a6:	d104      	bne.n	80095b2 <fAddToBufferU8+0x106>
 80095a8:	4a0b      	ldr	r2, [pc, #44]	@ (80095d8 <fAddToBufferU8+0x12c>)
 80095aa:	7913      	ldrb	r3, [r2, #4]
 80095ac:	f043 0304 	orr.w	r3, r3, #4
 80095b0:	7113      	strb	r3, [r2, #4]
}
 80095b2:	bc10      	pop	{r4}
 80095b4:	4770      	bx	lr
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80095b6:	4b07      	ldr	r3, [pc, #28]	@ (80095d4 <fAddToBufferU8+0x128>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	60da      	str	r2, [r3, #12]
 80095bc:	e7b8      	b.n	8009530 <fAddToBufferU8+0x84>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80095be:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <fAddToBufferU8+0x128>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	60da      	str	r2, [r3, #12]
 80095c4:	e7db      	b.n	800957e <fAddToBufferU8+0xd2>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80095c6:	4b03      	ldr	r3, [pc, #12]	@ (80095d4 <fAddToBufferU8+0x128>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	60da      	str	r2, [r3, #12]
 80095cc:	e786      	b.n	80094dc <fAddToBufferU8+0x30>
 80095ce:	4770      	bx	lr
 80095d0:	20002bf0 	.word	0x20002bf0
 80095d4:	20002b98 	.word	0x20002b98
 80095d8:	2000279c 	.word	0x2000279c

080095dc <fAddToBufferU16>:
/**
 * @brief Adds an unsigned 16-bit data to faraabin TX buffer.
 * 
 * @param d Value of data.
 */
static void fAddToBufferU16(uint16_t d) {
 80095dc:	b510      	push	{r4, lr}
 80095de:	4604      	mov	r4, r0
  
  uByte2 tmp;
  tmp.U16 = d;

  fAddToBufferU8(tmp.Byte[0]);
 80095e0:	b2c0      	uxtb	r0, r0
 80095e2:	f7ff ff63 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[1]);
 80095e6:	0a20      	lsrs	r0, r4, #8
 80095e8:	f7ff ff60 	bl	80094ac <fAddToBufferU8>
}
 80095ec:	bd10      	pop	{r4, pc}

080095ee <fAddToBufferU32>:
/**
 * @brief Adds an unsigned 32-bit data to faraabin TX buffer.
 * 
 * @param d Value of data.
 */
static void fAddToBufferU32(uint32_t d) {
 80095ee:	b510      	push	{r4, lr}
 80095f0:	4604      	mov	r4, r0
  
  uByte4 tmp;
  tmp.U32 = d;
  
  fAddToBufferU8(tmp.Byte[0]);
 80095f2:	b2c0      	uxtb	r0, r0
 80095f4:	f7ff ff5a 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[1]);
 80095f8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80095fc:	f7ff ff56 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[2]);
 8009600:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8009604:	f7ff ff52 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[3]);
 8009608:	0e20      	lsrs	r0, r4, #24
 800960a:	f7ff ff4f 	bl	80094ac <fAddToBufferU8>
}
 800960e:	bd10      	pop	{r4, pc}

08009610 <fAddToBuffer>:
 * @param data Pointer to the data.
 * @param size Size of data.
 */
static void fAddToBuffer(uint8_t *data, uint32_t size) {

  for(uint32_t i = 0; i < size; i++) {
 8009610:	b151      	cbz	r1, 8009628 <fAddToBuffer+0x18>
static void fAddToBuffer(uint8_t *data, uint32_t size) {
 8009612:	b538      	push	{r3, r4, r5, lr}
 8009614:	1e44      	subs	r4, r0, #1
 8009616:	4408      	add	r0, r1
 8009618:	1e45      	subs	r5, r0, #1
    fAddToBufferU8(data[i]);
 800961a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800961e:	f7ff ff45 	bl	80094ac <fAddToBufferU8>
  for(uint32_t i = 0; i < size; i++) {
 8009622:	42ac      	cmp	r4, r5
 8009624:	d1f9      	bne.n	800961a <fAddToBuffer+0xa>
  }
}
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	4770      	bx	lr

0800962a <fCommonEnableStatusGeneratePayload>:
 * @brief Generates payload for reporting enable status of common fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fCommonEnableStatusGeneratePayload(uint32_t fobjectPtr, void *param) {
 800962a:	b508      	push	{r3, lr}

  UNUSED_(param);
  uint8_t *fobjectType = (uint8_t*)fobjectPtr;
  
  switch((eFaraabin_FobjectType)*fobjectType) {
 800962c:	7803      	ldrb	r3, [r0, #0]
 800962e:	2b10      	cmp	r3, #16
 8009630:	d80d      	bhi.n	800964e <fCommonEnableStatusGeneratePayload+0x24>
 8009632:	e8df f003 	tbb	[pc, r3]
 8009636:	0c15      	.short	0x0c15
 8009638:	0c190c0c 	.word	0x0c190c0c
 800963c:	0c1d0c0c 	.word	0x0c1d0c0c
 8009640:	0c0c0921 	.word	0x0c0c0921
 8009644:	0d0c      	.short	0x0d0c
 8009646:	11          	.byte	0x11
 8009647:	00          	.byte	0x00
    case eFO_TYPE_STATE_MACHINE: {
#ifdef FB_ADD_ON_FEATURE_FLAG_STATE_MACHINE
      fAddToBufferU8(((sStateMachine*)fobjectPtr)->_enable);
#else
			fAddToBufferU8(0);
 8009648:	2000      	movs	r0, #0
 800964a:	f7ff ff2f 	bl	80094ac <fAddToBufferU8>
    default: {
      // Do nothing.
      break;
    }
  }
}
 800964e:	bd08      	pop	{r3, pc}
			fAddToBufferU8(0);
 8009650:	2000      	movs	r0, #0
 8009652:	f7ff ff2b 	bl	80094ac <fAddToBufferU8>
      break;
 8009656:	e7fa      	b.n	800964e <fCommonEnableStatusGeneratePayload+0x24>
			fAddToBufferU8(0);
 8009658:	2000      	movs	r0, #0
 800965a:	f7ff ff27 	bl	80094ac <fAddToBufferU8>
      break;
 800965e:	e7f6      	b.n	800964e <fCommonEnableStatusGeneratePayload+0x24>
      fAddToBufferU8(((sFaraabinFobjectMcu*)fobjectPtr)->Enable);
 8009660:	7880      	ldrb	r0, [r0, #2]
 8009662:	f7ff ff23 	bl	80094ac <fAddToBufferU8>
      break;
 8009666:	e7f2      	b.n	800964e <fCommonEnableStatusGeneratePayload+0x24>
      fAddToBufferU8(((sFaraabinFobjectEventGroup*)fobjectPtr)->Enable);
 8009668:	7880      	ldrb	r0, [r0, #2]
 800966a:	f7ff ff1f 	bl	80094ac <fAddToBufferU8>
      break;
 800966e:	e7ee      	b.n	800964e <fCommonEnableStatusGeneratePayload+0x24>
      fAddToBufferU8(((sFaraabinFobjectDataBus*)fobjectPtr)->Enable);
 8009670:	7880      	ldrb	r0, [r0, #2]
 8009672:	f7ff ff1b 	bl	80094ac <fAddToBufferU8>
      break;
 8009676:	e7ea      	b.n	800964e <fCommonEnableStatusGeneratePayload+0x24>
			fAddToBufferU8(0);
 8009678:	2000      	movs	r0, #0
 800967a:	f7ff ff17 	bl	80094ac <fAddToBufferU8>
}
 800967e:	e7e6      	b.n	800964e <fCommonEnableStatusGeneratePayload+0x24>

08009680 <fDataBusCaptureValueGeneratePayload>:
 * @brief Generates payload for sending captured values of databus fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fDataBusCaptureValueGeneratePayload(uint32_t fobjectPtr, void *param) {
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	460c      	mov	r4, r1
  
  UNUSED_(fobjectPtr);
  sFaraabinFobjectDataBus_CaptureValue *value = param;
  
  fAddToBufferU8(value->FobjectType);
 8009684:	7808      	ldrb	r0, [r1, #0]
 8009686:	f7ff ff11 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU32(value->FobjectPtr);
 800968a:	6860      	ldr	r0, [r4, #4]
 800968c:	f7ff ffaf 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(value->CapturedTimeStamp);
 8009690:	68a0      	ldr	r0, [r4, #8]
 8009692:	f7ff ffac 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU64(value->CapturedValue);
 8009696:	6925      	ldr	r5, [r4, #16]
 8009698:	6964      	ldr	r4, [r4, #20]
  fAddToBufferU8(tmp.Byte[0]);
 800969a:	b2e8      	uxtb	r0, r5
 800969c:	f7ff ff06 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[1]);
 80096a0:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80096a4:	f7ff ff02 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[2]);
 80096a8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80096ac:	f7ff fefe 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[3]);
 80096b0:	0e28      	lsrs	r0, r5, #24
 80096b2:	f7ff fefb 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[4]);
 80096b6:	b2e0      	uxtb	r0, r4
 80096b8:	f7ff fef8 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[5]);
 80096bc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80096c0:	f7ff fef4 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[6]);
 80096c4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80096c8:	f7ff fef0 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(tmp.Byte[7]);
 80096cc:	0e20      	lsrs	r0, r4, #24
 80096ce:	f7ff feed 	bl	80094ac <fAddToBufferU8>
}
 80096d2:	bd38      	pop	{r3, r4, r5, pc}

080096d4 <fDataBusValueGeneratePayload>:
static void fDataBusValueGeneratePayload(uint32_t fobjectPtr, void *param) {
  
  UNUSED_(param);
  sFaraabinFobjectDataBus *me = (sFaraabinFobjectDataBus*)fobjectPtr;
  
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 80096d4:	8a43      	ldrh	r3, [r0, #18]
 80096d6:	b363      	cbz	r3, 8009732 <fDataBusValueGeneratePayload+0x5e>
static void fDataBusValueGeneratePayload(uint32_t fobjectPtr, void *param) {
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4605      	mov	r5, r0
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 80096dc:	2400      	movs	r4, #0
 80096de:	e016      	b.n	800970e <fDataBusValueGeneratePayload+0x3a>
    switch(me->_pBufferChannels[i].ItemFobjectType) {
      
      case eFO_TYPE_VAR:
      case eFO_TYPE_ENTITY_NUMERICAL: {
        
        fAddToBufferU8(me->_pBufferChannels[i].ItemFobjectType);
 80096e0:	f7ff fee4 	bl	80094ac <fAddToBufferU8>
        fAddToBufferU32(me->_pBufferChannels[i].ItemFobjectPtr);
 80096e4:	696b      	ldr	r3, [r5, #20]
 80096e6:	4433      	add	r3, r6
 80096e8:	6858      	ldr	r0, [r3, #4]
 80096ea:	f7ff ff80 	bl	80095ee <fAddToBufferU32>
        
        fAddToBufferU16(me->_pBufferChannels[i].ItemFobjectParam);
 80096ee:	696b      	ldr	r3, [r5, #20]
 80096f0:	4433      	add	r3, r6
 80096f2:	8918      	ldrh	r0, [r3, #8]
 80096f4:	f7ff ff72 	bl	80095dc <fAddToBufferU16>
        fAddToBuffer((uint8_t*)me->_pBufferChannels[i].ItemFobjectPtr, me->_pBufferChannels[i].ItemFobjectParam);
 80096f8:	696b      	ldr	r3, [r5, #20]
 80096fa:	4433      	add	r3, r6
 80096fc:	8919      	ldrh	r1, [r3, #8]
 80096fe:	6858      	ldr	r0, [r3, #4]
 8009700:	f7ff ff86 	bl	8009610 <fAddToBuffer>
  for(uint16_t i = 0; i < me->ChannelQty; i++) {
 8009704:	3401      	adds	r4, #1
 8009706:	8a6a      	ldrh	r2, [r5, #18]
 8009708:	b2a3      	uxth	r3, r4
 800970a:	429a      	cmp	r2, r3
 800970c:	d910      	bls.n	8009730 <fDataBusValueGeneratePayload+0x5c>
    if(me->_pBufferChannels[i].ItemFobjectPtr == 0U) {
 800970e:	b2a3      	uxth	r3, r4
 8009710:	011e      	lsls	r6, r3, #4
 8009712:	696a      	ldr	r2, [r5, #20]
 8009714:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8009718:	6859      	ldr	r1, [r3, #4]
 800971a:	2900      	cmp	r1, #0
 800971c:	d0f2      	beq.n	8009704 <fDataBusValueGeneratePayload+0x30>
    if(!me->_pBufferChannels[i].Enable) {
 800971e:	7b1b      	ldrb	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0ef      	beq.n	8009704 <fDataBusValueGeneratePayload+0x30>
    switch(me->_pBufferChannels[i].ItemFobjectType) {
 8009724:	5d90      	ldrb	r0, [r2, r6]
 8009726:	2802      	cmp	r0, #2
 8009728:	d0da      	beq.n	80096e0 <fDataBusValueGeneratePayload+0xc>
 800972a:	2813      	cmp	r0, #19
 800972c:	d1ea      	bne.n	8009704 <fDataBusValueGeneratePayload+0x30>
 800972e:	e7d7      	b.n	80096e0 <fDataBusValueGeneratePayload+0xc>
        // Do nothing.
        break;
      }
    }
  }
}
 8009730:	bd70      	pop	{r4, r5, r6, pc}
 8009732:	4770      	bx	lr

08009734 <fMcuPingGeneratePayload>:
 * @brief Generates payload for sending ping results of MCU fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fMcuPingGeneratePayload(uint32_t fobjectPtr, void *param) {
 8009734:	b508      	push	{r3, lr}
  UNUSED_(fobjectPtr);

  uint8_t *param_ptr = (uint8_t*)param;

  for(uint16_t i = 0; i < 1U; i++) {
    fAddToBufferU8(param_ptr[i]);
 8009736:	7808      	ldrb	r0, [r1, #0]
 8009738:	f7ff feb8 	bl	80094ac <fAddToBufferU8>
  }
}
 800973c:	bd08      	pop	{r3, pc}

0800973e <fVarValueGeneratePayload>:
 * @brief Generates payload for sending values of variable fobjects.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fVarValueGeneratePayload(uint32_t fobjectPtr, void *param) {
 800973e:	b510      	push	{r4, lr}
 8009740:	460c      	mov	r4, r1
  
  UNUSED_(fobjectPtr);

  sVarSendParam *par = (sVarSendParam*)param;
  
  fAddToBufferU32(par->VarPtr);
 8009742:	6808      	ldr	r0, [r1, #0]
 8009744:	f7ff ff53 	bl	80095ee <fAddToBufferU32>
  fAddToBuffer((uint8_t*)par->DataPtr, par->VarSize);
 8009748:	6861      	ldr	r1, [r4, #4]
 800974a:	68a0      	ldr	r0, [r4, #8]
 800974c:	f7ff ff60 	bl	8009610 <fAddToBuffer>
}
 8009750:	bd10      	pop	{r4, pc}
	...

08009754 <fDictGeneratePayloadIterator>:
 * @brief Generates payload for sending index and total number of faraabin dictionary.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fDictGeneratePayloadIterator(uint32_t fobjectPtr, void *param) {
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4606      	mov	r6, r0
 8009758:	460c      	mov	r4, r1

  fAddToBufferU16(_serializer.DictIterator.CurrentDictIndex);
 800975a:	4d08      	ldr	r5, [pc, #32]	@ (800977c <fDictGeneratePayloadIterator+0x28>)
 800975c:	88a8      	ldrh	r0, [r5, #4]
 800975e:	f7ff ff3d 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU16(_serializer.DictIterator.TotalSubDicts);
 8009762:	8828      	ldrh	r0, [r5, #0]
 8009764:	f7ff ff3a 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU16(_serializer.DictIterator.CurrentSubDictIndex);
 8009768:	8868      	ldrh	r0, [r5, #2]
 800976a:	f7ff ff37 	bl	80095dc <fAddToBufferU16>
  
  sGeneratePayloadDict_Param *par = (sGeneratePayloadDict_Param*)param;
  if(par->fpGenerateDictPayload != NULL) {
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	b113      	cbz	r3, 8009778 <fDictGeneratePayloadIterator+0x24>
    par->fpGenerateDictPayload(fobjectPtr, par->pDictPayloadParam);
 8009772:	6861      	ldr	r1, [r4, #4]
 8009774:	4630      	mov	r0, r6
 8009776:	4798      	blx	r3
  }
}
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	bf00      	nop
 800977c:	20002bf0 	.word	0x20002bf0

08009780 <fSerializePayload_Event>:
 * @brief 
 * 
 * @param fobjectPtr 
 * @param param 
 */
static void fSerializePayload_Event(uint32_t fobjectPtr, void *param) {
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4605      	mov	r5, r0
 8009784:	460c      	mov	r4, r1
  
  sEventParam *par = (sEventParam*)param;
  
  fAddToBufferU8((uint8_t)par->Severity);
 8009786:	7808      	ldrb	r0, [r1, #0]
 8009788:	f7ff fe90 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU16(par->EventId);
 800978c:	8860      	ldrh	r0, [r4, #2]
 800978e:	f7ff ff25 	bl	80095dc <fAddToBufferU16>
  if(par->pParam != NULL) {
 8009792:	6860      	ldr	r0, [r4, #4]
 8009794:	b110      	cbz	r0, 800979c <fSerializePayload_Event+0x1c>
    fAddToBuffer(par->pParam, par->ParamSize);
 8009796:	8921      	ldrh	r1, [r4, #8]
 8009798:	f7ff ff3a 	bl	8009610 <fAddToBuffer>
  }
  
  if(par->fpGeneratePayload != NULL) {
 800979c:	68e3      	ldr	r3, [r4, #12]
 800979e:	b113      	cbz	r3, 80097a6 <fSerializePayload_Event+0x26>
    par->fpGeneratePayload(fobjectPtr, par->pPayloadParam);
 80097a0:	6921      	ldr	r1, [r4, #16]
 80097a2:	4628      	mov	r0, r5
 80097a4:	4798      	blx	r3
  }
}
 80097a6:	bd38      	pop	{r3, r4, r5, pc}

080097a8 <fSerializeFrame>:
  void(*generatePayloadFunc)(uint32_t fobjectPtr, void *param), void *payloadParam) {
 80097a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ac:	468a      	mov	sl, r1
 80097ae:	4614      	mov	r4, r2
 80097b0:	4699      	mov	r9, r3
 80097b2:	9e08      	ldr	r6, [sp, #32]
 80097b4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80097b6:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
	if((frameType == eFB_LINK_FRAME_TYPE_EVENT) && (!fFaraabin_IsAllowEvent())) {
 80097ba:	4605      	mov	r5, r0
 80097bc:	b920      	cbnz	r0, 80097c8 <fSerializeFrame+0x20>
 80097be:	f7fd f9ad 	bl	8006b1c <fFaraabin_IsAllowEvent>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	f000 80ae 	beq.w	8009924 <fSerializeFrame+0x17c>
  __ASM volatile ("cpsid i" : : : "memory");
 80097c8:	b672      	cpsid	i
  _serializer.Serializer.CheckSum = 0U;
 80097ca:	4b8c      	ldr	r3, [pc, #560]	@ (80099fc <fSerializeFrame+0x254>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 28a2 	strb.w	r2, [r3, #2210]	@ 0x8a2
  if(fobjectPtr != 0U) {
 80097d2:	2e00      	cmp	r6, #0
 80097d4:	f000 80a8 	beq.w	8009928 <fSerializeFrame+0x180>
    (*fobjectSeq)++;
 80097d8:	f89a 3000 	ldrb.w	r3, [sl]
 80097dc:	3301      	adds	r3, #1
 80097de:	b2db      	uxtb	r3, r3
      *fobjectSeq = 0U;
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	bf28      	it	cs
 80097e4:	4613      	movcs	r3, r2
 80097e6:	f88a 3000 	strb.w	r3, [sl]
  _serializer.Serializer.NodeSeq++;
 80097ea:	4a84      	ldr	r2, [pc, #528]	@ (80099fc <fSerializeFrame+0x254>)
 80097ec:	f892 18a3 	ldrb.w	r1, [r2, #2211]	@ 0x8a3
 80097f0:	3101      	adds	r1, #1
 80097f2:	b2c9      	uxtb	r1, r1
    _serializer.Serializer.NodeSeq = 0U;
 80097f4:	2910      	cmp	r1, #16
 80097f6:	bf28      	it	cs
 80097f8:	2100      	movcs	r1, #0
 80097fa:	f882 18a3 	strb.w	r1, [r2, #2211]	@ 0x8a3
  control |= (((uint16_t)reqSeq & 0x0FU) << 2U);
 80097fe:	00a4      	lsls	r4, r4, #2
 8009800:	f004 043c 	and.w	r4, r4, #60	@ 0x3c
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 8009804:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
  uint8_t extPtr = (extendedFobjectPtr != 0U) ? 1U : 0U;
 8009808:	1e3a      	subs	r2, r7, #0
 800980a:	bf18      	it	ne
 800980c:	2201      	movne	r2, #1
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 800980e:	ea44 3482 	orr.w	r4, r4, r2, lsl #14
  control |= (((uint16_t)frameType & 0x01U) << 0U);
 8009812:	f005 0001 	and.w	r0, r5, #1
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 8009816:	4320      	orrs	r0, r4
  control |= (((uint16_t)seq & 0x0FU) << 6U);
 8009818:	019b      	lsls	r3, r3, #6
 800981a:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
  control |= (((uint16_t)extPtr & 0x01U) << 14U);
 800981e:	4318      	orrs	r0, r3
  control |= (((uint16_t)_serializer.Serializer.NodeSeq & 0x0FU) << 10U);
 8009820:	0289      	lsls	r1, r1, #10
 8009822:	f401 5170 	and.w	r1, r1, #15360	@ 0x3c00
  fAddToBufferU16(control);
 8009826:	4308      	orrs	r0, r1
 8009828:	f7ff fed8 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU32(fChrono_GetTick());
 800982c:	f7fc ff22 	bl	8006674 <fChrono_GetTick>
 8009830:	f7ff fedd 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(fobjectPtr);
 8009834:	4630      	mov	r0, r6
 8009836:	f7ff feda 	bl	80095ee <fAddToBufferU32>
  if(extPtr == 1U) {
 800983a:	2f00      	cmp	r7, #0
 800983c:	d176      	bne.n	800992c <fSerializeFrame+0x184>
  uint8_t fobjectProp = (uint8_t)(clientFrameGroup << 5U) + (uint8_t)(clientFrameId);
 800983e:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8009842:	f89d 002c 	ldrb.w	r0, [sp, #44]	@ 0x2c
 8009846:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  fAddToBufferU8(fobjectProp);
 800984a:	b2c0      	uxtb	r0, r0
 800984c:	f7ff fe2e 	bl	80094ac <fAddToBufferU8>
  if(generatePayloadFunc != NULL) {
 8009850:	f1b8 0f00 	cmp.w	r8, #0
 8009854:	d002      	beq.n	800985c <fSerializeFrame+0xb4>
    generatePayloadFunc(fobjectPtr, payloadParam);
 8009856:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009858:	4630      	mov	r0, r6
 800985a:	47c0      	blx	r8
  _serializer.Serializer.CheckSum ^= (uint8_t)0xFFU;   /* invert the bits in the checksum */
 800985c:	4967      	ldr	r1, [pc, #412]	@ (80099fc <fSerializeFrame+0x254>)
 800985e:	f891 38a2 	ldrb.w	r3, [r1, #2210]	@ 0x8a2
 8009862:	43da      	mvns	r2, r3
 8009864:	b2d2      	uxtb	r2, r2
 8009866:	f881 28a2 	strb.w	r2, [r1, #2210]	@ 0x8a2
  if ((_serializer.Serializer.CheckSum == FB_EOF) || (_serializer.Serializer.CheckSum == FB_ESC)) { // If byte escaping is needed
 800986a:	f1c3 0382 	rsb	r3, r3, #130	@ 0x82
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b01      	cmp	r3, #1
 8009872:	d95f      	bls.n	8009934 <fSerializeFrame+0x18c>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8009874:	4b62      	ldr	r3, [pc, #392]	@ (8009a00 <fSerializeFrame+0x258>)
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	6899      	ldr	r1, [r3, #8]
 800987a:	5442      	strb	r2, [r0, r1]
 800987c:	7d1b      	ldrb	r3, [r3, #20]
 800987e:	b13b      	cbz	r3, 8009890 <fSerializeFrame+0xe8>
 8009880:	4a5f      	ldr	r2, [pc, #380]	@ (8009a00 <fSerializeFrame+0x258>)
 8009882:	68d3      	ldr	r3, [r2, #12]
 8009884:	3301      	adds	r3, #1
 8009886:	60d3      	str	r3, [r2, #12]
 8009888:	6852      	ldr	r2, [r2, #4]
 800988a:	4293      	cmp	r3, r2
 800988c:	f000 80ad 	beq.w	80099ea <fSerializeFrame+0x242>
 8009890:	4a5b      	ldr	r2, [pc, #364]	@ (8009a00 <fSerializeFrame+0x258>)
 8009892:	6893      	ldr	r3, [r2, #8]
 8009894:	3301      	adds	r3, #1
 8009896:	6850      	ldr	r0, [r2, #4]
 8009898:	4283      	cmp	r3, r0
 800989a:	bf08      	it	eq
 800989c:	2300      	moveq	r3, #0
 800989e:	6093      	str	r3, [r2, #8]
 80098a0:	6911      	ldr	r1, [r2, #16]
 80098a2:	3101      	adds	r1, #1
 80098a4:	4281      	cmp	r1, r0
 80098a6:	bf28      	it	cs
 80098a8:	4601      	movcs	r1, r0
 80098aa:	6111      	str	r1, [r2, #16]
 80098ac:	68d1      	ldr	r1, [r2, #12]
 80098ae:	4299      	cmp	r1, r3
 80098b0:	bf0c      	ite	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	2300      	movne	r3, #0
 80098b6:	7513      	strb	r3, [r2, #20]
 80098b8:	d104      	bne.n	80098c4 <fSerializeFrame+0x11c>
 80098ba:	4a52      	ldr	r2, [pc, #328]	@ (8009a04 <fSerializeFrame+0x25c>)
 80098bc:	7913      	ldrb	r3, [r2, #4]
 80098be:	f043 0304 	orr.w	r3, r3, #4
 80098c2:	7113      	strb	r3, [r2, #4]
  fFaraabinLinkBuffer_Put_(&tmp, 1);
 80098c4:	4b4e      	ldr	r3, [pc, #312]	@ (8009a00 <fSerializeFrame+0x258>)
 80098c6:	6819      	ldr	r1, [r3, #0]
 80098c8:	689a      	ldr	r2, [r3, #8]
 80098ca:	207e      	movs	r0, #126	@ 0x7e
 80098cc:	5488      	strb	r0, [r1, r2]
 80098ce:	7d1b      	ldrb	r3, [r3, #20]
 80098d0:	b13b      	cbz	r3, 80098e2 <fSerializeFrame+0x13a>
 80098d2:	4a4b      	ldr	r2, [pc, #300]	@ (8009a00 <fSerializeFrame+0x258>)
 80098d4:	68d3      	ldr	r3, [r2, #12]
 80098d6:	3301      	adds	r3, #1
 80098d8:	60d3      	str	r3, [r2, #12]
 80098da:	6852      	ldr	r2, [r2, #4]
 80098dc:	4293      	cmp	r3, r2
 80098de:	f000 8088 	beq.w	80099f2 <fSerializeFrame+0x24a>
 80098e2:	4a47      	ldr	r2, [pc, #284]	@ (8009a00 <fSerializeFrame+0x258>)
 80098e4:	6893      	ldr	r3, [r2, #8]
 80098e6:	3301      	adds	r3, #1
 80098e8:	6850      	ldr	r0, [r2, #4]
 80098ea:	4283      	cmp	r3, r0
 80098ec:	bf08      	it	eq
 80098ee:	2300      	moveq	r3, #0
 80098f0:	6093      	str	r3, [r2, #8]
 80098f2:	6911      	ldr	r1, [r2, #16]
 80098f4:	3101      	adds	r1, #1
 80098f6:	4281      	cmp	r1, r0
 80098f8:	bf28      	it	cs
 80098fa:	4601      	movcs	r1, r0
 80098fc:	6111      	str	r1, [r2, #16]
 80098fe:	68d1      	ldr	r1, [r2, #12]
 8009900:	4299      	cmp	r1, r3
 8009902:	bf0c      	ite	eq
 8009904:	2301      	moveq	r3, #1
 8009906:	2300      	movne	r3, #0
 8009908:	7513      	strb	r3, [r2, #20]
 800990a:	d104      	bne.n	8009916 <fSerializeFrame+0x16e>
 800990c:	4a3d      	ldr	r2, [pc, #244]	@ (8009a04 <fSerializeFrame+0x25c>)
 800990e:	7913      	ldrb	r3, [r2, #4]
 8009910:	f043 0304 	orr.w	r3, r3, #4
 8009914:	7113      	strb	r3, [r2, #4]
  _serializer.McuHandle->StatisticsTxFramesCnt++;
 8009916:	4b39      	ldr	r3, [pc, #228]	@ (80099fc <fSerializeFrame+0x254>)
 8009918:	f8d3 28a4 	ldr.w	r2, [r3, #2212]	@ 0x8a4
 800991c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800991e:	3301      	adds	r3, #1
 8009920:	6313      	str	r3, [r2, #48]	@ 0x30
  __ASM volatile ("cpsie i" : : : "memory");
 8009922:	b662      	cpsie	i
}
 8009924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t seq = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	e75e      	b.n	80097ea <fSerializeFrame+0x42>
    fAddToBufferU32(extendedFobjectPtr);
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff fe5e 	bl	80095ee <fAddToBufferU32>
 8009932:	e784      	b.n	800983e <fSerializeFrame+0x96>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8009934:	4b32      	ldr	r3, [pc, #200]	@ (8009a00 <fSerializeFrame+0x258>)
 8009936:	6819      	ldr	r1, [r3, #0]
 8009938:	689a      	ldr	r2, [r3, #8]
 800993a:	207d      	movs	r0, #125	@ 0x7d
 800993c:	5488      	strb	r0, [r1, r2]
 800993e:	7d1b      	ldrb	r3, [r3, #20]
 8009940:	b133      	cbz	r3, 8009950 <fSerializeFrame+0x1a8>
 8009942:	4a2f      	ldr	r2, [pc, #188]	@ (8009a00 <fSerializeFrame+0x258>)
 8009944:	68d3      	ldr	r3, [r2, #12]
 8009946:	3301      	adds	r3, #1
 8009948:	60d3      	str	r3, [r2, #12]
 800994a:	6852      	ldr	r2, [r2, #4]
 800994c:	4293      	cmp	r3, r2
 800994e:	d045      	beq.n	80099dc <fSerializeFrame+0x234>
 8009950:	4a2b      	ldr	r2, [pc, #172]	@ (8009a00 <fSerializeFrame+0x258>)
 8009952:	6893      	ldr	r3, [r2, #8]
 8009954:	3301      	adds	r3, #1
 8009956:	6850      	ldr	r0, [r2, #4]
 8009958:	4283      	cmp	r3, r0
 800995a:	bf08      	it	eq
 800995c:	2300      	moveq	r3, #0
 800995e:	6093      	str	r3, [r2, #8]
 8009960:	6911      	ldr	r1, [r2, #16]
 8009962:	3101      	adds	r1, #1
 8009964:	4281      	cmp	r1, r0
 8009966:	bf28      	it	cs
 8009968:	4601      	movcs	r1, r0
 800996a:	6111      	str	r1, [r2, #16]
 800996c:	68d1      	ldr	r1, [r2, #12]
 800996e:	4299      	cmp	r1, r3
 8009970:	bf0c      	ite	eq
 8009972:	2101      	moveq	r1, #1
 8009974:	2100      	movne	r1, #0
 8009976:	7511      	strb	r1, [r2, #20]
 8009978:	d104      	bne.n	8009984 <fSerializeFrame+0x1dc>
 800997a:	4922      	ldr	r1, [pc, #136]	@ (8009a04 <fSerializeFrame+0x25c>)
 800997c:	790a      	ldrb	r2, [r1, #4]
 800997e:	f042 0204 	orr.w	r2, r2, #4
 8009982:	710a      	strb	r2, [r1, #4]
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8009984:	491e      	ldr	r1, [pc, #120]	@ (8009a00 <fSerializeFrame+0x258>)
 8009986:	6808      	ldr	r0, [r1, #0]
    tmp = _serializer.Serializer.CheckSum ^ FB_ESC_XOR;
 8009988:	4a1c      	ldr	r2, [pc, #112]	@ (80099fc <fSerializeFrame+0x254>)
 800998a:	f892 28a2 	ldrb.w	r2, [r2, #2210]	@ 0x8a2
 800998e:	f082 0220 	eor.w	r2, r2, #32
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 8009992:	54c2      	strb	r2, [r0, r3]
 8009994:	7d0b      	ldrb	r3, [r1, #20]
 8009996:	b12b      	cbz	r3, 80099a4 <fSerializeFrame+0x1fc>
 8009998:	68cb      	ldr	r3, [r1, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	60cb      	str	r3, [r1, #12]
 800999e:	684a      	ldr	r2, [r1, #4]
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d01f      	beq.n	80099e4 <fSerializeFrame+0x23c>
 80099a4:	4a16      	ldr	r2, [pc, #88]	@ (8009a00 <fSerializeFrame+0x258>)
 80099a6:	6893      	ldr	r3, [r2, #8]
 80099a8:	3301      	adds	r3, #1
 80099aa:	6850      	ldr	r0, [r2, #4]
 80099ac:	4283      	cmp	r3, r0
 80099ae:	bf08      	it	eq
 80099b0:	2300      	moveq	r3, #0
 80099b2:	6093      	str	r3, [r2, #8]
 80099b4:	6911      	ldr	r1, [r2, #16]
 80099b6:	3101      	adds	r1, #1
 80099b8:	4281      	cmp	r1, r0
 80099ba:	bf28      	it	cs
 80099bc:	4601      	movcs	r1, r0
 80099be:	6111      	str	r1, [r2, #16]
 80099c0:	68d1      	ldr	r1, [r2, #12]
 80099c2:	4299      	cmp	r1, r3
 80099c4:	bf0c      	ite	eq
 80099c6:	2301      	moveq	r3, #1
 80099c8:	2300      	movne	r3, #0
 80099ca:	7513      	strb	r3, [r2, #20]
 80099cc:	f47f af7a 	bne.w	80098c4 <fSerializeFrame+0x11c>
 80099d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009a04 <fSerializeFrame+0x25c>)
 80099d2:	7913      	ldrb	r3, [r2, #4]
 80099d4:	f043 0304 	orr.w	r3, r3, #4
 80099d8:	7113      	strb	r3, [r2, #4]
 80099da:	e773      	b.n	80098c4 <fSerializeFrame+0x11c>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80099dc:	4b08      	ldr	r3, [pc, #32]	@ (8009a00 <fSerializeFrame+0x258>)
 80099de:	2200      	movs	r2, #0
 80099e0:	60da      	str	r2, [r3, #12]
 80099e2:	e7b5      	b.n	8009950 <fSerializeFrame+0x1a8>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80099e4:	2200      	movs	r2, #0
 80099e6:	60ca      	str	r2, [r1, #12]
 80099e8:	e7dc      	b.n	80099a4 <fSerializeFrame+0x1fc>
    fFaraabinLinkBuffer_Put_(&tmp, 1);
 80099ea:	4b05      	ldr	r3, [pc, #20]	@ (8009a00 <fSerializeFrame+0x258>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	60da      	str	r2, [r3, #12]
 80099f0:	e74e      	b.n	8009890 <fSerializeFrame+0xe8>
  fFaraabinLinkBuffer_Put_(&tmp, 1);
 80099f2:	4b03      	ldr	r3, [pc, #12]	@ (8009a00 <fSerializeFrame+0x258>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	60da      	str	r2, [r3, #12]
 80099f8:	e773      	b.n	80098e2 <fSerializeFrame+0x13a>
 80099fa:	bf00      	nop
 80099fc:	20002bf0 	.word	0x20002bf0
 8009a00:	20002b98 	.word	0x20002b98
 8009a04:	2000279c 	.word	0x2000279c

08009a08 <fDictGeneratePayloadContainer>:
static void fDictGeneratePayloadContainer(uint32_t fobjectPtr, void *param) {
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8009a0c:	7800      	ldrb	r0, [r0, #0]
 8009a0e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009a12:	7863      	ldrb	r3, [r4, #1]
 8009a14:	b10b      	cbz	r3, 8009a1a <fDictGeneratePayloadContainer+0x12>
 8009a16:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8009a1a:	f7ff fd47 	bl	80094ac <fAddToBufferU8>
  if(!me->_init) {
 8009a1e:	7863      	ldrb	r3, [r4, #1]
 8009a20:	b323      	cbz	r3, 8009a6c <fDictGeneratePayloadContainer+0x64>
  fAddToBufferU32(sizeof(sFaraabinFobjectContainer));
 8009a22:	2018      	movs	r0, #24
 8009a24:	f7ff fde3 	bl	80095ee <fAddToBufferU32>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009a28:	6865      	ldr	r5, [r4, #4]
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f7f6 fb90 	bl	8000150 <strlen>
 8009a30:	4601      	mov	r1, r0
 8009a32:	4628      	mov	r0, r5
 8009a34:	f7ff fdec 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009a38:	203a      	movs	r0, #58	@ 0x3a
 8009a3a:	f7ff fd37 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009a3e:	68a5      	ldr	r5, [r4, #8]
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7f6 fb85 	bl	8000150 <strlen>
 8009a46:	4601      	mov	r1, r0
 8009a48:	4628      	mov	r0, r5
 8009a4a:	f7ff fde1 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009a4e:	203a      	movs	r0, #58	@ 0x3a
 8009a50:	f7ff fd2c 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009a54:	68e4      	ldr	r4, [r4, #12]
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7f6 fb7a 	bl	8000150 <strlen>
 8009a5c:	4601      	mov	r1, r0
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f7ff fdd6 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009a64:	2000      	movs	r0, #0
 8009a66:	f7ff fd21 	bl	80094ac <fAddToBufferU8>
}
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009a6c:	6865      	ldr	r5, [r4, #4]
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f7f6 fb6e 	bl	8000150 <strlen>
 8009a74:	4601      	mov	r1, r0
 8009a76:	4628      	mov	r0, r5
 8009a78:	f7ff fdca 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009a7c:	203a      	movs	r0, #58	@ 0x3a
 8009a7e:	f7ff fd15 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009a82:	68a5      	ldr	r5, [r4, #8]
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7f6 fb63 	bl	8000150 <strlen>
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f7ff fdbf 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009a92:	203a      	movs	r0, #58	@ 0x3a
 8009a94:	f7ff fd0a 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009a98:	68e4      	ldr	r4, [r4, #12]
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7f6 fb58 	bl	8000150 <strlen>
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f7ff fdb4 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8('\0');
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f7ff fcff 	bl	80094ac <fAddToBufferU8>
    return;
 8009aae:	e7dc      	b.n	8009a6a <fDictGeneratePayloadContainer+0x62>

08009ab0 <fDictGeneratePayloadEventGroup>:
static void fDictGeneratePayloadEventGroup(uint32_t fobjectPtr, void *param) {
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8009ab4:	7800      	ldrb	r0, [r0, #0]
 8009ab6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009aba:	7863      	ldrb	r3, [r4, #1]
 8009abc:	b10b      	cbz	r3, 8009ac2 <fDictGeneratePayloadEventGroup+0x12>
 8009abe:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8009ac2:	f7ff fcf3 	bl	80094ac <fAddToBufferU8>
  if(!me->_init) {
 8009ac6:	7863      	ldrb	r3, [r4, #1]
 8009ac8:	b33b      	cbz	r3, 8009b1a <fDictGeneratePayloadEventGroup+0x6a>
  fAddToBufferU8(me->Enable);
 8009aca:	78a0      	ldrb	r0, [r4, #2]
 8009acc:	f7ff fcee 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU32(sizeof(sFaraabinFobjectEventGroup));
 8009ad0:	2018      	movs	r0, #24
 8009ad2:	f7ff fd8c 	bl	80095ee <fAddToBufferU32>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009ad6:	6865      	ldr	r5, [r4, #4]
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f7f6 fb39 	bl	8000150 <strlen>
 8009ade:	4601      	mov	r1, r0
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f7ff fd95 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009ae6:	203a      	movs	r0, #58	@ 0x3a
 8009ae8:	f7ff fce0 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009aec:	68a5      	ldr	r5, [r4, #8]
 8009aee:	4628      	mov	r0, r5
 8009af0:	f7f6 fb2e 	bl	8000150 <strlen>
 8009af4:	4601      	mov	r1, r0
 8009af6:	4628      	mov	r0, r5
 8009af8:	f7ff fd8a 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009afc:	203a      	movs	r0, #58	@ 0x3a
 8009afe:	f7ff fcd5 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009b02:	68e4      	ldr	r4, [r4, #12]
 8009b04:	4620      	mov	r0, r4
 8009b06:	f7f6 fb23 	bl	8000150 <strlen>
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7ff fd7f 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009b12:	2000      	movs	r0, #0
 8009b14:	f7ff fcca 	bl	80094ac <fAddToBufferU8>
}
 8009b18:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009b1a:	6865      	ldr	r5, [r4, #4]
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	f7f6 fb17 	bl	8000150 <strlen>
 8009b22:	4601      	mov	r1, r0
 8009b24:	4628      	mov	r0, r5
 8009b26:	f7ff fd73 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009b2a:	203a      	movs	r0, #58	@ 0x3a
 8009b2c:	f7ff fcbe 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009b30:	68a5      	ldr	r5, [r4, #8]
 8009b32:	4628      	mov	r0, r5
 8009b34:	f7f6 fb0c 	bl	8000150 <strlen>
 8009b38:	4601      	mov	r1, r0
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f7ff fd68 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009b40:	203a      	movs	r0, #58	@ 0x3a
 8009b42:	f7ff fcb3 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009b46:	68e4      	ldr	r4, [r4, #12]
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7f6 fb01 	bl	8000150 <strlen>
 8009b4e:	4601      	mov	r1, r0
 8009b50:	4620      	mov	r0, r4
 8009b52:	f7ff fd5d 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8('\0');
 8009b56:	2000      	movs	r0, #0
 8009b58:	f7ff fca8 	bl	80094ac <fAddToBufferU8>
    return;
 8009b5c:	e7dc      	b.n	8009b18 <fDictGeneratePayloadEventGroup+0x68>
	...

08009b60 <fDictGeneratePayloadFunctionGroupType>:
 * @brief Generates dictionary payload for function groups.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the parameters of the payload.
 */
static void fDictGeneratePayloadFunctionGroupType(uint32_t fobjectPtr, void *param) {
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4604      	mov	r4, r0
  
  UNUSED_(param);

  sFaraabinFobjectFunctionGroupType *me = (sFaraabinFobjectFunctionGroupType*)fobjectPtr;
  
  ADD_CONTROL_BYTE_();
 8009b64:	7800      	ldrb	r0, [r0, #0]
 8009b66:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009b6a:	7863      	ldrb	r3, [r4, #1]
 8009b6c:	b10b      	cbz	r3, 8009b72 <fDictGeneratePayloadFunctionGroupType+0x12>
 8009b6e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8009b72:	f7ff fc9b 	bl	80094ac <fAddToBufferU8>
  
  if(!me->_init) {
 8009b76:	7863      	ldrb	r3, [r4, #1]
 8009b78:	b323      	cbz	r3, 8009bc4 <fDictGeneratePayloadFunctionGroupType+0x64>
  // Setting

  // Status

  // Dict
  fAddToBufferU32(sizeof(sFaraabinFobjectFunctionGroupType));
 8009b7a:	2018      	movs	r0, #24
 8009b7c:	f7ff fd37 	bl	80095ee <fAddToBufferU32>
  
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009b80:	6865      	ldr	r5, [r4, #4]
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7f6 fae4 	bl	8000150 <strlen>
 8009b88:	4601      	mov	r1, r0
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7ff fd40 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009b90:	203a      	movs	r0, #58	@ 0x3a
 8009b92:	f7ff fc8b 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009b96:	68a5      	ldr	r5, [r4, #8]
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f7f6 fad9 	bl	8000150 <strlen>
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f7ff fd35 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009ba6:	203a      	movs	r0, #58	@ 0x3a
 8009ba8:	f7ff fc80 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Help, strlen(me->Help));
 8009bac:	6964      	ldr	r4, [r4, #20]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f7f6 face 	bl	8000150 <strlen>
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff fd2a 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	f7ff fc75 	bl	80094ac <fAddToBufferU8>
}
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009bc4:	6865      	ldr	r5, [r4, #4]
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f7f6 fac2 	bl	8000150 <strlen>
 8009bcc:	4601      	mov	r1, r0
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f7ff fd1e 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009bd4:	203a      	movs	r0, #58	@ 0x3a
 8009bd6:	f7ff fc69 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)"type", strlen("type"));
 8009bda:	2104      	movs	r1, #4
 8009bdc:	4808      	ldr	r0, [pc, #32]	@ (8009c00 <fDictGeneratePayloadFunctionGroupType+0xa0>)
 8009bde:	f7ff fd17 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009be2:	203a      	movs	r0, #58	@ 0x3a
 8009be4:	f7ff fc62 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009be8:	68a4      	ldr	r4, [r4, #8]
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7f6 fab0 	bl	8000150 <strlen>
 8009bf0:	4601      	mov	r1, r0
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7ff fd0c 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8('\0');
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	f7ff fc57 	bl	80094ac <fAddToBufferU8>
    return;
 8009bfe:	e7e0      	b.n	8009bc2 <fDictGeneratePayloadFunctionGroupType+0x62>
 8009c00:	0800bf80 	.word	0x0800bf80

08009c04 <fDictGeneratePayloadVarType>:
static void fDictGeneratePayloadVarType(uint32_t fobjectPtr, void *param) {
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8009c08:	7800      	ldrb	r0, [r0, #0]
 8009c0a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009c0e:	7863      	ldrb	r3, [r4, #1]
 8009c10:	b10b      	cbz	r3, 8009c16 <fDictGeneratePayloadVarType+0x12>
 8009c12:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8009c16:	f7ff fc49 	bl	80094ac <fAddToBufferU8>
  if(!me->_init) {
 8009c1a:	7863      	ldrb	r3, [r4, #1]
 8009c1c:	b353      	cbz	r3, 8009c74 <fDictGeneratePayloadVarType+0x70>
  fAddToBufferU32(sizeof(sFaraabinFobjectVarType));
 8009c1e:	201c      	movs	r0, #28
 8009c20:	f7ff fce5 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU8((uint8_t)me->DataType);
 8009c24:	7ca0      	ldrb	r0, [r4, #18]
 8009c26:	f7ff fc41 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU32(me->Size);
 8009c2a:	6960      	ldr	r0, [r4, #20]
 8009c2c:	f7ff fcdf 	bl	80095ee <fAddToBufferU32>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009c30:	6865      	ldr	r5, [r4, #4]
 8009c32:	4628      	mov	r0, r5
 8009c34:	f7f6 fa8c 	bl	8000150 <strlen>
 8009c38:	4601      	mov	r1, r0
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f7ff fce8 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009c40:	203a      	movs	r0, #58	@ 0x3a
 8009c42:	f7ff fc33 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009c46:	68a5      	ldr	r5, [r4, #8]
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f7f6 fa81 	bl	8000150 <strlen>
 8009c4e:	4601      	mov	r1, r0
 8009c50:	4628      	mov	r0, r5
 8009c52:	f7ff fcdd 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009c56:	203a      	movs	r0, #58	@ 0x3a
 8009c58:	f7ff fc28 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009c5c:	68e4      	ldr	r4, [r4, #12]
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f7f6 fa76 	bl	8000150 <strlen>
 8009c64:	4601      	mov	r1, r0
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7ff fcd2 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	f7ff fc1d 	bl	80094ac <fAddToBufferU8>
}
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009c74:	6865      	ldr	r5, [r4, #4]
 8009c76:	4628      	mov	r0, r5
 8009c78:	f7f6 fa6a 	bl	8000150 <strlen>
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f7ff fcc6 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009c84:	203a      	movs	r0, #58	@ 0x3a
 8009c86:	f7ff fc11 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009c8a:	68a5      	ldr	r5, [r4, #8]
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7f6 fa5f 	bl	8000150 <strlen>
 8009c92:	4601      	mov	r1, r0
 8009c94:	4628      	mov	r0, r5
 8009c96:	f7ff fcbb 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009c9a:	203a      	movs	r0, #58	@ 0x3a
 8009c9c:	f7ff fc06 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009ca0:	68e4      	ldr	r4, [r4, #12]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7f6 fa54 	bl	8000150 <strlen>
 8009ca8:	4601      	mov	r1, r0
 8009caa:	4620      	mov	r0, r4
 8009cac:	f7ff fcb0 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8('\0');
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f7ff fbfb 	bl	80094ac <fAddToBufferU8>
    return;
 8009cb6:	e7dc      	b.n	8009c72 <fDictGeneratePayloadVarType+0x6e>

08009cb8 <fDictGeneratePayloadVarTypeEnumMember>:
static void fDictGeneratePayloadVarTypeEnumMember(uint32_t fobjectPtr, void *param) {
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	460c      	mov	r4, r1
  fAddToBufferU8(eFO_TYPE_VAR_TYPE_ENUM_MEMBER | 0x80U);
 8009cbc:	2091      	movs	r0, #145	@ 0x91
 8009cbe:	f7ff fbf5 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU16(par->Id);
 8009cc2:	88a0      	ldrh	r0, [r4, #4]
 8009cc4:	f7ff fc8a 	bl	80095dc <fAddToBufferU16>
  fAddToBuffer((uint8_t*)par->Name, strlen(par->Name));
 8009cc8:	6824      	ldr	r4, [r4, #0]
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7f6 fa40 	bl	8000150 <strlen>
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f7ff fc9c 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009cd8:	2000      	movs	r0, #0
 8009cda:	f7ff fbe7 	bl	80094ac <fAddToBufferU8>
}
 8009cde:	bd10      	pop	{r4, pc}

08009ce0 <fDictGeneratePayloadVar>:
static void fDictGeneratePayloadVar(uint32_t fobjectPtr, void *param) {
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	460c      	mov	r4, r1
  fAddToBufferU8(eFO_TYPE_VAR | 0x80U);
 8009ce4:	2082      	movs	r0, #130	@ 0x82
 8009ce6:	f7ff fbe1 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU32(par->VarPtr);
 8009cea:	68e0      	ldr	r0, [r4, #12]
 8009cec:	f7ff fc7f 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(par->VarTypePtr);
 8009cf0:	6920      	ldr	r0, [r4, #16]
 8009cf2:	f7ff fc7c 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(par->VarArrayQty);
 8009cf6:	6960      	ldr	r0, [r4, #20]
 8009cf8:	f7ff fc79 	bl	80095ee <fAddToBufferU32>
  if(par->ExternalInterface != 0U) {
 8009cfc:	69a0      	ldr	r0, [r4, #24]
 8009cfe:	3800      	subs	r0, #0
 8009d00:	bf18      	it	ne
 8009d02:	2001      	movne	r0, #1
  if(par->AccessCallBack != 0U) {
 8009d04:	69e3      	ldr	r3, [r4, #28]
 8009d06:	b10b      	cbz	r3, 8009d0c <fDictGeneratePayloadVar+0x2c>
    control |= 0x02U;
 8009d08:	f040 0002 	orr.w	r0, r0, #2
  if(par->_isPtr) {
 8009d0c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009d10:	b10b      	cbz	r3, 8009d16 <fDictGeneratePayloadVar+0x36>
    control |= 0x04U;
 8009d12:	f040 0004 	orr.w	r0, r0, #4
  fAddToBufferU8(control);
 8009d16:	f7ff fbc9 	bl	80094ac <fAddToBufferU8>
  if(par->ExternalInterface != 0U) {
 8009d1a:	69a0      	ldr	r0, [r4, #24]
 8009d1c:	b9c0      	cbnz	r0, 8009d50 <fDictGeneratePayloadVar+0x70>
  if(par->AccessCallBack != 0U) {
 8009d1e:	69e0      	ldr	r0, [r4, #28]
 8009d20:	b9c8      	cbnz	r0, 8009d56 <fDictGeneratePayloadVar+0x76>
  fAddToBuffer((uint8_t*)par->Name, strlen(par->Name));
 8009d22:	6825      	ldr	r5, [r4, #0]
 8009d24:	4628      	mov	r0, r5
 8009d26:	f7f6 fa13 	bl	8000150 <strlen>
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f7ff fc6f 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009d32:	203a      	movs	r0, #58	@ 0x3a
 8009d34:	f7ff fbba 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->Path, strlen(par->Path));
 8009d38:	6864      	ldr	r4, [r4, #4]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f7f6 fa08 	bl	8000150 <strlen>
 8009d40:	4601      	mov	r1, r0
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fc64 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f7ff fbaf 	bl	80094ac <fAddToBufferU8>
}
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBufferU32(par->ExternalInterface);
 8009d50:	f7ff fc4d 	bl	80095ee <fAddToBufferU32>
 8009d54:	e7e3      	b.n	8009d1e <fDictGeneratePayloadVar+0x3e>
    fAddToBufferU32(par->AccessCallBack);
 8009d56:	f7ff fc4a 	bl	80095ee <fAddToBufferU32>
 8009d5a:	e7e2      	b.n	8009d22 <fDictGeneratePayloadVar+0x42>

08009d5c <fDictGeneratePayloadFunctionGroup>:
 * @brief Generates dictionary payload for function group.
 * 
 * @param fobjectPtr Pointer to the fobject.
 * @param param Pointer to the payload parameters.
 */
static void fDictGeneratePayloadFunctionGroup(uint32_t fobjectPtr, void *param) {
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	460c      	mov	r4, r1
  
  sDictFunctionGroupPayloadParam *par = (sDictFunctionGroupPayloadParam*)param;
  
  fAddToBufferU8(eFO_TYPE_FUNCTION_GROUP | 0x80U);
 8009d60:	2086      	movs	r0, #134	@ 0x86
 8009d62:	f7ff fba3 	bl	80094ac <fAddToBufferU8>
  
  fAddToBufferU32(par->ObjectPtr);
 8009d66:	68e0      	ldr	r0, [r4, #12]
 8009d68:	f7ff fc41 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(par->GroupTypePtr);
 8009d6c:	6920      	ldr	r0, [r4, #16]
 8009d6e:	f7ff fc3e 	bl	80095ee <fAddToBufferU32>
  fAddToBuffer((uint8_t*)par->ObjectName, strlen(par->ObjectName));
 8009d72:	6825      	ldr	r5, [r4, #0]
 8009d74:	4628      	mov	r0, r5
 8009d76:	f7f6 f9eb 	bl	8000150 <strlen>
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7ff fc47 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009d82:	203a      	movs	r0, #58	@ 0x3a
 8009d84:	f7ff fb92 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->Path, strlen(par->Path));
 8009d88:	6865      	ldr	r5, [r4, #4]
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f7f6 f9e0 	bl	8000150 <strlen>
 8009d90:	4601      	mov	r1, r0
 8009d92:	4628      	mov	r0, r5
 8009d94:	f7ff fc3c 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009d98:	203a      	movs	r0, #58	@ 0x3a
 8009d9a:	f7ff fb87 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->FileName, strlen(par->FileName));
 8009d9e:	68a4      	ldr	r4, [r4, #8]
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7f6 f9d5 	bl	8000150 <strlen>
 8009da6:	4601      	mov	r1, r0
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7ff fc31 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009dae:	2000      	movs	r0, #0
 8009db0:	f7ff fb7c 	bl	80094ac <fAddToBufferU8>
}
 8009db4:	bd38      	pop	{r3, r4, r5, pc}

08009db6 <fDictGeneratePayloadFunctionGroupTypeMember>:
static void fDictGeneratePayloadFunctionGroupTypeMember(uint32_t fobjectPtr, void *param) {
 8009db6:	b538      	push	{r3, r4, r5, lr}
 8009db8:	460c      	mov	r4, r1
  fAddToBufferU8(eFO_TYPE_FUNCTION_GROUP_TYPE_MEMBER | 0x80U);
 8009dba:	2095      	movs	r0, #149	@ 0x95
 8009dbc:	f7ff fb76 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU32(sizeof(sFaraabinFobjectFunction));
 8009dc0:	202c      	movs	r0, #44	@ 0x2c
 8009dc2:	f7ff fc14 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32((uint32_t)par);
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f7ff fc11 	bl	80095ee <fAddToBufferU32>
  fAddToBuffer((uint8_t*)par->Name, strlen(par->Name));
 8009dcc:	6865      	ldr	r5, [r4, #4]
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f7f6 f9be 	bl	8000150 <strlen>
 8009dd4:	4601      	mov	r1, r0
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f7ff fc1a 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009ddc:	203a      	movs	r0, #58	@ 0x3a
 8009dde:	f7ff fb65 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)par->Help, strlen(par->Help));
 8009de2:	68a4      	ldr	r4, [r4, #8]
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7f6 f9b3 	bl	8000150 <strlen>
 8009dea:	4601      	mov	r1, r0
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff fc0f 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009df2:	2000      	movs	r0, #0
 8009df4:	f7ff fb5a 	bl	80094ac <fAddToBufferU8>
}
 8009df8:	bd38      	pop	{r3, r4, r5, pc}

08009dfa <fDataBusSettingGeneratePayload>:
static void fDataBusSettingGeneratePayload(uint32_t fobjectPtr, void *param) {
 8009dfa:	b570      	push	{r4, r5, r6, lr}
 8009dfc:	4604      	mov	r4, r0
  fAddToBufferU8(me->Enable);
 8009dfe:	7880      	ldrb	r0, [r0, #2]
 8009e00:	f7ff fb54 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU16(me->AttachedItemsQty);
 8009e04:	8b60      	ldrh	r0, [r4, #26]
 8009e06:	f7ff fbe9 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU16(me->StreamDivideBy);
 8009e0a:	8be0      	ldrh	r0, [r4, #30]
 8009e0c:	f7ff fbe6 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU32(me->BufferCaptureSize);
 8009e10:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009e12:	f7ff fbec 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU16(me->TimerDivideBy);
 8009e16:	f8b4 004c 	ldrh.w	r0, [r4, #76]	@ 0x4c
 8009e1a:	f7ff fbdf 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU32(me->TimerWindowMs);
 8009e1e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009e20:	f7ff fbe5 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU16(me->TrigDivideBy);
 8009e24:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009e28:	f7ff fbd8 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU32(me->TimeAfterTrigMs);
 8009e2c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009e2e:	f7ff fbde 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU8(me->ApiTrigEnable);
 8009e32:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 8009e36:	f7ff fb39 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU8(me->CurrentState);
 8009e3a:	f894 0064 	ldrb.w	r0, [r4, #100]	@ 0x64
 8009e3e:	f7ff fb35 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU32(me->CycleUs);
 8009e42:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8009e46:	f7ff fbd2 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU8(me->ChTrigEnable);
 8009e4a:	f894 0089 	ldrb.w	r0, [r4, #137]	@ 0x89
 8009e4e:	f7ff fb2d 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU16(me->ChTrigNo);
 8009e52:	f8b4 008a 	ldrh.w	r0, [r4, #138]	@ 0x8a
 8009e56:	f7ff fbc1 	bl	80095dc <fAddToBufferU16>
  fAddToBufferU8(me->ChTrigType);
 8009e5a:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 8009e5e:	f7ff fb25 	bl	80094ac <fAddToBufferU8>
  for(uint8_t i = 0; i < 8; i++) {
 8009e62:	f104 058f 	add.w	r5, r4, #143	@ 0x8f
 8009e66:	f104 0697 	add.w	r6, r4, #151	@ 0x97
    fAddToBufferU8(me->ChTrigThreshold.Byte[i]);
 8009e6a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8009e6e:	f7ff fb1d 	bl	80094ac <fAddToBufferU8>
  for(uint8_t i = 0; i < 8; i++) {
 8009e72:	42b5      	cmp	r5, r6
 8009e74:	d1f9      	bne.n	8009e6a <fDataBusSettingGeneratePayload+0x70>
  fAddToBufferU16(fFaraabinFobjectDataBus_GetAttachCount(me));
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7fd fd82 	bl	8007980 <fFaraabinFobjectDataBus_GetAttachCount>
 8009e7c:	f7ff fbae 	bl	80095dc <fAddToBufferU16>
  if(me->_init) {
 8009e80:	7863      	ldrb	r3, [r4, #1]
 8009e82:	b33b      	cbz	r3, 8009ed4 <fDataBusSettingGeneratePayload+0xda>
    for(uint16_t i = 0; i<me->ChannelQty; i++) {
 8009e84:	8a63      	ldrh	r3, [r4, #18]
 8009e86:	b32b      	cbz	r3, 8009ed4 <fDataBusSettingGeneratePayload+0xda>
 8009e88:	2500      	movs	r5, #0
 8009e8a:	e004      	b.n	8009e96 <fDataBusSettingGeneratePayload+0x9c>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	8a62      	ldrh	r2, [r4, #18]
 8009e90:	b2ab      	uxth	r3, r5
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d91e      	bls.n	8009ed4 <fDataBusSettingGeneratePayload+0xda>
      if(me->_pBufferChannels[i].ItemFobjectPtr != 0U) {
 8009e96:	b2aa      	uxth	r2, r5
 8009e98:	0116      	lsls	r6, r2, #4
 8009e9a:	6963      	ldr	r3, [r4, #20]
 8009e9c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f2      	beq.n	8009e8c <fDataBusSettingGeneratePayload+0x92>
        fAddToBufferU16(i);
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f7ff fb98 	bl	80095dc <fAddToBufferU16>
        fAddToBufferU8(me->_pBufferChannels[i].ItemFobjectType);
 8009eac:	6963      	ldr	r3, [r4, #20]
 8009eae:	5d98      	ldrb	r0, [r3, r6]
 8009eb0:	f7ff fafc 	bl	80094ac <fAddToBufferU8>
        fAddToBufferU32(me->_pBufferChannels[i].ItemFobjectPtr);
 8009eb4:	6963      	ldr	r3, [r4, #20]
 8009eb6:	4433      	add	r3, r6
 8009eb8:	6858      	ldr	r0, [r3, #4]
 8009eba:	f7ff fb98 	bl	80095ee <fAddToBufferU32>
        fAddToBufferU16(me->_pBufferChannels[i].ItemFobjectParam);
 8009ebe:	6963      	ldr	r3, [r4, #20]
 8009ec0:	4433      	add	r3, r6
 8009ec2:	8918      	ldrh	r0, [r3, #8]
 8009ec4:	f7ff fb8a 	bl	80095dc <fAddToBufferU16>
        fAddToBufferU8((uint8_t)me->_pBufferChannels[i].Enable);
 8009ec8:	6963      	ldr	r3, [r4, #20]
 8009eca:	4433      	add	r3, r6
 8009ecc:	7b18      	ldrb	r0, [r3, #12]
 8009ece:	f7ff faed 	bl	80094ac <fAddToBufferU8>
 8009ed2:	e7db      	b.n	8009e8c <fDataBusSettingGeneratePayload+0x92>
}
 8009ed4:	bd70      	pop	{r4, r5, r6, pc}

08009ed6 <fDictGeneratePayloadDataBus>:
static void fDictGeneratePayloadDataBus(uint32_t fobjectPtr, void *param) {
 8009ed6:	b538      	push	{r3, r4, r5, lr}
 8009ed8:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 8009eda:	7800      	ldrb	r0, [r0, #0]
 8009edc:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009ee0:	7863      	ldrb	r3, [r4, #1]
 8009ee2:	b10b      	cbz	r3, 8009ee8 <fDictGeneratePayloadDataBus+0x12>
 8009ee4:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8009ee8:	f7ff fae0 	bl	80094ac <fAddToBufferU8>
  if(!me->_init) {
 8009eec:	7863      	ldrb	r3, [r4, #1]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d03c      	beq.n	8009f6c <fDictGeneratePayloadDataBus+0x96>
  fDataBusSettingGeneratePayload(fobjectPtr, NULL);
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f7ff ff80 	bl	8009dfa <fDataBusSettingGeneratePayload>
  fAddToBufferU32(sizeof(sFaraabinFobjectDataBus));
 8009efa:	20b0      	movs	r0, #176	@ 0xb0
 8009efc:	f7ff fb77 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(sizeof(sFaraabinFobjectDataBus_Channel) * me->ChannelQty);
 8009f00:	8a60      	ldrh	r0, [r4, #18]
 8009f02:	0100      	lsls	r0, r0, #4
 8009f04:	f7ff fb73 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(sizeof(sFaraabinFobjectDataBus_CaptureValue) * me->BufferCaptureSize);
 8009f08:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009f0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009f0e:	00c0      	lsls	r0, r0, #3
 8009f10:	f7ff fb6d 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32((uint32_t)&(me->CycleUs));
 8009f14:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 8009f18:	f7ff fb69 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(me->BufferCaptureSize);
 8009f1c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009f1e:	f7ff fb66 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU16(me->ChannelQty);
 8009f22:	8a60      	ldrh	r0, [r4, #18]
 8009f24:	f7ff fb5a 	bl	80095dc <fAddToBufferU16>
  fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009f28:	6865      	ldr	r5, [r4, #4]
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f7f6 f910 	bl	8000150 <strlen>
 8009f30:	4601      	mov	r1, r0
 8009f32:	4628      	mov	r0, r5
 8009f34:	f7ff fb6c 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009f38:	203a      	movs	r0, #58	@ 0x3a
 8009f3a:	f7ff fab7 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009f3e:	68a5      	ldr	r5, [r4, #8]
 8009f40:	4628      	mov	r0, r5
 8009f42:	f7f6 f905 	bl	8000150 <strlen>
 8009f46:	4601      	mov	r1, r0
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f7ff fb61 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8((uint8_t)':');
 8009f4e:	203a      	movs	r0, #58	@ 0x3a
 8009f50:	f7ff faac 	bl	80094ac <fAddToBufferU8>
  fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009f54:	68e4      	ldr	r4, [r4, #12]
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7f6 f8fa 	bl	8000150 <strlen>
 8009f5c:	4601      	mov	r1, r0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff fb56 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 8009f64:	2000      	movs	r0, #0
 8009f66:	f7ff faa1 	bl	80094ac <fAddToBufferU8>
}
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 8009f6c:	6865      	ldr	r5, [r4, #4]
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f7f6 f8ee 	bl	8000150 <strlen>
 8009f74:	4601      	mov	r1, r0
 8009f76:	4628      	mov	r0, r5
 8009f78:	f7ff fb4a 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009f7c:	203a      	movs	r0, #58	@ 0x3a
 8009f7e:	f7ff fa95 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 8009f82:	68a5      	ldr	r5, [r4, #8]
 8009f84:	4628      	mov	r0, r5
 8009f86:	f7f6 f8e3 	bl	8000150 <strlen>
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f7ff fb3f 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 8009f92:	203a      	movs	r0, #58	@ 0x3a
 8009f94:	f7ff fa8a 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 8009f98:	68e4      	ldr	r4, [r4, #12]
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f7f6 f8d8 	bl	8000150 <strlen>
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f7ff fb34 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8('\0');
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f7ff fa7f 	bl	80094ac <fAddToBufferU8>
    return;
 8009fae:	e7dc      	b.n	8009f6a <fDictGeneratePayloadDataBus+0x94>

08009fb0 <fSerializeDict>:
  void *dictPayloadParam) {
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	b088      	sub	sp, #32
  return _serializer.DictIterator._isInCountingMode;
 8009fb4:	4c11      	ldr	r4, [pc, #68]	@ (8009ffc <fSerializeDict+0x4c>)
  if(!fDictIteratorIsInCountingMode()) {
 8009fb6:	79a4      	ldrb	r4, [r4, #6]
 8009fb8:	b12c      	cbz	r4, 8009fc6 <fSerializeDict+0x16>
    _serializer.DictIterator.TotalSubDicts++;
 8009fba:	4a10      	ldr	r2, [pc, #64]	@ (8009ffc <fSerializeDict+0x4c>)
 8009fbc:	8813      	ldrh	r3, [r2, #0]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	8013      	strh	r3, [r2, #0]
}
 8009fc2:	b008      	add	sp, #32
 8009fc4:	bd10      	pop	{r4, pc}
    param.fpGenerateDictPayload = fpGenerateDictPayload;
 8009fc6:	9306      	str	r3, [sp, #24]
    param.pDictPayloadParam = dictPayloadParam;
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fca:	9307      	str	r3, [sp, #28]
    fSerializeFrame(  
 8009fcc:	ab06      	add	r3, sp, #24
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	@ (800a000 <fSerializeDict+0x50>)
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	9302      	str	r3, [sp, #8]
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	9000      	str	r0, [sp, #0]
 8009fde:	2001      	movs	r0, #1
 8009fe0:	f7ff fbe2 	bl	80097a8 <fSerializeFrame>
    fFaraabinLinkHandler_FlushBuffer();
 8009fe4:	f7ff fa5a 	bl	800949c <fFaraabinLinkHandler_FlushBuffer>
  if(_serializer.DictIterator._isInCountingMode) {
 8009fe8:	4b04      	ldr	r3, [pc, #16]	@ (8009ffc <fSerializeDict+0x4c>)
 8009fea:	799b      	ldrb	r3, [r3, #6]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e4      	bne.n	8009fba <fSerializeDict+0xa>
    _serializer.DictIterator.CurrentSubDictIndex++;
 8009ff0:	4a02      	ldr	r2, [pc, #8]	@ (8009ffc <fSerializeDict+0x4c>)
 8009ff2:	8853      	ldrh	r3, [r2, #2]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	8053      	strh	r3, [r2, #2]
}
 8009ff8:	e7e3      	b.n	8009fc2 <fSerializeDict+0x12>
 8009ffa:	bf00      	nop
 8009ffc:	20002bf0 	.word	0x20002bf0
 800a000:	08009755 	.word	0x08009755

0800a004 <fGenerateDict>:
static void fGenerateDict(uint32_t fobjectPtr, uint8_t reqSeq) {
 800a004:	b530      	push	{r4, r5, lr}
 800a006:	b083      	sub	sp, #12
 800a008:	4604      	mov	r4, r0
 800a00a:	460d      	mov	r5, r1
  switch((eFaraabin_FobjectType)(*fobjectType)) {
 800a00c:	7803      	ldrb	r3, [r0, #0]
 800a00e:	2b0c      	cmp	r3, #12
 800a010:	d818      	bhi.n	800a044 <fGenerateDict+0x40>
 800a012:	e8df f003 	tbb	[pc, r3]
 800a016:	1707      	.short	0x1707
 800a018:	17571d17 	.word	0x17571d17
 800a01c:	177a4817 	.word	0x177a4817
 800a020:	1717      	.short	0x1717
 800a022:	6c          	.byte	0x6c
 800a023:	00          	.byte	0x00
      CorrectPath_(me->Path);
 800a024:	6883      	ldr	r3, [r0, #8]
 800a026:	b17b      	cbz	r3, 800a048 <fGenerateDict+0x44>
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	b913      	cbnz	r3, 800a032 <fGenerateDict+0x2e>
 800a02c:	4b41      	ldr	r3, [pc, #260]	@ (800a134 <fGenerateDict+0x130>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6083      	str	r3, [r0, #8]
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadMcu, NULL);
 800a032:	2300      	movs	r3, #0
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	4b40      	ldr	r3, [pc, #256]	@ (800a138 <fGenerateDict+0x134>)
 800a038:	462a      	mov	r2, r5
 800a03a:	f104 0110 	add.w	r1, r4, #16
 800a03e:	4620      	mov	r0, r4
 800a040:	f7ff ffb6 	bl	8009fb0 <fSerializeDict>
}
 800a044:	b003      	add	sp, #12
 800a046:	bd30      	pop	{r4, r5, pc}
      CorrectPath_(me->Path);
 800a048:	4b3a      	ldr	r3, [pc, #232]	@ (800a134 <fGenerateDict+0x130>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6083      	str	r3, [r0, #8]
 800a04e:	e7f0      	b.n	800a032 <fGenerateDict+0x2e>
      CorrectPath_(me->Path);
 800a050:	6883      	ldr	r3, [r0, #8]
 800a052:	b1d3      	cbz	r3, 800a08a <fGenerateDict+0x86>
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	b913      	cbnz	r3, 800a05e <fGenerateDict+0x5a>
 800a058:	4b36      	ldr	r3, [pc, #216]	@ (800a134 <fGenerateDict+0x130>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6083      	str	r3, [r0, #8]
      switch(me->DataType) {
 800a05e:	7ca3      	ldrb	r3, [r4, #18]
 800a060:	b1bb      	cbz	r3, 800a092 <fGenerateDict+0x8e>
 800a062:	3b01      	subs	r3, #1
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d8ec      	bhi.n	800a044 <fGenerateDict+0x40>
          fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadVarType, NULL);
 800a06a:	2300      	movs	r3, #0
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4b33      	ldr	r3, [pc, #204]	@ (800a13c <fGenerateDict+0x138>)
 800a070:	462a      	mov	r2, r5
 800a072:	f104 0110 	add.w	r1, r4, #16
 800a076:	4620      	mov	r0, r4
 800a078:	f7ff ff9a 	bl	8009fb0 <fSerializeDict>
          if(me->fpSendMember != 0U) {
 800a07c:	69a3      	ldr	r3, [r4, #24]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0e0      	beq.n	800a044 <fGenerateDict+0x40>
            me->fpSendMember(fobjectPtr, reqSeq);
 800a082:	4629      	mov	r1, r5
 800a084:	4620      	mov	r0, r4
 800a086:	4798      	blx	r3
 800a088:	e7dc      	b.n	800a044 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 800a08a:	4b2a      	ldr	r3, [pc, #168]	@ (800a134 <fGenerateDict+0x130>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6083      	str	r3, [r0, #8]
 800a090:	e7e5      	b.n	800a05e <fGenerateDict+0x5a>
          fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadVarType, NULL);
 800a092:	2300      	movs	r3, #0
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	4b29      	ldr	r3, [pc, #164]	@ (800a13c <fGenerateDict+0x138>)
 800a098:	462a      	mov	r2, r5
 800a09a:	f104 0110 	add.w	r1, r4, #16
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f7ff ff86 	bl	8009fb0 <fSerializeDict>
          break;
 800a0a4:	e7ce      	b.n	800a044 <fGenerateDict+0x40>
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadFunctionGroupType, NULL);
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	4b25      	ldr	r3, [pc, #148]	@ (800a140 <fGenerateDict+0x13c>)
 800a0ac:	460a      	mov	r2, r1
 800a0ae:	f100 010c 	add.w	r1, r0, #12
 800a0b2:	f7ff ff7d 	bl	8009fb0 <fSerializeDict>
      if(me->fpSendMember != 0U) {
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0c3      	beq.n	800a044 <fGenerateDict+0x40>
        me->fpSendMember(fobjectPtr, reqSeq);
 800a0bc:	4629      	mov	r1, r5
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4798      	blx	r3
 800a0c2:	e7bf      	b.n	800a044 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 800a0c4:	6883      	ldr	r3, [r0, #8]
 800a0c6:	b173      	cbz	r3, 800a0e6 <fGenerateDict+0xe2>
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	b913      	cbnz	r3, 800a0d2 <fGenerateDict+0xce>
 800a0cc:	4b19      	ldr	r3, [pc, #100]	@ (800a134 <fGenerateDict+0x130>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6083      	str	r3, [r0, #8]
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadEventGroup, NULL);
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	4b1b      	ldr	r3, [pc, #108]	@ (800a144 <fGenerateDict+0x140>)
 800a0d8:	462a      	mov	r2, r5
 800a0da:	f104 0110 	add.w	r1, r4, #16
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f7ff ff66 	bl	8009fb0 <fSerializeDict>
      break;
 800a0e4:	e7ae      	b.n	800a044 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 800a0e6:	4b13      	ldr	r3, [pc, #76]	@ (800a134 <fGenerateDict+0x130>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6083      	str	r3, [r0, #8]
 800a0ec:	e7f1      	b.n	800a0d2 <fGenerateDict+0xce>
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadContainer, NULL);
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	4b15      	ldr	r3, [pc, #84]	@ (800a148 <fGenerateDict+0x144>)
 800a0f4:	460a      	mov	r2, r1
 800a0f6:	f100 0110 	add.w	r1, r0, #16
 800a0fa:	f7ff ff59 	bl	8009fb0 <fSerializeDict>
      if(me->fpContainerFunc != NULL) {
 800a0fe:	6963      	ldr	r3, [r4, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d09f      	beq.n	800a044 <fGenerateDict+0x40>
        me->fpContainerFunc(reqSeq);
 800a104:	4628      	mov	r0, r5
 800a106:	4798      	blx	r3
 800a108:	e79c      	b.n	800a044 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 800a10a:	6883      	ldr	r3, [r0, #8]
 800a10c:	b173      	cbz	r3, 800a12c <fGenerateDict+0x128>
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	b913      	cbnz	r3, 800a118 <fGenerateDict+0x114>
 800a112:	4b08      	ldr	r3, [pc, #32]	@ (800a134 <fGenerateDict+0x130>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6083      	str	r3, [r0, #8]
      fSerializeDict(fobjectPtr, &me->Seq, reqSeq, fDictGeneratePayloadDataBus, NULL);
 800a118:	2300      	movs	r3, #0
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	4b0b      	ldr	r3, [pc, #44]	@ (800a14c <fGenerateDict+0x148>)
 800a11e:	462a      	mov	r2, r5
 800a120:	f104 0110 	add.w	r1, r4, #16
 800a124:	4620      	mov	r0, r4
 800a126:	f7ff ff43 	bl	8009fb0 <fSerializeDict>
}
 800a12a:	e78b      	b.n	800a044 <fGenerateDict+0x40>
      CorrectPath_(me->Path);
 800a12c:	4b01      	ldr	r3, [pc, #4]	@ (800a134 <fGenerateDict+0x130>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6083      	str	r3, [r0, #8]
 800a132:	e7f1      	b.n	800a118 <fGenerateDict+0x114>
 800a134:	20000378 	.word	0x20000378
 800a138:	0800a25d 	.word	0x0800a25d
 800a13c:	08009c05 	.word	0x08009c05
 800a140:	08009b61 	.word	0x08009b61
 800a144:	08009ab1 	.word	0x08009ab1
 800a148:	08009a09 	.word	0x08009a09
 800a14c:	08009ed7 	.word	0x08009ed7

0800a150 <fMcuLiveGeneratePayload>:
static void fMcuLiveGeneratePayload(uint32_t fobjectPtr, void *param) {
 800a150:	b510      	push	{r4, lr}
  sFaraabinFobjectMcu* mcuFobject = fFaraabinFobjectMcu_GetFobject();
 800a152:	f7fd ff5f 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 800a156:	4604      	mov	r4, r0
  fAddToBufferU32(fFaraabinDatabase_GetAllStatusFlags());
 800a158:	f7fc fdac 	bl	8006cb4 <fFaraabinDatabase_GetAllStatusFlags>
 800a15c:	f7ff fa47 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU16(mcuFobject->SessionId);
 800a160:	f8b4 004e 	ldrh.w	r0, [r4, #78]	@ 0x4e
 800a164:	f7ff fa3a 	bl	80095dc <fAddToBufferU16>
	fAddToBufferU32(0); //Cpu usage
 800a168:	2000      	movs	r0, #0
 800a16a:	f7ff fa40 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32((uint32_t)(fChrono_GetContinuousTickMs() / 1000U)); //Up time
 800a16e:	f7fc fb4b 	bl	8006808 <fChrono_GetContinuousTickMs>
 800a172:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a176:	2300      	movs	r3, #0
 800a178:	f7f6 ffe8 	bl	800114c <__aeabi_uldivmod>
 800a17c:	f7ff fa37 	bl	80095ee <fAddToBufferU32>
}
 800a180:	bd10      	pop	{r4, pc}
	...

0800a184 <fMcuWhoAmIGeneratePayload>:
static void fMcuWhoAmIGeneratePayload(uint32_t fobjectPtr, void *param) {
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sFaraabinFobjectMcu* mcuFobject = fFaraabinFobjectMcu_GetFobject();
 800a188:	f7fd ff44 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 800a18c:	4681      	mov	r9, r0
  fAddToBufferU8((uint8_t)isBigEndian);
 800a18e:	2000      	movs	r0, #0
 800a190:	f7ff f98c 	bl	80094ac <fAddToBufferU8>
	fAddToBufferU8(0/*Version Major*/);
 800a194:	2000      	movs	r0, #0
 800a196:	f7ff f989 	bl	80094ac <fAddToBufferU8>
	fAddToBufferU8(0/*Version Minor*/);
 800a19a:	2000      	movs	r0, #0
 800a19c:	f7ff f986 	bl	80094ac <fAddToBufferU8>
  fAddToBufferU32(fFaraabinDatabase_GetAllFeatureFlags());
 800a1a0:	f7fc fd82 	bl	8006ca8 <fFaraabinDatabase_GetAllFeatureFlags>
 800a1a4:	f7ff fa23 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(fFaraabinDatabase_GetNumberOfAddedDicts());
 800a1a8:	f7fc fd06 	bl	8006bb8 <fFaraabinDatabase_GetNumberOfAddedDicts>
 800a1ac:	f7ff fa1f 	bl	80095ee <fAddToBufferU32>
  uint16_t dicts = fFaraabinDatabase_GetNumberOfAddedDicts();
 800a1b0:	f7fc fd02 	bl	8006bb8 <fFaraabinDatabase_GetNumberOfAddedDicts>
  _serializer.DictIterator.CurrentDictIndex = dictIndex;
 800a1b4:	4b28      	ldr	r3, [pc, #160]	@ (800a258 <fMcuWhoAmIGeneratePayload+0xd4>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	809a      	strh	r2, [r3, #4]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 800a1ba:	805a      	strh	r2, [r3, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 800a1bc:	801a      	strh	r2, [r3, #0]
  for(uint16_t i = 0; i < dicts; i++) {
 800a1be:	b180      	cbz	r0, 800a1e2 <fMcuWhoAmIGeneratePayload+0x5e>
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	4614      	mov	r4, r2
  _serializer.DictIterator._isInCountingMode = true;
 800a1c4:	4698      	mov	r8, r3
 800a1c6:	f04f 0701 	mov.w	r7, #1
    fGenerateDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), 0);
 800a1ca:	4616      	mov	r6, r2
  _serializer.DictIterator._isInCountingMode = true;
 800a1cc:	f888 7006 	strb.w	r7, [r8, #6]
    fGenerateDict(fFaraabinDatabase_GetFobjectPointerFromDict(i), 0);
 800a1d0:	b2a0      	uxth	r0, r4
 800a1d2:	f7fc fd5d 	bl	8006c90 <fFaraabinDatabase_GetFobjectPointerFromDict>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	f7ff ff14 	bl	800a004 <fGenerateDict>
  for(uint16_t i = 0; i < dicts; i++) {
 800a1dc:	3401      	adds	r4, #1
 800a1de:	42ac      	cmp	r4, r5
 800a1e0:	d1f4      	bne.n	800a1cc <fMcuWhoAmIGeneratePayload+0x48>
  _serializer.DictIterator._isInCountingMode = false;
 800a1e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a258 <fMcuWhoAmIGeneratePayload+0xd4>)
 800a1e4:	2500      	movs	r5, #0
 800a1e6:	719d      	strb	r5, [r3, #6]
  fAddToBufferU32(fCountAllDictsFrames());
 800a1e8:	8818      	ldrh	r0, [r3, #0]
 800a1ea:	f7ff fa00 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(fFaraabin_GetRxBufferSize());
 800a1ee:	f7f7 f9a9 	bl	8001544 <fFaraabin_GetRxBufferSize>
 800a1f2:	f7ff f9fc 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(fChrono_GetTickToNsCoef());
 800a1f6:	f7fc fa5d 	bl	80066b4 <fChrono_GetTickToNsCoef>
 800a1fa:	f7ff f9f8 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU32(fChrono_GetTickTopValue());
 800a1fe:	f7fc fa45 	bl	800668c <fChrono_GetTickTopValue>
 800a202:	f7ff f9f4 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(mcuFobject->BootTimeMs);
 800a206:	f8d9 0054 	ldr.w	r0, [r9, #84]	@ 0x54
 800a20a:	f7ff f9f0 	bl	80095ee <fAddToBufferU32>
  fAddToBufferU16(strlen(fFaraabin_GetFirmwareName()));
 800a20e:	f7f7 f985 	bl	800151c <fFaraabin_GetFirmwareName>
 800a212:	f7f5 ff9d 	bl	8000150 <strlen>
 800a216:	b280      	uxth	r0, r0
 800a218:	f7ff f9e0 	bl	80095dc <fAddToBufferU16>
  fAddToBufferString(fFaraabin_GetFirmwareName());
 800a21c:	f7f7 f97e 	bl	800151c <fFaraabin_GetFirmwareName>
 800a220:	4604      	mov	r4, r0
  fAddToBuffer((uint8_t*)string, strlen(string));
 800a222:	f7f5 ff95 	bl	8000150 <strlen>
 800a226:	4601      	mov	r1, r0
 800a228:	4620      	mov	r0, r4
 800a22a:	f7ff f9f1 	bl	8009610 <fAddToBuffer>
  fAddToBufferU16(strlen(fFaraabin_GetFirmwareInfo()));
 800a22e:	f7f7 f979 	bl	8001524 <fFaraabin_GetFirmwareInfo>
 800a232:	f7f5 ff8d 	bl	8000150 <strlen>
 800a236:	b280      	uxth	r0, r0
 800a238:	f7ff f9d0 	bl	80095dc <fAddToBufferU16>
  fAddToBufferString(fFaraabin_GetFirmwareInfo());
 800a23c:	f7f7 f972 	bl	8001524 <fFaraabin_GetFirmwareInfo>
 800a240:	4604      	mov	r4, r0
  fAddToBuffer((uint8_t*)string, strlen(string));
 800a242:	f7f5 ff85 	bl	8000150 <strlen>
 800a246:	4601      	mov	r1, r0
 800a248:	4620      	mov	r0, r4
 800a24a:	f7ff f9e1 	bl	8009610 <fAddToBuffer>
  fAddToBufferU8('\0');
 800a24e:	4628      	mov	r0, r5
 800a250:	f7ff f92c 	bl	80094ac <fAddToBufferU8>
}
 800a254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a258:	20002bf0 	.word	0x20002bf0

0800a25c <fDictGeneratePayloadMcu>:
static void fDictGeneratePayloadMcu(uint32_t fobjectPtr, void *param) {
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	4604      	mov	r4, r0
  ADD_CONTROL_BYTE_();
 800a262:	7800      	ldrb	r0, [r0, #0]
 800a264:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800a268:	7863      	ldrb	r3, [r4, #1]
 800a26a:	b10b      	cbz	r3, 800a270 <fDictGeneratePayloadMcu+0x14>
 800a26c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800a270:	f7ff f91c 	bl	80094ac <fAddToBufferU8>
  if(!me->_init) {
 800a274:	7863      	ldrb	r3, [r4, #1]
 800a276:	b39b      	cbz	r3, 800a2e0 <fDictGeneratePayloadMcu+0x84>
  fAddToBufferU8(me->Enable);
 800a278:	78a0      	ldrb	r0, [r4, #2]
 800a27a:	f7ff f917 	bl	80094ac <fAddToBufferU8>
  uint16_t runningFunctions = fFaraabinFunctionEngine_GetQtyOfRunningFunctions();
 800a27e:	f7fe f829 	bl	80082d4 <fFaraabinFunctionEngine_GetQtyOfRunningFunctions>
 800a282:	4606      	mov	r6, r0
  fAddToBufferU16(runningFunctions);
 800a284:	f7ff f9aa 	bl	80095dc <fAddToBufferU16>
  for(uint16_t i = 0; i < runningFunctions; i++) {
 800a288:	b18e      	cbz	r6, 800a2ae <fDictGeneratePayloadMcu+0x52>
 800a28a:	2400      	movs	r4, #0
    uint32_t ptr = 0U;
 800a28c:	4625      	mov	r5, r4
 800a28e:	9500      	str	r5, [sp, #0]
    uint32_t objectPtr = 0U;
 800a290:	9501      	str	r5, [sp, #4]
    if(fFaraabinFunctionEngine_GetPtrsOfRunningFunction(i, &ptr, &objectPtr) != 0) {
 800a292:	aa01      	add	r2, sp, #4
 800a294:	4669      	mov	r1, sp
 800a296:	b2a0      	uxth	r0, r4
 800a298:	f7fe f826 	bl	80082e8 <fFaraabinFunctionEngine_GetPtrsOfRunningFunction>
    fAddToBufferU32(ptr);
 800a29c:	9800      	ldr	r0, [sp, #0]
 800a29e:	f7ff f9a6 	bl	80095ee <fAddToBufferU32>
    fAddToBufferU32(objectPtr);
 800a2a2:	9801      	ldr	r0, [sp, #4]
 800a2a4:	f7ff f9a3 	bl	80095ee <fAddToBufferU32>
  for(uint16_t i = 0; i < runningFunctions; i++) {
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	42b4      	cmp	r4, r6
 800a2ac:	d1ef      	bne.n	800a28e <fDictGeneratePayloadMcu+0x32>
  fAddToBufferU32(sizeof(sFaraabinFobjectMcu));
 800a2ae:	205c      	movs	r0, #92	@ 0x5c
 800a2b0:	f7ff f99d 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(fFaraabinFunctionEngine_GetRamUsage());
 800a2b4:	f7fe f848 	bl	8008348 <fFaraabinFunctionEngine_GetRamUsage>
 800a2b8:	f7ff f999 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(fFaraabinLinkBuffer_GetRamUsage());
 800a2bc:	f7fe f848 	bl	8008350 <fFaraabinLinkBuffer_GetRamUsage>
 800a2c0:	f7ff f995 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(fFaraabinLinkHandler_GetRamUsage());
 800a2c4:	f7ff f8ef 	bl	80094a6 <fFaraabinLinkHandler_GetRamUsage>
 800a2c8:	f7ff f991 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(fFaraabinLinkSerializer_GetRamUsage());
 800a2cc:	f640 00a8 	movw	r0, #2216	@ 0x8a8
 800a2d0:	f7ff f98d 	bl	80095ee <fAddToBufferU32>
	fAddToBufferU32(fFaraabinDatabase_GetRamUsage());
 800a2d4:	f7fc fcf4 	bl	8006cc0 <fFaraabinDatabase_GetRamUsage>
 800a2d8:	f7ff f989 	bl	80095ee <fAddToBufferU32>
}
 800a2dc:	b002      	add	sp, #8
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
    fAddToBuffer((uint8_t*)me->Name, strlen(me->Name));
 800a2e0:	6865      	ldr	r5, [r4, #4]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f7f5 ff34 	bl	8000150 <strlen>
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f7ff f990 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 800a2f0:	203a      	movs	r0, #58	@ 0x3a
 800a2f2:	f7ff f8db 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Path, strlen(me->Path));
 800a2f6:	68a5      	ldr	r5, [r4, #8]
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7f5 ff29 	bl	8000150 <strlen>
 800a2fe:	4601      	mov	r1, r0
 800a300:	4628      	mov	r0, r5
 800a302:	f7ff f985 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8((uint8_t)':');
 800a306:	203a      	movs	r0, #58	@ 0x3a
 800a308:	f7ff f8d0 	bl	80094ac <fAddToBufferU8>
    fAddToBuffer((uint8_t*)me->Filename, strlen(me->Filename));
 800a30c:	68e4      	ldr	r4, [r4, #12]
 800a30e:	4620      	mov	r0, r4
 800a310:	f7f5 ff1e 	bl	8000150 <strlen>
 800a314:	4601      	mov	r1, r0
 800a316:	4620      	mov	r0, r4
 800a318:	f7ff f97a 	bl	8009610 <fAddToBuffer>
    fAddToBufferU8('\0');
 800a31c:	2000      	movs	r0, #0
 800a31e:	f7ff f8c5 	bl	80094ac <fAddToBufferU8>
    return;
 800a322:	e7db      	b.n	800a2dc <fDictGeneratePayloadMcu+0x80>

0800a324 <fFaraabinLinkSerializer_Init>:
uint8_t fFaraabinLinkSerializer_Init(uint8_t *txBuffer, uint32_t txBufferSize) {
 800a324:	b538      	push	{r3, r4, r5, lr}
  if(fFaraabinLinkBuffer_Init(txBuffer, txBufferSize) != 0U) {
 800a326:	f7fe f82d 	bl	8008384 <fFaraabinLinkBuffer_Init>
 800a32a:	b9e0      	cbnz	r0, 800a366 <fFaraabinLinkSerializer_Init+0x42>
 800a32c:	4605      	mov	r5, r0
 800a32e:	480f      	ldr	r0, [pc, #60]	@ (800a36c <fFaraabinLinkSerializer_Init+0x48>)
 800a330:	f100 02d1 	add.w	r2, r0, #209	@ 0xd1
 800a334:	f600 00a1 	addw	r0, r0, #2209	@ 0x8a1
      _serializer.Serializer.TextEventBuffer[i][j] = 0x00U;
 800a338:	2100      	movs	r1, #0
    for(uint16_t j = 0; j < TEXT_EVENT_BUFFER_SIZE; j++) {
 800a33a:	f1a2 03c8 	sub.w	r3, r2, #200	@ 0xc8
      _serializer.Serializer.TextEventBuffer[i][j] = 0x00U;
 800a33e:	f803 1f01 	strb.w	r1, [r3, #1]!
    for(uint16_t j = 0; j < TEXT_EVENT_BUFFER_SIZE; j++) {
 800a342:	4293      	cmp	r3, r2
 800a344:	d1fb      	bne.n	800a33e <fFaraabinLinkSerializer_Init+0x1a>
  for(uint16_t i = 0; i < TEXT_EVENT_MAX_REENTRANCE; i++) {
 800a346:	32c8      	adds	r2, #200	@ 0xc8
 800a348:	4282      	cmp	r2, r0
 800a34a:	d1f6      	bne.n	800a33a <fFaraabinLinkSerializer_Init+0x16>
  _serializer.Serializer.DepthCounter = 0U;
 800a34c:	4c07      	ldr	r4, [pc, #28]	@ (800a36c <fFaraabinLinkSerializer_Init+0x48>)
 800a34e:	2300      	movs	r3, #0
 800a350:	8123      	strh	r3, [r4, #8]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 800a352:	8063      	strh	r3, [r4, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 800a354:	8023      	strh	r3, [r4, #0]
  _serializer.DictIterator.CurrentDictIndex = 0U;
 800a356:	80a3      	strh	r3, [r4, #4]
  _serializer.DictIterator._isInCountingMode = false;
 800a358:	71a3      	strb	r3, [r4, #6]
  _serializer.McuHandle = fFaraabinFobjectMcu_GetFobject();
 800a35a:	f7fd fe5b 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
 800a35e:	f8c4 08a4 	str.w	r0, [r4, #2212]	@ 0x8a4
}
 800a362:	4628      	mov	r0, r5
 800a364:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 800a366:	2501      	movs	r5, #1
 800a368:	e7fb      	b.n	800a362 <fFaraabinLinkSerializer_Init+0x3e>
 800a36a:	bf00      	nop
 800a36c:	20002bf0 	.word	0x20002bf0

0800a370 <fFaraabinLinkSerializer_SerializeEvent>:
  bool isEnd) {
 800a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a374:	b08c      	sub	sp, #48	@ 0x30
 800a376:	4680      	mov	r8, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	4616      	mov	r6, r2
 800a37c:	461c      	mov	r4, r3
 800a37e:	f89d 5060 	ldrb.w	r5, [sp, #96]	@ 0x60
	if((!isResponse) && !fFaraabin_IsAllowEvent()) {
 800a382:	b11d      	cbz	r5, 800a38c <fFaraabinLinkSerializer_SerializeEvent+0x1c>
  if(fobjectEnableState == false) {
 800a384:	b93c      	cbnz	r4, 800a396 <fFaraabinLinkSerializer_SerializeEvent+0x26>
}
 800a386:	b00c      	add	sp, #48	@ 0x30
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((!isResponse) && !fFaraabin_IsAllowEvent()) {
 800a38c:	f7fc fbc6 	bl	8006b1c <fFaraabin_IsAllowEvent>
 800a390:	2800      	cmp	r0, #0
 800a392:	d1f7      	bne.n	800a384 <fFaraabinLinkSerializer_SerializeEvent+0x14>
 800a394:	e7f7      	b.n	800a386 <fFaraabinLinkSerializer_SerializeEvent+0x16>
  eventParam.Severity = eventSeverity;
 800a396:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800a39a:	f88d 301c 	strb.w	r3, [sp, #28]
  eventParam.EventId = eventId;
 800a39e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a3a2:	f8ad 301e 	strh.w	r3, [sp, #30]
  eventParam.pParam = param;
 800a3a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a3a8:	9308      	str	r3, [sp, #32]
  eventParam.ParamSize = paramSize;
 800a3aa:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 800a3ae:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  eventParam.fpGeneratePayload = generatePayloadFunc;
 800a3b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3b4:	930a      	str	r3, [sp, #40]	@ 0x28
  eventParam.pPayloadParam = payloadParam;
 800a3b6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a3b8:	930b      	str	r3, [sp, #44]	@ 0x2c
  fSerializeFrame(
 800a3ba:	ab07      	add	r3, sp, #28
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	4b09      	ldr	r3, [pc, #36]	@ (800a3e4 <fFaraabinLinkSerializer_SerializeEvent+0x74>)
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800a3c6:	9303      	str	r3, [sp, #12]
 800a3c8:	2304      	movs	r3, #4
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	9701      	str	r7, [sp, #4]
 800a3ce:	f8cd 8000 	str.w	r8, [sp]
 800a3d2:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 800a3d6:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f7ff f9e3 	bl	80097a8 <fSerializeFrame>
 800a3e2:	e7d0      	b.n	800a386 <fFaraabinLinkSerializer_SerializeEvent+0x16>
 800a3e4:	08009781 	.word	0x08009781

0800a3e8 <fFaraabinLinkSerializer_SerializeEventPrintf>:
  const char *format, ...) {
 800a3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ec:	b08c      	sub	sp, #48	@ 0x30
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	460e      	mov	r6, r1
 800a3f2:	4617      	mov	r7, r2
 800a3f4:	461c      	mov	r4, r3
	if(!fFaraabin_IsAllowEvent()) {
 800a3f6:	f7fc fb91 	bl	8006b1c <fFaraabin_IsAllowEvent>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d034      	beq.n	800a468 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
  if(fobjectEnableState == false) {
 800a3fe:	2c00      	cmp	r4, #0
 800a400:	d032      	beq.n	800a468 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
  if(format == NULL) {
 800a402:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a404:	2b00      	cmp	r3, #0
 800a406:	d02f      	beq.n	800a468 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
  if(_serializer.Serializer.DepthCounter >= (TEXT_EVENT_MAX_REENTRANCE + 1U)) {
 800a408:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <fFaraabinLinkSerializer_SerializeEventPrintf+0x90>)
 800a40a:	891b      	ldrh	r3, [r3, #8]
 800a40c:	2b0a      	cmp	r3, #10
 800a40e:	d82e      	bhi.n	800a46e <fFaraabinLinkSerializer_SerializeEventPrintf+0x86>
  _serializer.Serializer.DepthCounter++;
 800a410:	3301      	adds	r3, #1
 800a412:	b29c      	uxth	r4, r3
 800a414:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 800a478 <fFaraabinLinkSerializer_SerializeEventPrintf+0x90>
 800a418:	f8a8 4008 	strh.w	r4, [r8, #8]
  va_start(args, format);
 800a41c:	ab15      	add	r3, sp, #84	@ 0x54
 800a41e:	930b      	str	r3, [sp, #44]	@ 0x2c
  int stringLen = vsnprintf((char*)_serializer.Serializer.TextEventBuffer[reentranceCounter - 1U], TEXT_EVENT_BUFFER_SIZE, format, args);
 800a420:	3c01      	subs	r4, #1
 800a422:	21c8      	movs	r1, #200	@ 0xc8
 800a424:	fb01 8404 	mla	r4, r1, r4, r8
 800a428:	340a      	adds	r4, #10
 800a42a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 faad 	bl	800a98c <vsniprintf>
  fFaraabinLinkSerializer_SerializeEvent(fobjectPtr,
 800a432:	2301      	movs	r3, #1
 800a434:	9309      	str	r3, [sp, #36]	@ 0x24
 800a436:	2200      	movs	r2, #0
 800a438:	9208      	str	r2, [sp, #32]
 800a43a:	9207      	str	r2, [sp, #28]
 800a43c:	9206      	str	r2, [sp, #24]
 800a43e:	9205      	str	r2, [sp, #20]
 800a440:	b280      	uxth	r0, r0
 800a442:	9004      	str	r0, [sp, #16]
 800a444:	9403      	str	r4, [sp, #12]
 800a446:	9202      	str	r2, [sp, #8]
 800a448:	f89d 204c 	ldrb.w	r2, [sp, #76]	@ 0x4c
 800a44c:	9201      	str	r2, [sp, #4]
 800a44e:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 800a452:	9200      	str	r2, [sp, #0]
 800a454:	463a      	mov	r2, r7
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	f7ff ff89 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
  _serializer.Serializer.DepthCounter--;
 800a45e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a462:	3b01      	subs	r3, #1
 800a464:	f8a8 3008 	strh.w	r3, [r8, #8]
}
 800a468:	b00c      	add	sp, #48	@ 0x30
 800a46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fFaraabinFobjectMcu_SendEventSystem(eMCU_EVENT_ERROR_MAX_PRINTF_REENTRANT);
 800a46e:	200b      	movs	r0, #11
 800a470:	f7fd fd64 	bl	8007f3c <fFaraabinFobjectMcu_SendEventSystem>
    return;
 800a474:	e7f8      	b.n	800a468 <fFaraabinLinkSerializer_SerializeEventPrintf+0x80>
 800a476:	bf00      	nop
 800a478:	20002bf0 	.word	0x20002bf0

0800a47c <fFaraabinLinkSerializer_SerializeEventEnumId>:
  uint16_t enumId) {
 800a47c:	b510      	push	{r4, lr}
 800a47e:	b08a      	sub	sp, #40	@ 0x28
  fFaraabinLinkSerializer_SerializeEvent(fobjectPtr,
 800a480:	2401      	movs	r4, #1
 800a482:	9409      	str	r4, [sp, #36]	@ 0x24
 800a484:	2400      	movs	r4, #0
 800a486:	9408      	str	r4, [sp, #32]
 800a488:	9407      	str	r4, [sp, #28]
 800a48a:	9406      	str	r4, [sp, #24]
 800a48c:	9405      	str	r4, [sp, #20]
 800a48e:	2404      	movs	r4, #4
 800a490:	9404      	str	r4, [sp, #16]
 800a492:	ac0d      	add	r4, sp, #52	@ 0x34
 800a494:	9403      	str	r4, [sp, #12]
 800a496:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 800a49a:	9402      	str	r4, [sp, #8]
 800a49c:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 800a4a0:	9401      	str	r4, [sp, #4]
 800a4a2:	2405      	movs	r4, #5
 800a4a4:	9400      	str	r4, [sp, #0]
 800a4a6:	f7ff ff63 	bl	800a370 <fFaraabinLinkSerializer_SerializeEvent>
}
 800a4aa:	b00a      	add	sp, #40	@ 0x28
 800a4ac:	bd10      	pop	{r4, pc}
	...

0800a4b0 <fFaraabinLinkSerializer_SerializeDict>:
  uint8_t reqSeq) {
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	4615      	mov	r5, r2
  _serializer.DictIterator.CurrentDictIndex = dictIndex;
 800a4b6:	4c08      	ldr	r4, [pc, #32]	@ (800a4d8 <fFaraabinLinkSerializer_SerializeDict+0x28>)
 800a4b8:	80a1      	strh	r1, [r4, #4]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 800a4ba:	2700      	movs	r7, #0
 800a4bc:	8067      	strh	r7, [r4, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 800a4be:	8027      	strh	r7, [r4, #0]
  _serializer.DictIterator._isInCountingMode = true;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	71a3      	strb	r3, [r4, #6]
  fGenerateDict(fobjectPtr, reqSeq);
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	f7ff fd9d 	bl	800a004 <fGenerateDict>
  _serializer.DictIterator._isInCountingMode = false;
 800a4ca:	71a7      	strb	r7, [r4, #6]
  fGenerateDict(fobjectPtr, reqSeq);
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7ff fd98 	bl	800a004 <fGenerateDict>
}
 800a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20002bf0 	.word	0x20002bf0

0800a4dc <fFaraabinLinkSerializer_FlushBuffer>:
  fFaraabinLinkBuffer_FlushByPointer_(ptrToBuffer, &allowableSize);
 800a4dc:	4b18      	ldr	r3, [pc, #96]	@ (800a540 <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800a4de:	7d1b      	ldrb	r3, [r3, #20]
 800a4e0:	b923      	cbnz	r3, 800a4ec <fFaraabinLinkSerializer_FlushBuffer+0x10>
 800a4e2:	4b17      	ldr	r3, [pc, #92]	@ (800a540 <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d010      	beq.n	800a50e <fFaraabinLinkSerializer_FlushBuffer+0x32>
 800a4ec:	4b14      	ldr	r3, [pc, #80]	@ (800a540 <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	68d9      	ldr	r1, [r3, #12]
 800a4f2:	440a      	add	r2, r1
 800a4f4:	6002      	str	r2, [r0, #0]
 800a4f6:	7d1b      	ldrb	r3, [r3, #20]
 800a4f8:	b96b      	cbnz	r3, 800a516 <fFaraabinLinkSerializer_FlushBuffer+0x3a>
 800a4fa:	4b11      	ldr	r3, [pc, #68]	@ (800a540 <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800a4fc:	6898      	ldr	r0, [r3, #8]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	4298      	cmp	r0, r3
 800a502:	bf9c      	itt	ls
 800a504:	4a0e      	ldrls	r2, [pc, #56]	@ (800a540 <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800a506:	6850      	ldrls	r0, [r2, #4]
 800a508:	1ac0      	subs	r0, r0, r3
 800a50a:	b280      	uxth	r0, r0
 800a50c:	e008      	b.n	800a520 <fFaraabinLinkSerializer_FlushBuffer+0x44>
 800a50e:	2300      	movs	r3, #0
 800a510:	6003      	str	r3, [r0, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	4770      	bx	lr
 800a516:	4b0a      	ldr	r3, [pc, #40]	@ (800a540 <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800a518:	6858      	ldr	r0, [r3, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	1ac0      	subs	r0, r0, r3
 800a51e:	b280      	uxth	r0, r0
 800a520:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <fFaraabinLinkSerializer_FlushBuffer+0x64>)
 800a522:	68da      	ldr	r2, [r3, #12]
 800a524:	4402      	add	r2, r0
 800a526:	6859      	ldr	r1, [r3, #4]
 800a528:	fbb2 fcf1 	udiv	ip, r2, r1
 800a52c:	fb01 221c 	mls	r2, r1, ip, r2
 800a530:	60da      	str	r2, [r3, #12]
 800a532:	691a      	ldr	r2, [r3, #16]
 800a534:	1a12      	subs	r2, r2, r0
 800a536:	611a      	str	r2, [r3, #16]
 800a538:	2200      	movs	r2, #0
 800a53a:	751a      	strb	r2, [r3, #20]
}
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20002b98 	.word	0x20002b98

0800a544 <fFaraabinLinkSerializer_CommonSendEnable>:
void fFaraabinLinkSerializer_CommonSendEnable(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, bool isResponse) {
 800a544:	b530      	push	{r4, r5, lr}
 800a546:	b087      	sub	sp, #28
 800a548:	4605      	mov	r5, r0
 800a54a:	4618      	mov	r0, r3
  fSerializeFrame(
 800a54c:	2400      	movs	r4, #0
 800a54e:	9405      	str	r4, [sp, #20]
 800a550:	4b05      	ldr	r3, [pc, #20]	@ (800a568 <fFaraabinLinkSerializer_CommonSendEnable+0x24>)
 800a552:	9304      	str	r3, [sp, #16]
 800a554:	9403      	str	r4, [sp, #12]
 800a556:	2301      	movs	r3, #1
 800a558:	9302      	str	r3, [sp, #8]
 800a55a:	9401      	str	r4, [sp, #4]
 800a55c:	9500      	str	r5, [sp, #0]
 800a55e:	f7ff f923 	bl	80097a8 <fSerializeFrame>
}
 800a562:	b007      	add	sp, #28
 800a564:	bd30      	pop	{r4, r5, pc}
 800a566:	bf00      	nop
 800a568:	0800962b 	.word	0x0800962b

0800a56c <fFaraabinLinkSerializer_DataBusSendSetting>:
void fFaraabinLinkSerializer_DataBusSendSetting(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq) {
 800a56c:	b510      	push	{r4, lr}
 800a56e:	b086      	sub	sp, #24
  fSerializeFrame(
 800a570:	2400      	movs	r4, #0
 800a572:	9405      	str	r4, [sp, #20]
 800a574:	4b05      	ldr	r3, [pc, #20]	@ (800a58c <fFaraabinLinkSerializer_DataBusSendSetting+0x20>)
 800a576:	9304      	str	r3, [sp, #16]
 800a578:	2301      	movs	r3, #1
 800a57a:	9303      	str	r3, [sp, #12]
 800a57c:	9302      	str	r3, [sp, #8]
 800a57e:	9401      	str	r4, [sp, #4]
 800a580:	9000      	str	r0, [sp, #0]
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff f910 	bl	80097a8 <fSerializeFrame>
}
 800a588:	b006      	add	sp, #24
 800a58a:	bd10      	pop	{r4, pc}
 800a58c:	08009dfb 	.word	0x08009dfb

0800a590 <fFaraabinLinkSerializer_DataBusSendCaptureValue>:
void fFaraabinLinkSerializer_DataBusSendCaptureValue(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, bool isEnd, void* captureValue) {
 800a590:	b530      	push	{r4, r5, lr}
 800a592:	b087      	sub	sp, #28
  fSerializeFrame(
 800a594:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a596:	9405      	str	r4, [sp, #20]
 800a598:	4c06      	ldr	r4, [pc, #24]	@ (800a5b4 <fFaraabinLinkSerializer_DataBusSendCaptureValue+0x24>)
 800a59a:	9404      	str	r4, [sp, #16]
 800a59c:	2400      	movs	r4, #0
 800a59e:	9403      	str	r4, [sp, #12]
 800a5a0:	2502      	movs	r5, #2
 800a5a2:	9502      	str	r5, [sp, #8]
 800a5a4:	9401      	str	r4, [sp, #4]
 800a5a6:	9000      	str	r0, [sp, #0]
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	f7ff f8fd 	bl	80097a8 <fSerializeFrame>
}
 800a5ae:	b007      	add	sp, #28
 800a5b0:	bd30      	pop	{r4, r5, pc}
 800a5b2:	bf00      	nop
 800a5b4:	08009681 	.word	0x08009681

0800a5b8 <fFaraabinLinkSerializer_DataBusSendValue>:
void fFaraabinLinkSerializer_DataBusSendValue(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, bool isResponse) {
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	4605      	mov	r5, r0
 800a5be:	4618      	mov	r0, r3
  fSerializeFrame(
 800a5c0:	2400      	movs	r4, #0
 800a5c2:	9405      	str	r4, [sp, #20]
 800a5c4:	4b05      	ldr	r3, [pc, #20]	@ (800a5dc <fFaraabinLinkSerializer_DataBusSendValue+0x24>)
 800a5c6:	9304      	str	r3, [sp, #16]
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	2602      	movs	r6, #2
 800a5ce:	9602      	str	r6, [sp, #8]
 800a5d0:	9401      	str	r4, [sp, #4]
 800a5d2:	9500      	str	r5, [sp, #0]
 800a5d4:	f7ff f8e8 	bl	80097a8 <fSerializeFrame>
}
 800a5d8:	b006      	add	sp, #24
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	080096d5 	.word	0x080096d5

0800a5e0 <fFaraabinLinkSerializer_VarSendValue>:
void fFaraabinLinkSerializer_VarSendValue(uint32_t fobjectPtr, uint32_t dataPtr, uint32_t size, uint8_t *fobjectSeq, uint8_t reqSeq, bool isResponse) {
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	b08a      	sub	sp, #40	@ 0x28
 800a5e4:	461c      	mov	r4, r3
  param.VarPtr = fobjectPtr;
 800a5e6:	9007      	str	r0, [sp, #28]
  param.VarSize = size;
 800a5e8:	9208      	str	r2, [sp, #32]
  param.DataPtr = dataPtr;
 800a5ea:	9109      	str	r1, [sp, #36]	@ 0x24
    (uint32_t)fFaraabinFobjectMcu_GetFobject(),
 800a5ec:	f7fd fd12 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
  fSerializeFrame(
 800a5f0:	ab07      	add	r3, sp, #28
 800a5f2:	9305      	str	r3, [sp, #20]
 800a5f4:	4b08      	ldr	r3, [pc, #32]	@ (800a618 <fFaraabinLinkSerializer_VarSendValue+0x38>)
 800a5f6:	9304      	str	r3, [sp, #16]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	9202      	str	r2, [sp, #8]
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	9000      	str	r0, [sp, #0]
 800a604:	2301      	movs	r3, #1
 800a606:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 800a60a:	4621      	mov	r1, r4
 800a60c:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800a610:	f7ff f8ca 	bl	80097a8 <fSerializeFrame>
}
 800a614:	b00a      	add	sp, #40	@ 0x28
 800a616:	bd10      	pop	{r4, pc}
 800a618:	0800973f 	.word	0x0800973f

0800a61c <fFaraabinLinkSerializer_McuSendPing>:
void fFaraabinLinkSerializer_McuSendPing(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq, void* param) {
 800a61c:	b500      	push	{lr}
 800a61e:	b087      	sub	sp, #28
  fSerializeFrame(
 800a620:	9305      	str	r3, [sp, #20]
 800a622:	4b07      	ldr	r3, [pc, #28]	@ (800a640 <fFaraabinLinkSerializer_McuSendPing+0x24>)
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	2302      	movs	r3, #2
 800a628:	9303      	str	r3, [sp, #12]
 800a62a:	9302      	str	r3, [sp, #8]
 800a62c:	2300      	movs	r3, #0
 800a62e:	9301      	str	r3, [sp, #4]
 800a630:	9000      	str	r0, [sp, #0]
 800a632:	2301      	movs	r3, #1
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff f8b7 	bl	80097a8 <fSerializeFrame>
}
 800a63a:	b007      	add	sp, #28
 800a63c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a640:	08009735 	.word	0x08009735

0800a644 <fFaraabinLinkSerializer_McuSendLive>:
void fFaraabinLinkSerializer_McuSendLive(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq) {
 800a644:	b530      	push	{r4, r5, lr}
 800a646:	b087      	sub	sp, #28
  fSerializeFrame(
 800a648:	2400      	movs	r4, #0
 800a64a:	9405      	str	r4, [sp, #20]
 800a64c:	4b06      	ldr	r3, [pc, #24]	@ (800a668 <fFaraabinLinkSerializer_McuSendLive+0x24>)
 800a64e:	9304      	str	r3, [sp, #16]
 800a650:	2301      	movs	r3, #1
 800a652:	9303      	str	r3, [sp, #12]
 800a654:	2502      	movs	r5, #2
 800a656:	9502      	str	r5, [sp, #8]
 800a658:	9401      	str	r4, [sp, #4]
 800a65a:	9000      	str	r0, [sp, #0]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff f8a3 	bl	80097a8 <fSerializeFrame>
}
 800a662:	b007      	add	sp, #28
 800a664:	bd30      	pop	{r4, r5, pc}
 800a666:	bf00      	nop
 800a668:	0800a151 	.word	0x0800a151

0800a66c <fFaraabinLinkSerializer_McuSendWhoAmI>:
void fFaraabinLinkSerializer_McuSendWhoAmI(uint32_t fobjectPtr, uint8_t *fobjectSeq, uint8_t reqSeq) {
 800a66c:	b510      	push	{r4, lr}
 800a66e:	b086      	sub	sp, #24
  fSerializeFrame(
 800a670:	2300      	movs	r3, #0
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	4c06      	ldr	r4, [pc, #24]	@ (800a690 <fFaraabinLinkSerializer_McuSendWhoAmI+0x24>)
 800a676:	9404      	str	r4, [sp, #16]
 800a678:	2403      	movs	r4, #3
 800a67a:	9403      	str	r4, [sp, #12]
 800a67c:	2402      	movs	r4, #2
 800a67e:	9402      	str	r4, [sp, #8]
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	9000      	str	r0, [sp, #0]
 800a684:	2301      	movs	r3, #1
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff f88e 	bl	80097a8 <fSerializeFrame>
}
 800a68c:	b006      	add	sp, #24
 800a68e:	bd10      	pop	{r4, pc}
 800a690:	0800a185 	.word	0x0800a185

0800a694 <fFaraabinLinkSerializer_VarTypeEnumMemberDict>:
  uint8_t reqSeq) {
 800a694:	b510      	push	{r4, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	4614      	mov	r4, r2
 800a69a:	461a      	mov	r2, r3
  payLoad.Name = enumMemberName;
 800a69c:	9402      	str	r4, [sp, #8]
  payLoad.Id = enumMemberId;
 800a69e:	f8ad 100c 	strh.w	r1, [sp, #12]
  fSerializeDict(enumPtr, &me->Seq, reqSeq, fDictGeneratePayloadVarTypeEnumMember, &payLoad);
 800a6a2:	ab02      	add	r3, sp, #8
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	4b03      	ldr	r3, [pc, #12]	@ (800a6b4 <fFaraabinLinkSerializer_VarTypeEnumMemberDict+0x20>)
 800a6a8:	f100 0110 	add.w	r1, r0, #16
 800a6ac:	f7ff fc80 	bl	8009fb0 <fSerializeDict>
}
 800a6b0:	b004      	add	sp, #16
 800a6b2:	bd10      	pop	{r4, pc}
 800a6b4:	08009cb9 	.word	0x08009cb9

0800a6b8 <fFaraabinLinkSerializer_VarDict>:
  uint8_t reqSeq) {
 800a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6bc:	b08c      	sub	sp, #48	@ 0x30
 800a6be:	4607      	mov	r7, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	4616      	mov	r6, r2
 800a6c4:	461d      	mov	r5, r3
 800a6c6:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
  sFaraabinFobjectMcu *me = (sFaraabinFobjectMcu*)fFaraabinFobjectMcu_GetFobject();
 800a6ca:	f7fd fca3 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
  payLoad.VarPtr = varPtr;
 800a6ce:	9406      	str	r4, [sp, #24]
  payLoad.VarTypePtr = varTypePtr;
 800a6d0:	9707      	str	r7, [sp, #28]
  payLoad.VarArrayQty = varArrayQty;
 800a6d2:	9608      	str	r6, [sp, #32]
  payLoad.ExternalInterface = externalInterface;
 800a6d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6d6:	9309      	str	r3, [sp, #36]	@ 0x24
  payLoad.AccessCallBack = accessCallback;  
 800a6d8:	950a      	str	r5, [sp, #40]	@ 0x28
  payLoad._isPtr = isPtr;
 800a6da:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800a6de:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  payLoad.Name = name;
 800a6e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6e4:	9303      	str	r3, [sp, #12]
  payLoad.Path = path;
 800a6e6:	f8cd 8010 	str.w	r8, [sp, #16]
  CorrectPath_(payLoad.Path);
 800a6ea:	f1b8 0f00 	cmp.w	r8, #0
 800a6ee:	d014      	beq.n	800a71a <fFaraabinLinkSerializer_VarDict+0x62>
 800a6f0:	f898 3000 	ldrb.w	r3, [r8]
 800a6f4:	b913      	cbnz	r3, 800a6fc <fFaraabinLinkSerializer_VarDict+0x44>
 800a6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a724 <fFaraabinLinkSerializer_VarDict+0x6c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	9304      	str	r3, [sp, #16]
  payLoad.FileName = fileName;
 800a6fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6fe:	9305      	str	r3, [sp, #20]
  fSerializeDict(varPtr, &me->Seq, reqSeq, fDictGeneratePayloadVar, &payLoad);
 800a700:	ab03      	add	r3, sp, #12
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	4b08      	ldr	r3, [pc, #32]	@ (800a728 <fFaraabinLinkSerializer_VarDict+0x70>)
 800a706:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 800a70a:	f100 0110 	add.w	r1, r0, #16
 800a70e:	4620      	mov	r0, r4
 800a710:	f7ff fc4e 	bl	8009fb0 <fSerializeDict>
}
 800a714:	b00c      	add	sp, #48	@ 0x30
 800a716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CorrectPath_(payLoad.Path);
 800a71a:	4b02      	ldr	r3, [pc, #8]	@ (800a724 <fFaraabinLinkSerializer_VarDict+0x6c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	9304      	str	r3, [sp, #16]
 800a720:	e7ec      	b.n	800a6fc <fFaraabinLinkSerializer_VarDict+0x44>
 800a722:	bf00      	nop
 800a724:	20000378 	.word	0x20000378
 800a728:	08009ce1 	.word	0x08009ce1

0800a72c <fFaraabinLinkSerializer_FunctionGroupDict>:
  uint8_t reqSeq) {
 800a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72e:	b089      	sub	sp, #36	@ 0x24
 800a730:	4604      	mov	r4, r0
 800a732:	460f      	mov	r7, r1
 800a734:	4615      	mov	r5, r2
 800a736:	461e      	mov	r6, r3
  sFaraabinFobjectMcu *me = (sFaraabinFobjectMcu*)fFaraabinFobjectMcu_GetFobject();
 800a738:	f7fd fc6c 	bl	8008014 <fFaraabinFobjectMcu_GetFobject>
  payLoad.ObjectName = objectName;
 800a73c:	9503      	str	r5, [sp, #12]
  payLoad.Path = path;
 800a73e:	9404      	str	r4, [sp, #16]
  CorrectPath_(payLoad.Path);
 800a740:	b19c      	cbz	r4, 800a76a <fFaraabinLinkSerializer_FunctionGroupDict+0x3e>
 800a742:	7823      	ldrb	r3, [r4, #0]
 800a744:	b913      	cbnz	r3, 800a74c <fFaraabinLinkSerializer_FunctionGroupDict+0x20>
 800a746:	4b0b      	ldr	r3, [pc, #44]	@ (800a774 <fFaraabinLinkSerializer_FunctionGroupDict+0x48>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	9304      	str	r3, [sp, #16]
  payLoad.FileName = fileName;
 800a74c:	9705      	str	r7, [sp, #20]
  payLoad.ObjectPtr = objectPtr;
 800a74e:	9606      	str	r6, [sp, #24]
  payLoad.GroupTypePtr = groupTypePtr;
 800a750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a752:	9307      	str	r3, [sp, #28]
  fSerializeDict((uint32_t)me, &me->Seq, reqSeq, fDictGeneratePayloadFunctionGroup, &payLoad);
 800a754:	ab03      	add	r3, sp, #12
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	4b07      	ldr	r3, [pc, #28]	@ (800a778 <fFaraabinLinkSerializer_FunctionGroupDict+0x4c>)
 800a75a:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 800a75e:	f100 0110 	add.w	r1, r0, #16
 800a762:	f7ff fc25 	bl	8009fb0 <fSerializeDict>
}
 800a766:	b009      	add	sp, #36	@ 0x24
 800a768:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CorrectPath_(payLoad.Path);
 800a76a:	4b02      	ldr	r3, [pc, #8]	@ (800a774 <fFaraabinLinkSerializer_FunctionGroupDict+0x48>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	9304      	str	r3, [sp, #16]
 800a770:	e7ec      	b.n	800a74c <fFaraabinLinkSerializer_FunctionGroupDict+0x20>
 800a772:	bf00      	nop
 800a774:	20000378 	.word	0x20000378
 800a778:	08009d5d 	.word	0x08009d5d

0800a77c <fFaraabinLinkSerializer_FunctionGroupTypeMemberDict>:
void fFaraabinLinkSerializer_FunctionGroupTypeMemberDict(uint32_t groupTypePtr, void *fn, uint8_t reqSeq) {
 800a77c:	b500      	push	{lr}
 800a77e:	b083      	sub	sp, #12
  fSerializeDict(groupTypePtr, &me->Seq, reqSeq, fDictGeneratePayloadFunctionGroupTypeMember, fn);
 800a780:	9100      	str	r1, [sp, #0]
 800a782:	4b04      	ldr	r3, [pc, #16]	@ (800a794 <fFaraabinLinkSerializer_FunctionGroupTypeMemberDict+0x18>)
 800a784:	f100 010c 	add.w	r1, r0, #12
 800a788:	f7ff fc12 	bl	8009fb0 <fSerializeDict>
}
 800a78c:	b003      	add	sp, #12
 800a78e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a792:	bf00      	nop
 800a794:	08009db7 	.word	0x08009db7

0800a798 <fFaraabinLinkSerializer_CountDictsFrames>:
uint32_t fFaraabinLinkSerializer_CountDictsFrames(uint32_t fobjectPtr) {
 800a798:	b538      	push	{r3, r4, r5, lr}
  _serializer.DictIterator.CurrentDictIndex = dictIndex;
 800a79a:	4c06      	ldr	r4, [pc, #24]	@ (800a7b4 <fFaraabinLinkSerializer_CountDictsFrames+0x1c>)
 800a79c:	2500      	movs	r5, #0
 800a79e:	80a5      	strh	r5, [r4, #4]
  _serializer.DictIterator.CurrentSubDictIndex = 0U;
 800a7a0:	8065      	strh	r5, [r4, #2]
  _serializer.DictIterator.TotalSubDicts = 0U;
 800a7a2:	8025      	strh	r5, [r4, #0]
  _serializer.DictIterator._isInCountingMode = true;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	71a3      	strb	r3, [r4, #6]
  fGenerateDict(fobjectPtr, 0);
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7ff fc2b 	bl	800a004 <fGenerateDict>
  _serializer.DictIterator._isInCountingMode = false;
 800a7ae:	71a5      	strb	r5, [r4, #6]
}
 800a7b0:	8820      	ldrh	r0, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20002bf0 	.word	0x20002bf0

0800a7b8 <malloc>:
 800a7b8:	4b02      	ldr	r3, [pc, #8]	@ (800a7c4 <malloc+0xc>)
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	f000 b82d 	b.w	800a81c <_malloc_r>
 800a7c2:	bf00      	nop
 800a7c4:	20000448 	.word	0x20000448

0800a7c8 <free>:
 800a7c8:	4b02      	ldr	r3, [pc, #8]	@ (800a7d4 <free+0xc>)
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	f000 b941 	b.w	800aa54 <_free_r>
 800a7d2:	bf00      	nop
 800a7d4:	20000448 	.word	0x20000448

0800a7d8 <sbrk_aligned>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	4e0f      	ldr	r6, [pc, #60]	@ (800a818 <sbrk_aligned+0x40>)
 800a7dc:	460c      	mov	r4, r1
 800a7de:	6831      	ldr	r1, [r6, #0]
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	b911      	cbnz	r1, 800a7ea <sbrk_aligned+0x12>
 800a7e4:	f000 f8fa 	bl	800a9dc <_sbrk_r>
 800a7e8:	6030      	str	r0, [r6, #0]
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f000 f8f5 	bl	800a9dc <_sbrk_r>
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	d103      	bne.n	800a7fe <sbrk_aligned+0x26>
 800a7f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	bd70      	pop	{r4, r5, r6, pc}
 800a7fe:	1cc4      	adds	r4, r0, #3
 800a800:	f024 0403 	bic.w	r4, r4, #3
 800a804:	42a0      	cmp	r0, r4
 800a806:	d0f8      	beq.n	800a7fa <sbrk_aligned+0x22>
 800a808:	1a21      	subs	r1, r4, r0
 800a80a:	4628      	mov	r0, r5
 800a80c:	f000 f8e6 	bl	800a9dc <_sbrk_r>
 800a810:	3001      	adds	r0, #1
 800a812:	d1f2      	bne.n	800a7fa <sbrk_aligned+0x22>
 800a814:	e7ef      	b.n	800a7f6 <sbrk_aligned+0x1e>
 800a816:	bf00      	nop
 800a818:	20003498 	.word	0x20003498

0800a81c <_malloc_r>:
 800a81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a820:	1ccd      	adds	r5, r1, #3
 800a822:	f025 0503 	bic.w	r5, r5, #3
 800a826:	3508      	adds	r5, #8
 800a828:	2d0c      	cmp	r5, #12
 800a82a:	bf38      	it	cc
 800a82c:	250c      	movcc	r5, #12
 800a82e:	2d00      	cmp	r5, #0
 800a830:	4606      	mov	r6, r0
 800a832:	db01      	blt.n	800a838 <_malloc_r+0x1c>
 800a834:	42a9      	cmp	r1, r5
 800a836:	d904      	bls.n	800a842 <_malloc_r+0x26>
 800a838:	230c      	movs	r3, #12
 800a83a:	6033      	str	r3, [r6, #0]
 800a83c:	2000      	movs	r0, #0
 800a83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a918 <_malloc_r+0xfc>
 800a846:	f000 f869 	bl	800a91c <__malloc_lock>
 800a84a:	f8d8 3000 	ldr.w	r3, [r8]
 800a84e:	461c      	mov	r4, r3
 800a850:	bb44      	cbnz	r4, 800a8a4 <_malloc_r+0x88>
 800a852:	4629      	mov	r1, r5
 800a854:	4630      	mov	r0, r6
 800a856:	f7ff ffbf 	bl	800a7d8 <sbrk_aligned>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	4604      	mov	r4, r0
 800a85e:	d158      	bne.n	800a912 <_malloc_r+0xf6>
 800a860:	f8d8 4000 	ldr.w	r4, [r8]
 800a864:	4627      	mov	r7, r4
 800a866:	2f00      	cmp	r7, #0
 800a868:	d143      	bne.n	800a8f2 <_malloc_r+0xd6>
 800a86a:	2c00      	cmp	r4, #0
 800a86c:	d04b      	beq.n	800a906 <_malloc_r+0xea>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	4639      	mov	r1, r7
 800a872:	4630      	mov	r0, r6
 800a874:	eb04 0903 	add.w	r9, r4, r3
 800a878:	f000 f8b0 	bl	800a9dc <_sbrk_r>
 800a87c:	4581      	cmp	r9, r0
 800a87e:	d142      	bne.n	800a906 <_malloc_r+0xea>
 800a880:	6821      	ldr	r1, [r4, #0]
 800a882:	4630      	mov	r0, r6
 800a884:	1a6d      	subs	r5, r5, r1
 800a886:	4629      	mov	r1, r5
 800a888:	f7ff ffa6 	bl	800a7d8 <sbrk_aligned>
 800a88c:	3001      	adds	r0, #1
 800a88e:	d03a      	beq.n	800a906 <_malloc_r+0xea>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	442b      	add	r3, r5
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	f8d8 3000 	ldr.w	r3, [r8]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	bb62      	cbnz	r2, 800a8f8 <_malloc_r+0xdc>
 800a89e:	f8c8 7000 	str.w	r7, [r8]
 800a8a2:	e00f      	b.n	800a8c4 <_malloc_r+0xa8>
 800a8a4:	6822      	ldr	r2, [r4, #0]
 800a8a6:	1b52      	subs	r2, r2, r5
 800a8a8:	d420      	bmi.n	800a8ec <_malloc_r+0xd0>
 800a8aa:	2a0b      	cmp	r2, #11
 800a8ac:	d917      	bls.n	800a8de <_malloc_r+0xc2>
 800a8ae:	1961      	adds	r1, r4, r5
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	6025      	str	r5, [r4, #0]
 800a8b4:	bf18      	it	ne
 800a8b6:	6059      	strne	r1, [r3, #4]
 800a8b8:	6863      	ldr	r3, [r4, #4]
 800a8ba:	bf08      	it	eq
 800a8bc:	f8c8 1000 	streq.w	r1, [r8]
 800a8c0:	5162      	str	r2, [r4, r5]
 800a8c2:	604b      	str	r3, [r1, #4]
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f000 f82f 	bl	800a928 <__malloc_unlock>
 800a8ca:	f104 000b 	add.w	r0, r4, #11
 800a8ce:	1d23      	adds	r3, r4, #4
 800a8d0:	f020 0007 	bic.w	r0, r0, #7
 800a8d4:	1ac2      	subs	r2, r0, r3
 800a8d6:	bf1c      	itt	ne
 800a8d8:	1a1b      	subne	r3, r3, r0
 800a8da:	50a3      	strne	r3, [r4, r2]
 800a8dc:	e7af      	b.n	800a83e <_malloc_r+0x22>
 800a8de:	6862      	ldr	r2, [r4, #4]
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	bf0c      	ite	eq
 800a8e4:	f8c8 2000 	streq.w	r2, [r8]
 800a8e8:	605a      	strne	r2, [r3, #4]
 800a8ea:	e7eb      	b.n	800a8c4 <_malloc_r+0xa8>
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	6864      	ldr	r4, [r4, #4]
 800a8f0:	e7ae      	b.n	800a850 <_malloc_r+0x34>
 800a8f2:	463c      	mov	r4, r7
 800a8f4:	687f      	ldr	r7, [r7, #4]
 800a8f6:	e7b6      	b.n	800a866 <_malloc_r+0x4a>
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	d1fb      	bne.n	800a8f8 <_malloc_r+0xdc>
 800a900:	2300      	movs	r3, #0
 800a902:	6053      	str	r3, [r2, #4]
 800a904:	e7de      	b.n	800a8c4 <_malloc_r+0xa8>
 800a906:	230c      	movs	r3, #12
 800a908:	4630      	mov	r0, r6
 800a90a:	6033      	str	r3, [r6, #0]
 800a90c:	f000 f80c 	bl	800a928 <__malloc_unlock>
 800a910:	e794      	b.n	800a83c <_malloc_r+0x20>
 800a912:	6005      	str	r5, [r0, #0]
 800a914:	e7d6      	b.n	800a8c4 <_malloc_r+0xa8>
 800a916:	bf00      	nop
 800a918:	2000349c 	.word	0x2000349c

0800a91c <__malloc_lock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	@ (800a924 <__malloc_lock+0x8>)
 800a91e:	f000 b897 	b.w	800aa50 <__retarget_lock_acquire_recursive>
 800a922:	bf00      	nop
 800a924:	200035dc 	.word	0x200035dc

0800a928 <__malloc_unlock>:
 800a928:	4801      	ldr	r0, [pc, #4]	@ (800a930 <__malloc_unlock+0x8>)
 800a92a:	f000 b892 	b.w	800aa52 <__retarget_lock_release_recursive>
 800a92e:	bf00      	nop
 800a930:	200035dc 	.word	0x200035dc

0800a934 <_vsniprintf_r>:
 800a934:	b530      	push	{r4, r5, lr}
 800a936:	4614      	mov	r4, r2
 800a938:	2c00      	cmp	r4, #0
 800a93a:	4605      	mov	r5, r0
 800a93c:	461a      	mov	r2, r3
 800a93e:	b09b      	sub	sp, #108	@ 0x6c
 800a940:	da05      	bge.n	800a94e <_vsniprintf_r+0x1a>
 800a942:	238b      	movs	r3, #139	@ 0x8b
 800a944:	6003      	str	r3, [r0, #0]
 800a946:	f04f 30ff 	mov.w	r0, #4294967295
 800a94a:	b01b      	add	sp, #108	@ 0x6c
 800a94c:	bd30      	pop	{r4, r5, pc}
 800a94e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a952:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a956:	bf0c      	ite	eq
 800a958:	4623      	moveq	r3, r4
 800a95a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	9305      	str	r3, [sp, #20]
 800a962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a966:	9100      	str	r1, [sp, #0]
 800a968:	9104      	str	r1, [sp, #16]
 800a96a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a96e:	4669      	mov	r1, sp
 800a970:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a972:	f000 f913 	bl	800ab9c <_svfiprintf_r>
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	bfbc      	itt	lt
 800a97a:	238b      	movlt	r3, #139	@ 0x8b
 800a97c:	602b      	strlt	r3, [r5, #0]
 800a97e:	2c00      	cmp	r4, #0
 800a980:	d0e3      	beq.n	800a94a <_vsniprintf_r+0x16>
 800a982:	2200      	movs	r2, #0
 800a984:	9b00      	ldr	r3, [sp, #0]
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e7df      	b.n	800a94a <_vsniprintf_r+0x16>
	...

0800a98c <vsniprintf>:
 800a98c:	b507      	push	{r0, r1, r2, lr}
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	460a      	mov	r2, r1
 800a994:	4601      	mov	r1, r0
 800a996:	4803      	ldr	r0, [pc, #12]	@ (800a9a4 <vsniprintf+0x18>)
 800a998:	6800      	ldr	r0, [r0, #0]
 800a99a:	f7ff ffcb 	bl	800a934 <_vsniprintf_r>
 800a99e:	b003      	add	sp, #12
 800a9a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9a4:	20000448 	.word	0x20000448

0800a9a8 <memset>:
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	4402      	add	r2, r0
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d100      	bne.n	800a9b2 <memset+0xa>
 800a9b0:	4770      	bx	lr
 800a9b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9b6:	e7f9      	b.n	800a9ac <memset+0x4>

0800a9b8 <strncmp>:
 800a9b8:	b510      	push	{r4, lr}
 800a9ba:	b16a      	cbz	r2, 800a9d8 <strncmp+0x20>
 800a9bc:	3901      	subs	r1, #1
 800a9be:	1884      	adds	r4, r0, r2
 800a9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d103      	bne.n	800a9d4 <strncmp+0x1c>
 800a9cc:	42a0      	cmp	r0, r4
 800a9ce:	d001      	beq.n	800a9d4 <strncmp+0x1c>
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	d1f5      	bne.n	800a9c0 <strncmp+0x8>
 800a9d4:	1ad0      	subs	r0, r2, r3
 800a9d6:	bd10      	pop	{r4, pc}
 800a9d8:	4610      	mov	r0, r2
 800a9da:	e7fc      	b.n	800a9d6 <strncmp+0x1e>

0800a9dc <_sbrk_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	2300      	movs	r3, #0
 800a9e0:	4d05      	ldr	r5, [pc, #20]	@ (800a9f8 <_sbrk_r+0x1c>)
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	4608      	mov	r0, r1
 800a9e6:	602b      	str	r3, [r5, #0]
 800a9e8:	f7f7 f978 	bl	8001cdc <_sbrk>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d102      	bne.n	800a9f6 <_sbrk_r+0x1a>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	b103      	cbz	r3, 800a9f6 <_sbrk_r+0x1a>
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	200035d8 	.word	0x200035d8

0800a9fc <__errno>:
 800a9fc:	4b01      	ldr	r3, [pc, #4]	@ (800aa04 <__errno+0x8>)
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	20000448 	.word	0x20000448

0800aa08 <__libc_init_array>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	2600      	movs	r6, #0
 800aa0c:	4d0c      	ldr	r5, [pc, #48]	@ (800aa40 <__libc_init_array+0x38>)
 800aa0e:	4c0d      	ldr	r4, [pc, #52]	@ (800aa44 <__libc_init_array+0x3c>)
 800aa10:	1b64      	subs	r4, r4, r5
 800aa12:	10a4      	asrs	r4, r4, #2
 800aa14:	42a6      	cmp	r6, r4
 800aa16:	d109      	bne.n	800aa2c <__libc_init_array+0x24>
 800aa18:	f000 fce6 	bl	800b3e8 <_init>
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	4d0a      	ldr	r5, [pc, #40]	@ (800aa48 <__libc_init_array+0x40>)
 800aa20:	4c0a      	ldr	r4, [pc, #40]	@ (800aa4c <__libc_init_array+0x44>)
 800aa22:	1b64      	subs	r4, r4, r5
 800aa24:	10a4      	asrs	r4, r4, #2
 800aa26:	42a6      	cmp	r6, r4
 800aa28:	d105      	bne.n	800aa36 <__libc_init_array+0x2e>
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa30:	4798      	blx	r3
 800aa32:	3601      	adds	r6, #1
 800aa34:	e7ee      	b.n	800aa14 <__libc_init_array+0xc>
 800aa36:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa3a:	4798      	blx	r3
 800aa3c:	3601      	adds	r6, #1
 800aa3e:	e7f2      	b.n	800aa26 <__libc_init_array+0x1e>
 800aa40:	0800bfd0 	.word	0x0800bfd0
 800aa44:	0800bfd0 	.word	0x0800bfd0
 800aa48:	0800bfd0 	.word	0x0800bfd0
 800aa4c:	0800bfd4 	.word	0x0800bfd4

0800aa50 <__retarget_lock_acquire_recursive>:
 800aa50:	4770      	bx	lr

0800aa52 <__retarget_lock_release_recursive>:
 800aa52:	4770      	bx	lr

0800aa54 <_free_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4605      	mov	r5, r0
 800aa58:	2900      	cmp	r1, #0
 800aa5a:	d040      	beq.n	800aade <_free_r+0x8a>
 800aa5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa60:	1f0c      	subs	r4, r1, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bfb8      	it	lt
 800aa66:	18e4      	addlt	r4, r4, r3
 800aa68:	f7ff ff58 	bl	800a91c <__malloc_lock>
 800aa6c:	4a1c      	ldr	r2, [pc, #112]	@ (800aae0 <_free_r+0x8c>)
 800aa6e:	6813      	ldr	r3, [r2, #0]
 800aa70:	b933      	cbnz	r3, 800aa80 <_free_r+0x2c>
 800aa72:	6063      	str	r3, [r4, #4]
 800aa74:	6014      	str	r4, [r2, #0]
 800aa76:	4628      	mov	r0, r5
 800aa78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa7c:	f7ff bf54 	b.w	800a928 <__malloc_unlock>
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	d908      	bls.n	800aa96 <_free_r+0x42>
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	1821      	adds	r1, r4, r0
 800aa88:	428b      	cmp	r3, r1
 800aa8a:	bf01      	itttt	eq
 800aa8c:	6819      	ldreq	r1, [r3, #0]
 800aa8e:	685b      	ldreq	r3, [r3, #4]
 800aa90:	1809      	addeq	r1, r1, r0
 800aa92:	6021      	streq	r1, [r4, #0]
 800aa94:	e7ed      	b.n	800aa72 <_free_r+0x1e>
 800aa96:	461a      	mov	r2, r3
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	b10b      	cbz	r3, 800aaa0 <_free_r+0x4c>
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d9fa      	bls.n	800aa96 <_free_r+0x42>
 800aaa0:	6811      	ldr	r1, [r2, #0]
 800aaa2:	1850      	adds	r0, r2, r1
 800aaa4:	42a0      	cmp	r0, r4
 800aaa6:	d10b      	bne.n	800aac0 <_free_r+0x6c>
 800aaa8:	6820      	ldr	r0, [r4, #0]
 800aaaa:	4401      	add	r1, r0
 800aaac:	1850      	adds	r0, r2, r1
 800aaae:	4283      	cmp	r3, r0
 800aab0:	6011      	str	r1, [r2, #0]
 800aab2:	d1e0      	bne.n	800aa76 <_free_r+0x22>
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4408      	add	r0, r1
 800aaba:	6010      	str	r0, [r2, #0]
 800aabc:	6053      	str	r3, [r2, #4]
 800aabe:	e7da      	b.n	800aa76 <_free_r+0x22>
 800aac0:	d902      	bls.n	800aac8 <_free_r+0x74>
 800aac2:	230c      	movs	r3, #12
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	e7d6      	b.n	800aa76 <_free_r+0x22>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	1821      	adds	r1, r4, r0
 800aacc:	428b      	cmp	r3, r1
 800aace:	bf01      	itttt	eq
 800aad0:	6819      	ldreq	r1, [r3, #0]
 800aad2:	685b      	ldreq	r3, [r3, #4]
 800aad4:	1809      	addeq	r1, r1, r0
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	6063      	str	r3, [r4, #4]
 800aada:	6054      	str	r4, [r2, #4]
 800aadc:	e7cb      	b.n	800aa76 <_free_r+0x22>
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	2000349c 	.word	0x2000349c

0800aae4 <__ssputs_r>:
 800aae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	461f      	mov	r7, r3
 800aaea:	688e      	ldr	r6, [r1, #8]
 800aaec:	4682      	mov	sl, r0
 800aaee:	42be      	cmp	r6, r7
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	4690      	mov	r8, r2
 800aaf4:	680b      	ldr	r3, [r1, #0]
 800aaf6:	d82d      	bhi.n	800ab54 <__ssputs_r+0x70>
 800aaf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aafc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab00:	d026      	beq.n	800ab50 <__ssputs_r+0x6c>
 800ab02:	6965      	ldr	r5, [r4, #20]
 800ab04:	6909      	ldr	r1, [r1, #16]
 800ab06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab0a:	eba3 0901 	sub.w	r9, r3, r1
 800ab0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab12:	1c7b      	adds	r3, r7, #1
 800ab14:	444b      	add	r3, r9
 800ab16:	106d      	asrs	r5, r5, #1
 800ab18:	429d      	cmp	r5, r3
 800ab1a:	bf38      	it	cc
 800ab1c:	461d      	movcc	r5, r3
 800ab1e:	0553      	lsls	r3, r2, #21
 800ab20:	d527      	bpl.n	800ab72 <__ssputs_r+0x8e>
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7ff fe7a 	bl	800a81c <_malloc_r>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	b360      	cbz	r0, 800ab86 <__ssputs_r+0xa2>
 800ab2c:	464a      	mov	r2, r9
 800ab2e:	6921      	ldr	r1, [r4, #16]
 800ab30:	f000 faea 	bl	800b108 <memcpy>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	6126      	str	r6, [r4, #16]
 800ab42:	444e      	add	r6, r9
 800ab44:	6026      	str	r6, [r4, #0]
 800ab46:	463e      	mov	r6, r7
 800ab48:	6165      	str	r5, [r4, #20]
 800ab4a:	eba5 0509 	sub.w	r5, r5, r9
 800ab4e:	60a5      	str	r5, [r4, #8]
 800ab50:	42be      	cmp	r6, r7
 800ab52:	d900      	bls.n	800ab56 <__ssputs_r+0x72>
 800ab54:	463e      	mov	r6, r7
 800ab56:	4632      	mov	r2, r6
 800ab58:	4641      	mov	r1, r8
 800ab5a:	6820      	ldr	r0, [r4, #0]
 800ab5c:	f000 faac 	bl	800b0b8 <memmove>
 800ab60:	2000      	movs	r0, #0
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	1b9b      	subs	r3, r3, r6
 800ab66:	60a3      	str	r3, [r4, #8]
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	4433      	add	r3, r6
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab72:	462a      	mov	r2, r5
 800ab74:	f000 fad6 	bl	800b124 <_realloc_r>
 800ab78:	4606      	mov	r6, r0
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d1e0      	bne.n	800ab40 <__ssputs_r+0x5c>
 800ab7e:	4650      	mov	r0, sl
 800ab80:	6921      	ldr	r1, [r4, #16]
 800ab82:	f7ff ff67 	bl	800aa54 <_free_r>
 800ab86:	230c      	movs	r3, #12
 800ab88:	f8ca 3000 	str.w	r3, [sl]
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab96:	81a3      	strh	r3, [r4, #12]
 800ab98:	e7e9      	b.n	800ab6e <__ssputs_r+0x8a>
	...

0800ab9c <_svfiprintf_r>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	4698      	mov	r8, r3
 800aba2:	898b      	ldrh	r3, [r1, #12]
 800aba4:	4607      	mov	r7, r0
 800aba6:	061b      	lsls	r3, r3, #24
 800aba8:	460d      	mov	r5, r1
 800abaa:	4614      	mov	r4, r2
 800abac:	b09d      	sub	sp, #116	@ 0x74
 800abae:	d510      	bpl.n	800abd2 <_svfiprintf_r+0x36>
 800abb0:	690b      	ldr	r3, [r1, #16]
 800abb2:	b973      	cbnz	r3, 800abd2 <_svfiprintf_r+0x36>
 800abb4:	2140      	movs	r1, #64	@ 0x40
 800abb6:	f7ff fe31 	bl	800a81c <_malloc_r>
 800abba:	6028      	str	r0, [r5, #0]
 800abbc:	6128      	str	r0, [r5, #16]
 800abbe:	b930      	cbnz	r0, 800abce <_svfiprintf_r+0x32>
 800abc0:	230c      	movs	r3, #12
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	b01d      	add	sp, #116	@ 0x74
 800abca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abce:	2340      	movs	r3, #64	@ 0x40
 800abd0:	616b      	str	r3, [r5, #20]
 800abd2:	2300      	movs	r3, #0
 800abd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd6:	2320      	movs	r3, #32
 800abd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abdc:	2330      	movs	r3, #48	@ 0x30
 800abde:	f04f 0901 	mov.w	r9, #1
 800abe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800abe6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ad80 <_svfiprintf_r+0x1e4>
 800abea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abee:	4623      	mov	r3, r4
 800abf0:	469a      	mov	sl, r3
 800abf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abf6:	b10a      	cbz	r2, 800abfc <_svfiprintf_r+0x60>
 800abf8:	2a25      	cmp	r2, #37	@ 0x25
 800abfa:	d1f9      	bne.n	800abf0 <_svfiprintf_r+0x54>
 800abfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ac00:	d00b      	beq.n	800ac1a <_svfiprintf_r+0x7e>
 800ac02:	465b      	mov	r3, fp
 800ac04:	4622      	mov	r2, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7ff ff6b 	bl	800aae4 <__ssputs_r>
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f000 80a7 	beq.w	800ad62 <_svfiprintf_r+0x1c6>
 800ac14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac16:	445a      	add	r2, fp
 800ac18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 809f 	beq.w	800ad62 <_svfiprintf_r+0x1c6>
 800ac24:	2300      	movs	r3, #0
 800ac26:	f04f 32ff 	mov.w	r2, #4294967295
 800ac2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac2e:	f10a 0a01 	add.w	sl, sl, #1
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	9307      	str	r3, [sp, #28]
 800ac36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac3c:	4654      	mov	r4, sl
 800ac3e:	2205      	movs	r2, #5
 800ac40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac44:	484e      	ldr	r0, [pc, #312]	@ (800ad80 <_svfiprintf_r+0x1e4>)
 800ac46:	f000 fa51 	bl	800b0ec <memchr>
 800ac4a:	9a04      	ldr	r2, [sp, #16]
 800ac4c:	b9d8      	cbnz	r0, 800ac86 <_svfiprintf_r+0xea>
 800ac4e:	06d0      	lsls	r0, r2, #27
 800ac50:	bf44      	itt	mi
 800ac52:	2320      	movmi	r3, #32
 800ac54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac58:	0711      	lsls	r1, r2, #28
 800ac5a:	bf44      	itt	mi
 800ac5c:	232b      	movmi	r3, #43	@ 0x2b
 800ac5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac62:	f89a 3000 	ldrb.w	r3, [sl]
 800ac66:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac68:	d015      	beq.n	800ac96 <_svfiprintf_r+0xfa>
 800ac6a:	4654      	mov	r4, sl
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	f04f 0c0a 	mov.w	ip, #10
 800ac72:	9a07      	ldr	r2, [sp, #28]
 800ac74:	4621      	mov	r1, r4
 800ac76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac7a:	3b30      	subs	r3, #48	@ 0x30
 800ac7c:	2b09      	cmp	r3, #9
 800ac7e:	d94b      	bls.n	800ad18 <_svfiprintf_r+0x17c>
 800ac80:	b1b0      	cbz	r0, 800acb0 <_svfiprintf_r+0x114>
 800ac82:	9207      	str	r2, [sp, #28]
 800ac84:	e014      	b.n	800acb0 <_svfiprintf_r+0x114>
 800ac86:	eba0 0308 	sub.w	r3, r0, r8
 800ac8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	46a2      	mov	sl, r4
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	e7d2      	b.n	800ac3c <_svfiprintf_r+0xa0>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	1d19      	adds	r1, r3, #4
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	9103      	str	r1, [sp, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	bfbb      	ittet	lt
 800aca2:	425b      	neglt	r3, r3
 800aca4:	f042 0202 	orrlt.w	r2, r2, #2
 800aca8:	9307      	strge	r3, [sp, #28]
 800acaa:	9307      	strlt	r3, [sp, #28]
 800acac:	bfb8      	it	lt
 800acae:	9204      	strlt	r2, [sp, #16]
 800acb0:	7823      	ldrb	r3, [r4, #0]
 800acb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800acb4:	d10a      	bne.n	800accc <_svfiprintf_r+0x130>
 800acb6:	7863      	ldrb	r3, [r4, #1]
 800acb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acba:	d132      	bne.n	800ad22 <_svfiprintf_r+0x186>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	3402      	adds	r4, #2
 800acc0:	1d1a      	adds	r2, r3, #4
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	9203      	str	r2, [sp, #12]
 800acc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ad84 <_svfiprintf_r+0x1e8>
 800acd0:	2203      	movs	r2, #3
 800acd2:	4650      	mov	r0, sl
 800acd4:	7821      	ldrb	r1, [r4, #0]
 800acd6:	f000 fa09 	bl	800b0ec <memchr>
 800acda:	b138      	cbz	r0, 800acec <_svfiprintf_r+0x150>
 800acdc:	2240      	movs	r2, #64	@ 0x40
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	eba0 000a 	sub.w	r0, r0, sl
 800ace4:	4082      	lsls	r2, r0
 800ace6:	4313      	orrs	r3, r2
 800ace8:	3401      	adds	r4, #1
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf0:	2206      	movs	r2, #6
 800acf2:	4825      	ldr	r0, [pc, #148]	@ (800ad88 <_svfiprintf_r+0x1ec>)
 800acf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acf8:	f000 f9f8 	bl	800b0ec <memchr>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d036      	beq.n	800ad6e <_svfiprintf_r+0x1d2>
 800ad00:	4b22      	ldr	r3, [pc, #136]	@ (800ad8c <_svfiprintf_r+0x1f0>)
 800ad02:	bb1b      	cbnz	r3, 800ad4c <_svfiprintf_r+0x1b0>
 800ad04:	9b03      	ldr	r3, [sp, #12]
 800ad06:	3307      	adds	r3, #7
 800ad08:	f023 0307 	bic.w	r3, r3, #7
 800ad0c:	3308      	adds	r3, #8
 800ad0e:	9303      	str	r3, [sp, #12]
 800ad10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad12:	4433      	add	r3, r6
 800ad14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad16:	e76a      	b.n	800abee <_svfiprintf_r+0x52>
 800ad18:	460c      	mov	r4, r1
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad20:	e7a8      	b.n	800ac74 <_svfiprintf_r+0xd8>
 800ad22:	2300      	movs	r3, #0
 800ad24:	f04f 0c0a 	mov.w	ip, #10
 800ad28:	4619      	mov	r1, r3
 800ad2a:	3401      	adds	r4, #1
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad34:	3a30      	subs	r2, #48	@ 0x30
 800ad36:	2a09      	cmp	r2, #9
 800ad38:	d903      	bls.n	800ad42 <_svfiprintf_r+0x1a6>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0c6      	beq.n	800accc <_svfiprintf_r+0x130>
 800ad3e:	9105      	str	r1, [sp, #20]
 800ad40:	e7c4      	b.n	800accc <_svfiprintf_r+0x130>
 800ad42:	4604      	mov	r4, r0
 800ad44:	2301      	movs	r3, #1
 800ad46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad4a:	e7f0      	b.n	800ad2e <_svfiprintf_r+0x192>
 800ad4c:	ab03      	add	r3, sp, #12
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	462a      	mov	r2, r5
 800ad52:	4638      	mov	r0, r7
 800ad54:	4b0e      	ldr	r3, [pc, #56]	@ (800ad90 <_svfiprintf_r+0x1f4>)
 800ad56:	a904      	add	r1, sp, #16
 800ad58:	f3af 8000 	nop.w
 800ad5c:	1c42      	adds	r2, r0, #1
 800ad5e:	4606      	mov	r6, r0
 800ad60:	d1d6      	bne.n	800ad10 <_svfiprintf_r+0x174>
 800ad62:	89ab      	ldrh	r3, [r5, #12]
 800ad64:	065b      	lsls	r3, r3, #25
 800ad66:	f53f af2d 	bmi.w	800abc4 <_svfiprintf_r+0x28>
 800ad6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad6c:	e72c      	b.n	800abc8 <_svfiprintf_r+0x2c>
 800ad6e:	ab03      	add	r3, sp, #12
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	462a      	mov	r2, r5
 800ad74:	4638      	mov	r0, r7
 800ad76:	4b06      	ldr	r3, [pc, #24]	@ (800ad90 <_svfiprintf_r+0x1f4>)
 800ad78:	a904      	add	r1, sp, #16
 800ad7a:	f000 f87d 	bl	800ae78 <_printf_i>
 800ad7e:	e7ed      	b.n	800ad5c <_svfiprintf_r+0x1c0>
 800ad80:	0800bf85 	.word	0x0800bf85
 800ad84:	0800bf8b 	.word	0x0800bf8b
 800ad88:	0800bf8f 	.word	0x0800bf8f
 800ad8c:	00000000 	.word	0x00000000
 800ad90:	0800aae5 	.word	0x0800aae5

0800ad94 <_printf_common>:
 800ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad98:	4616      	mov	r6, r2
 800ad9a:	4698      	mov	r8, r3
 800ad9c:	688a      	ldr	r2, [r1, #8]
 800ad9e:	690b      	ldr	r3, [r1, #16]
 800ada0:	4607      	mov	r7, r0
 800ada2:	4293      	cmp	r3, r2
 800ada4:	bfb8      	it	lt
 800ada6:	4613      	movlt	r3, r2
 800ada8:	6033      	str	r3, [r6, #0]
 800adaa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adae:	460c      	mov	r4, r1
 800adb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800adb4:	b10a      	cbz	r2, 800adba <_printf_common+0x26>
 800adb6:	3301      	adds	r3, #1
 800adb8:	6033      	str	r3, [r6, #0]
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	0699      	lsls	r1, r3, #26
 800adbe:	bf42      	ittt	mi
 800adc0:	6833      	ldrmi	r3, [r6, #0]
 800adc2:	3302      	addmi	r3, #2
 800adc4:	6033      	strmi	r3, [r6, #0]
 800adc6:	6825      	ldr	r5, [r4, #0]
 800adc8:	f015 0506 	ands.w	r5, r5, #6
 800adcc:	d106      	bne.n	800addc <_printf_common+0x48>
 800adce:	f104 0a19 	add.w	sl, r4, #25
 800add2:	68e3      	ldr	r3, [r4, #12]
 800add4:	6832      	ldr	r2, [r6, #0]
 800add6:	1a9b      	subs	r3, r3, r2
 800add8:	42ab      	cmp	r3, r5
 800adda:	dc2b      	bgt.n	800ae34 <_printf_common+0xa0>
 800addc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ade0:	6822      	ldr	r2, [r4, #0]
 800ade2:	3b00      	subs	r3, #0
 800ade4:	bf18      	it	ne
 800ade6:	2301      	movne	r3, #1
 800ade8:	0692      	lsls	r2, r2, #26
 800adea:	d430      	bmi.n	800ae4e <_printf_common+0xba>
 800adec:	4641      	mov	r1, r8
 800adee:	4638      	mov	r0, r7
 800adf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800adf4:	47c8      	blx	r9
 800adf6:	3001      	adds	r0, #1
 800adf8:	d023      	beq.n	800ae42 <_printf_common+0xae>
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	6922      	ldr	r2, [r4, #16]
 800adfe:	f003 0306 	and.w	r3, r3, #6
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	bf14      	ite	ne
 800ae06:	2500      	movne	r5, #0
 800ae08:	6833      	ldreq	r3, [r6, #0]
 800ae0a:	f04f 0600 	mov.w	r6, #0
 800ae0e:	bf08      	it	eq
 800ae10:	68e5      	ldreq	r5, [r4, #12]
 800ae12:	f104 041a 	add.w	r4, r4, #26
 800ae16:	bf08      	it	eq
 800ae18:	1aed      	subeq	r5, r5, r3
 800ae1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ae1e:	bf08      	it	eq
 800ae20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae24:	4293      	cmp	r3, r2
 800ae26:	bfc4      	itt	gt
 800ae28:	1a9b      	subgt	r3, r3, r2
 800ae2a:	18ed      	addgt	r5, r5, r3
 800ae2c:	42b5      	cmp	r5, r6
 800ae2e:	d11a      	bne.n	800ae66 <_printf_common+0xd2>
 800ae30:	2000      	movs	r0, #0
 800ae32:	e008      	b.n	800ae46 <_printf_common+0xb2>
 800ae34:	2301      	movs	r3, #1
 800ae36:	4652      	mov	r2, sl
 800ae38:	4641      	mov	r1, r8
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	47c8      	blx	r9
 800ae3e:	3001      	adds	r0, #1
 800ae40:	d103      	bne.n	800ae4a <_printf_common+0xb6>
 800ae42:	f04f 30ff 	mov.w	r0, #4294967295
 800ae46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4a:	3501      	adds	r5, #1
 800ae4c:	e7c1      	b.n	800add2 <_printf_common+0x3e>
 800ae4e:	2030      	movs	r0, #48	@ 0x30
 800ae50:	18e1      	adds	r1, r4, r3
 800ae52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae5c:	4422      	add	r2, r4
 800ae5e:	3302      	adds	r3, #2
 800ae60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae64:	e7c2      	b.n	800adec <_printf_common+0x58>
 800ae66:	2301      	movs	r3, #1
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4641      	mov	r1, r8
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	47c8      	blx	r9
 800ae70:	3001      	adds	r0, #1
 800ae72:	d0e6      	beq.n	800ae42 <_printf_common+0xae>
 800ae74:	3601      	adds	r6, #1
 800ae76:	e7d9      	b.n	800ae2c <_printf_common+0x98>

0800ae78 <_printf_i>:
 800ae78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	7e0f      	ldrb	r7, [r1, #24]
 800ae7e:	4691      	mov	r9, r2
 800ae80:	2f78      	cmp	r7, #120	@ 0x78
 800ae82:	4680      	mov	r8, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	469a      	mov	sl, r3
 800ae88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae8e:	d807      	bhi.n	800aea0 <_printf_i+0x28>
 800ae90:	2f62      	cmp	r7, #98	@ 0x62
 800ae92:	d80a      	bhi.n	800aeaa <_printf_i+0x32>
 800ae94:	2f00      	cmp	r7, #0
 800ae96:	f000 80d3 	beq.w	800b040 <_printf_i+0x1c8>
 800ae9a:	2f58      	cmp	r7, #88	@ 0x58
 800ae9c:	f000 80ba 	beq.w	800b014 <_printf_i+0x19c>
 800aea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aea8:	e03a      	b.n	800af20 <_printf_i+0xa8>
 800aeaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aeae:	2b15      	cmp	r3, #21
 800aeb0:	d8f6      	bhi.n	800aea0 <_printf_i+0x28>
 800aeb2:	a101      	add	r1, pc, #4	@ (adr r1, 800aeb8 <_printf_i+0x40>)
 800aeb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aeb8:	0800af11 	.word	0x0800af11
 800aebc:	0800af25 	.word	0x0800af25
 800aec0:	0800aea1 	.word	0x0800aea1
 800aec4:	0800aea1 	.word	0x0800aea1
 800aec8:	0800aea1 	.word	0x0800aea1
 800aecc:	0800aea1 	.word	0x0800aea1
 800aed0:	0800af25 	.word	0x0800af25
 800aed4:	0800aea1 	.word	0x0800aea1
 800aed8:	0800aea1 	.word	0x0800aea1
 800aedc:	0800aea1 	.word	0x0800aea1
 800aee0:	0800aea1 	.word	0x0800aea1
 800aee4:	0800b027 	.word	0x0800b027
 800aee8:	0800af4f 	.word	0x0800af4f
 800aeec:	0800afe1 	.word	0x0800afe1
 800aef0:	0800aea1 	.word	0x0800aea1
 800aef4:	0800aea1 	.word	0x0800aea1
 800aef8:	0800b049 	.word	0x0800b049
 800aefc:	0800aea1 	.word	0x0800aea1
 800af00:	0800af4f 	.word	0x0800af4f
 800af04:	0800aea1 	.word	0x0800aea1
 800af08:	0800aea1 	.word	0x0800aea1
 800af0c:	0800afe9 	.word	0x0800afe9
 800af10:	6833      	ldr	r3, [r6, #0]
 800af12:	1d1a      	adds	r2, r3, #4
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6032      	str	r2, [r6, #0]
 800af18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af20:	2301      	movs	r3, #1
 800af22:	e09e      	b.n	800b062 <_printf_i+0x1ea>
 800af24:	6833      	ldr	r3, [r6, #0]
 800af26:	6820      	ldr	r0, [r4, #0]
 800af28:	1d19      	adds	r1, r3, #4
 800af2a:	6031      	str	r1, [r6, #0]
 800af2c:	0606      	lsls	r6, r0, #24
 800af2e:	d501      	bpl.n	800af34 <_printf_i+0xbc>
 800af30:	681d      	ldr	r5, [r3, #0]
 800af32:	e003      	b.n	800af3c <_printf_i+0xc4>
 800af34:	0645      	lsls	r5, r0, #25
 800af36:	d5fb      	bpl.n	800af30 <_printf_i+0xb8>
 800af38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af3c:	2d00      	cmp	r5, #0
 800af3e:	da03      	bge.n	800af48 <_printf_i+0xd0>
 800af40:	232d      	movs	r3, #45	@ 0x2d
 800af42:	426d      	negs	r5, r5
 800af44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af48:	230a      	movs	r3, #10
 800af4a:	4859      	ldr	r0, [pc, #356]	@ (800b0b0 <_printf_i+0x238>)
 800af4c:	e011      	b.n	800af72 <_printf_i+0xfa>
 800af4e:	6821      	ldr	r1, [r4, #0]
 800af50:	6833      	ldr	r3, [r6, #0]
 800af52:	0608      	lsls	r0, r1, #24
 800af54:	f853 5b04 	ldr.w	r5, [r3], #4
 800af58:	d402      	bmi.n	800af60 <_printf_i+0xe8>
 800af5a:	0649      	lsls	r1, r1, #25
 800af5c:	bf48      	it	mi
 800af5e:	b2ad      	uxthmi	r5, r5
 800af60:	2f6f      	cmp	r7, #111	@ 0x6f
 800af62:	6033      	str	r3, [r6, #0]
 800af64:	bf14      	ite	ne
 800af66:	230a      	movne	r3, #10
 800af68:	2308      	moveq	r3, #8
 800af6a:	4851      	ldr	r0, [pc, #324]	@ (800b0b0 <_printf_i+0x238>)
 800af6c:	2100      	movs	r1, #0
 800af6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af72:	6866      	ldr	r6, [r4, #4]
 800af74:	2e00      	cmp	r6, #0
 800af76:	bfa8      	it	ge
 800af78:	6821      	ldrge	r1, [r4, #0]
 800af7a:	60a6      	str	r6, [r4, #8]
 800af7c:	bfa4      	itt	ge
 800af7e:	f021 0104 	bicge.w	r1, r1, #4
 800af82:	6021      	strge	r1, [r4, #0]
 800af84:	b90d      	cbnz	r5, 800af8a <_printf_i+0x112>
 800af86:	2e00      	cmp	r6, #0
 800af88:	d04b      	beq.n	800b022 <_printf_i+0x1aa>
 800af8a:	4616      	mov	r6, r2
 800af8c:	fbb5 f1f3 	udiv	r1, r5, r3
 800af90:	fb03 5711 	mls	r7, r3, r1, r5
 800af94:	5dc7      	ldrb	r7, [r0, r7]
 800af96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af9a:	462f      	mov	r7, r5
 800af9c:	42bb      	cmp	r3, r7
 800af9e:	460d      	mov	r5, r1
 800afa0:	d9f4      	bls.n	800af8c <_printf_i+0x114>
 800afa2:	2b08      	cmp	r3, #8
 800afa4:	d10b      	bne.n	800afbe <_printf_i+0x146>
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	07df      	lsls	r7, r3, #31
 800afaa:	d508      	bpl.n	800afbe <_printf_i+0x146>
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	6861      	ldr	r1, [r4, #4]
 800afb0:	4299      	cmp	r1, r3
 800afb2:	bfde      	ittt	le
 800afb4:	2330      	movle	r3, #48	@ 0x30
 800afb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afbe:	1b92      	subs	r2, r2, r6
 800afc0:	6122      	str	r2, [r4, #16]
 800afc2:	464b      	mov	r3, r9
 800afc4:	4621      	mov	r1, r4
 800afc6:	4640      	mov	r0, r8
 800afc8:	f8cd a000 	str.w	sl, [sp]
 800afcc:	aa03      	add	r2, sp, #12
 800afce:	f7ff fee1 	bl	800ad94 <_printf_common>
 800afd2:	3001      	adds	r0, #1
 800afd4:	d14a      	bne.n	800b06c <_printf_i+0x1f4>
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	b004      	add	sp, #16
 800afdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	f043 0320 	orr.w	r3, r3, #32
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	2778      	movs	r7, #120	@ 0x78
 800afea:	4832      	ldr	r0, [pc, #200]	@ (800b0b4 <_printf_i+0x23c>)
 800afec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	6831      	ldr	r1, [r6, #0]
 800aff4:	061f      	lsls	r7, r3, #24
 800aff6:	f851 5b04 	ldr.w	r5, [r1], #4
 800affa:	d402      	bmi.n	800b002 <_printf_i+0x18a>
 800affc:	065f      	lsls	r7, r3, #25
 800affe:	bf48      	it	mi
 800b000:	b2ad      	uxthmi	r5, r5
 800b002:	6031      	str	r1, [r6, #0]
 800b004:	07d9      	lsls	r1, r3, #31
 800b006:	bf44      	itt	mi
 800b008:	f043 0320 	orrmi.w	r3, r3, #32
 800b00c:	6023      	strmi	r3, [r4, #0]
 800b00e:	b11d      	cbz	r5, 800b018 <_printf_i+0x1a0>
 800b010:	2310      	movs	r3, #16
 800b012:	e7ab      	b.n	800af6c <_printf_i+0xf4>
 800b014:	4826      	ldr	r0, [pc, #152]	@ (800b0b0 <_printf_i+0x238>)
 800b016:	e7e9      	b.n	800afec <_printf_i+0x174>
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	f023 0320 	bic.w	r3, r3, #32
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	e7f6      	b.n	800b010 <_printf_i+0x198>
 800b022:	4616      	mov	r6, r2
 800b024:	e7bd      	b.n	800afa2 <_printf_i+0x12a>
 800b026:	6833      	ldr	r3, [r6, #0]
 800b028:	6825      	ldr	r5, [r4, #0]
 800b02a:	1d18      	adds	r0, r3, #4
 800b02c:	6961      	ldr	r1, [r4, #20]
 800b02e:	6030      	str	r0, [r6, #0]
 800b030:	062e      	lsls	r6, r5, #24
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	d501      	bpl.n	800b03a <_printf_i+0x1c2>
 800b036:	6019      	str	r1, [r3, #0]
 800b038:	e002      	b.n	800b040 <_printf_i+0x1c8>
 800b03a:	0668      	lsls	r0, r5, #25
 800b03c:	d5fb      	bpl.n	800b036 <_printf_i+0x1be>
 800b03e:	8019      	strh	r1, [r3, #0]
 800b040:	2300      	movs	r3, #0
 800b042:	4616      	mov	r6, r2
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	e7bc      	b.n	800afc2 <_printf_i+0x14a>
 800b048:	6833      	ldr	r3, [r6, #0]
 800b04a:	2100      	movs	r1, #0
 800b04c:	1d1a      	adds	r2, r3, #4
 800b04e:	6032      	str	r2, [r6, #0]
 800b050:	681e      	ldr	r6, [r3, #0]
 800b052:	6862      	ldr	r2, [r4, #4]
 800b054:	4630      	mov	r0, r6
 800b056:	f000 f849 	bl	800b0ec <memchr>
 800b05a:	b108      	cbz	r0, 800b060 <_printf_i+0x1e8>
 800b05c:	1b80      	subs	r0, r0, r6
 800b05e:	6060      	str	r0, [r4, #4]
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	6123      	str	r3, [r4, #16]
 800b064:	2300      	movs	r3, #0
 800b066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b06a:	e7aa      	b.n	800afc2 <_printf_i+0x14a>
 800b06c:	4632      	mov	r2, r6
 800b06e:	4649      	mov	r1, r9
 800b070:	4640      	mov	r0, r8
 800b072:	6923      	ldr	r3, [r4, #16]
 800b074:	47d0      	blx	sl
 800b076:	3001      	adds	r0, #1
 800b078:	d0ad      	beq.n	800afd6 <_printf_i+0x15e>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	079b      	lsls	r3, r3, #30
 800b07e:	d413      	bmi.n	800b0a8 <_printf_i+0x230>
 800b080:	68e0      	ldr	r0, [r4, #12]
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	4298      	cmp	r0, r3
 800b086:	bfb8      	it	lt
 800b088:	4618      	movlt	r0, r3
 800b08a:	e7a6      	b.n	800afda <_printf_i+0x162>
 800b08c:	2301      	movs	r3, #1
 800b08e:	4632      	mov	r2, r6
 800b090:	4649      	mov	r1, r9
 800b092:	4640      	mov	r0, r8
 800b094:	47d0      	blx	sl
 800b096:	3001      	adds	r0, #1
 800b098:	d09d      	beq.n	800afd6 <_printf_i+0x15e>
 800b09a:	3501      	adds	r5, #1
 800b09c:	68e3      	ldr	r3, [r4, #12]
 800b09e:	9903      	ldr	r1, [sp, #12]
 800b0a0:	1a5b      	subs	r3, r3, r1
 800b0a2:	42ab      	cmp	r3, r5
 800b0a4:	dcf2      	bgt.n	800b08c <_printf_i+0x214>
 800b0a6:	e7eb      	b.n	800b080 <_printf_i+0x208>
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	f104 0619 	add.w	r6, r4, #25
 800b0ae:	e7f5      	b.n	800b09c <_printf_i+0x224>
 800b0b0:	0800bf96 	.word	0x0800bf96
 800b0b4:	0800bfa7 	.word	0x0800bfa7

0800b0b8 <memmove>:
 800b0b8:	4288      	cmp	r0, r1
 800b0ba:	b510      	push	{r4, lr}
 800b0bc:	eb01 0402 	add.w	r4, r1, r2
 800b0c0:	d902      	bls.n	800b0c8 <memmove+0x10>
 800b0c2:	4284      	cmp	r4, r0
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	d807      	bhi.n	800b0d8 <memmove+0x20>
 800b0c8:	1e43      	subs	r3, r0, #1
 800b0ca:	42a1      	cmp	r1, r4
 800b0cc:	d008      	beq.n	800b0e0 <memmove+0x28>
 800b0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0d6:	e7f8      	b.n	800b0ca <memmove+0x12>
 800b0d8:	4601      	mov	r1, r0
 800b0da:	4402      	add	r2, r0
 800b0dc:	428a      	cmp	r2, r1
 800b0de:	d100      	bne.n	800b0e2 <memmove+0x2a>
 800b0e0:	bd10      	pop	{r4, pc}
 800b0e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ea:	e7f7      	b.n	800b0dc <memmove+0x24>

0800b0ec <memchr>:
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	b510      	push	{r4, lr}
 800b0f0:	b2c9      	uxtb	r1, r1
 800b0f2:	4402      	add	r2, r0
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	d101      	bne.n	800b0fe <memchr+0x12>
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	e003      	b.n	800b106 <memchr+0x1a>
 800b0fe:	7804      	ldrb	r4, [r0, #0]
 800b100:	3301      	adds	r3, #1
 800b102:	428c      	cmp	r4, r1
 800b104:	d1f6      	bne.n	800b0f4 <memchr+0x8>
 800b106:	bd10      	pop	{r4, pc}

0800b108 <memcpy>:
 800b108:	440a      	add	r2, r1
 800b10a:	4291      	cmp	r1, r2
 800b10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b110:	d100      	bne.n	800b114 <memcpy+0xc>
 800b112:	4770      	bx	lr
 800b114:	b510      	push	{r4, lr}
 800b116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b11a:	4291      	cmp	r1, r2
 800b11c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b120:	d1f9      	bne.n	800b116 <memcpy+0xe>
 800b122:	bd10      	pop	{r4, pc}

0800b124 <_realloc_r>:
 800b124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b128:	4680      	mov	r8, r0
 800b12a:	4615      	mov	r5, r2
 800b12c:	460c      	mov	r4, r1
 800b12e:	b921      	cbnz	r1, 800b13a <_realloc_r+0x16>
 800b130:	4611      	mov	r1, r2
 800b132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b136:	f7ff bb71 	b.w	800a81c <_malloc_r>
 800b13a:	b92a      	cbnz	r2, 800b148 <_realloc_r+0x24>
 800b13c:	f7ff fc8a 	bl	800aa54 <_free_r>
 800b140:	2400      	movs	r4, #0
 800b142:	4620      	mov	r0, r4
 800b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b148:	f000 f81a 	bl	800b180 <_malloc_usable_size_r>
 800b14c:	4285      	cmp	r5, r0
 800b14e:	4606      	mov	r6, r0
 800b150:	d802      	bhi.n	800b158 <_realloc_r+0x34>
 800b152:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b156:	d8f4      	bhi.n	800b142 <_realloc_r+0x1e>
 800b158:	4629      	mov	r1, r5
 800b15a:	4640      	mov	r0, r8
 800b15c:	f7ff fb5e 	bl	800a81c <_malloc_r>
 800b160:	4607      	mov	r7, r0
 800b162:	2800      	cmp	r0, #0
 800b164:	d0ec      	beq.n	800b140 <_realloc_r+0x1c>
 800b166:	42b5      	cmp	r5, r6
 800b168:	462a      	mov	r2, r5
 800b16a:	4621      	mov	r1, r4
 800b16c:	bf28      	it	cs
 800b16e:	4632      	movcs	r2, r6
 800b170:	f7ff ffca 	bl	800b108 <memcpy>
 800b174:	4621      	mov	r1, r4
 800b176:	4640      	mov	r0, r8
 800b178:	f7ff fc6c 	bl	800aa54 <_free_r>
 800b17c:	463c      	mov	r4, r7
 800b17e:	e7e0      	b.n	800b142 <_realloc_r+0x1e>

0800b180 <_malloc_usable_size_r>:
 800b180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b184:	1f18      	subs	r0, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfbc      	itt	lt
 800b18a:	580b      	ldrlt	r3, [r1, r0]
 800b18c:	18c0      	addlt	r0, r0, r3
 800b18e:	4770      	bx	lr

0800b190 <fmod>:
 800b190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b194:	4680      	mov	r8, r0
 800b196:	4689      	mov	r9, r1
 800b198:	4616      	mov	r6, r2
 800b19a:	461f      	mov	r7, r3
 800b19c:	f000 f820 	bl	800b1e0 <__ieee754_fmod>
 800b1a0:	4632      	mov	r2, r6
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	f7f5 fc2e 	bl	8000a0c <__aeabi_dcmpun>
 800b1b0:	b990      	cbnz	r0, 800b1d8 <fmod+0x48>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 fbf5 	bl	80009a8 <__aeabi_dcmpeq>
 800b1be:	b158      	cbz	r0, 800b1d8 <fmod+0x48>
 800b1c0:	f7ff fc1c 	bl	800a9fc <__errno>
 800b1c4:	2321      	movs	r3, #33	@ 0x21
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	f7f5 faac 	bl	800072c <__aeabi_ddiv>
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b1e0 <__ieee754_fmod>:
 800b1e0:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	ea52 040c 	orrs.w	r4, r2, ip
 800b1ec:	461e      	mov	r6, r3
 800b1ee:	4617      	mov	r7, r2
 800b1f0:	4696      	mov	lr, r2
 800b1f2:	d00c      	beq.n	800b20e <__ieee754_fmod+0x2e>
 800b1f4:	4c76      	ldr	r4, [pc, #472]	@ (800b3d0 <__ieee754_fmod+0x1f0>)
 800b1f6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800b1fa:	45a0      	cmp	r8, r4
 800b1fc:	4689      	mov	r9, r1
 800b1fe:	d806      	bhi.n	800b20e <__ieee754_fmod+0x2e>
 800b200:	4254      	negs	r4, r2
 800b202:	4d74      	ldr	r5, [pc, #464]	@ (800b3d4 <__ieee754_fmod+0x1f4>)
 800b204:	4314      	orrs	r4, r2
 800b206:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800b20a:	42ac      	cmp	r4, r5
 800b20c:	d907      	bls.n	800b21e <__ieee754_fmod+0x3e>
 800b20e:	f7f5 f963 	bl	80004d8 <__aeabi_dmul>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	f7f5 fa89 	bl	800072c <__aeabi_ddiv>
 800b21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21e:	45e0      	cmp	r8, ip
 800b220:	4682      	mov	sl, r0
 800b222:	4604      	mov	r4, r0
 800b224:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800b228:	dc09      	bgt.n	800b23e <__ieee754_fmod+0x5e>
 800b22a:	dbf6      	blt.n	800b21a <__ieee754_fmod+0x3a>
 800b22c:	4282      	cmp	r2, r0
 800b22e:	d8f4      	bhi.n	800b21a <__ieee754_fmod+0x3a>
 800b230:	d105      	bne.n	800b23e <__ieee754_fmod+0x5e>
 800b232:	4b69      	ldr	r3, [pc, #420]	@ (800b3d8 <__ieee754_fmod+0x1f8>)
 800b234:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800b238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b23c:	e7ed      	b.n	800b21a <__ieee754_fmod+0x3a>
 800b23e:	4a65      	ldr	r2, [pc, #404]	@ (800b3d4 <__ieee754_fmod+0x1f4>)
 800b240:	ea19 0f02 	tst.w	r9, r2
 800b244:	d148      	bne.n	800b2d8 <__ieee754_fmod+0xf8>
 800b246:	f1b8 0f00 	cmp.w	r8, #0
 800b24a:	d13d      	bne.n	800b2c8 <__ieee754_fmod+0xe8>
 800b24c:	4653      	mov	r3, sl
 800b24e:	4963      	ldr	r1, [pc, #396]	@ (800b3dc <__ieee754_fmod+0x1fc>)
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc36      	bgt.n	800b2c2 <__ieee754_fmod+0xe2>
 800b254:	4216      	tst	r6, r2
 800b256:	d14f      	bne.n	800b2f8 <__ieee754_fmod+0x118>
 800b258:	f1bc 0f00 	cmp.w	ip, #0
 800b25c:	d144      	bne.n	800b2e8 <__ieee754_fmod+0x108>
 800b25e:	463b      	mov	r3, r7
 800b260:	4a5e      	ldr	r2, [pc, #376]	@ (800b3dc <__ieee754_fmod+0x1fc>)
 800b262:	2b00      	cmp	r3, #0
 800b264:	dc3d      	bgt.n	800b2e2 <__ieee754_fmod+0x102>
 800b266:	485e      	ldr	r0, [pc, #376]	@ (800b3e0 <__ieee754_fmod+0x200>)
 800b268:	4281      	cmp	r1, r0
 800b26a:	db4a      	blt.n	800b302 <__ieee754_fmod+0x122>
 800b26c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b274:	485a      	ldr	r0, [pc, #360]	@ (800b3e0 <__ieee754_fmod+0x200>)
 800b276:	4282      	cmp	r2, r0
 800b278:	db57      	blt.n	800b32a <__ieee754_fmod+0x14a>
 800b27a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b27e:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800b282:	1a89      	subs	r1, r1, r2
 800b284:	1b98      	subs	r0, r3, r6
 800b286:	eba4 070e 	sub.w	r7, r4, lr
 800b28a:	2900      	cmp	r1, #0
 800b28c:	d162      	bne.n	800b354 <__ieee754_fmod+0x174>
 800b28e:	4574      	cmp	r4, lr
 800b290:	bf38      	it	cc
 800b292:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b296:	2800      	cmp	r0, #0
 800b298:	bfa4      	itt	ge
 800b29a:	463c      	movge	r4, r7
 800b29c:	4603      	movge	r3, r0
 800b29e:	ea53 0104 	orrs.w	r1, r3, r4
 800b2a2:	d0c6      	beq.n	800b232 <__ieee754_fmod+0x52>
 800b2a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2a8:	db69      	blt.n	800b37e <__ieee754_fmod+0x19e>
 800b2aa:	494d      	ldr	r1, [pc, #308]	@ (800b3e0 <__ieee754_fmod+0x200>)
 800b2ac:	428a      	cmp	r2, r1
 800b2ae:	db6c      	blt.n	800b38a <__ieee754_fmod+0x1aa>
 800b2b0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b2b4:	432b      	orrs	r3, r5
 800b2b6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b2c0:	e7ab      	b.n	800b21a <__ieee754_fmod+0x3a>
 800b2c2:	3901      	subs	r1, #1
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	e7c3      	b.n	800b250 <__ieee754_fmod+0x70>
 800b2c8:	4945      	ldr	r1, [pc, #276]	@ (800b3e0 <__ieee754_fmod+0x200>)
 800b2ca:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	ddc0      	ble.n	800b254 <__ieee754_fmod+0x74>
 800b2d2:	3901      	subs	r1, #1
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	e7fa      	b.n	800b2ce <__ieee754_fmod+0xee>
 800b2d8:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b2dc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b2e0:	e7b8      	b.n	800b254 <__ieee754_fmod+0x74>
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	005b      	lsls	r3, r3, #1
 800b2e6:	e7bc      	b.n	800b262 <__ieee754_fmod+0x82>
 800b2e8:	4a3d      	ldr	r2, [pc, #244]	@ (800b3e0 <__ieee754_fmod+0x200>)
 800b2ea:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	ddb9      	ble.n	800b266 <__ieee754_fmod+0x86>
 800b2f2:	3a01      	subs	r2, #1
 800b2f4:	005b      	lsls	r3, r3, #1
 800b2f6:	e7fa      	b.n	800b2ee <__ieee754_fmod+0x10e>
 800b2f8:	ea4f 522c 	mov.w	r2, ip, asr #20
 800b2fc:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b300:	e7b1      	b.n	800b266 <__ieee754_fmod+0x86>
 800b302:	1a40      	subs	r0, r0, r1
 800b304:	281f      	cmp	r0, #31
 800b306:	dc0a      	bgt.n	800b31e <__ieee754_fmod+0x13e>
 800b308:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800b30c:	fa08 f800 	lsl.w	r8, r8, r0
 800b310:	fa2a f303 	lsr.w	r3, sl, r3
 800b314:	ea43 0308 	orr.w	r3, r3, r8
 800b318:	fa0a f400 	lsl.w	r4, sl, r0
 800b31c:	e7aa      	b.n	800b274 <__ieee754_fmod+0x94>
 800b31e:	4b31      	ldr	r3, [pc, #196]	@ (800b3e4 <__ieee754_fmod+0x204>)
 800b320:	2400      	movs	r4, #0
 800b322:	1a5b      	subs	r3, r3, r1
 800b324:	fa0a f303 	lsl.w	r3, sl, r3
 800b328:	e7a4      	b.n	800b274 <__ieee754_fmod+0x94>
 800b32a:	1a80      	subs	r0, r0, r2
 800b32c:	281f      	cmp	r0, #31
 800b32e:	dc0a      	bgt.n	800b346 <__ieee754_fmod+0x166>
 800b330:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800b334:	fa0c fc00 	lsl.w	ip, ip, r0
 800b338:	fa27 f606 	lsr.w	r6, r7, r6
 800b33c:	ea46 060c 	orr.w	r6, r6, ip
 800b340:	fa07 fe00 	lsl.w	lr, r7, r0
 800b344:	e79d      	b.n	800b282 <__ieee754_fmod+0xa2>
 800b346:	4e27      	ldr	r6, [pc, #156]	@ (800b3e4 <__ieee754_fmod+0x204>)
 800b348:	f04f 0e00 	mov.w	lr, #0
 800b34c:	1ab6      	subs	r6, r6, r2
 800b34e:	fa07 f606 	lsl.w	r6, r7, r6
 800b352:	e796      	b.n	800b282 <__ieee754_fmod+0xa2>
 800b354:	4574      	cmp	r4, lr
 800b356:	bf38      	it	cc
 800b358:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b35c:	2800      	cmp	r0, #0
 800b35e:	da05      	bge.n	800b36c <__ieee754_fmod+0x18c>
 800b360:	0fe0      	lsrs	r0, r4, #31
 800b362:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b366:	0064      	lsls	r4, r4, #1
 800b368:	3901      	subs	r1, #1
 800b36a:	e78b      	b.n	800b284 <__ieee754_fmod+0xa4>
 800b36c:	ea50 0307 	orrs.w	r3, r0, r7
 800b370:	f43f af5f 	beq.w	800b232 <__ieee754_fmod+0x52>
 800b374:	0ffb      	lsrs	r3, r7, #31
 800b376:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b37a:	007c      	lsls	r4, r7, #1
 800b37c:	e7f4      	b.n	800b368 <__ieee754_fmod+0x188>
 800b37e:	0fe1      	lsrs	r1, r4, #31
 800b380:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b384:	0064      	lsls	r4, r4, #1
 800b386:	3a01      	subs	r2, #1
 800b388:	e78c      	b.n	800b2a4 <__ieee754_fmod+0xc4>
 800b38a:	1a89      	subs	r1, r1, r2
 800b38c:	2914      	cmp	r1, #20
 800b38e:	dc0a      	bgt.n	800b3a6 <__ieee754_fmod+0x1c6>
 800b390:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b394:	fa03 f202 	lsl.w	r2, r3, r2
 800b398:	40cc      	lsrs	r4, r1
 800b39a:	4322      	orrs	r2, r4
 800b39c:	410b      	asrs	r3, r1
 800b39e:	4610      	mov	r0, r2
 800b3a0:	ea43 0105 	orr.w	r1, r3, r5
 800b3a4:	e739      	b.n	800b21a <__ieee754_fmod+0x3a>
 800b3a6:	291f      	cmp	r1, #31
 800b3a8:	dc07      	bgt.n	800b3ba <__ieee754_fmod+0x1da>
 800b3aa:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b3ae:	40cc      	lsrs	r4, r1
 800b3b0:	fa03 f202 	lsl.w	r2, r3, r2
 800b3b4:	4322      	orrs	r2, r4
 800b3b6:	462b      	mov	r3, r5
 800b3b8:	e7f1      	b.n	800b39e <__ieee754_fmod+0x1be>
 800b3ba:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800b3be:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b3c2:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800b3c6:	32e2      	adds	r2, #226	@ 0xe2
 800b3c8:	fa43 f202 	asr.w	r2, r3, r2
 800b3cc:	e7f3      	b.n	800b3b6 <__ieee754_fmod+0x1d6>
 800b3ce:	bf00      	nop
 800b3d0:	7fefffff 	.word	0x7fefffff
 800b3d4:	7ff00000 	.word	0x7ff00000
 800b3d8:	0800bfb8 	.word	0x0800bfb8
 800b3dc:	fffffbed 	.word	0xfffffbed
 800b3e0:	fffffc02 	.word	0xfffffc02
 800b3e4:	fffffbe2 	.word	0xfffffbe2

0800b3e8 <_init>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	bf00      	nop
 800b3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ee:	bc08      	pop	{r3}
 800b3f0:	469e      	mov	lr, r3
 800b3f2:	4770      	bx	lr

0800b3f4 <_fini>:
 800b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f6:	bf00      	nop
 800b3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fa:	bc08      	pop	{r3}
 800b3fc:	469e      	mov	lr, r3
 800b3fe:	4770      	bx	lr
